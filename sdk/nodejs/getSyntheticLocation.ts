// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The synthetic location data source allows the location ID to be retrieved based off of provided parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumi/dynatrace";
 *
 * const test = pulumi.output(dynatrace.getSyntheticLocation({
 *     cloudPlatform: "AMAZON_EC2",
 *     name: "Sydney",
 *     type: "PUBLIC",
 * }));
 * const _name_ = new dynatrace.HttpMonitor("#name#", {
 *     anomalyDetections: [{
 *         loadingTimeThresholds: [{
 *             enabled: true,
 *         }],
 *         outageHandlings: [{
 *             globalOutage: true,
 *             localOutage: false,
 *             retryOnError: false,
 *         }],
 *     }],
 *     enabled: true,
 *     frequency: 60,
 *     locations: [test.id!],
 *     script: {
 *         requests: [{
 *             configuration: {
 *                 acceptAnyCertificate: true,
 *                 followRedirects: true,
 *             },
 *             description: "google.com",
 *             method: "GET",
 *             url: "https://www.google.com",
 *             validation: {
 *                 rules: [{
 *                     passIfFound: false,
 *                     type: "httpStatusesList",
 *                     value: ">=400",
 *                 }],
 *             },
 *         }],
 *     },
 * });
 * ```
 */
export function getSyntheticLocation(args?: GetSyntheticLocationArgs, opts?: pulumi.InvokeOptions): Promise<GetSyntheticLocationResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("dynatrace:index/getSyntheticLocation:getSyntheticLocation", {
        "cloudPlatform": args.cloudPlatform,
        "id": args.id,
        "ips": args.ips,
        "name": args.name,
        "stage": args.stage,
        "status": args.status,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getSyntheticLocation.
 */
export interface GetSyntheticLocationArgs {
    /**
     * The cloud provider where the location is hosted.
     */
    cloudPlatform?: string;
    id?: string;
    ips?: string[];
    name?: string;
    stage?: string;
    status?: string;
    type?: string;
}

/**
 * A collection of values returned by getSyntheticLocation.
 */
export interface GetSyntheticLocationResult {
    /**
     * The cloud provider where the location is hosted.
     */
    readonly cloudPlatform: string;
    readonly id?: string;
    readonly ips: string[];
    readonly name?: string;
    readonly stage: string;
    readonly status: string;
    readonly type?: string;
}

export function getSyntheticLocationOutput(args?: GetSyntheticLocationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSyntheticLocationResult> {
    return pulumi.output(args).apply(a => getSyntheticLocation(a, opts))
}

/**
 * A collection of arguments for invoking getSyntheticLocation.
 */
export interface GetSyntheticLocationOutputArgs {
    /**
     * The cloud provider where the location is hosted.
     */
    cloudPlatform?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    stage?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
