// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The application data source allows the application ID to be retrieved by its name and optionally tags / tag-value pairs.
 *
 * - `name` queries for all applications with the specified name
 * - `tags` (optional) refers to the tags that need to be present for the application (inclusive)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@lbrlabs/pulumi-dynatrace";
 * import * as dynatrace from "@pulumi/dynatrace";
 *
 * const test = dynatrace.getApplication({
 *     name: "Example",
 *     tags: [
 *         "TerraformKeyTest",
 *         "TerraformKeyValueTest=TestValue",
 *     ],
 * });
 * const _name_ = new dynatrace.ApplicationDetectionRule("#name#", {
 *     applicationIdentifier: test.then(test => test.id),
 *     filterConfig: {
 *         applicationMatchTarget: "DOMAIN",
 *         applicationMatchType: "MATCHES",
 *         pattern: "www.google.com",
 *     },
 * });
 * ```
 */
export function getApplication(args: GetApplicationArgs, opts?: pulumi.InvokeOptions): Promise<GetApplicationResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("dynatrace:index/getApplication:getApplication", {
        "name": args.name,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getApplication.
 */
export interface GetApplicationArgs {
    name: string;
    /**
     * Required tags of the application to find
     */
    tags?: string[];
}

/**
 * A collection of values returned by getApplication.
 */
export interface GetApplicationResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    /**
     * Required tags of the application to find
     */
    readonly tags?: string[];
}

export function getApplicationOutput(args: GetApplicationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplicationResult> {
    return pulumi.output(args).apply(a => getApplication(a, opts))
}

/**
 * A collection of arguments for invoking getApplication.
 */
export interface GetApplicationOutputArgs {
    name: pulumi.Input<string>;
    /**
     * Required tags of the application to find
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
