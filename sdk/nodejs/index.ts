// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./alerting";
export * from "./alertingProfile";
export * from "./applicationAnomalies";
export * from "./applicationDataPrivacy";
export * from "./applicationDetectionRule";
export * from "./applicationErrorRules";
export * from "./autotag";
export * from "./awsCredentials";
export * from "./azureCredentials";
export * from "./browserMonitor";
export * from "./calculatedServiceMetric";
export * from "./cloudfoundaryCredentials";
export * from "./customAnomalies";
export * from "./customService";
export * from "./dashboard";
export * from "./dashboardSharing";
export * from "./databaseAnomalies";
export * from "./diskAnomalies";
export * from "./environment";
export * from "./getAlertingProfiles";
export * from "./getApplication";
export * from "./getAwsIamExternal";
export * from "./getCredentials";
export * from "./getHost";
export * from "./getManagementZone";
export * from "./getProcess";
export * from "./getProcessGroup";
export * from "./getService";
export * from "./getSyntheticLocation";
export * from "./getSyntheticLocations";
export * from "./hostAnomalies";
export * from "./hostNaming";
export * from "./httpMonitor";
export * from "./ibmMqFilters";
export * from "./imsBridges";
export * from "./k8sCredentials";
export * from "./keyRequests";
export * from "./maintenanceWindow";
export * from "./managementZone";
export * from "./mobileApplication";
export * from "./networkZones";
export * from "./notification";
export * from "./processgroupNaming";
export * from "./provider";
export * from "./queueManager";
export * from "./queueSharingGroups";
export * from "./requestAttribute";
export * from "./requestNaming";
export * from "./requestNamings";
export * from "./resourceAttributes";
export * from "./serviceAnomalies";
export * from "./serviceNaming";
export * from "./slo";
export * from "./spanAttributed";
export * from "./spanCaptureRule";
export * from "./spanContextPropagation";
export * from "./spanEntryPoint";
export * from "./user";
export * from "./userGroup";
export * from "./webApplication";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { Alerting } from "./alerting";
import { AlertingProfile } from "./alertingProfile";
import { ApplicationAnomalies } from "./applicationAnomalies";
import { ApplicationDataPrivacy } from "./applicationDataPrivacy";
import { ApplicationDetectionRule } from "./applicationDetectionRule";
import { ApplicationErrorRules } from "./applicationErrorRules";
import { Autotag } from "./autotag";
import { AwsCredentials } from "./awsCredentials";
import { AzureCredentials } from "./azureCredentials";
import { BrowserMonitor } from "./browserMonitor";
import { CalculatedServiceMetric } from "./calculatedServiceMetric";
import { CloudfoundaryCredentials } from "./cloudfoundaryCredentials";
import { CustomAnomalies } from "./customAnomalies";
import { CustomService } from "./customService";
import { Dashboard } from "./dashboard";
import { DashboardSharing } from "./dashboardSharing";
import { DatabaseAnomalies } from "./databaseAnomalies";
import { DiskAnomalies } from "./diskAnomalies";
import { Environment } from "./environment";
import { HostAnomalies } from "./hostAnomalies";
import { HostNaming } from "./hostNaming";
import { HttpMonitor } from "./httpMonitor";
import { IbmMqFilters } from "./ibmMqFilters";
import { ImsBridges } from "./imsBridges";
import { K8sCredentials } from "./k8sCredentials";
import { KeyRequests } from "./keyRequests";
import { MaintenanceWindow } from "./maintenanceWindow";
import { ManagementZone } from "./managementZone";
import { MobileApplication } from "./mobileApplication";
import { NetworkZones } from "./networkZones";
import { Notification } from "./notification";
import { ProcessgroupNaming } from "./processgroupNaming";
import { QueueManager } from "./queueManager";
import { QueueSharingGroups } from "./queueSharingGroups";
import { RequestAttribute } from "./requestAttribute";
import { RequestNaming } from "./requestNaming";
import { RequestNamings } from "./requestNamings";
import { ResourceAttributes } from "./resourceAttributes";
import { ServiceAnomalies } from "./serviceAnomalies";
import { ServiceNaming } from "./serviceNaming";
import { Slo } from "./slo";
import { SpanAttributed } from "./spanAttributed";
import { SpanCaptureRule } from "./spanCaptureRule";
import { SpanContextPropagation } from "./spanContextPropagation";
import { SpanEntryPoint } from "./spanEntryPoint";
import { User } from "./user";
import { UserGroup } from "./userGroup";
import { WebApplication } from "./webApplication";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "dynatrace:index/alerting:Alerting":
                return new Alerting(name, <any>undefined, { urn })
            case "dynatrace:index/alertingProfile:AlertingProfile":
                return new AlertingProfile(name, <any>undefined, { urn })
            case "dynatrace:index/applicationAnomalies:ApplicationAnomalies":
                return new ApplicationAnomalies(name, <any>undefined, { urn })
            case "dynatrace:index/applicationDataPrivacy:ApplicationDataPrivacy":
                return new ApplicationDataPrivacy(name, <any>undefined, { urn })
            case "dynatrace:index/applicationDetectionRule:ApplicationDetectionRule":
                return new ApplicationDetectionRule(name, <any>undefined, { urn })
            case "dynatrace:index/applicationErrorRules:ApplicationErrorRules":
                return new ApplicationErrorRules(name, <any>undefined, { urn })
            case "dynatrace:index/autotag:Autotag":
                return new Autotag(name, <any>undefined, { urn })
            case "dynatrace:index/awsCredentials:AwsCredentials":
                return new AwsCredentials(name, <any>undefined, { urn })
            case "dynatrace:index/azureCredentials:AzureCredentials":
                return new AzureCredentials(name, <any>undefined, { urn })
            case "dynatrace:index/browserMonitor:BrowserMonitor":
                return new BrowserMonitor(name, <any>undefined, { urn })
            case "dynatrace:index/calculatedServiceMetric:CalculatedServiceMetric":
                return new CalculatedServiceMetric(name, <any>undefined, { urn })
            case "dynatrace:index/cloudfoundaryCredentials:CloudfoundaryCredentials":
                return new CloudfoundaryCredentials(name, <any>undefined, { urn })
            case "dynatrace:index/customAnomalies:CustomAnomalies":
                return new CustomAnomalies(name, <any>undefined, { urn })
            case "dynatrace:index/customService:CustomService":
                return new CustomService(name, <any>undefined, { urn })
            case "dynatrace:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "dynatrace:index/dashboardSharing:DashboardSharing":
                return new DashboardSharing(name, <any>undefined, { urn })
            case "dynatrace:index/databaseAnomalies:DatabaseAnomalies":
                return new DatabaseAnomalies(name, <any>undefined, { urn })
            case "dynatrace:index/diskAnomalies:DiskAnomalies":
                return new DiskAnomalies(name, <any>undefined, { urn })
            case "dynatrace:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "dynatrace:index/hostAnomalies:HostAnomalies":
                return new HostAnomalies(name, <any>undefined, { urn })
            case "dynatrace:index/hostNaming:HostNaming":
                return new HostNaming(name, <any>undefined, { urn })
            case "dynatrace:index/httpMonitor:HttpMonitor":
                return new HttpMonitor(name, <any>undefined, { urn })
            case "dynatrace:index/ibmMqFilters:IbmMqFilters":
                return new IbmMqFilters(name, <any>undefined, { urn })
            case "dynatrace:index/imsBridges:ImsBridges":
                return new ImsBridges(name, <any>undefined, { urn })
            case "dynatrace:index/k8sCredentials:K8sCredentials":
                return new K8sCredentials(name, <any>undefined, { urn })
            case "dynatrace:index/keyRequests:KeyRequests":
                return new KeyRequests(name, <any>undefined, { urn })
            case "dynatrace:index/maintenanceWindow:MaintenanceWindow":
                return new MaintenanceWindow(name, <any>undefined, { urn })
            case "dynatrace:index/managementZone:ManagementZone":
                return new ManagementZone(name, <any>undefined, { urn })
            case "dynatrace:index/mobileApplication:MobileApplication":
                return new MobileApplication(name, <any>undefined, { urn })
            case "dynatrace:index/networkZones:NetworkZones":
                return new NetworkZones(name, <any>undefined, { urn })
            case "dynatrace:index/notification:Notification":
                return new Notification(name, <any>undefined, { urn })
            case "dynatrace:index/processgroupNaming:ProcessgroupNaming":
                return new ProcessgroupNaming(name, <any>undefined, { urn })
            case "dynatrace:index/queueManager:QueueManager":
                return new QueueManager(name, <any>undefined, { urn })
            case "dynatrace:index/queueSharingGroups:QueueSharingGroups":
                return new QueueSharingGroups(name, <any>undefined, { urn })
            case "dynatrace:index/requestAttribute:RequestAttribute":
                return new RequestAttribute(name, <any>undefined, { urn })
            case "dynatrace:index/requestNaming:RequestNaming":
                return new RequestNaming(name, <any>undefined, { urn })
            case "dynatrace:index/requestNamings:RequestNamings":
                return new RequestNamings(name, <any>undefined, { urn })
            case "dynatrace:index/resourceAttributes:ResourceAttributes":
                return new ResourceAttributes(name, <any>undefined, { urn })
            case "dynatrace:index/serviceAnomalies:ServiceAnomalies":
                return new ServiceAnomalies(name, <any>undefined, { urn })
            case "dynatrace:index/serviceNaming:ServiceNaming":
                return new ServiceNaming(name, <any>undefined, { urn })
            case "dynatrace:index/slo:Slo":
                return new Slo(name, <any>undefined, { urn })
            case "dynatrace:index/spanAttributed:SpanAttributed":
                return new SpanAttributed(name, <any>undefined, { urn })
            case "dynatrace:index/spanCaptureRule:SpanCaptureRule":
                return new SpanCaptureRule(name, <any>undefined, { urn })
            case "dynatrace:index/spanContextPropagation:SpanContextPropagation":
                return new SpanContextPropagation(name, <any>undefined, { urn })
            case "dynatrace:index/spanEntryPoint:SpanEntryPoint":
                return new SpanEntryPoint(name, <any>undefined, { urn })
            case "dynatrace:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "dynatrace:index/userGroup:UserGroup":
                return new UserGroup(name, <any>undefined, { urn })
            case "dynatrace:index/webApplication:WebApplication":
                return new WebApplication(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("dynatrace", "index/alerting", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/alertingProfile", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/applicationAnomalies", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/applicationDataPrivacy", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/applicationDetectionRule", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/applicationErrorRules", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/autotag", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/awsCredentials", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/azureCredentials", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/browserMonitor", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/calculatedServiceMetric", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/cloudfoundaryCredentials", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/customAnomalies", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/customService", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/dashboardSharing", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/databaseAnomalies", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/diskAnomalies", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/environment", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/hostAnomalies", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/hostNaming", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/httpMonitor", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/ibmMqFilters", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/imsBridges", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/k8sCredentials", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/keyRequests", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/maintenanceWindow", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/managementZone", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/mobileApplication", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/networkZones", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/notification", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/processgroupNaming", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/queueManager", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/queueSharingGroups", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/requestAttribute", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/requestNaming", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/requestNamings", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/resourceAttributes", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/serviceAnomalies", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/serviceNaming", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/slo", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/spanAttributed", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/spanCaptureRule", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/spanContextPropagation", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/spanEntryPoint", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/user", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/userGroup", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/webApplication", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("dynatrace", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:dynatrace") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
