// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlertingArgs, AlertingState } from "./alerting";
export type Alerting = import("./alerting").Alerting;
export const Alerting: typeof import("./alerting").Alerting = null as any;
utilities.lazyLoad(exports, ["Alerting"], () => require("./alerting"));

export { AlertingProfileArgs, AlertingProfileState } from "./alertingProfile";
export type AlertingProfile = import("./alertingProfile").AlertingProfile;
export const AlertingProfile: typeof import("./alertingProfile").AlertingProfile = null as any;
utilities.lazyLoad(exports, ["AlertingProfile"], () => require("./alertingProfile"));

export { AnsibleTowerNotificationArgs, AnsibleTowerNotificationState } from "./ansibleTowerNotification";
export type AnsibleTowerNotification = import("./ansibleTowerNotification").AnsibleTowerNotification;
export const AnsibleTowerNotification: typeof import("./ansibleTowerNotification").AnsibleTowerNotification = null as any;
utilities.lazyLoad(exports, ["AnsibleTowerNotification"], () => require("./ansibleTowerNotification"));

export { ApplicationAnomaliesArgs, ApplicationAnomaliesState } from "./applicationAnomalies";
export type ApplicationAnomalies = import("./applicationAnomalies").ApplicationAnomalies;
export const ApplicationAnomalies: typeof import("./applicationAnomalies").ApplicationAnomalies = null as any;
utilities.lazyLoad(exports, ["ApplicationAnomalies"], () => require("./applicationAnomalies"));

export { ApplicationDataPrivacyArgs, ApplicationDataPrivacyState } from "./applicationDataPrivacy";
export type ApplicationDataPrivacy = import("./applicationDataPrivacy").ApplicationDataPrivacy;
export const ApplicationDataPrivacy: typeof import("./applicationDataPrivacy").ApplicationDataPrivacy = null as any;
utilities.lazyLoad(exports, ["ApplicationDataPrivacy"], () => require("./applicationDataPrivacy"));

export { ApplicationDetectionRuleArgs, ApplicationDetectionRuleState } from "./applicationDetectionRule";
export type ApplicationDetectionRule = import("./applicationDetectionRule").ApplicationDetectionRule;
export const ApplicationDetectionRule: typeof import("./applicationDetectionRule").ApplicationDetectionRule = null as any;
utilities.lazyLoad(exports, ["ApplicationDetectionRule"], () => require("./applicationDetectionRule"));

export { ApplicationErrorRulesArgs, ApplicationErrorRulesState } from "./applicationErrorRules";
export type ApplicationErrorRules = import("./applicationErrorRules").ApplicationErrorRules;
export const ApplicationErrorRules: typeof import("./applicationErrorRules").ApplicationErrorRules = null as any;
utilities.lazyLoad(exports, ["ApplicationErrorRules"], () => require("./applicationErrorRules"));

export { AutotagArgs, AutotagState } from "./autotag";
export type Autotag = import("./autotag").Autotag;
export const Autotag: typeof import("./autotag").Autotag = null as any;
utilities.lazyLoad(exports, ["Autotag"], () => require("./autotag"));

export { AwsCredentialsArgs, AwsCredentialsState } from "./awsCredentials";
export type AwsCredentials = import("./awsCredentials").AwsCredentials;
export const AwsCredentials: typeof import("./awsCredentials").AwsCredentials = null as any;
utilities.lazyLoad(exports, ["AwsCredentials"], () => require("./awsCredentials"));

export { AzureCredentialsArgs, AzureCredentialsState } from "./azureCredentials";
export type AzureCredentials = import("./azureCredentials").AzureCredentials;
export const AzureCredentials: typeof import("./azureCredentials").AzureCredentials = null as any;
utilities.lazyLoad(exports, ["AzureCredentials"], () => require("./azureCredentials"));

export { BrowserMonitorArgs, BrowserMonitorState } from "./browserMonitor";
export type BrowserMonitor = import("./browserMonitor").BrowserMonitor;
export const BrowserMonitor: typeof import("./browserMonitor").BrowserMonitor = null as any;
utilities.lazyLoad(exports, ["BrowserMonitor"], () => require("./browserMonitor"));

export { CalculatedServiceMetricArgs, CalculatedServiceMetricState } from "./calculatedServiceMetric";
export type CalculatedServiceMetric = import("./calculatedServiceMetric").CalculatedServiceMetric;
export const CalculatedServiceMetric: typeof import("./calculatedServiceMetric").CalculatedServiceMetric = null as any;
utilities.lazyLoad(exports, ["CalculatedServiceMetric"], () => require("./calculatedServiceMetric"));

export { CloudfoundaryCredentialsArgs, CloudfoundaryCredentialsState } from "./cloudfoundaryCredentials";
export type CloudfoundaryCredentials = import("./cloudfoundaryCredentials").CloudfoundaryCredentials;
export const CloudfoundaryCredentials: typeof import("./cloudfoundaryCredentials").CloudfoundaryCredentials = null as any;
utilities.lazyLoad(exports, ["CloudfoundaryCredentials"], () => require("./cloudfoundaryCredentials"));

export { CustomAnomaliesArgs, CustomAnomaliesState } from "./customAnomalies";
export type CustomAnomalies = import("./customAnomalies").CustomAnomalies;
export const CustomAnomalies: typeof import("./customAnomalies").CustomAnomalies = null as any;
utilities.lazyLoad(exports, ["CustomAnomalies"], () => require("./customAnomalies"));

export { CustomServiceArgs, CustomServiceState } from "./customService";
export type CustomService = import("./customService").CustomService;
export const CustomService: typeof import("./customService").CustomService = null as any;
utilities.lazyLoad(exports, ["CustomService"], () => require("./customService"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { DashboardSharingArgs, DashboardSharingState } from "./dashboardSharing";
export type DashboardSharing = import("./dashboardSharing").DashboardSharing;
export const DashboardSharing: typeof import("./dashboardSharing").DashboardSharing = null as any;
utilities.lazyLoad(exports, ["DashboardSharing"], () => require("./dashboardSharing"));

export { DatabaseAnomaliesArgs, DatabaseAnomaliesState } from "./databaseAnomalies";
export type DatabaseAnomalies = import("./databaseAnomalies").DatabaseAnomalies;
export const DatabaseAnomalies: typeof import("./databaseAnomalies").DatabaseAnomalies = null as any;
utilities.lazyLoad(exports, ["DatabaseAnomalies"], () => require("./databaseAnomalies"));

export { DiskAnomaliesArgs, DiskAnomaliesState } from "./diskAnomalies";
export type DiskAnomalies = import("./diskAnomalies").DiskAnomalies;
export const DiskAnomalies: typeof import("./diskAnomalies").DiskAnomalies = null as any;
utilities.lazyLoad(exports, ["DiskAnomalies"], () => require("./diskAnomalies"));

export { EmailNotificationArgs, EmailNotificationState } from "./emailNotification";
export type EmailNotification = import("./emailNotification").EmailNotification;
export const EmailNotification: typeof import("./emailNotification").EmailNotification = null as any;
utilities.lazyLoad(exports, ["EmailNotification"], () => require("./emailNotification"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { FrequentIssuesArgs, FrequentIssuesState } from "./frequentIssues";
export type FrequentIssues = import("./frequentIssues").FrequentIssues;
export const FrequentIssues: typeof import("./frequentIssues").FrequentIssues = null as any;
utilities.lazyLoad(exports, ["FrequentIssues"], () => require("./frequentIssues"));

export { GetAlertingProfileArgs, GetAlertingProfileResult, GetAlertingProfileOutputArgs } from "./getAlertingProfile";
export const getAlertingProfile: typeof import("./getAlertingProfile").getAlertingProfile = null as any;
export const getAlertingProfileOutput: typeof import("./getAlertingProfile").getAlertingProfileOutput = null as any;
utilities.lazyLoad(exports, ["getAlertingProfile","getAlertingProfileOutput"], () => require("./getAlertingProfile"));

export { GetAlertingProfilesArgs, GetAlertingProfilesResult, GetAlertingProfilesOutputArgs } from "./getAlertingProfiles";
export const getAlertingProfiles: typeof import("./getAlertingProfiles").getAlertingProfiles = null as any;
export const getAlertingProfilesOutput: typeof import("./getAlertingProfiles").getAlertingProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getAlertingProfiles","getAlertingProfilesOutput"], () => require("./getAlertingProfiles"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetAwsIamExternalResult } from "./getAwsIamExternal";
export const getAwsIamExternal: typeof import("./getAwsIamExternal").getAwsIamExternal = null as any;
utilities.lazyLoad(exports, ["getAwsIamExternal"], () => require("./getAwsIamExternal"));

export { GetCredentialsArgs, GetCredentialsResult, GetCredentialsOutputArgs } from "./getCredentials";
export const getCredentials: typeof import("./getCredentials").getCredentials = null as any;
export const getCredentialsOutput: typeof import("./getCredentials").getCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getCredentials","getCredentialsOutput"], () => require("./getCredentials"));

export { GetHostArgs, GetHostResult, GetHostOutputArgs } from "./getHost";
export const getHost: typeof import("./getHost").getHost = null as any;
export const getHostOutput: typeof import("./getHost").getHostOutput = null as any;
utilities.lazyLoad(exports, ["getHost","getHostOutput"], () => require("./getHost"));

export { GetManagementZoneArgs, GetManagementZoneResult, GetManagementZoneOutputArgs } from "./getManagementZone";
export const getManagementZone: typeof import("./getManagementZone").getManagementZone = null as any;
export const getManagementZoneOutput: typeof import("./getManagementZone").getManagementZoneOutput = null as any;
utilities.lazyLoad(exports, ["getManagementZone","getManagementZoneOutput"], () => require("./getManagementZone"));

export { GetProcessArgs, GetProcessResult, GetProcessOutputArgs } from "./getProcess";
export const getProcess: typeof import("./getProcess").getProcess = null as any;
export const getProcessOutput: typeof import("./getProcess").getProcessOutput = null as any;
utilities.lazyLoad(exports, ["getProcess","getProcessOutput"], () => require("./getProcess"));

export { GetProcessGroupArgs, GetProcessGroupResult, GetProcessGroupOutputArgs } from "./getProcessGroup";
export const getProcessGroup: typeof import("./getProcessGroup").getProcessGroup = null as any;
export const getProcessGroupOutput: typeof import("./getProcessGroup").getProcessGroupOutput = null as any;
utilities.lazyLoad(exports, ["getProcessGroup","getProcessGroupOutput"], () => require("./getProcessGroup"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetSyntheticLocationArgs, GetSyntheticLocationResult, GetSyntheticLocationOutputArgs } from "./getSyntheticLocation";
export const getSyntheticLocation: typeof import("./getSyntheticLocation").getSyntheticLocation = null as any;
export const getSyntheticLocationOutput: typeof import("./getSyntheticLocation").getSyntheticLocationOutput = null as any;
utilities.lazyLoad(exports, ["getSyntheticLocation","getSyntheticLocationOutput"], () => require("./getSyntheticLocation"));

export { GetSyntheticLocationsArgs, GetSyntheticLocationsResult, GetSyntheticLocationsOutputArgs } from "./getSyntheticLocations";
export const getSyntheticLocations: typeof import("./getSyntheticLocations").getSyntheticLocations = null as any;
export const getSyntheticLocationsOutput: typeof import("./getSyntheticLocations").getSyntheticLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getSyntheticLocations","getSyntheticLocationsOutput"], () => require("./getSyntheticLocations"));

export { HostAnomaliesArgs, HostAnomaliesState } from "./hostAnomalies";
export type HostAnomalies = import("./hostAnomalies").HostAnomalies;
export const HostAnomalies: typeof import("./hostAnomalies").HostAnomalies = null as any;
utilities.lazyLoad(exports, ["HostAnomalies"], () => require("./hostAnomalies"));

export { HostNamingArgs, HostNamingState } from "./hostNaming";
export type HostNaming = import("./hostNaming").HostNaming;
export const HostNaming: typeof import("./hostNaming").HostNaming = null as any;
utilities.lazyLoad(exports, ["HostNaming"], () => require("./hostNaming"));

export { HttpMonitorArgs, HttpMonitorState } from "./httpMonitor";
export type HttpMonitor = import("./httpMonitor").HttpMonitor;
export const HttpMonitor: typeof import("./httpMonitor").HttpMonitor = null as any;
utilities.lazyLoad(exports, ["HttpMonitor"], () => require("./httpMonitor"));

export { IbmMqFiltersArgs, IbmMqFiltersState } from "./ibmMqFilters";
export type IbmMqFilters = import("./ibmMqFilters").IbmMqFilters;
export const IbmMqFilters: typeof import("./ibmMqFilters").IbmMqFilters = null as any;
utilities.lazyLoad(exports, ["IbmMqFilters"], () => require("./ibmMqFilters"));

export { ImsBridgesArgs, ImsBridgesState } from "./imsBridges";
export type ImsBridges = import("./imsBridges").ImsBridges;
export const ImsBridges: typeof import("./imsBridges").ImsBridges = null as any;
utilities.lazyLoad(exports, ["ImsBridges"], () => require("./imsBridges"));

export { JiraNotificationArgs, JiraNotificationState } from "./jiraNotification";
export type JiraNotification = import("./jiraNotification").JiraNotification;
export const JiraNotification: typeof import("./jiraNotification").JiraNotification = null as any;
utilities.lazyLoad(exports, ["JiraNotification"], () => require("./jiraNotification"));

export { K8sCredentialsArgs, K8sCredentialsState } from "./k8sCredentials";
export type K8sCredentials = import("./k8sCredentials").K8sCredentials;
export const K8sCredentials: typeof import("./k8sCredentials").K8sCredentials = null as any;
utilities.lazyLoad(exports, ["K8sCredentials"], () => require("./k8sCredentials"));

export { KeyRequestsArgs, KeyRequestsState } from "./keyRequests";
export type KeyRequests = import("./keyRequests").KeyRequests;
export const KeyRequests: typeof import("./keyRequests").KeyRequests = null as any;
utilities.lazyLoad(exports, ["KeyRequests"], () => require("./keyRequests"));

export { MaintenanceArgs, MaintenanceState } from "./maintenance";
export type Maintenance = import("./maintenance").Maintenance;
export const Maintenance: typeof import("./maintenance").Maintenance = null as any;
utilities.lazyLoad(exports, ["Maintenance"], () => require("./maintenance"));

export { MaintenanceWindowArgs, MaintenanceWindowState } from "./maintenanceWindow";
export type MaintenanceWindow = import("./maintenanceWindow").MaintenanceWindow;
export const MaintenanceWindow: typeof import("./maintenanceWindow").MaintenanceWindow = null as any;
utilities.lazyLoad(exports, ["MaintenanceWindow"], () => require("./maintenanceWindow"));

export { ManagementZoneArgs, ManagementZoneState } from "./managementZone";
export type ManagementZone = import("./managementZone").ManagementZone;
export const ManagementZone: typeof import("./managementZone").ManagementZone = null as any;
utilities.lazyLoad(exports, ["ManagementZone"], () => require("./managementZone"));

export { MobileApplicationArgs, MobileApplicationState } from "./mobileApplication";
export type MobileApplication = import("./mobileApplication").MobileApplication;
export const MobileApplication: typeof import("./mobileApplication").MobileApplication = null as any;
utilities.lazyLoad(exports, ["MobileApplication"], () => require("./mobileApplication"));

export { NetworkZonesArgs, NetworkZonesState } from "./networkZones";
export type NetworkZones = import("./networkZones").NetworkZones;
export const NetworkZones: typeof import("./networkZones").NetworkZones = null as any;
utilities.lazyLoad(exports, ["NetworkZones"], () => require("./networkZones"));

export { NotificationArgs, NotificationState } from "./notification";
export type Notification = import("./notification").Notification;
export const Notification: typeof import("./notification").Notification = null as any;
utilities.lazyLoad(exports, ["Notification"], () => require("./notification"));

export { OpsGenieNotificationArgs, OpsGenieNotificationState } from "./opsGenieNotification";
export type OpsGenieNotification = import("./opsGenieNotification").OpsGenieNotification;
export const OpsGenieNotification: typeof import("./opsGenieNotification").OpsGenieNotification = null as any;
utilities.lazyLoad(exports, ["OpsGenieNotification"], () => require("./opsGenieNotification"));

export { PagerDutyNotificationArgs, PagerDutyNotificationState } from "./pagerDutyNotification";
export type PagerDutyNotification = import("./pagerDutyNotification").PagerDutyNotification;
export const PagerDutyNotification: typeof import("./pagerDutyNotification").PagerDutyNotification = null as any;
utilities.lazyLoad(exports, ["PagerDutyNotification"], () => require("./pagerDutyNotification"));

export { ProcessgroupNamingArgs, ProcessgroupNamingState } from "./processgroupNaming";
export type ProcessgroupNaming = import("./processgroupNaming").ProcessgroupNaming;
export const ProcessgroupNaming: typeof import("./processgroupNaming").ProcessgroupNaming = null as any;
utilities.lazyLoad(exports, ["ProcessgroupNaming"], () => require("./processgroupNaming"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QueueManagerArgs, QueueManagerState } from "./queueManager";
export type QueueManager = import("./queueManager").QueueManager;
export const QueueManager: typeof import("./queueManager").QueueManager = null as any;
utilities.lazyLoad(exports, ["QueueManager"], () => require("./queueManager"));

export { QueueSharingGroupsArgs, QueueSharingGroupsState } from "./queueSharingGroups";
export type QueueSharingGroups = import("./queueSharingGroups").QueueSharingGroups;
export const QueueSharingGroups: typeof import("./queueSharingGroups").QueueSharingGroups = null as any;
utilities.lazyLoad(exports, ["QueueSharingGroups"], () => require("./queueSharingGroups"));

export { RequestAttributeArgs, RequestAttributeState } from "./requestAttribute";
export type RequestAttribute = import("./requestAttribute").RequestAttribute;
export const RequestAttribute: typeof import("./requestAttribute").RequestAttribute = null as any;
utilities.lazyLoad(exports, ["RequestAttribute"], () => require("./requestAttribute"));

export { RequestNamingArgs, RequestNamingState } from "./requestNaming";
export type RequestNaming = import("./requestNaming").RequestNaming;
export const RequestNaming: typeof import("./requestNaming").RequestNaming = null as any;
utilities.lazyLoad(exports, ["RequestNaming"], () => require("./requestNaming"));

export { RequestNamingsArgs, RequestNamingsState } from "./requestNamings";
export type RequestNamings = import("./requestNamings").RequestNamings;
export const RequestNamings: typeof import("./requestNamings").RequestNamings = null as any;
utilities.lazyLoad(exports, ["RequestNamings"], () => require("./requestNamings"));

export { ResourceAttributesArgs, ResourceAttributesState } from "./resourceAttributes";
export type ResourceAttributes = import("./resourceAttributes").ResourceAttributes;
export const ResourceAttributes: typeof import("./resourceAttributes").ResourceAttributes = null as any;
utilities.lazyLoad(exports, ["ResourceAttributes"], () => require("./resourceAttributes"));

export { ServiceAnomaliesArgs, ServiceAnomaliesState } from "./serviceAnomalies";
export type ServiceAnomalies = import("./serviceAnomalies").ServiceAnomalies;
export const ServiceAnomalies: typeof import("./serviceAnomalies").ServiceAnomalies = null as any;
utilities.lazyLoad(exports, ["ServiceAnomalies"], () => require("./serviceAnomalies"));

export { ServiceNamingArgs, ServiceNamingState } from "./serviceNaming";
export type ServiceNaming = import("./serviceNaming").ServiceNaming;
export const ServiceNaming: typeof import("./serviceNaming").ServiceNaming = null as any;
utilities.lazyLoad(exports, ["ServiceNaming"], () => require("./serviceNaming"));

export { ServiceNowNotificationArgs, ServiceNowNotificationState } from "./serviceNowNotification";
export type ServiceNowNotification = import("./serviceNowNotification").ServiceNowNotification;
export const ServiceNowNotification: typeof import("./serviceNowNotification").ServiceNowNotification = null as any;
utilities.lazyLoad(exports, ["ServiceNowNotification"], () => require("./serviceNowNotification"));

export { SlackNotificationArgs, SlackNotificationState } from "./slackNotification";
export type SlackNotification = import("./slackNotification").SlackNotification;
export const SlackNotification: typeof import("./slackNotification").SlackNotification = null as any;
utilities.lazyLoad(exports, ["SlackNotification"], () => require("./slackNotification"));

export { SloArgs, SloState } from "./slo";
export type Slo = import("./slo").Slo;
export const Slo: typeof import("./slo").Slo = null as any;
utilities.lazyLoad(exports, ["Slo"], () => require("./slo"));

export { SpanAttributedArgs, SpanAttributedState } from "./spanAttributed";
export type SpanAttributed = import("./spanAttributed").SpanAttributed;
export const SpanAttributed: typeof import("./spanAttributed").SpanAttributed = null as any;
utilities.lazyLoad(exports, ["SpanAttributed"], () => require("./spanAttributed"));

export { SpanCaptureRuleArgs, SpanCaptureRuleState } from "./spanCaptureRule";
export type SpanCaptureRule = import("./spanCaptureRule").SpanCaptureRule;
export const SpanCaptureRule: typeof import("./spanCaptureRule").SpanCaptureRule = null as any;
utilities.lazyLoad(exports, ["SpanCaptureRule"], () => require("./spanCaptureRule"));

export { SpanContextPropagationArgs, SpanContextPropagationState } from "./spanContextPropagation";
export type SpanContextPropagation = import("./spanContextPropagation").SpanContextPropagation;
export const SpanContextPropagation: typeof import("./spanContextPropagation").SpanContextPropagation = null as any;
utilities.lazyLoad(exports, ["SpanContextPropagation"], () => require("./spanContextPropagation"));

export { SpanEntryPointArgs, SpanEntryPointState } from "./spanEntryPoint";
export type SpanEntryPoint = import("./spanEntryPoint").SpanEntryPoint;
export const SpanEntryPoint: typeof import("./spanEntryPoint").SpanEntryPoint = null as any;
utilities.lazyLoad(exports, ["SpanEntryPoint"], () => require("./spanEntryPoint"));

export { TrrelloNotificationArgs, TrrelloNotificationState } from "./trrelloNotification";
export type TrrelloNotification = import("./trrelloNotification").TrrelloNotification;
export const TrrelloNotification: typeof import("./trrelloNotification").TrrelloNotification = null as any;
utilities.lazyLoad(exports, ["TrrelloNotification"], () => require("./trrelloNotification"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserGroupArgs, UserGroupState } from "./userGroup";
export type UserGroup = import("./userGroup").UserGroup;
export const UserGroup: typeof import("./userGroup").UserGroup = null as any;
utilities.lazyLoad(exports, ["UserGroup"], () => require("./userGroup"));

export { VictorOpsNotificationArgs, VictorOpsNotificationState } from "./victorOpsNotification";
export type VictorOpsNotification = import("./victorOpsNotification").VictorOpsNotification;
export const VictorOpsNotification: typeof import("./victorOpsNotification").VictorOpsNotification = null as any;
utilities.lazyLoad(exports, ["VictorOpsNotification"], () => require("./victorOpsNotification"));

export { WebApplicationArgs, WebApplicationState } from "./webApplication";
export type WebApplication = import("./webApplication").WebApplication;
export const WebApplication: typeof import("./webApplication").WebApplication = null as any;
utilities.lazyLoad(exports, ["WebApplication"], () => require("./webApplication"));

export { WebhookNotificationArgs, WebhookNotificationState } from "./webhookNotification";
export type WebhookNotification = import("./webhookNotification").WebhookNotification;
export const WebhookNotification: typeof import("./webhookNotification").WebhookNotification = null as any;
utilities.lazyLoad(exports, ["WebhookNotification"], () => require("./webhookNotification"));

export { XmattersNotificationArgs, XmattersNotificationState } from "./xmattersNotification";
export type XmattersNotification = import("./xmattersNotification").XmattersNotification;
export const XmattersNotification: typeof import("./xmattersNotification").XmattersNotification = null as any;
utilities.lazyLoad(exports, ["XmattersNotification"], () => require("./xmattersNotification"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "dynatrace:index/alerting:Alerting":
                return new Alerting(name, <any>undefined, { urn })
            case "dynatrace:index/alertingProfile:AlertingProfile":
                return new AlertingProfile(name, <any>undefined, { urn })
            case "dynatrace:index/ansibleTowerNotification:AnsibleTowerNotification":
                return new AnsibleTowerNotification(name, <any>undefined, { urn })
            case "dynatrace:index/applicationAnomalies:ApplicationAnomalies":
                return new ApplicationAnomalies(name, <any>undefined, { urn })
            case "dynatrace:index/applicationDataPrivacy:ApplicationDataPrivacy":
                return new ApplicationDataPrivacy(name, <any>undefined, { urn })
            case "dynatrace:index/applicationDetectionRule:ApplicationDetectionRule":
                return new ApplicationDetectionRule(name, <any>undefined, { urn })
            case "dynatrace:index/applicationErrorRules:ApplicationErrorRules":
                return new ApplicationErrorRules(name, <any>undefined, { urn })
            case "dynatrace:index/autotag:Autotag":
                return new Autotag(name, <any>undefined, { urn })
            case "dynatrace:index/awsCredentials:AwsCredentials":
                return new AwsCredentials(name, <any>undefined, { urn })
            case "dynatrace:index/azureCredentials:AzureCredentials":
                return new AzureCredentials(name, <any>undefined, { urn })
            case "dynatrace:index/browserMonitor:BrowserMonitor":
                return new BrowserMonitor(name, <any>undefined, { urn })
            case "dynatrace:index/calculatedServiceMetric:CalculatedServiceMetric":
                return new CalculatedServiceMetric(name, <any>undefined, { urn })
            case "dynatrace:index/cloudfoundaryCredentials:CloudfoundaryCredentials":
                return new CloudfoundaryCredentials(name, <any>undefined, { urn })
            case "dynatrace:index/customAnomalies:CustomAnomalies":
                return new CustomAnomalies(name, <any>undefined, { urn })
            case "dynatrace:index/customService:CustomService":
                return new CustomService(name, <any>undefined, { urn })
            case "dynatrace:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "dynatrace:index/dashboardSharing:DashboardSharing":
                return new DashboardSharing(name, <any>undefined, { urn })
            case "dynatrace:index/databaseAnomalies:DatabaseAnomalies":
                return new DatabaseAnomalies(name, <any>undefined, { urn })
            case "dynatrace:index/diskAnomalies:DiskAnomalies":
                return new DiskAnomalies(name, <any>undefined, { urn })
            case "dynatrace:index/emailNotification:EmailNotification":
                return new EmailNotification(name, <any>undefined, { urn })
            case "dynatrace:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "dynatrace:index/frequentIssues:FrequentIssues":
                return new FrequentIssues(name, <any>undefined, { urn })
            case "dynatrace:index/hostAnomalies:HostAnomalies":
                return new HostAnomalies(name, <any>undefined, { urn })
            case "dynatrace:index/hostNaming:HostNaming":
                return new HostNaming(name, <any>undefined, { urn })
            case "dynatrace:index/httpMonitor:HttpMonitor":
                return new HttpMonitor(name, <any>undefined, { urn })
            case "dynatrace:index/ibmMqFilters:IbmMqFilters":
                return new IbmMqFilters(name, <any>undefined, { urn })
            case "dynatrace:index/imsBridges:ImsBridges":
                return new ImsBridges(name, <any>undefined, { urn })
            case "dynatrace:index/jiraNotification:JiraNotification":
                return new JiraNotification(name, <any>undefined, { urn })
            case "dynatrace:index/k8sCredentials:K8sCredentials":
                return new K8sCredentials(name, <any>undefined, { urn })
            case "dynatrace:index/keyRequests:KeyRequests":
                return new KeyRequests(name, <any>undefined, { urn })
            case "dynatrace:index/maintenance:Maintenance":
                return new Maintenance(name, <any>undefined, { urn })
            case "dynatrace:index/maintenanceWindow:MaintenanceWindow":
                return new MaintenanceWindow(name, <any>undefined, { urn })
            case "dynatrace:index/managementZone:ManagementZone":
                return new ManagementZone(name, <any>undefined, { urn })
            case "dynatrace:index/mobileApplication:MobileApplication":
                return new MobileApplication(name, <any>undefined, { urn })
            case "dynatrace:index/networkZones:NetworkZones":
                return new NetworkZones(name, <any>undefined, { urn })
            case "dynatrace:index/notification:Notification":
                return new Notification(name, <any>undefined, { urn })
            case "dynatrace:index/opsGenieNotification:OpsGenieNotification":
                return new OpsGenieNotification(name, <any>undefined, { urn })
            case "dynatrace:index/pagerDutyNotification:PagerDutyNotification":
                return new PagerDutyNotification(name, <any>undefined, { urn })
            case "dynatrace:index/processgroupNaming:ProcessgroupNaming":
                return new ProcessgroupNaming(name, <any>undefined, { urn })
            case "dynatrace:index/queueManager:QueueManager":
                return new QueueManager(name, <any>undefined, { urn })
            case "dynatrace:index/queueSharingGroups:QueueSharingGroups":
                return new QueueSharingGroups(name, <any>undefined, { urn })
            case "dynatrace:index/requestAttribute:RequestAttribute":
                return new RequestAttribute(name, <any>undefined, { urn })
            case "dynatrace:index/requestNaming:RequestNaming":
                return new RequestNaming(name, <any>undefined, { urn })
            case "dynatrace:index/requestNamings:RequestNamings":
                return new RequestNamings(name, <any>undefined, { urn })
            case "dynatrace:index/resourceAttributes:ResourceAttributes":
                return new ResourceAttributes(name, <any>undefined, { urn })
            case "dynatrace:index/serviceAnomalies:ServiceAnomalies":
                return new ServiceAnomalies(name, <any>undefined, { urn })
            case "dynatrace:index/serviceNaming:ServiceNaming":
                return new ServiceNaming(name, <any>undefined, { urn })
            case "dynatrace:index/serviceNowNotification:ServiceNowNotification":
                return new ServiceNowNotification(name, <any>undefined, { urn })
            case "dynatrace:index/slackNotification:SlackNotification":
                return new SlackNotification(name, <any>undefined, { urn })
            case "dynatrace:index/slo:Slo":
                return new Slo(name, <any>undefined, { urn })
            case "dynatrace:index/spanAttributed:SpanAttributed":
                return new SpanAttributed(name, <any>undefined, { urn })
            case "dynatrace:index/spanCaptureRule:SpanCaptureRule":
                return new SpanCaptureRule(name, <any>undefined, { urn })
            case "dynatrace:index/spanContextPropagation:SpanContextPropagation":
                return new SpanContextPropagation(name, <any>undefined, { urn })
            case "dynatrace:index/spanEntryPoint:SpanEntryPoint":
                return new SpanEntryPoint(name, <any>undefined, { urn })
            case "dynatrace:index/trrelloNotification:TrrelloNotification":
                return new TrrelloNotification(name, <any>undefined, { urn })
            case "dynatrace:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "dynatrace:index/userGroup:UserGroup":
                return new UserGroup(name, <any>undefined, { urn })
            case "dynatrace:index/victorOpsNotification:VictorOpsNotification":
                return new VictorOpsNotification(name, <any>undefined, { urn })
            case "dynatrace:index/webApplication:WebApplication":
                return new WebApplication(name, <any>undefined, { urn })
            case "dynatrace:index/webhookNotification:WebhookNotification":
                return new WebhookNotification(name, <any>undefined, { urn })
            case "dynatrace:index/xmattersNotification:XmattersNotification":
                return new XmattersNotification(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("dynatrace", "index/alerting", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/alertingProfile", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/ansibleTowerNotification", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/applicationAnomalies", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/applicationDataPrivacy", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/applicationDetectionRule", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/applicationErrorRules", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/autotag", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/awsCredentials", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/azureCredentials", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/browserMonitor", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/calculatedServiceMetric", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/cloudfoundaryCredentials", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/customAnomalies", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/customService", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/dashboardSharing", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/databaseAnomalies", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/diskAnomalies", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/emailNotification", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/environment", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/frequentIssues", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/hostAnomalies", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/hostNaming", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/httpMonitor", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/ibmMqFilters", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/imsBridges", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/jiraNotification", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/k8sCredentials", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/keyRequests", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/maintenance", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/maintenanceWindow", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/managementZone", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/mobileApplication", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/networkZones", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/notification", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/opsGenieNotification", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/pagerDutyNotification", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/processgroupNaming", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/queueManager", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/queueSharingGroups", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/requestAttribute", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/requestNaming", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/requestNamings", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/resourceAttributes", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/serviceAnomalies", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/serviceNaming", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/serviceNowNotification", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/slackNotification", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/slo", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/spanAttributed", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/spanCaptureRule", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/spanContextPropagation", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/spanEntryPoint", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/trrelloNotification", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/user", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/userGroup", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/victorOpsNotification", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/webApplication", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/webhookNotification", _module)
pulumi.runtime.registerResourceModule("dynatrace", "index/xmattersNotification", _module)
pulumi.runtime.registerResourcePackage("dynatrace", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:dynatrace") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
