// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertingFilters {
    /**
     * A conditions for the metric usage
     */
    filters?: pulumi.Input<pulumi.Input<inputs.AlertingFiltersFilter>[]>;
}

export interface AlertingFiltersFilter {
    custom?: pulumi.Input<inputs.AlertingFiltersFilterCustom>;
    predefined?: pulumi.Input<inputs.AlertingFiltersFilterPredefined>;
}

export interface AlertingFiltersFilterCustom {
    description?: pulumi.Input<inputs.AlertingFiltersFilterCustomDescription>;
    metadata?: pulumi.Input<inputs.AlertingFiltersFilterCustomMetadata>;
    title?: pulumi.Input<inputs.AlertingFiltersFilterCustomTitle>;
}

export interface AlertingFiltersFilterCustomDescription {
    caseSensitive?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface AlertingFiltersFilterCustomMetadata {
    items: pulumi.Input<inputs.AlertingFiltersFilterCustomMetadataItems>;
}

export interface AlertingFiltersFilterCustomMetadataItems {
    filters: pulumi.Input<pulumi.Input<inputs.AlertingFiltersFilterCustomMetadataItemsFilter>[]>;
}

export interface AlertingFiltersFilterCustomMetadataItemsFilter {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface AlertingFiltersFilterCustomTitle {
    caseSensitive?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface AlertingFiltersFilterPredefined {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
}

export interface AlertingProfileEventTypeFilter {
    /**
     * Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
     */
    customEventFilters?: pulumi.Input<pulumi.Input<inputs.AlertingProfileEventTypeFilterCustomEventFilter>[]>;
    /**
     * Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
     */
    predefinedEventFilters?: pulumi.Input<pulumi.Input<inputs.AlertingProfileEventTypeFilterPredefinedEventFilter>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AlertingProfileEventTypeFilterCustomEventFilter {
    customDescriptionFilters?: pulumi.Input<pulumi.Input<inputs.AlertingProfileEventTypeFilterCustomEventFilterCustomDescriptionFilter>[]>;
    customTitleFilters?: pulumi.Input<pulumi.Input<inputs.AlertingProfileEventTypeFilterCustomEventFilterCustomTitleFilter>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AlertingProfileEventTypeFilterCustomEventFilterCustomDescriptionFilter {
    caseInsensitive?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface AlertingProfileEventTypeFilterCustomEventFilterCustomTitleFilter {
    caseInsensitive?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface AlertingProfileEventTypeFilterPredefinedEventFilter {
    eventType: pulumi.Input<string>;
    negate?: pulumi.Input<boolean>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AlertingProfileMetadata {
    /**
     * Dynatrace server version
     */
    clusterVersion?: pulumi.Input<string>;
    /**
     * A Sorted list of the version numbers of the configuration
     */
    configurationVersions?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A Sorted list of the version numbers of the configuration
     */
    currentConfigurationVersions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AlertingProfileRule {
    /**
     * Send a notification if a problem remains open longer than *X* minutes
     */
    delayInMinutes: pulumi.Input<number>;
    /**
     * The severity level to trigger the alert. Possible values are `AVAILABILITY`,	`CUSTOM_ALERT`,	`ERROR`,`MONITORING_UNAVAILABLE`,`PERFORMANCE` and `RESOURCE_CONTENTION`.
     */
    severityLevel: pulumi.Input<string>;
    /**
     * Configuration of the tag filtering of the alerting profile
     */
    tagFilters: pulumi.Input<pulumi.Input<inputs.AlertingProfileRuleTagFilter>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AlertingProfileRuleTagFilter {
    includeMode: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<inputs.AlertingProfileRuleTagFilterTagFilter>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AlertingProfileRuleTagFilterTagFilter {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AlertingRules {
    /**
     * A conditions for the metric usage
     */
    rules?: pulumi.Input<pulumi.Input<inputs.AlertingRulesRule>[]>;
}

export interface AlertingRulesRule {
    delayInMinutes: pulumi.Input<number>;
    includeMode: pulumi.Input<string>;
    severityLevel: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ApiDetectionConditions {
    conditions: pulumi.Input<pulumi.Input<inputs.ApiDetectionConditionsCondition>[]>;
}

export interface ApiDetectionConditionsCondition {
    base: pulumi.Input<string>;
    matcher: pulumi.Input<string>;
    pattern: pulumi.Input<string>;
}

export interface ApplicationAnomaliesFailureRate {
    /**
     * Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
     */
    auto?: pulumi.Input<inputs.ApplicationAnomaliesFailureRateAuto>;
    /**
     * Fixed thresholds for failure rate increase detection
     */
    thresholds?: pulumi.Input<inputs.ApplicationAnomaliesFailureRateThresholds>;
}

export interface ApplicationAnomaliesFailureRateAuto {
    absolute: pulumi.Input<number>;
    relative: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ApplicationAnomaliesFailureRateThresholds {
    sensitivity: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ApplicationAnomaliesResponseTime {
    /**
     * Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
     */
    auto?: pulumi.Input<inputs.ApplicationAnomaliesResponseTimeAuto>;
    /**
     * Fixed thresholds for response time degradation detection
     */
    thresholds?: pulumi.Input<inputs.ApplicationAnomaliesResponseTimeThresholds>;
}

export interface ApplicationAnomaliesResponseTimeAuto {
    load: pulumi.Input<string>;
    milliseconds: pulumi.Input<number>;
    percent: pulumi.Input<number>;
    slowestMilliseconds: pulumi.Input<number>;
    slowestPercent: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ApplicationAnomaliesResponseTimeThresholds {
    load: pulumi.Input<string>;
    milliseconds: pulumi.Input<number>;
    sensitivity: pulumi.Input<string>;
    slowestMilliseconds: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ApplicationAnomaliesTraffic {
    /**
     * The configuration of traffic drops detection
     */
    drops?: pulumi.Input<inputs.ApplicationAnomaliesTrafficDrops>;
    /**
     * The configuration of traffic spikes detection
     */
    spikes?: pulumi.Input<inputs.ApplicationAnomaliesTrafficSpikes>;
}

export interface ApplicationAnomaliesTrafficDrops {
    enabled: pulumi.Input<boolean>;
    percent?: pulumi.Input<number>;
}

export interface ApplicationAnomaliesTrafficSpikes {
    enabled: pulumi.Input<boolean>;
    percent?: pulumi.Input<number>;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacy {
    /**
     * (Field has overlap with `dynatrace.SessionReplayWebPrivacy`) Content masking settings for Session Replay.
     */
    contentMaskingSettings: pulumi.Input<inputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettings>;
    optIn?: pulumi.Input<boolean>;
    urlExclusionRules?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettings {
    playback: pulumi.Input<inputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlayback>;
    recording: pulumi.Input<inputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecording>;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlayback {
    preset: pulumi.Input<string>;
    rules?: pulumi.Input<inputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRules>;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRules {
    rules: pulumi.Input<pulumi.Input<inputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesRule>[]>;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesRule {
    selector: pulumi.Input<string>;
    type: pulumi.Input<string>;
    userInteractionHidden?: pulumi.Input<boolean>;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecording {
    preset: pulumi.Input<string>;
    rules?: pulumi.Input<inputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRules>;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRules {
    rules: pulumi.Input<pulumi.Input<inputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesRule>[]>;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesRule {
    selector: pulumi.Input<string>;
    type: pulumi.Input<string>;
    userInteractionHidden?: pulumi.Input<boolean>;
}

export interface ApplicationDetectionRuleFilterConfig {
    /**
     * Where to look for the pattern value, possible values are `DOMAIN` or `URL`
     */
    applicationMatchTarget: pulumi.Input<string>;
    /**
     * The operator used for matching the application detection rule, possible values are `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `MATCHES`
     */
    applicationMatchType: pulumi.Input<string>;
    /**
     * The value to look for with the application detection rule
     */
    pattern: pulumi.Input<string>;
}

export interface ApplicationErrorRulesCustomErrors {
    /**
     * Configuration of the custom error in the web application
     */
    rules: pulumi.Input<pulumi.Input<inputs.ApplicationErrorRulesCustomErrorsRule>[]>;
}

export interface ApplicationErrorRulesCustomErrorsRule {
    capture?: pulumi.Input<boolean>;
    customAlerting?: pulumi.Input<boolean>;
    impactApdex?: pulumi.Input<boolean>;
    keyMatcher?: pulumi.Input<string>;
    keyPattern?: pulumi.Input<string>;
    valueMatcher?: pulumi.Input<string>;
    valuePattern?: pulumi.Input<string>;
}

export interface ApplicationErrorRulesHttpErrors {
    /**
     * Configuration of the HTTP error in the web application
     */
    rules: pulumi.Input<pulumi.Input<inputs.ApplicationErrorRulesHttpErrorsRule>[]>;
}

export interface ApplicationErrorRulesHttpErrorsRule {
    capture?: pulumi.Input<boolean>;
    considerBlockedRequests?: pulumi.Input<boolean>;
    considerForAi?: pulumi.Input<boolean>;
    considerUnknownErrorCode?: pulumi.Input<boolean>;
    errorCodes?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterByUrl?: pulumi.Input<boolean>;
    impactApdex?: pulumi.Input<boolean>;
    url?: pulumi.Input<string>;
}

export interface AutotagEntitySelectorBasedRule {
    enabled?: pulumi.Input<boolean>;
    normalization?: pulumi.Input<string>;
    selector?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    valueFormat?: pulumi.Input<string>;
}

export interface AutotagRule {
    conditions?: pulumi.Input<pulumi.Input<inputs.AutotagRuleCondition>[]>;
    enabled?: pulumi.Input<boolean>;
    normalization?: pulumi.Input<string>;
    propagationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    valueFormat?: pulumi.Input<string>;
}

export interface AutotagRuleCondition {
    /**
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionApplicationTypeComparison>[]>;
    applicationTypes?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionApplicationType>[]>;
    azureComputeModeComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionAzureComputeModeComparison>[]>;
    /**
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionAzureComputeMode>[]>;
    /**
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionAzureSkuComparision>[]>;
    azureSkus?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionAzureSkus>[]>;
    /**
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionBaseComparisonBasic>[]>;
    /**
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionBaseConditionKey>[]>;
    /**
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionBitnessComparision>[]>;
    bitnesses?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionBitness>[]>;
    /**
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionCloudTypeComparison>[]>;
    cloudTypes?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionCloudType>[]>;
    comparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionComparison>[]>;
    /**
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionCustomApplicationTypeComparison>[]>;
    customApplicationTypes?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionCustomApplicationType>[]>;
    /**
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionCustomHostMetadataConditionKey>[]>;
    customHostMetadatas?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionCustomHostMetadata>[]>;
    /**
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionCustomProcessMetadataConditionKey>[]>;
    customProcessMetadatas?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionCustomProcessMetadata>[]>;
    databaseTopologies?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionDatabaseTopology>[]>;
    /**
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionDatabaseTopologyComparison>[]>;
    /**
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionDcrumDecoderComparison>[]>;
    dcrumDecoders?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionDcrumDecoder>[]>;
    entities?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionEntity>[]>;
    /**
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionEntityIdComparison>[]>;
    hostTeches?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionHostTech>[]>;
    /**
     * @deprecated `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionHypervisorTypeComparision>[]>;
    hypervisors?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionHypervisor>[]>;
    /**
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIndexedNameComparison>[]>;
    indexedNames?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIndexedName>[]>;
    /**
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIndexedStringComparison>[]>;
    indexedStrings?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIndexedString>[]>;
    /**
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIndexedTagComparison>[]>;
    indexedTags?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIndexedTag>[]>;
    /**
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIntegerComparison>[]>;
    integers?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionInteger>[]>;
    /**
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIpaddressComparison>[]>;
    ipaddresses?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIpaddress>[]>;
    keys?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionKey>[]>;
    /**
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionMobilePlatformComparison>[]>;
    mobilePlatforms?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionMobilePlatform>[]>;
    osArches?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionOsArch>[]>;
    osTypes?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionOsType>[]>;
    /**
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionOsarchitectureComparison>[]>;
    /**
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionOstypeComparison>[]>;
    /**
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionPaasTypeComparison>[]>;
    paasTypes?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionPaasType>[]>;
    /**
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionProcessMetadataConditionKey>[]>;
    processMetadatas?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionProcessMetadata>[]>;
    serviceTopologies?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionServiceTopology>[]>;
    /**
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionServiceTopologyComparison>[]>;
    /**
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionServiceTypeComparison>[]>;
    serviceTypes?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionServiceType>[]>;
    /**
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionSimpleHostTechComparison>[]>;
    /**
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionSimpleTechComparison>[]>;
    /**
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionStringComparison>[]>;
    /**
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionStringConditionKey>[]>;
    stringKeys?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionStringKey>[]>;
    strings?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionString>[]>;
    /**
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionSyntheticEngineTypeComparison>[]>;
    syntheticEngines?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionSyntheticEngine>[]>;
    /**
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionTagComparison>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionTag>[]>;
    teches?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionTech>[]>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionAzureComputeMode {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionAzureComputeModeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionAzureSkuComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionAzureSkus {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionBaseComparisonBasic {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionBaseConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionBitness {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionBitnessComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCloudType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCloudTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionComparison {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomHostMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.AutotagRuleConditionCustomHostMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomHostMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.AutotagRuleConditionCustomHostMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomHostMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomHostMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.AutotagRuleConditionCustomProcessMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.AutotagRuleConditionCustomProcessMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomProcessMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomProcessMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionDatabaseTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionDatabaseTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionDcrumDecoder {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionDcrumDecoderComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionEntity {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionEntityIdComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionHostTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AutotagRuleConditionHostTechValue>;
}

export interface AutotagRuleConditionHostTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface AutotagRuleConditionHypervisor {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionHypervisorTypeComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionIndexedName {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionIndexedNameComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionIndexedString {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionIndexedStringComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionIndexedTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AutotagRuleConditionIndexedTagValue>;
}

export interface AutotagRuleConditionIndexedTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AutotagRuleConditionIndexedTagComparisonValue>;
}

export interface AutotagRuleConditionIndexedTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionIndexedTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionInteger {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface AutotagRuleConditionIntegerComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface AutotagRuleConditionIpaddress {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionIpaddressComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionMobilePlatform {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionMobilePlatformComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionOsArch {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionOsType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionOsarchitectureComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionOstypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionPaasType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionPaasTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionServiceTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionServiceTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionServiceType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionServiceTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionSimpleHostTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AutotagRuleConditionSimpleHostTechComparisonValue>;
}

export interface AutotagRuleConditionSimpleHostTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface AutotagRuleConditionSimpleTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AutotagRuleConditionSimpleTechComparisonValue>;
}

export interface AutotagRuleConditionSimpleTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface AutotagRuleConditionString {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionStringComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionStringConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionStringKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionSyntheticEngine {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionSyntheticEngineTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AutotagRuleConditionTagValue>;
}

export interface AutotagRuleConditionTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AutotagRuleConditionTagComparisonValue>;
}

export interface AutotagRuleConditionTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AutotagRuleConditionTechValue>;
}

export interface AutotagRuleConditionTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface AutotagV2Rules {
    rules: pulumi.Input<pulumi.Input<inputs.AutotagV2RulesRule>[]>;
}

export interface AutotagV2RulesRule {
    attributeRule?: pulumi.Input<inputs.AutotagV2RulesRuleAttributeRule>;
    enabled: pulumi.Input<boolean>;
    entitySelector?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    valueFormat?: pulumi.Input<string>;
    valueNormalization: pulumi.Input<string>;
}

export interface AutotagV2RulesRuleAttributeRule {
    azureToPgpropagation?: pulumi.Input<boolean>;
    azureToServicePropagation?: pulumi.Input<boolean>;
    conditions: pulumi.Input<inputs.AutotagV2RulesRuleAttributeRuleConditions>;
    entityType: pulumi.Input<string>;
    hostToPgpropagation?: pulumi.Input<boolean>;
    pgToHostPropagation?: pulumi.Input<boolean>;
    pgToServicePropagation?: pulumi.Input<boolean>;
    serviceToHostPropagation?: pulumi.Input<boolean>;
    serviceToPgpropagation?: pulumi.Input<boolean>;
}

export interface AutotagV2RulesRuleAttributeRuleConditions {
    conditions: pulumi.Input<pulumi.Input<inputs.AutotagV2RulesRuleAttributeRuleConditionsCondition>[]>;
}

export interface AutotagV2RulesRuleAttributeRuleConditionsCondition {
    caseSensitive?: pulumi.Input<boolean>;
    dynamicKey?: pulumi.Input<string>;
    dynamicKeySource?: pulumi.Input<string>;
    entityId?: pulumi.Input<string>;
    enumValue?: pulumi.Input<string>;
    integerValue?: pulumi.Input<number>;
    key: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    stringValue?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface AwsAnomaliesEc2CandidateHighCpuDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: pulumi.Input<inputs.AwsAnomaliesEc2CandidateHighCpuDetectionCustomThresholds>;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface AwsAnomaliesEc2CandidateHighCpuDetectionCustomThresholds {
    cpuUsage: pulumi.Input<number>;
}

export interface AwsAnomaliesElbHighConnectionErrorsDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: pulumi.Input<inputs.AwsAnomaliesElbHighConnectionErrorsDetectionCustomThresholds>;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface AwsAnomaliesElbHighConnectionErrorsDetectionCustomThresholds {
    connectionErrorsPerMinute: pulumi.Input<number>;
}

export interface AwsAnomaliesLambdaHighErrorRateDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: pulumi.Input<inputs.AwsAnomaliesLambdaHighErrorRateDetectionCustomThresholds>;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface AwsAnomaliesLambdaHighErrorRateDetectionCustomThresholds {
    failedInvocationsRate: pulumi.Input<number>;
}

export interface AwsAnomaliesRdsHighCpuDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: pulumi.Input<inputs.AwsAnomaliesRdsHighCpuDetectionCustomThresholds>;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface AwsAnomaliesRdsHighCpuDetectionCustomThresholds {
    cpuUsage: pulumi.Input<number>;
}

export interface AwsAnomaliesRdsHighMemoryDetection {
    /**
     * Alert if **both** conditions is met in 3 out of 5 samples
     */
    customThresholds?: pulumi.Input<inputs.AwsAnomaliesRdsHighMemoryDetectionCustomThresholds>;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface AwsAnomaliesRdsHighMemoryDetectionCustomThresholds {
    freeMemory: pulumi.Input<number>;
    swapUsage: pulumi.Input<number>;
}

export interface AwsAnomaliesRdsHighWriteReadLatencyDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: pulumi.Input<inputs.AwsAnomaliesRdsHighWriteReadLatencyDetectionCustomThresholds>;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface AwsAnomaliesRdsHighWriteReadLatencyDetectionCustomThresholds {
    readWriteLatency: pulumi.Input<number>;
}

export interface AwsAnomaliesRdsLowStorageDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: pulumi.Input<inputs.AwsAnomaliesRdsLowStorageDetectionCustomThresholds>;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface AwsAnomaliesRdsLowStorageDetectionCustomThresholds {
    freeStoragePercentage: pulumi.Input<number>;
}

export interface AwsAnomaliesRdsRestartsSequenceDetection {
    /**
     * Alert if the condition is met in 2 out of 20 samples
     */
    customThresholds?: pulumi.Input<inputs.AwsAnomaliesRdsRestartsSequenceDetectionCustomThresholds>;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface AwsAnomaliesRdsRestartsSequenceDetectionCustomThresholds {
    restartsPerMinute: pulumi.Input<number>;
}

export interface AwsCredentialsAuthenticationData {
    /**
     * the access key
     */
    accessKey?: pulumi.Input<string>;
    /**
     * the ID of the Amazon account
     */
    accountId?: pulumi.Input<string>;
    /**
     * (Read only) the external ID token for setting an IAM role. You can obtain it with the `GET /aws/iamExternalId` request
     */
    externalId?: pulumi.Input<string>;
    /**
     * the IAM role to be used by Dynatrace to get monitoring data
     */
    iamRole?: pulumi.Input<string>;
    /**
     * the secret access key
     */
    secretKey?: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AwsCredentialsSupportingServicesToMonitor {
    /**
     * a list of metrics to be monitored for this service
     */
    monitoredMetrics?: pulumi.Input<pulumi.Input<inputs.AwsCredentialsSupportingServicesToMonitorMonitoredMetric>[]>;
    /**
     * the name of the supporting service
     */
    name?: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AwsCredentialsSupportingServicesToMonitorMonitoredMetric {
    dimensions?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    statistic?: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AwsCredentialsTagsToMonitor {
    /**
     * the key of the AWS tag.
     */
    name?: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * the value of the AWS tag
     */
    value?: pulumi.Input<string>;
}

export interface AzureCredentialsMonitorOnlyExcludingTagPair {
    /**
     * The name of the tag.
     */
    name?: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The value of the tag.   If set to `null`, then resources with any value of the tag are monitored.
     */
    value?: pulumi.Input<string>;
}

export interface AzureCredentialsMonitorOnlyTagPair {
    /**
     * The name of the tag.
     */
    name?: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The value of the tag.   If set to `null`, then resources with any value of the tag are monitored.
     */
    value?: pulumi.Input<string>;
}

export interface AzureCredentialsSupportingService {
    /**
     * A list of Azure tags to be monitored.  You can specify up to 10 tags. A resource tagged with *any* of the specified tags is monitored.  Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`
     */
    monitoredMetrics?: pulumi.Input<pulumi.Input<inputs.AzureCredentialsSupportingServiceMonitoredMetric>[]>;
    /**
     * The name of the supporting service.
     */
    name?: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AzureCredentialsSupportingServiceMonitoredMetric {
    dimensions?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface BrowserMonitorAnomalyDetection {
    /**
     * Thresholds for loading times
     */
    loadingTimeThresholds?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorAnomalyDetectionLoadingTimeThreshold>[]>;
    /**
     * Outage handling configuration
     */
    outageHandlings?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorAnomalyDetectionOutageHandling>[]>;
}

export interface BrowserMonitorAnomalyDetectionLoadingTimeThreshold {
    enabled?: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorAnomalyDetectionLoadingTimeThresholdThreshold>[]>;
}

export interface BrowserMonitorAnomalyDetectionLoadingTimeThresholdThreshold {
    thresholds: pulumi.Input<pulumi.Input<inputs.BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold>[]>;
}

export interface BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold {
    eventIndex?: pulumi.Input<number>;
    requestIndex?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    valueMs: pulumi.Input<number>;
}

export interface BrowserMonitorAnomalyDetectionOutageHandling {
    globalOutage?: pulumi.Input<boolean>;
    globalOutagePolicies?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy>[]>;
    localOutage?: pulumi.Input<boolean>;
    localOutagePolicies?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy>[]>;
    retryOnError?: pulumi.Input<boolean>;
}

export interface BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy {
    consecutiveRuns: pulumi.Input<number>;
}

export interface BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy {
    affectedLocations: pulumi.Input<number>;
    consecutiveRuns: pulumi.Input<number>;
}

export interface BrowserMonitorKeyPerformanceMetrics {
    /**
     * Defines the key performance metric for load actions. Supported values are `VISUALLY_COMPLETE`, `SPEED_INDEX`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE`, `HTML_DOWNLOADED`, `DOM_INTERACTIVE`, `LOAD_EVENT_START` and `LOAD_EVENT_END`.
     */
    loadActionKpm: pulumi.Input<string>;
    /**
     * Defines the key performance metric for XHR actions. Supported values are `VISUALLY_COMPLETE`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE` and `RESPONSE_END`.
     */
    xhrActionKpm: pulumi.Input<string>;
}

export interface BrowserMonitorPerformanceThresholds {
    thresholds: pulumi.Input<pulumi.Input<inputs.BrowserMonitorPerformanceThresholdsThreshold>[]>;
}

export interface BrowserMonitorPerformanceThresholdsThreshold {
    event: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
}

export interface BrowserMonitorScript {
    /**
     * The setup of the monitor
     */
    configuration?: pulumi.Input<inputs.BrowserMonitorScriptConfiguration>;
    /**
     * Steps of the clickpath—the first step must always be of the `navigate` type
     */
    events?: pulumi.Input<inputs.BrowserMonitorScriptEvents>;
    /**
     * The type of monitor. Possible values are `clickpath` for clickpath monitors and `availability` for single-URL browser monitors. These monitors are only allowed to have one event of the `navigate` type
     */
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptConfiguration {
    bandwidth?: pulumi.Input<inputs.BrowserMonitorScriptConfigurationBandwidth>;
    blocks?: pulumi.Input<pulumi.Input<string>[]>;
    bypassCsp?: pulumi.Input<boolean>;
    cookies?: pulumi.Input<inputs.BrowserMonitorScriptConfigurationCookies>;
    device?: pulumi.Input<inputs.BrowserMonitorScriptConfigurationDevice>;
    disableWebSecurity?: pulumi.Input<boolean>;
    headers?: pulumi.Input<inputs.BrowserMonitorScriptConfigurationHeaders>;
    ignoredErrorCodes?: pulumi.Input<inputs.BrowserMonitorScriptConfigurationIgnoredErrorCodes>;
    javascriptSetttings?: pulumi.Input<inputs.BrowserMonitorScriptConfigurationJavascriptSetttings>;
    monitorFrames?: pulumi.Input<boolean>;
    userAgent?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptConfigurationBandwidth {
    download?: pulumi.Input<number>;
    latency?: pulumi.Input<number>;
    networkType?: pulumi.Input<string>;
    upload?: pulumi.Input<number>;
}

export interface BrowserMonitorScriptConfigurationCookies {
    cookies: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptConfigurationCookiesCookie>[]>;
}

export interface BrowserMonitorScriptConfigurationCookiesCookie {
    domain: pulumi.Input<string>;
    name: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptConfigurationDevice {
    height?: pulumi.Input<number>;
    mobile?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    orientation?: pulumi.Input<string>;
    scaleFactor?: pulumi.Input<number>;
    touchEnabled?: pulumi.Input<boolean>;
    width?: pulumi.Input<number>;
}

export interface BrowserMonitorScriptConfigurationHeaders {
    headers: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptConfigurationHeadersHeader>[]>;
    restrictions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BrowserMonitorScriptConfigurationHeadersHeader {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptConfigurationIgnoredErrorCodes {
    matchingDocumentRequests?: pulumi.Input<string>;
    statusCodes: pulumi.Input<string>;
}

export interface BrowserMonitorScriptConfigurationJavascriptSetttings {
    customProperties?: pulumi.Input<string>;
    timeoutSettings?: pulumi.Input<inputs.BrowserMonitorScriptConfigurationJavascriptSetttingsTimeoutSettings>;
    visuallyCompleteOptions?: pulumi.Input<inputs.BrowserMonitorScriptConfigurationJavascriptSetttingsVisuallyCompleteOptions>;
}

export interface BrowserMonitorScriptConfigurationJavascriptSetttingsTimeoutSettings {
    actionLimit: pulumi.Input<number>;
    totalTimeout: pulumi.Input<number>;
}

export interface BrowserMonitorScriptConfigurationJavascriptSetttingsVisuallyCompleteOptions {
    excludedElements?: pulumi.Input<pulumi.Input<string>[]>;
    excludedUrls?: pulumi.Input<pulumi.Input<string>[]>;
    imageSizeThreshold: pulumi.Input<number>;
    inactivityTimeout: pulumi.Input<number>;
    mutationTimeout: pulumi.Input<number>;
}

export interface BrowserMonitorScriptEvents {
    events?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEvent>[]>;
}

export interface BrowserMonitorScriptEventsEvent {
    click?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventClick>;
    cookie?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventCookie>;
    description: pulumi.Input<string>;
    javascript?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascript>;
    keystrokes?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokes>;
    navigate?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigate>;
    select?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelect>;
    tap?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventTap>;
}

export interface BrowserMonitorScriptEventsEventClick {
    button: pulumi.Input<number>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickTarget>;
    validate?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickValidate>;
    wait?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickWait>;
}

export interface BrowserMonitorScriptEventsEventClickTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventClickTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventClickTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventClickValidate {
    validations: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickValidateValidation>[]>;
}

export interface BrowserMonitorScriptEventsEventClickValidateValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickValidateValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventClickValidateValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickValidateValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventClickValidateValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventClickWait {
    milliseconds?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    validation?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickWaitValidation>;
    waitFor: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventClickWaitValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickWaitValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventClickWaitValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickWaitValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventClickWaitValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventCookie {
    cookies: pulumi.Input<inputs.BrowserMonitorScriptEventsEventCookieCookies>;
}

export interface BrowserMonitorScriptEventsEventCookieCookies {
    cookies: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventCookieCookiesCookie>[]>;
}

export interface BrowserMonitorScriptEventsEventCookieCookiesCookie {
    domain: pulumi.Input<string>;
    name: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventJavascript {
    code: pulumi.Input<string>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascriptTarget>;
    wait?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascriptWait>;
}

export interface BrowserMonitorScriptEventsEventJavascriptTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascriptTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventJavascriptTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascriptTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventJavascriptTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventJavascriptWait {
    milliseconds?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    validation?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascriptWaitValidation>;
    waitFor: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventJavascriptWaitValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascriptWaitValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventJavascriptWaitValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokes {
    credential?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesCredential>;
    masked?: pulumi.Input<boolean>;
    simulateBlurEvent?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesTarget>;
    text?: pulumi.Input<string>;
    validate?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesValidate>;
    wait?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesWait>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesCredential {
    field: pulumi.Input<string>;
    vaultId: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidate {
    validations: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesValidateValidation>[]>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidateValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesValidateValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidateValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWait {
    milliseconds?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    validation?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesWaitValidation>;
    waitFor: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWaitValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesWaitValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWaitValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigate {
    authentication?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateAuthentication>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateTarget>;
    url: pulumi.Input<string>;
    validate?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateValidate>;
    wait?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateWait>;
}

export interface BrowserMonitorScriptEventsEventNavigateAuthentication {
    creds: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventNavigateTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateValidate {
    validations: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateValidateValidation>[]>;
}

export interface BrowserMonitorScriptEventsEventNavigateValidateValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateValidateValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateValidateValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateWait {
    milliseconds?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    validation?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateWaitValidation>;
    waitFor: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateWaitValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateWaitValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateWaitValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelect {
    selections: pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectSelections>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectTarget>;
    validate?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectValidate>;
    wait?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectWait>;
}

export interface BrowserMonitorScriptEventsEventSelectSelections {
    options: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectSelectionsOption>[]>;
}

export interface BrowserMonitorScriptEventsEventSelectSelectionsOption {
    index: pulumi.Input<number>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventSelectTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectValidate {
    validations: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectValidateValidation>[]>;
}

export interface BrowserMonitorScriptEventsEventSelectValidateValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectValidateValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectValidateValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectWait {
    milliseconds?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    validation?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectWaitValidation>;
    waitFor: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectWaitValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectWaitValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectWaitValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTap {
    button: pulumi.Input<number>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapTarget>;
    validate?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapValidate>;
    wait?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapWait>;
}

export interface BrowserMonitorScriptEventsEventTapTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTapTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventTapTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTapValidate {
    validations: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapValidateValidation>[]>;
}

export interface BrowserMonitorScriptEventsEventTapValidateValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapValidateValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTapValidateValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapValidateValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTapValidateValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTapWait {
    milliseconds?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    validation?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapWaitValidation>;
    waitFor: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTapWaitValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapWaitValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTapWaitValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapWaitValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTapWaitValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorTag {
    /**
     * Tag with source of a Dynatrace entity.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorTagTag>[]>;
}

export interface BrowserMonitorTagTag {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface BusinessEventsOneagentEvent {
    /**
     * Event category
     */
    category: pulumi.Input<inputs.BusinessEventsOneagentEventCategory>;
    /**
     * Additional attributes for the business event.
     */
    data?: pulumi.Input<inputs.BusinessEventsOneagentEventData>;
    /**
     * Event provider
     */
    provider: pulumi.Input<inputs.BusinessEventsOneagentEventProvider>;
    /**
     * Event type
     */
    type: pulumi.Input<inputs.BusinessEventsOneagentEventType>;
}

export interface BusinessEventsOneagentEventCategory {
    path?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sourceType: pulumi.Input<string>;
}

export interface BusinessEventsOneagentEventData {
    eventDataFieldComplexes: pulumi.Input<pulumi.Input<inputs.BusinessEventsOneagentEventDataEventDataFieldComplex>[]>;
}

export interface BusinessEventsOneagentEventDataEventDataFieldComplex {
    name: pulumi.Input<string>;
    source: pulumi.Input<inputs.BusinessEventsOneagentEventDataEventDataFieldComplexSource>;
}

export interface BusinessEventsOneagentEventDataEventDataFieldComplexSource {
    path?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sourceType: pulumi.Input<string>;
}

export interface BusinessEventsOneagentEventProvider {
    path?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sourceType: pulumi.Input<string>;
}

export interface BusinessEventsOneagentEventType {
    path?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sourceType: pulumi.Input<string>;
}

export interface BusinessEventsOneagentTriggers {
    triggers: pulumi.Input<pulumi.Input<inputs.BusinessEventsOneagentTriggersTrigger>[]>;
}

export interface BusinessEventsOneagentTriggersTrigger {
    caseSensitive?: pulumi.Input<boolean>;
    source: pulumi.Input<inputs.BusinessEventsOneagentTriggersTriggerSource>;
    type: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface BusinessEventsOneagentTriggersTriggerSource {
    dataSource: pulumi.Input<string>;
    path?: pulumi.Input<string>;
}

export interface BusinessEventsProcessingRuleTesting {
    sampleEvent: pulumi.Input<string>;
}

export interface BusinessEventsProcessingTransformationFields {
    transformationFields: pulumi.Input<pulumi.Input<inputs.BusinessEventsProcessingTransformationFieldsTransformationField>[]>;
}

export interface BusinessEventsProcessingTransformationFieldsTransformationField {
    array: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    optional: pulumi.Input<boolean>;
    readonly: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
}

export interface CalculatedServiceMetricCondition {
    conditions?: pulumi.Input<pulumi.Input<inputs.CalculatedServiceMetricConditionCondition>[]>;
}

export interface CalculatedServiceMetricConditionCondition {
    attribute: pulumi.Input<string>;
    comparison: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparison>;
    unknowns?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparison {
    boolean?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonBoolean>;
    esbInputNodeType?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonEsbInputNodeType>;
    failedState?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonFailedState>;
    failureReason?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonFailureReason>;
    fastString?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonFastString>;
    flawState?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonFlawState>;
    generic?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonGeneric>;
    httpMethod?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonHttpMethod>;
    httpStatusClass?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonHttpStatusClass>;
    iibInputNodeType?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonIibInputNodeType>;
    negate?: pulumi.Input<boolean>;
    number?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonNumber>;
    numberRequestAttribute?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonNumberRequestAttribute>;
    serviceType?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonServiceType>;
    string?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonString>;
    stringRequestAttribute?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonStringRequestAttribute>;
    tag?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonTag>;
    zosCallType?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonZosCallType>;
}

export interface CalculatedServiceMetricConditionConditionComparisonBoolean {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value: pulumi.Input<boolean>;
    values?: pulumi.Input<pulumi.Input<boolean>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonEsbInputNodeType {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonFailedState {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonFailureReason {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonFastString {
    caseSensitive?: pulumi.Input<boolean>;
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonFlawState {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonGeneric {
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonHttpMethod {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonHttpStatusClass {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonIibInputNodeType {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonNumber {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
    values?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonNumberRequestAttribute {
    matchOnChildCalls?: pulumi.Input<boolean>;
    operator?: pulumi.Input<string>;
    requestAttribute: pulumi.Input<string>;
    source?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSource>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
    values?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSource {
    managementZone?: pulumi.Input<string>;
    serviceTag?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTag>;
    unknowns?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTag {
    context?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    tagKey?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagTagKey>;
    value?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagTagKey {
    context?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonServiceType {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonString {
    caseSensitive?: pulumi.Input<boolean>;
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonStringRequestAttribute {
    caseSensitive?: pulumi.Input<boolean>;
    matchOnChildCalls?: pulumi.Input<boolean>;
    operator?: pulumi.Input<string>;
    requestAttribute: pulumi.Input<string>;
    source?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSource>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSource {
    managementZone?: pulumi.Input<string>;
    serviceTag?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTag>;
    unknowns?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTag {
    context?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    tagKey?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagTagKey>;
    value?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagTagKey {
    context?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonTag {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonTagValue>;
    values?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonTagValues>;
}

export interface CalculatedServiceMetricConditionConditionComparisonTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonTagValues {
    values?: pulumi.Input<pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonTagValuesValue>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonTagValuesValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonZosCallType {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricDimensionDefinition {
    dimension: pulumi.Input<string>;
    name: pulumi.Input<string>;
    placeholders?: pulumi.Input<inputs.CalculatedServiceMetricDimensionDefinitionPlaceholders>;
    topX: pulumi.Input<number>;
    topXAggregation: pulumi.Input<string>;
    topXDirection: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholders {
    placeholders?: pulumi.Input<pulumi.Input<inputs.CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholder>[]>;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholder {
    aggregation?: pulumi.Input<string>;
    attribute: pulumi.Input<string>;
    delimiterOrRegex?: pulumi.Input<string>;
    endDelimiter?: pulumi.Input<string>;
    kind: pulumi.Input<string>;
    name: pulumi.Input<string>;
    normalization?: pulumi.Input<string>;
    requestAttribute?: pulumi.Input<string>;
    source?: pulumi.Input<inputs.CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSource>;
    unknowns?: pulumi.Input<string>;
    useFromChildCalls?: pulumi.Input<boolean>;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSource {
    managementZone?: pulumi.Input<string>;
    serviceTag?: pulumi.Input<inputs.CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag>;
    unknowns?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag {
    context?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    tagKey?: pulumi.Input<inputs.CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey>;
    value?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey {
    context?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricMetricDefinition {
    metric: pulumi.Input<string>;
    requestAttribute?: pulumi.Input<string>;
}

export interface CloudappWorkloaddetectionCloudFoundry {
    enabled: pulumi.Input<boolean>;
}

export interface CloudappWorkloaddetectionDocker {
    enabled: pulumi.Input<boolean>;
}

export interface CloudappWorkloaddetectionKubernetes {
    enabled: pulumi.Input<boolean>;
    filters?: pulumi.Input<inputs.CloudappWorkloaddetectionKubernetesFilters>;
}

export interface CloudappWorkloaddetectionKubernetesFilters {
    filters: pulumi.Input<pulumi.Input<inputs.CloudappWorkloaddetectionKubernetesFiltersFilter>[]>;
}

export interface CloudappWorkloaddetectionKubernetesFiltersFilter {
    enabled: pulumi.Input<boolean>;
    inclusionToggles: pulumi.Input<inputs.CloudappWorkloaddetectionKubernetesFiltersFilterInclusionToggles>;
    matchFilter: pulumi.Input<inputs.CloudappWorkloaddetectionKubernetesFiltersFilterMatchFilter>;
}

export interface CloudappWorkloaddetectionKubernetesFiltersFilterInclusionToggles {
    incBasepod: pulumi.Input<boolean>;
    incContainer: pulumi.Input<boolean>;
    incNamespace: pulumi.Input<boolean>;
    incProduct: pulumi.Input<boolean>;
    incStage: pulumi.Input<boolean>;
}

export interface CloudappWorkloaddetectionKubernetesFiltersFilterMatchFilter {
    matchOperator: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
}

export interface CredentialsCredentialUsageSummary {
    /**
     * The number of uses
     */
    count: pulumi.Input<number>;
    /**
     * Type of usage, `HTTP_MONITOR` or `BROWSER_MONITOR`
     */
    type: pulumi.Input<string>;
}

export interface CredentialsExternal {
    /**
     * Required for Hashicorp Certificate. The ID of Credentials within the Certificate Vault holding the certificate
     */
    certificate?: pulumi.Input<string>;
    /**
     * Required for Azure Client Secret. No further documentation available
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Required for Azure Client Secret. No further documentation available
     */
    clientid?: pulumi.Input<string>;
    /**
     * No documentation available
     */
    credentialsUsedForExternalSynchronizations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * No documentation available
     */
    passwordSecretName?: pulumi.Input<string>;
    /**
     * Required for Hashicorp App Role or Hashicorp Certificate. No further documentation available
     */
    pathToCredentials?: pulumi.Input<string>;
    /**
     * Required for Hashicorp App Role. No further documentation available
     */
    roleid?: pulumi.Input<string>;
    /**
     * Required for Hashicorp App Role. The ID of Credentials within the Certificate Vault holding the secret id
     */
    secretid?: pulumi.Input<string>;
    /**
     * Required for Azure Client Secret. No further documentation available
     */
    tenantid?: pulumi.Input<string>;
    /**
     * No documentation available
     */
    tokenSecretName?: pulumi.Input<string>;
    /**
     * No documentation available
     */
    usernameSecretName?: pulumi.Input<string>;
    /**
     * Required for Hashicorp App Role. No further documentation available
     */
    vaultNamespace?: pulumi.Input<string>;
    /**
     * No documentation available
     */
    vaultUrl?: pulumi.Input<string>;
}

export interface CustomAnomaliesDimension {
    /**
     * A generic definition for a filter
     */
    dimensions?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesDimensionDimension>[]>;
    /**
     * A filter for the metrics entity dimensions
     */
    entities?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesDimensionEntity>[]>;
    /**
     * A filter for the metrics string dimensions
     */
    strings?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesDimensionString>[]>;
}

export interface CustomAnomaliesDimensionDimension {
    index?: pulumi.Input<number>;
    key?: pulumi.Input<string>;
    /**
     * The name of the metric event displayed in the UI
     */
    name?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesDimensionEntity {
    filter: pulumi.Input<inputs.CustomAnomaliesDimensionEntityFilter>;
    key?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesDimensionEntityFilter {
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface CustomAnomaliesDimensionString {
    filter: pulumi.Input<inputs.CustomAnomaliesDimensionStringFilter>;
    index?: pulumi.Input<number>;
    key?: pulumi.Input<string>;
    /**
     * The name of the metric event displayed in the UI
     */
    name?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesDimensionStringFilter {
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface CustomAnomaliesScope {
    /**
     * A scope filter for the related custom device group name
     */
    customDeviceGroupNames?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeCustomDeviceGroupName>[]>;
    /**
     * A scope filter for a monitored entity identifier
     */
    entities?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeEntity>[]>;
    /**
     * A scope filter for the related host group name
     */
    hostGroupNames?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeHostGroupName>[]>;
    /**
     * A scope filter for the related host name
     */
    hostNames?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeHostName>[]>;
    /**
     * A scope filter for a management zone identifier
     */
    managementZones?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeManagementZone>[]>;
    /**
     * A scope filter for a monitored entity name
     */
    names?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeName>[]>;
    /**
     * A scope filter for a process group identifier
     */
    processGroupIds?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeProcessGroupId>[]>;
    /**
     * A scope filter for the related process group name
     */
    processGroupNames?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeProcessGroupName>[]>;
    /**
     * A generic scope filter
     */
    scopes?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeScope>[]>;
    /**
     * A scope filter for tags on entities
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeTag>[]>;
}

export interface CustomAnomaliesScopeCustomDeviceGroupName {
    filter: pulumi.Input<inputs.CustomAnomaliesScopeCustomDeviceGroupNameFilter>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeCustomDeviceGroupNameFilter {
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeEntity {
    /**
     * The ID of this resource.
     */
    id: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeHostGroupName {
    filter: pulumi.Input<inputs.CustomAnomaliesScopeHostGroupNameFilter>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeHostGroupNameFilter {
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeHostName {
    filter: pulumi.Input<inputs.CustomAnomaliesScopeHostNameFilter>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeHostNameFilter {
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeManagementZone {
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeName {
    filter: pulumi.Input<inputs.CustomAnomaliesScopeNameFilter>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeNameFilter {
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeProcessGroupId {
    /**
     * The ID of this resource.
     */
    id: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeProcessGroupName {
    filter: pulumi.Input<inputs.CustomAnomaliesScopeProcessGroupNameFilter>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeProcessGroupNameFilter {
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeScope {
    type: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeTag {
    filter: pulumi.Input<inputs.CustomAnomaliesScopeTagFilter>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeTagFilter {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface CustomAnomaliesStrategy {
    /**
     * An auto-adaptive baseline strategy to detect anomalies within metrics that show a regular change over time, as the baseline is also updated automatically. An example is to detect an anomaly in the number of received network packets or within the number of user actions over time
     */
    auto?: pulumi.Input<inputs.CustomAnomaliesStrategyAuto>;
    /**
     * A generic monitoring strategy
     */
    generics?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesStrategyGeneric>[]>;
    /**
     * A static threshold monitoring strategy to alert on hard limits within a given metric. An example is the violation of a critical memory limit
     */
    static?: pulumi.Input<inputs.CustomAnomaliesStrategyStatic>;
}

export interface CustomAnomaliesStrategyAuto {
    alertCondition: pulumi.Input<string>;
    alertingOnMissingData?: pulumi.Input<boolean>;
    dealertingSamples: pulumi.Input<number>;
    samples: pulumi.Input<number>;
    signalFluctuations: pulumi.Input<number>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    violatingSamples: pulumi.Input<number>;
}

export interface CustomAnomaliesStrategyGeneric {
    type: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesStrategyStatic {
    alertCondition: pulumi.Input<string>;
    alertingOnMissingData?: pulumi.Input<boolean>;
    dealertingSamples: pulumi.Input<number>;
    samples: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
    unit: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    violatingSamples: pulumi.Input<number>;
}

export interface CustomAppAnomaliesErrorRateIncrease {
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Alert if the percentage of user actions affected by reported errors exceeds **both** the absolute threshold and the relative threshold
     */
    errorRateIncreaseAuto?: pulumi.Input<inputs.CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto>;
    /**
     * Alert if the custom reported error rate threshold is exceeded during any 5-minute period
     */
    errorRateIncreaseFixed?: pulumi.Input<inputs.CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed>;
}

export interface CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto {
    thresholdAbsolute: pulumi.Input<number>;
    thresholdRelative: pulumi.Input<number>;
}

export interface CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed {
    sensitivity: pulumi.Input<string>;
    thresholdAbsolute: pulumi.Input<number>;
}

export interface CustomAppAnomaliesSlowUserActions {
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * no documentation available
     */
    slowUserActionsAuto?: pulumi.Input<inputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsAuto>;
    /**
     * no documentation available
     */
    slowUserActionsFixed?: pulumi.Input<inputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsFixed>;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsAuto {
    durationAvoidOveralerting: pulumi.Input<inputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting>;
    durationThresholdAll: pulumi.Input<inputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll>;
    durationThresholdSlowest: pulumi.Input<inputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest>;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting {
    minActionRate: pulumi.Input<number>;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll {
    durationThreshold: pulumi.Input<number>;
    slowdownPercentage: pulumi.Input<number>;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest {
    durationThreshold: pulumi.Input<number>;
    slowdownPercentage: pulumi.Input<number>;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsFixed {
    durationAvoidOveralerting: pulumi.Input<inputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting>;
    durationThresholdAllFixed: pulumi.Input<inputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed>;
    durationThresholdSlowest: pulumi.Input<inputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest>;
    sensitivity: pulumi.Input<string>;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting {
    minActionRate: pulumi.Input<number>;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed {
    durationThreshold: pulumi.Input<number>;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest {
    durationThreshold: pulumi.Input<number>;
}

export interface CustomAppAnomaliesUnexpectedHighLoad {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic spikes within your application.
     */
    thresholdPercentage?: pulumi.Input<number>;
}

export interface CustomAppAnomaliesUnexpectedLowLoad {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic drops within your application.
     */
    thresholdPercentage?: pulumi.Input<number>;
}

export interface CustomAppCrashRateCrashRateIncrease {
    /**
     * Alert crash rate increases when auto-detected baseline is exceeded by a certain number of users
     */
    crashRateIncreaseAuto?: pulumi.Input<inputs.CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto>;
    /**
     * Alert crash rate increases when the defined threshold is exceeded by a certain number of users
     */
    crashRateIncreaseFixed?: pulumi.Input<inputs.CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed>;
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto {
    baselineViolationPercentage: pulumi.Input<number>;
    concurrentUsers: pulumi.Input<number>;
    sensitivity: pulumi.Input<string>;
}

export interface CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed {
    absoluteCrashRate: pulumi.Input<number>;
    concurrentUsers: pulumi.Input<number>;
}

export interface CustomAppEnablementRum {
    /**
     * (Field has overlap with `dynatrace.MobileApplication`) Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
     */
    costAndTrafficControl: pulumi.Input<number>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface CustomServiceRule {
    /**
     * Additional annotations filter of the rule. Only classes where all listed annotations are available in the class itself or any of its superclasses are instrumented. Not applicable to PHP
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully qualified class or interface to instrument (or a substring if matching to a string). Required for Java and .NET custom services. Not applicable to PHP
     */
    class?: pulumi.Input<inputs.CustomServiceRuleClass>;
    /**
     * Rule enabled/disabled
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The PHP file containing the class or methods to instrument. Required for PHP custom service. Not applicable to Java and .NET
     */
    file?: pulumi.Input<inputs.CustomServiceRuleFile>;
    /**
     * methods to instrument
     */
    methods: pulumi.Input<pulumi.Input<inputs.CustomServiceRuleMethod>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomServiceRuleClass {
    match?: pulumi.Input<string>;
    /**
     * The name of the custom service, displayed in the UI
     */
    name: pulumi.Input<string>;
}

export interface CustomServiceRuleFile {
    match?: pulumi.Input<string>;
    /**
     * The name of the custom service, displayed in the UI
     */
    name: pulumi.Input<string>;
}

export interface CustomServiceRuleMethod {
    arguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    modifiers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the custom service, displayed in the UI
     */
    name: pulumi.Input<string>;
    returns?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    visibility?: pulumi.Input<string>;
}

export interface CustomTagsTags {
    /**
     * A Tag Filter
     */
    filters?: pulumi.Input<pulumi.Input<inputs.CustomTagsTagsFilter>[]>;
}

export interface CustomTagsTagsFilter {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface DashboardDashboardMetadata {
    /**
     * The tile uses consistent colors when rendering its content
     */
    consistentColors?: pulumi.Input<boolean>;
    /**
     * Dashboard filter configuration of a dashboard
     */
    dynamicFilters?: pulumi.Input<inputs.DashboardDashboardMetadataDynamicFilters>;
    /**
     * Global filter Settings for the Dashboard
     */
    filter?: pulumi.Input<inputs.DashboardDashboardMetadataFilter>;
    /**
     * the name of the dashboard
     */
    name: pulumi.Input<string>;
    /**
     * the owner of the dashboard
     */
    owner: pulumi.Input<string>;
    /**
     * the dashboard is a preset (`true`) or not (`false`). Default is `false`.
     */
    preset?: pulumi.Input<boolean>;
    /**
     * the dashboard is shared (`true`) or private (`false`)
     *
     * @deprecated Please use the resource `dynatrace_dashboard_sharing` to configure share settings
     */
    shared?: pulumi.Input<boolean>;
    /**
     * represents sharing configuration of a dashboard
     *
     * @deprecated Please use the resource `dynatrace_dashboard_sharing` to configure share settings
     */
    sharingDetails?: pulumi.Input<inputs.DashboardDashboardMetadataSharingDetails>;
    /**
     * a set of tags assigned to the dashboard
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * No documentation available
     */
    tilesNameSize?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * a set of all possible global dashboard filters that can be applied to dashboard
     */
    validFilterKeys?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardDashboardMetadataDynamicFilters {
    filters: pulumi.Input<pulumi.Input<string>[]>;
    genericTagFilters?: pulumi.Input<inputs.DashboardDashboardMetadataDynamicFiltersGenericTagFilters>;
    tagSuggestionTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardDashboardMetadataDynamicFiltersGenericTagFilters {
    filters: pulumi.Input<pulumi.Input<inputs.DashboardDashboardMetadataDynamicFiltersGenericTagFiltersFilter>[]>;
}

export interface DashboardDashboardMetadataDynamicFiltersGenericTagFiltersFilter {
    entityTypes: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    suggestionsFromEntityType?: pulumi.Input<string>;
    tagKey?: pulumi.Input<string>;
}

export interface DashboardDashboardMetadataFilter {
    managementZones?: pulumi.Input<pulumi.Input<inputs.DashboardDashboardMetadataFilterManagementZone>[]>;
    timeframe?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardDashboardMetadataFilterManagementZone {
    description?: pulumi.Input<string>;
    /**
     * The ID of this resource.
     */
    id: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardDashboardMetadataSharingDetails {
    linkShared?: pulumi.Input<boolean>;
    published?: pulumi.Input<boolean>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardMetadata {
    /**
     * Dynatrace server version
     */
    clusterVersion?: pulumi.Input<string>;
    /**
     * A Sorted list of the version numbers of the configuration
     */
    configurationVersions?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A Sorted list of the version numbers of the configuration
     */
    currentConfigurationVersions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardSharingPermissions {
    /**
     * Access permissions of the dashboard
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.DashboardSharingPermissionsPermission>[]>;
}

export interface DashboardSharingPermissionsPermission {
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    level: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DashboardSharingPublic {
    /**
     * A list of management zones that can display data on the publicly shared dashboard.
     */
    managementZones: pulumi.Input<pulumi.Input<string>[]>;
    urls?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface DashboardTile {
    /**
     * The list of Dynatrace entities, assigned to the tile
     */
    assignedEntities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Auto Refresh is disabled (`true`)
     */
    autoRefreshDisabled?: pulumi.Input<boolean>;
    /**
     * the position and size of a tile
     */
    bounds?: pulumi.Input<inputs.DashboardTileBounds>;
    chartVisible?: pulumi.Input<boolean>;
    /**
     * The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`)
     */
    configured?: pulumi.Input<boolean>;
    /**
     * The name of the tile, set by user
     */
    customName?: pulumi.Input<string>;
    /**
     * Include (`false') or exclude (`true`) maintenance windows from availability calculations
     */
    excludeMaintenanceWindows?: pulumi.Input<boolean>;
    /**
     * is filter applied to a tile. It overrides dashboard's filter
     */
    filter?: pulumi.Input<inputs.DashboardTileFilter>;
    /**
     * the position and size of a tile
     */
    filterConfig?: pulumi.Input<inputs.DashboardTileFilterConfig>;
    /**
     * The limit of the results, if not set will use the default value of the system
     */
    limit?: pulumi.Input<number>;
    /**
     * The markdown-formatted content of the tile
     */
    markdown?: pulumi.Input<string>;
    /**
     * The metric assigned to the tile
     */
    metric?: pulumi.Input<string>;
    /**
     * the name of the tile
     */
    name: pulumi.Input<string>;
    /**
     * The size of the tile name. Possible values are `small`, `medium` and `large`.
     */
    nameSize?: pulumi.Input<string>;
    /**
     * A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
     */
    query?: pulumi.Input<string>;
    /**
     * the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
     */
    tileType: pulumi.Input<string>;
    /**
     * The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
     */
    timeFrameShift?: pulumi.Input<string>;
    /**
     * The attribute `type` exists for backwards compatibilty. Usage is discouraged. You should use `visualization` instead.
     */
    type?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
     */
    visualization?: pulumi.Input<string>;
    /**
     * Configuration of a User session query visualization tile
     */
    visualizationConfig?: pulumi.Input<inputs.DashboardTileVisualizationConfig>;
}

export interface DashboardTileBounds {
    height: pulumi.Input<number>;
    left: pulumi.Input<number>;
    top: pulumi.Input<number>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    width: pulumi.Input<number>;
}

export interface DashboardTileFilter {
    managementZones?: pulumi.Input<pulumi.Input<inputs.DashboardTileFilterManagementZone>[]>;
    timeframe?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardTileFilterConfig {
    chartConfig?: pulumi.Input<inputs.DashboardTileFilterConfigChartConfig>;
    customName: pulumi.Input<string>;
    defaultName: pulumi.Input<string>;
    filters?: pulumi.Input<inputs.DashboardTileFilterConfigFilters>;
    type: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardTileFilterConfigChartConfig {
    axisLimits?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    leftAxisCustomUnit?: pulumi.Input<string>;
    legend?: pulumi.Input<boolean>;
    resultMetadatas?: pulumi.Input<pulumi.Input<inputs.DashboardTileFilterConfigChartConfigResultMetadata>[]>;
    rightAxisCustomUnit?: pulumi.Input<string>;
    series?: pulumi.Input<pulumi.Input<inputs.DashboardTileFilterConfigChartConfigSeries>[]>;
    type: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardTileFilterConfigChartConfigResultMetadata {
    configs?: pulumi.Input<pulumi.Input<inputs.DashboardTileFilterConfigChartConfigResultMetadataConfig>[]>;
}

export interface DashboardTileFilterConfigChartConfigResultMetadataConfig {
    customColor?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    lastModified?: pulumi.Input<number>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardTileFilterConfigChartConfigSeries {
    aggregation: pulumi.Input<string>;
    aggregationRate?: pulumi.Input<string>;
    dimensions?: pulumi.Input<pulumi.Input<inputs.DashboardTileFilterConfigChartConfigSeriesDimension>[]>;
    entityType: pulumi.Input<string>;
    metric: pulumi.Input<string>;
    percentile?: pulumi.Input<number>;
    sortAscending?: pulumi.Input<boolean>;
    sortColumn?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardTileFilterConfigChartConfigSeriesDimension {
    entityDimension?: pulumi.Input<boolean>;
    /**
     * The ID of this resource.
     */
    id: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardTileFilterConfigFilters {
    filters?: pulumi.Input<pulumi.Input<inputs.DashboardTileFilterConfigFiltersFilter>[]>;
}

export interface DashboardTileFilterConfigFiltersFilter {
    entityType: pulumi.Input<string>;
    matches?: pulumi.Input<pulumi.Input<inputs.DashboardTileFilterConfigFiltersFilterMatch>[]>;
}

export interface DashboardTileFilterConfigFiltersFilterMatch {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardTileFilterManagementZone {
    description?: pulumi.Input<string>;
    /**
     * The ID of this resource.
     */
    id: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardTileVisualizationConfig {
    hasAxisBucketing?: pulumi.Input<boolean>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardsAllowlistAllowlist {
    urlpatterns: pulumi.Input<pulumi.Input<inputs.DashboardsAllowlistAllowlistUrlpattern>[]>;
}

export interface DashboardsAllowlistAllowlistUrlpattern {
    rule: pulumi.Input<string>;
    template: pulumi.Input<string>;
}

export interface DashboardsGeneralDefaultDashboardList {
    defaultDashboards: pulumi.Input<pulumi.Input<inputs.DashboardsGeneralDefaultDashboardListDefaultDashboard>[]>;
}

export interface DashboardsGeneralDefaultDashboardListDefaultDashboard {
    dashboard: pulumi.Input<string>;
    userGroup: pulumi.Input<string>;
}

export interface DashboardsPresetsDashboardPresetsList {
    dashboardPresets: pulumi.Input<pulumi.Input<inputs.DashboardsPresetsDashboardPresetsListDashboardPreset>[]>;
}

export interface DashboardsPresetsDashboardPresetsListDashboardPreset {
    dashboardPreset: pulumi.Input<string>;
    userGroup: pulumi.Input<string>;
}

export interface DataPrivacyDataCollection {
    /**
     * With [Data-collection and opt-in mode](https://dt-url.net/7l3p0p3h) enabled, Real User Monitoring data isn't captured until dtrum.enable() is called for specific user sessions.
     */
    optInModeEnabled: pulumi.Input<boolean>;
}

export interface DataPrivacyDoNotTrack {
    /**
     * Comply with "Do Not Track" browser settings
     */
    complyWithDoNotTrack: pulumi.Input<boolean>;
    /**
     * Possible Values: `Anonymous`, `Disable_rum`
     */
    doNotTrack?: pulumi.Input<string>;
}

export interface DataPrivacyMasking {
    ipAddressMasking?: pulumi.Input<string>;
    /**
     * Dynatrace captures the IP addresses of your end-users to determine the regions from which they access your application. To learn more, visit [Mask IPs and GPS coordinates](https://dt-url.net/mask-end-users-ip-addresses).. Dynatrace also captures GPS data from mobile apps that provide their users with the option of sharing geolocation data. On the server side, Dynatrace captures IP addresses to enable detailed troubleshooting for Dynatrace service calls.
     */
    ipAddressMaskingEnabled: pulumi.Input<boolean>;
    personalDataUriMaskingEnabled: pulumi.Input<boolean>;
    userActionMaskingEnabled: pulumi.Input<boolean>;
}

export interface DataPrivacyUserTracking {
    /**
     * When enabled, Dynatrace places a [persistent cookie](https://dt-url.net/313o0p4n) on all end-user devices to identify returning users.
     */
    persistentCookieEnabled: pulumi.Input<boolean>;
}

export interface DatabaseAnomaliesDbConnectFailures {
    /**
     * Number of failed database connections during any **eval_period** minutes period to trigger an alert
     */
    connectionFailsCount?: pulumi.Input<number>;
    /**
     * The *X* minutes time period during which the **connection*fails*count** is evaluated
     */
    evalPeriod?: pulumi.Input<number>;
}

export interface DatabaseAnomaliesFailureRate {
    /**
     * Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
     */
    auto?: pulumi.Input<inputs.DatabaseAnomaliesFailureRateAuto>;
    /**
     * Fixed thresholds for failure rate increase detection
     */
    thresholds?: pulumi.Input<inputs.DatabaseAnomaliesFailureRateThresholds>;
}

export interface DatabaseAnomaliesFailureRateAuto {
    absolute: pulumi.Input<number>;
    relative: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface DatabaseAnomaliesFailureRateThresholds {
    sensitivity: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface DatabaseAnomaliesLoad {
    /**
     * The configuration of traffic drops detection
     */
    drops?: pulumi.Input<inputs.DatabaseAnomaliesLoadDrops>;
    /**
     * The configuration of traffic spikes detection
     */
    spikes?: pulumi.Input<inputs.DatabaseAnomaliesLoadSpikes>;
}

export interface DatabaseAnomaliesLoadDrops {
    minutes?: pulumi.Input<number>;
    percent?: pulumi.Input<number>;
}

export interface DatabaseAnomaliesLoadSpikes {
    minutes?: pulumi.Input<number>;
    percent?: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface DatabaseAnomaliesResponseTime {
    /**
     * Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
     */
    auto?: pulumi.Input<inputs.DatabaseAnomaliesResponseTimeAuto>;
    /**
     * Fixed thresholds for response time degradation detection
     */
    thresholds?: pulumi.Input<inputs.DatabaseAnomaliesResponseTimeThresholds>;
}

export interface DatabaseAnomaliesResponseTimeAuto {
    /**
     * Configuration for anomalies regarding load drops and spikes
     */
    load: pulumi.Input<string>;
    milliseconds: pulumi.Input<number>;
    percent: pulumi.Input<number>;
    slowestMilliseconds: pulumi.Input<number>;
    slowestPercent: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface DatabaseAnomaliesResponseTimeThresholds {
    /**
     * Configuration for anomalies regarding load drops and spikes
     */
    load: pulumi.Input<string>;
    milliseconds: pulumi.Input<number>;
    sensitivity: pulumi.Input<string>;
    slowestMilliseconds: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface DatabaseAnomaliesV2DatabaseConnections {
    /**
     * Detect failed database connects
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Threshold
     */
    maxFailedConnects?: pulumi.Input<number>;
    /**
     * Time span
     */
    timePeriod?: pulumi.Input<number>;
}

export interface DatabaseAnomaliesV2FailureRate {
    /**
     * Alert if the percentage of failing service calls increases by **both** the absolute and relative thresholds:
     */
    autoDetection?: pulumi.Input<inputs.DatabaseAnomaliesV2FailureRateAutoDetection>;
    /**
     * Detection mode for increases in failure rate
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * Detect increases in failure rate
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Alert if a given failure rate is exceeded during any 5-minute-period
     */
    fixedDetection?: pulumi.Input<inputs.DatabaseAnomaliesV2FailureRateFixedDetection>;
}

export interface DatabaseAnomaliesV2FailureRateAutoDetection {
    absoluteIncrease: pulumi.Input<number>;
    overAlertingProtection: pulumi.Input<inputs.DatabaseAnomaliesV2FailureRateAutoDetectionOverAlertingProtection>;
    relativeIncrease: pulumi.Input<number>;
}

export interface DatabaseAnomaliesV2FailureRateAutoDetectionOverAlertingProtection {
    minutesAbnormalState: pulumi.Input<number>;
    requestsPerMinute: pulumi.Input<number>;
}

export interface DatabaseAnomaliesV2FailureRateFixedDetection {
    overAlertingProtection: pulumi.Input<inputs.DatabaseAnomaliesV2FailureRateFixedDetectionOverAlertingProtection>;
    sensitivity: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
}

export interface DatabaseAnomaliesV2FailureRateFixedDetectionOverAlertingProtection {
    minutesAbnormalState: pulumi.Input<number>;
    requestsPerMinute: pulumi.Input<number>;
}

export interface DatabaseAnomaliesV2LoadDrops {
    /**
     * Detect service load drops
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Threshold
     */
    loadDropPercent?: pulumi.Input<number>;
    /**
     * Time span
     */
    minutesAbnormalState?: pulumi.Input<number>;
}

export interface DatabaseAnomaliesV2LoadSpikes {
    /**
     * Detect service load spikes
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Threshold
     */
    loadSpikePercent?: pulumi.Input<number>;
    /**
     * Time span
     */
    minutesAbnormalState?: pulumi.Input<number>;
}

export interface DatabaseAnomaliesV2ResponseTime {
    /**
     * no documentation available
     */
    autoDetection?: pulumi.Input<inputs.DatabaseAnomaliesV2ResponseTimeAutoDetection>;
    /**
     * Detection mode for response time degradations
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * Detect response time degradations
     */
    enabled: pulumi.Input<boolean>;
    /**
     * no documentation available
     */
    fixedDetection?: pulumi.Input<inputs.DatabaseAnomaliesV2ResponseTimeFixedDetection>;
}

export interface DatabaseAnomaliesV2ResponseTimeAutoDetection {
    overAlertingProtection: pulumi.Input<inputs.DatabaseAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection>;
    responseTimeAll: pulumi.Input<inputs.DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll>;
    responseTimeSlowest: pulumi.Input<inputs.DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest>;
}

export interface DatabaseAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection {
    minutesAbnormalState: pulumi.Input<number>;
    requestsPerMinute: pulumi.Input<number>;
}

export interface DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll {
    degradationMilliseconds: pulumi.Input<number>;
    degradationPercent: pulumi.Input<number>;
}

export interface DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest {
    slowestDegradationMilliseconds: pulumi.Input<number>;
    slowestDegradationPercent: pulumi.Input<number>;
}

export interface DatabaseAnomaliesV2ResponseTimeFixedDetection {
    overAlertingProtection: pulumi.Input<inputs.DatabaseAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection>;
    responseTimeAll: pulumi.Input<inputs.DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll>;
    responseTimeSlowest: pulumi.Input<inputs.DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest>;
    sensitivity: pulumi.Input<string>;
}

export interface DatabaseAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection {
    minutesAbnormalState: pulumi.Input<number>;
    requestsPerMinute: pulumi.Input<number>;
}

export interface DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll {
    degradationMilliseconds: pulumi.Input<number>;
}

export interface DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest {
    slowestDegradationMilliseconds: pulumi.Input<number>;
}

export interface DduPoolEvents {
    /**
     * Is the limit configuration enabled
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Type of the limit applied: MONTHLY or ANNUAL
     */
    type?: pulumi.Input<string>;
    /**
     * Value of the DDU limit applied for provided timerange
     */
    value?: pulumi.Input<number>;
}

export interface DduPoolLogMonitoring {
    /**
     * Is the limit configuration enabled
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Type of the limit applied: MONTHLY or ANNUAL
     */
    type?: pulumi.Input<string>;
    /**
     * Value of the DDU limit applied for provided timerange
     */
    value?: pulumi.Input<number>;
}

export interface DduPoolMetrics {
    /**
     * Is the limit configuration enabled
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Type of the limit applied: MONTHLY or ANNUAL
     */
    type?: pulumi.Input<string>;
    /**
     * Value of the DDU limit applied for provided timerange
     */
    value?: pulumi.Input<number>;
}

export interface DduPoolServerless {
    /**
     * Is the limit configuration enabled
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Type of the limit applied: MONTHLY or ANNUAL
     */
    type?: pulumi.Input<string>;
    /**
     * Value of the DDU limit applied for provided timerange
     */
    value?: pulumi.Input<number>;
}

export interface DduPoolTraces {
    /**
     * Is the limit configuration enabled
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Type of the limit applied: MONTHLY or ANNUAL
     */
    type?: pulumi.Input<string>;
    /**
     * Value of the DDU limit applied for provided timerange
     */
    value?: pulumi.Input<number>;
}

export interface DeclarativeGroupingDetection {
    processDefinitions: pulumi.Input<pulumi.Input<inputs.DeclarativeGroupingDetectionProcessDefinition>[]>;
}

export interface DeclarativeGroupingDetectionProcessDefinition {
    id: pulumi.Input<string>;
    processGroupName: pulumi.Input<string>;
    report: pulumi.Input<string>;
    rules?: pulumi.Input<inputs.DeclarativeGroupingDetectionProcessDefinitionRules>;
}

export interface DeclarativeGroupingDetectionProcessDefinitionRules {
    rules: pulumi.Input<pulumi.Input<inputs.DeclarativeGroupingDetectionProcessDefinitionRulesRule>[]>;
}

export interface DeclarativeGroupingDetectionProcessDefinitionRulesRule {
    condition: pulumi.Input<string>;
    property: pulumi.Input<string>;
}

export interface DiskAnomaliesDiskName {
    /**
     * Possible values are: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS` and `STARTS_WITH`
     */
    operator: pulumi.Input<string>;
    /**
     * Value to compare to
     */
    value: pulumi.Input<string>;
}

export interface DiskAnomaliesTags {
    /**
     * A Tag Filter
     */
    filters?: pulumi.Input<pulumi.Input<inputs.DiskAnomaliesTagsFilter>[]>;
}

export interface DiskAnomaliesTagsFilter {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface DiskAnomaliesV2Disk {
    /**
     * no documentation available
     */
    diskLowInodesDetection: pulumi.Input<inputs.DiskAnomaliesV2DiskDiskLowInodesDetection>;
    /**
     * no documentation available
     */
    diskLowSpaceDetection: pulumi.Input<inputs.DiskAnomaliesV2DiskDiskLowSpaceDetection>;
    /**
     * no documentation available
     */
    diskSlowWritesAndReadsDetection: pulumi.Input<inputs.DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetection>;
}

export interface DiskAnomaliesV2DiskDiskLowInodesDetection {
    customThresholds?: pulumi.Input<inputs.DiskAnomaliesV2DiskDiskLowInodesDetectionCustomThresholds>;
    detectionMode?: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface DiskAnomaliesV2DiskDiskLowInodesDetectionCustomThresholds {
    freeInodesPercentage: pulumi.Input<number>;
}

export interface DiskAnomaliesV2DiskDiskLowSpaceDetection {
    customThresholds?: pulumi.Input<inputs.DiskAnomaliesV2DiskDiskLowSpaceDetectionCustomThresholds>;
    detectionMode?: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface DiskAnomaliesV2DiskDiskLowSpaceDetectionCustomThresholds {
    freeSpacePercentage: pulumi.Input<number>;
}

export interface DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetection {
    customThresholds?: pulumi.Input<inputs.DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionCustomThresholds>;
    detectionMode?: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionCustomThresholds {
    writeAndReadTime: pulumi.Input<number>;
}

export interface DiskAnomalyRulesDiskNameFilter {
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS`, `STARTS_WITH`
     */
    operator: pulumi.Input<string>;
    /**
     * Matching text
     */
    value?: pulumi.Input<string>;
}

export interface DiskAnomalyRulesSampleLimit {
    /**
     * .. within the last
     */
    samples: pulumi.Input<number>;
    /**
     * Minimum number of violating samples
     */
    violatingSamples: pulumi.Input<number>;
}

export interface DiskOptionsExclusions {
    exclusions: pulumi.Input<pulumi.Input<inputs.DiskOptionsExclusionsExclusion>[]>;
}

export interface DiskOptionsExclusionsExclusion {
    filesystem?: pulumi.Input<string>;
    mountpoint?: pulumi.Input<string>;
    os: pulumi.Input<string>;
}

export interface DiskSpecificAnomaliesV2DiskLowInodesDetection {
    /**
     * no documentation available
     */
    customThresholds?: pulumi.Input<inputs.DiskSpecificAnomaliesV2DiskLowInodesDetectionCustomThresholds>;
    /**
     * Detection mode for low inodes number available
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * Detect low inodes number available
     */
    enabled: pulumi.Input<boolean>;
}

export interface DiskSpecificAnomaliesV2DiskLowInodesDetectionCustomThresholds {
    freeInodesPercentage: pulumi.Input<number>;
}

export interface DiskSpecificAnomaliesV2DiskLowSpaceDetection {
    /**
     * no documentation available
     */
    customThresholds?: pulumi.Input<inputs.DiskSpecificAnomaliesV2DiskLowSpaceDetectionCustomThresholds>;
    /**
     * Detection mode for low disk space
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * Detect low disk space
     */
    enabled: pulumi.Input<boolean>;
}

export interface DiskSpecificAnomaliesV2DiskLowSpaceDetectionCustomThresholds {
    freeSpacePercentage: pulumi.Input<number>;
}

export interface DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetection {
    /**
     * no documentation available
     */
    customThresholds?: pulumi.Input<inputs.DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholds>;
    /**
     * Detection mode for slow running disks
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * Detect slow-running disks
     */
    enabled: pulumi.Input<boolean>;
}

export interface DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholds {
    writeAndReadTime: pulumi.Input<number>;
}

export interface EnvironmentQuotas {
    /**
     * Davis Data Units consumption and quota information on environment level. Not set (and not editable) if Davis data units is not enabled
     */
    ddus?: pulumi.Input<inputs.EnvironmentQuotasDdus>;
    /**
     * DEM units consumption and quota information on environment level
     */
    demUnits?: pulumi.Input<inputs.EnvironmentQuotasDemUnits>;
    /**
     * Host units consumption and quota information on environment level
     */
    hostUnits?: pulumi.Input<number>;
    /**
     * Log Monitoring consumption and quota information on environment level. Not set (and not editable) if Log monitoring is not enabled. Not set (and not editable) if Log monitoring is migrated to Davis data on license level
     */
    logs?: pulumi.Input<inputs.EnvironmentQuotasLogs>;
    /**
     * Synthetic monitors consumption and quota information on environment level. Not set (and not editable) if neither Synthetic nor DEM units is enabled
     */
    synthetic?: pulumi.Input<inputs.EnvironmentQuotasSynthetic>;
    /**
     * User sessions consumption and quota information on environment level
     */
    userSessions?: pulumi.Input<inputs.EnvironmentQuotasUserSessions>;
}

export interface EnvironmentQuotasDdus {
    annual?: pulumi.Input<number>;
    monthly?: pulumi.Input<number>;
}

export interface EnvironmentQuotasDemUnits {
    annual?: pulumi.Input<number>;
    monthly?: pulumi.Input<number>;
}

export interface EnvironmentQuotasLogs {
    annual?: pulumi.Input<number>;
    monthly?: pulumi.Input<number>;
}

export interface EnvironmentQuotasSynthetic {
    annual?: pulumi.Input<number>;
    monthly?: pulumi.Input<number>;
}

export interface EnvironmentQuotasUserSessions {
    annual?: pulumi.Input<number>;
    monthly?: pulumi.Input<number>;
}

export interface EnvironmentStorage {
    limits?: pulumi.Input<inputs.EnvironmentStorageLimits>;
    retention?: pulumi.Input<inputs.EnvironmentStorageRetention>;
    /**
     * Maximum number of newly monitored entry point PurePaths captured per process/minute on environment level. Can be set to any value from 100 to 100000
     */
    transactions: pulumi.Input<number>;
    /**
     * Maximum number of user actions generated per minute on environment level. Can be set to any value from 1 to 2147483646 or left unlimited by omitting this property
     */
    userActions?: pulumi.Input<number>;
}

export interface EnvironmentStorageLimits {
    logs?: pulumi.Input<number>;
    sessionReplay?: pulumi.Input<number>;
    symbolFiles?: pulumi.Input<number>;
    transactions?: pulumi.Input<number>;
}

export interface EnvironmentStorageRetention {
    logs?: pulumi.Input<number>;
    rum: pulumi.Input<number>;
    serviceCodeLevel: pulumi.Input<number>;
    serviceRequestLevel: pulumi.Input<number>;
    sessionReplay: pulumi.Input<number>;
    synthetic: pulumi.Input<number>;
}

export interface FailureDetectionParametersBrokenLinks {
    /**
     * If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
     */
    brokenLinkDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Consider 404 HTTP response codes as failures
     */
    http404NotFoundFailures: pulumi.Input<boolean>;
}

export interface FailureDetectionParametersExceptionRules {
    /**
     * Some custom error situations are only detectable via a return value or other means. To support such cases, [define a request attribute](https://dt-url.net/ys5k0p4y) that captures the required data. Then define a custom error rule that determines if the request has failed based on the value of the request attribute.
     */
    customErrorRules?: pulumi.Input<inputs.FailureDetectionParametersExceptionRulesCustomErrorRules>;
    /**
     * There may be situations where your application code handles exceptions gracefully in a manner that these failures aren't detected by Dynatrace. Use this setting to define specific gracefully-handled exceptions that should be treated as service failures.
     */
    customHandledExceptions?: pulumi.Input<inputs.FailureDetectionParametersExceptionRulesCustomHandledExceptions>;
    /**
     * Ignore all exceptions
     */
    ignoreAllExceptions: pulumi.Input<boolean>;
    /**
     * Ignore span failure detection
     */
    ignoreSpanFailureDetection: pulumi.Input<boolean>;
    /**
     * Some exceptions that are thrown by legacy or 3rd-party code indicate a specific response, not an error. Use this setting to instruct Dynatrace to treat such exceptions as non-failed requests.. If an exception matching any of the defined patterns occurs in a request, it will not be considered as a failure. Other exceptions occurring at the same request might still mark the request as failed.
     */
    ignoredExceptions?: pulumi.Input<inputs.FailureDetectionParametersExceptionRulesIgnoredExceptions>;
    /**
     * Define exceptions which indicate that a service call should not be considered as failed. E.g. an exception indicating that the client aborted the operation.. If an exception matching any of the defined patterns occurs on the entry node of the service, it will be considered successful. Compared to ignored exceptions, the request will be considered successful even if other exceptions occur in the same request.
     */
    successForcingExceptions?: pulumi.Input<inputs.FailureDetectionParametersExceptionRulesSuccessForcingExceptions>;
}

export interface FailureDetectionParametersExceptionRulesCustomErrorRules {
    customErrorRules: pulumi.Input<pulumi.Input<inputs.FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRule>[]>;
}

export interface FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRule {
    condition: pulumi.Input<inputs.FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleCondition>;
    requestAttribute: pulumi.Input<string>;
}

export interface FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleCondition {
    caseSensitive?: pulumi.Input<boolean>;
    compareOperationType: pulumi.Input<string>;
    doubleValue?: pulumi.Input<number>;
    intValue?: pulumi.Input<number>;
    textValue?: pulumi.Input<string>;
}

export interface FailureDetectionParametersExceptionRulesCustomHandledExceptions {
    customHandledExceptions: pulumi.Input<pulumi.Input<inputs.FailureDetectionParametersExceptionRulesCustomHandledExceptionsCustomHandledException>[]>;
}

export interface FailureDetectionParametersExceptionRulesCustomHandledExceptionsCustomHandledException {
    classPattern?: pulumi.Input<string>;
    messagePattern?: pulumi.Input<string>;
}

export interface FailureDetectionParametersExceptionRulesIgnoredExceptions {
    customHandledExceptions: pulumi.Input<pulumi.Input<inputs.FailureDetectionParametersExceptionRulesIgnoredExceptionsCustomHandledException>[]>;
}

export interface FailureDetectionParametersExceptionRulesIgnoredExceptionsCustomHandledException {
    classPattern?: pulumi.Input<string>;
    messagePattern?: pulumi.Input<string>;
}

export interface FailureDetectionParametersExceptionRulesSuccessForcingExceptions {
    customHandledExceptions: pulumi.Input<pulumi.Input<inputs.FailureDetectionParametersExceptionRulesSuccessForcingExceptionsCustomHandledException>[]>;
}

export interface FailureDetectionParametersExceptionRulesSuccessForcingExceptionsCustomHandledException {
    classPattern?: pulumi.Input<string>;
    messagePattern?: pulumi.Input<string>;
}

export interface FailureDetectionParametersHttpResponseCodes {
    /**
     * HTTP response codes which indicate client side errors
     */
    clientSideErrors: pulumi.Input<string>;
    /**
     * Treat missing HTTP response code as client side error
     */
    failOnMissingResponseCodeClientSide: pulumi.Input<boolean>;
    /**
     * Treat missing HTTP response code as server side errors
     */
    failOnMissingResponseCodeServerSide: pulumi.Input<boolean>;
    /**
     * HTTP response codes which indicate an error on the server side
     */
    serverSideErrors: pulumi.Input<string>;
}

export interface FailureDetectionRulesConditions {
    conditions: pulumi.Input<pulumi.Input<inputs.FailureDetectionRulesConditionsCondition>[]>;
}

export interface FailureDetectionRulesConditionsCondition {
    attribute: pulumi.Input<string>;
    predicate: pulumi.Input<inputs.FailureDetectionRulesConditionsConditionPredicate>;
}

export interface FailureDetectionRulesConditionsConditionPredicate {
    caseSensitive?: pulumi.Input<boolean>;
    managementZones?: pulumi.Input<pulumi.Input<string>[]>;
    predicateType: pulumi.Input<string>;
    serviceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    tagKeys?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    textValues?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GenericRelationshipsSources {
    sources: pulumi.Input<pulumi.Input<inputs.GenericRelationshipsSourcesSource>[]>;
}

export interface GenericRelationshipsSourcesSource {
    condition?: pulumi.Input<string>;
    mappingRules?: pulumi.Input<inputs.GenericRelationshipsSourcesSourceMappingRules>;
    sourceType: pulumi.Input<string>;
}

export interface GenericRelationshipsSourcesSourceMappingRules {
    mappingRules: pulumi.Input<pulumi.Input<inputs.GenericRelationshipsSourcesSourceMappingRulesMappingRule>[]>;
}

export interface GenericRelationshipsSourcesSourceMappingRulesMappingRule {
    destinationProperty: pulumi.Input<string>;
    destinationTransformation: pulumi.Input<string>;
    sourceProperty: pulumi.Input<string>;
    sourceTransformation: pulumi.Input<string>;
}

export interface GenericTypesRules {
    rules: pulumi.Input<pulumi.Input<inputs.GenericTypesRulesRule>[]>;
}

export interface GenericTypesRulesRule {
    attributes?: pulumi.Input<inputs.GenericTypesRulesRuleAttributes>;
    iconPattern?: pulumi.Input<string>;
    idPattern: pulumi.Input<string>;
    instanceNamePattern?: pulumi.Input<string>;
    requiredDimensions?: pulumi.Input<inputs.GenericTypesRulesRuleRequiredDimensions>;
    role?: pulumi.Input<string>;
    sources: pulumi.Input<inputs.GenericTypesRulesRuleSources>;
}

export interface GenericTypesRulesRuleAttributes {
    attributes: pulumi.Input<pulumi.Input<inputs.GenericTypesRulesRuleAttributesAttribute>[]>;
}

export interface GenericTypesRulesRuleAttributesAttribute {
    /**
     * The human readable type name for this entity type.
     */
    displayName?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    pattern: pulumi.Input<string>;
}

export interface GenericTypesRulesRuleRequiredDimensions {
    requiredDimensions: pulumi.Input<pulumi.Input<inputs.GenericTypesRulesRuleRequiredDimensionsRequiredDimension>[]>;
}

export interface GenericTypesRulesRuleRequiredDimensionsRequiredDimension {
    key: pulumi.Input<string>;
    valuePattern?: pulumi.Input<string>;
}

export interface GenericTypesRulesRuleSources {
    sources: pulumi.Input<pulumi.Input<inputs.GenericTypesRulesRuleSourcesSource>[]>;
}

export interface GenericTypesRulesRuleSourcesSource {
    condition?: pulumi.Input<string>;
    sourceType: pulumi.Input<string>;
}

export interface GetEntitiesEntities {
    /**
     * A list of monitored entities.
     */
    entities?: inputs.GetEntitiesEntitiesEntity[];
}

export interface GetEntitiesEntitiesArgs {
    /**
     * A list of monitored entities.
     */
    entities?: pulumi.Input<pulumi.Input<inputs.GetEntitiesEntitiesEntityArgs>[]>;
}

export interface GetEntitiesEntitiesEntity {
    displayName?: string;
    entityId?: string;
    tags?: inputs.GetEntitiesEntitiesEntityTag[];
    type?: string;
}

export interface GetEntitiesEntitiesEntityArgs {
    displayName?: pulumi.Input<string>;
    entityId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetEntitiesEntitiesEntityTagArgs>[]>;
    type?: pulumi.Input<string>;
}

export interface GetEntitiesEntitiesEntityTag {
    tags?: inputs.GetEntitiesEntitiesEntityTagTag[];
}

export interface GetEntitiesEntitiesEntityTagArgs {
    tags?: pulumi.Input<pulumi.Input<inputs.GetEntitiesEntitiesEntityTagTagArgs>[]>;
}

export interface GetEntitiesEntitiesEntityTagTag {
    context: string;
    key: string;
    stringRepresentation?: string;
    value?: string;
}

export interface GetEntitiesEntitiesEntityTagTagArgs {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    stringRepresentation?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetSyntheticLocationsLocations {
    /**
     * The cloud provider where the location is hosted.
     */
    cloudPlatform?: string;
    entityId?: string;
    ips?: string[];
    name?: string;
    stage?: string;
    status?: string;
    type?: string;
}

export interface GetSyntheticLocationsLocationsArgs {
    /**
     * The cloud provider where the location is hosted.
     */
    cloudPlatform?: pulumi.Input<string>;
    entityId?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    stage?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface HostAnomaliesConnections {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Alert (`true`) on graceful host shutdowns
     */
    enabledOnGracefulShutdowns: pulumi.Input<boolean>;
}

export interface HostAnomaliesCpu {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Custom thresholds for high CPU saturation. If not set then the automatic mode is used
     */
    thresholds?: pulumi.Input<inputs.HostAnomaliesCpuThresholds>;
}

export interface HostAnomaliesCpuThresholds {
    saturation: pulumi.Input<number>;
}

export interface HostAnomaliesDisks {
    /**
     * Configuration of low disk inodes number detection
     */
    inodes?: pulumi.Input<inputs.HostAnomaliesDisksInodes>;
    /**
     * Configuration of low disk space detection
     */
    space?: pulumi.Input<inputs.HostAnomaliesDisksSpace>;
    /**
     * Configuration of slow running disks detection
     */
    speed?: pulumi.Input<inputs.HostAnomaliesDisksSpeed>;
}

export interface HostAnomaliesDisksInodes {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesDisksInodesThresholds>;
}

export interface HostAnomaliesDisksInodesThresholds {
    percentage: pulumi.Input<number>;
}

export interface HostAnomaliesDisksSpace {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesDisksSpaceThresholds>;
}

export interface HostAnomaliesDisksSpaceThresholds {
    percentage: pulumi.Input<number>;
}

export interface HostAnomaliesDisksSpeed {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesDisksSpeedThresholds>;
}

export interface HostAnomaliesDisksSpeedThresholds {
    writeAndReadTime: pulumi.Input<number>;
}

export interface HostAnomaliesGc {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Custom thresholds for high GC activity. If not set, automatic mode is used.   Meeting **any** of these conditions triggers an alert
     */
    thresholds?: pulumi.Input<inputs.HostAnomaliesGcThresholds>;
}

export interface HostAnomaliesGcThresholds {
    suspensionPercentage: pulumi.Input<number>;
    timePercentage: pulumi.Input<number>;
}

export interface HostAnomaliesJava {
    /**
     * Configuration of Java out of memory problems detection
     */
    outOfMemory?: pulumi.Input<inputs.HostAnomaliesJavaOutOfMemory>;
    /**
     * Configuration of Java out of threads problems detection
     */
    outOfThreads?: pulumi.Input<inputs.HostAnomaliesJavaOutOfThreads>;
}

export interface HostAnomaliesJavaOutOfMemory {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesJavaOutOfMemoryThresholds>;
}

export interface HostAnomaliesJavaOutOfMemoryThresholds {
    exceptionCount: pulumi.Input<number>;
}

export interface HostAnomaliesJavaOutOfThreads {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesJavaOutOfThreadsThresholds>;
}

export interface HostAnomaliesJavaOutOfThreadsThresholds {
    exceptionCount: pulumi.Input<number>;
}

export interface HostAnomaliesMemory {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Custom thresholds for high memory usage. If not set then the automatic mode is used. **Both** conditions must be met to trigger an alert
     */
    thresholds?: pulumi.Input<inputs.HostAnomaliesMemoryThresholds>;
}

export interface HostAnomaliesMemoryThresholds {
    linux: pulumi.Input<inputs.HostAnomaliesMemoryThresholdsLinux>;
    windows: pulumi.Input<inputs.HostAnomaliesMemoryThresholdsWindows>;
}

export interface HostAnomaliesMemoryThresholdsLinux {
    pageFaults: pulumi.Input<number>;
    usage: pulumi.Input<number>;
}

export interface HostAnomaliesMemoryThresholdsWindows {
    pageFaults: pulumi.Input<number>;
    usage: pulumi.Input<number>;
}

export interface HostAnomaliesNetwork {
    /**
     * Configuration of TCP connectivity problems detection
     */
    connectivity?: pulumi.Input<inputs.HostAnomaliesNetworkConnectivity>;
    /**
     * Configuration of high number of dropped packets detection
     */
    droppedPackets?: pulumi.Input<inputs.HostAnomaliesNetworkDroppedPackets>;
    /**
     * Configuration of high number of network errors detection
     */
    errors?: pulumi.Input<inputs.HostAnomaliesNetworkErrors>;
    /**
     * Configuration of high retransmission rate detection
     */
    retransmission?: pulumi.Input<inputs.HostAnomaliesNetworkRetransmission>;
    /**
     * Configuration of high network utilization detection
     */
    utilization?: pulumi.Input<inputs.HostAnomaliesNetworkUtilization>;
}

export interface HostAnomaliesNetworkConnectivity {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesNetworkConnectivityThresholds>;
}

export interface HostAnomaliesNetworkConnectivityThresholds {
    failedConnections: pulumi.Input<number>;
    newConnectionFailures: pulumi.Input<number>;
}

export interface HostAnomaliesNetworkDroppedPackets {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesNetworkDroppedPacketsThresholds>;
}

export interface HostAnomaliesNetworkDroppedPacketsThresholds {
    droppedPackets: pulumi.Input<number>;
    totalPacketsRate: pulumi.Input<number>;
}

export interface HostAnomaliesNetworkErrors {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesNetworkErrorsThresholds>;
}

export interface HostAnomaliesNetworkErrorsThresholds {
    errorsPercentage: pulumi.Input<number>;
    totalPacketsRate: pulumi.Input<number>;
}

export interface HostAnomaliesNetworkRetransmission {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesNetworkRetransmissionThresholds>;
}

export interface HostAnomaliesNetworkRetransmissionThresholds {
    retransmissionRate: pulumi.Input<number>;
    retransmittedPackets: pulumi.Input<number>;
}

export interface HostAnomaliesNetworkUtilization {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesNetworkUtilizationThresholds>;
}

export interface HostAnomaliesNetworkUtilizationThresholds {
    utilization: pulumi.Input<number>;
}

export interface HostAnomaliesV2Host {
    /**
     * no documentation available
     */
    connectionLostDetection: pulumi.Input<inputs.HostAnomaliesV2HostConnectionLostDetection>;
    /**
     * no documentation available
     */
    highCpuSaturationDetection: pulumi.Input<inputs.HostAnomaliesV2HostHighCpuSaturationDetection>;
    /**
     * no documentation available
     */
    highGcActivityDetection: pulumi.Input<inputs.HostAnomaliesV2HostHighGcActivityDetection>;
    /**
     * no documentation available
     */
    highMemoryDetection: pulumi.Input<inputs.HostAnomaliesV2HostHighMemoryDetection>;
    /**
     * no documentation available
     */
    highSystemLoadDetection: pulumi.Input<inputs.HostAnomaliesV2HostHighSystemLoadDetection>;
    /**
     * no documentation available
     */
    outOfMemoryDetection: pulumi.Input<inputs.HostAnomaliesV2HostOutOfMemoryDetection>;
    /**
     * no documentation available
     */
    outOfThreadsDetection: pulumi.Input<inputs.HostAnomaliesV2HostOutOfThreadsDetection>;
}

export interface HostAnomaliesV2HostConnectionLostDetection {
    enabled: pulumi.Input<boolean>;
    onGracefulShutdowns?: pulumi.Input<string>;
}

export interface HostAnomaliesV2HostHighCpuSaturationDetection {
    customThresholds?: pulumi.Input<inputs.HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholds>;
    detectionMode?: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholds {
    cpuSaturation: pulumi.Input<number>;
    eventThresholds: pulumi.Input<inputs.HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsEventThresholds>;
}

export interface HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsEventThresholds {
    dealertingEvaluationWindow: pulumi.Input<number>;
    dealertingSamples: pulumi.Input<number>;
    violatingEvaluationWindow: pulumi.Input<number>;
    violatingSamples: pulumi.Input<number>;
}

export interface HostAnomaliesV2HostHighGcActivityDetection {
    customThresholds?: pulumi.Input<inputs.HostAnomaliesV2HostHighGcActivityDetectionCustomThresholds>;
    detectionMode?: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface HostAnomaliesV2HostHighGcActivityDetectionCustomThresholds {
    eventThresholds: pulumi.Input<inputs.HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsEventThresholds>;
    gcSuspensionPercentage: pulumi.Input<number>;
    gcTimePercentage: pulumi.Input<number>;
}

export interface HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsEventThresholds {
    dealertingEvaluationWindow: pulumi.Input<number>;
    dealertingSamples: pulumi.Input<number>;
    violatingEvaluationWindow: pulumi.Input<number>;
    violatingSamples: pulumi.Input<number>;
}

export interface HostAnomaliesV2HostHighMemoryDetection {
    customThresholds?: pulumi.Input<inputs.HostAnomaliesV2HostHighMemoryDetectionCustomThresholds>;
    detectionMode?: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface HostAnomaliesV2HostHighMemoryDetectionCustomThresholds {
    eventThresholds: pulumi.Input<inputs.HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholds>;
    pageFaultsPerSecondNonWindows: pulumi.Input<number>;
    pageFaultsPerSecondWindows: pulumi.Input<number>;
    usedMemoryPercentageNonWindows: pulumi.Input<number>;
    usedMemoryPercentageWindows: pulumi.Input<number>;
}

export interface HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholds {
    dealertingEvaluationWindow: pulumi.Input<number>;
    dealertingSamples: pulumi.Input<number>;
    violatingEvaluationWindow: pulumi.Input<number>;
    violatingSamples: pulumi.Input<number>;
}

export interface HostAnomaliesV2HostHighSystemLoadDetection {
    customThresholds?: pulumi.Input<inputs.HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholds>;
    detectionMode?: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholds {
    eventThresholds: pulumi.Input<inputs.HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsEventThresholds>;
    systemLoad: pulumi.Input<number>;
}

export interface HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsEventThresholds {
    dealertingEvaluationWindow: pulumi.Input<number>;
    dealertingSamples: pulumi.Input<number>;
    violatingEvaluationWindow: pulumi.Input<number>;
    violatingSamples: pulumi.Input<number>;
}

export interface HostAnomaliesV2HostOutOfMemoryDetection {
    customThresholds?: pulumi.Input<inputs.HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholds>;
    detectionMode?: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholds {
    eventThresholds: pulumi.Input<inputs.HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsEventThresholds>;
    outOfMemoryExceptionsNumber: pulumi.Input<number>;
}

export interface HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsEventThresholds {
    dealertingEvaluationWindow: pulumi.Input<number>;
    dealertingSamples: pulumi.Input<number>;
    violatingEvaluationWindow: pulumi.Input<number>;
    violatingSamples: pulumi.Input<number>;
}

export interface HostAnomaliesV2HostOutOfThreadsDetection {
    customThresholds?: pulumi.Input<inputs.HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholds>;
    detectionMode?: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholds {
    eventThresholds: pulumi.Input<inputs.HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsEventThresholds>;
    outOfThreadsExceptionsNumber: pulumi.Input<number>;
}

export interface HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsEventThresholds {
    dealertingEvaluationWindow: pulumi.Input<number>;
    dealertingSamples: pulumi.Input<number>;
    violatingEvaluationWindow: pulumi.Input<number>;
    violatingSamples: pulumi.Input<number>;
}

export interface HostAnomaliesV2Network {
    /**
     * no documentation available
     */
    highNetworkDetection: pulumi.Input<inputs.HostAnomaliesV2NetworkHighNetworkDetection>;
    /**
     * no documentation available
     */
    networkDroppedPacketsDetection: pulumi.Input<inputs.HostAnomaliesV2NetworkNetworkDroppedPacketsDetection>;
    /**
     * no documentation available
     */
    networkErrorsDetection: pulumi.Input<inputs.HostAnomaliesV2NetworkNetworkErrorsDetection>;
    /**
     * no documentation available
     */
    networkHighRetransmissionDetection: pulumi.Input<inputs.HostAnomaliesV2NetworkNetworkHighRetransmissionDetection>;
    /**
     * no documentation available
     */
    networkTcpProblemsDetection: pulumi.Input<inputs.HostAnomaliesV2NetworkNetworkTcpProblemsDetection>;
}

export interface HostAnomaliesV2NetworkHighNetworkDetection {
    customThresholds?: pulumi.Input<inputs.HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholds>;
    detectionMode?: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholds {
    errorsPercentage: pulumi.Input<number>;
    eventThresholds: pulumi.Input<inputs.HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsEventThresholds>;
}

export interface HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsEventThresholds {
    dealertingEvaluationWindow: pulumi.Input<number>;
    dealertingSamples: pulumi.Input<number>;
    violatingEvaluationWindow: pulumi.Input<number>;
    violatingSamples: pulumi.Input<number>;
}

export interface HostAnomaliesV2NetworkNetworkDroppedPacketsDetection {
    customThresholds?: pulumi.Input<inputs.HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholds>;
    detectionMode?: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholds {
    droppedPacketsPercentage: pulumi.Input<number>;
    eventThresholds: pulumi.Input<inputs.HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsEventThresholds>;
    totalPacketsRate: pulumi.Input<number>;
}

export interface HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsEventThresholds {
    dealertingEvaluationWindow: pulumi.Input<number>;
    dealertingSamples: pulumi.Input<number>;
    violatingEvaluationWindow: pulumi.Input<number>;
    violatingSamples: pulumi.Input<number>;
}

export interface HostAnomaliesV2NetworkNetworkErrorsDetection {
    customThresholds?: pulumi.Input<inputs.HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholds>;
    detectionMode?: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholds {
    errorsPercentage: pulumi.Input<number>;
    eventThresholds: pulumi.Input<inputs.HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsEventThresholds>;
    totalPacketsRate: pulumi.Input<number>;
}

export interface HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsEventThresholds {
    dealertingEvaluationWindow: pulumi.Input<number>;
    dealertingSamples: pulumi.Input<number>;
    violatingEvaluationWindow: pulumi.Input<number>;
    violatingSamples: pulumi.Input<number>;
}

export interface HostAnomaliesV2NetworkNetworkHighRetransmissionDetection {
    customThresholds?: pulumi.Input<inputs.HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholds>;
    detectionMode?: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholds {
    eventThresholds: pulumi.Input<inputs.HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsEventThresholds>;
    retransmissionRatePercentage: pulumi.Input<number>;
    retransmittedPacketsNumberPerMinute: pulumi.Input<number>;
}

export interface HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsEventThresholds {
    dealertingEvaluationWindow: pulumi.Input<number>;
    dealertingSamples: pulumi.Input<number>;
    violatingEvaluationWindow: pulumi.Input<number>;
    violatingSamples: pulumi.Input<number>;
}

export interface HostAnomaliesV2NetworkNetworkTcpProblemsDetection {
    customThresholds?: pulumi.Input<inputs.HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholds>;
    detectionMode?: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholds {
    eventThresholds: pulumi.Input<inputs.HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsEventThresholds>;
    failedConnectionsNumberPerMinute: pulumi.Input<number>;
    newConnectionFailuresPercentage: pulumi.Input<number>;
}

export interface HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsEventThresholds {
    dealertingEvaluationWindow: pulumi.Input<number>;
    dealertingSamples: pulumi.Input<number>;
    violatingEvaluationWindow: pulumi.Input<number>;
    violatingSamples: pulumi.Input<number>;
}

export interface HostNamingCondition {
    conditions?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionCondition>[]>;
}

export interface HostNamingConditionCondition {
    /**
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionApplicationTypeComparison>[]>;
    applicationTypes?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionApplicationType>[]>;
    azureComputeModeComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionAzureComputeModeComparison>[]>;
    /**
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionAzureComputeMode>[]>;
    /**
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionAzureSkuComparision>[]>;
    azureSkus?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionAzureSkus>[]>;
    /**
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionBaseComparisonBasic>[]>;
    /**
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionBaseConditionKey>[]>;
    /**
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionBitnessComparision>[]>;
    bitnesses?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionBitness>[]>;
    /**
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionCloudTypeComparison>[]>;
    cloudTypes?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionCloudType>[]>;
    comparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionComparison>[]>;
    /**
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionCustomApplicationTypeComparison>[]>;
    customApplicationTypes?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionCustomApplicationType>[]>;
    /**
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionCustomHostMetadataConditionKey>[]>;
    customHostMetadatas?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionCustomHostMetadata>[]>;
    /**
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionCustomProcessMetadataConditionKey>[]>;
    customProcessMetadatas?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionCustomProcessMetadata>[]>;
    databaseTopologies?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionDatabaseTopology>[]>;
    /**
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionDatabaseTopologyComparison>[]>;
    /**
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionDcrumDecoderComparison>[]>;
    dcrumDecoders?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionDcrumDecoder>[]>;
    entities?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionEntity>[]>;
    /**
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionEntityIdComparison>[]>;
    hostTeches?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionHostTech>[]>;
    /**
     * @deprecated `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionHypervisorTypeComparision>[]>;
    hypervisors?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionHypervisor>[]>;
    /**
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIndexedNameComparison>[]>;
    indexedNames?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIndexedName>[]>;
    /**
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIndexedStringComparison>[]>;
    indexedStrings?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIndexedString>[]>;
    /**
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIndexedTagComparison>[]>;
    indexedTags?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIndexedTag>[]>;
    /**
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIntegerComparison>[]>;
    integers?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionInteger>[]>;
    /**
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIpaddressComparison>[]>;
    ipaddresses?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIpaddress>[]>;
    keys?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionKey>[]>;
    /**
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionMobilePlatformComparison>[]>;
    mobilePlatforms?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionMobilePlatform>[]>;
    osArches?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionOsArch>[]>;
    osTypes?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionOsType>[]>;
    /**
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionOsarchitectureComparison>[]>;
    /**
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionOstypeComparison>[]>;
    /**
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionPaasTypeComparison>[]>;
    paasTypes?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionPaasType>[]>;
    /**
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionProcessMetadataConditionKey>[]>;
    processMetadatas?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionProcessMetadata>[]>;
    serviceTopologies?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionServiceTopology>[]>;
    /**
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionServiceTopologyComparison>[]>;
    /**
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionServiceTypeComparison>[]>;
    serviceTypes?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionServiceType>[]>;
    /**
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionSimpleHostTechComparison>[]>;
    /**
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionSimpleTechComparison>[]>;
    /**
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionStringComparison>[]>;
    /**
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionStringConditionKey>[]>;
    stringKeys?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionStringKey>[]>;
    strings?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionString>[]>;
    /**
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionSyntheticEngineTypeComparison>[]>;
    syntheticEngines?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionSyntheticEngine>[]>;
    /**
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionTagComparison>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionTag>[]>;
    teches?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionTech>[]>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionAzureComputeMode {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionAzureComputeModeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionAzureSkuComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionAzureSkus {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionBaseComparisonBasic {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionBaseConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionBitness {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionBitnessComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCloudType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCloudTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionComparison {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomHostMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.HostNamingConditionConditionCustomHostMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomHostMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.HostNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomHostMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.HostNamingConditionConditionCustomProcessMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.HostNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomProcessMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionDatabaseTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionDatabaseTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionDcrumDecoder {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionDcrumDecoderComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionEntity {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionEntityIdComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionHostTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.HostNamingConditionConditionHostTechValue>;
}

export interface HostNamingConditionConditionHostTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionHypervisor {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionHypervisorTypeComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionIndexedName {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionIndexedNameComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionIndexedString {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionIndexedStringComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionIndexedTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.HostNamingConditionConditionIndexedTagValue>;
}

export interface HostNamingConditionConditionIndexedTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.HostNamingConditionConditionIndexedTagComparisonValue>;
}

export interface HostNamingConditionConditionIndexedTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionIndexedTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionInteger {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface HostNamingConditionConditionIntegerComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface HostNamingConditionConditionIpaddress {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionIpaddressComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionMobilePlatform {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionMobilePlatformComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionOsArch {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionOsType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionOsarchitectureComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionOstypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionPaasType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionPaasTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionServiceTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionServiceTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionServiceType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionServiceTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionSimpleHostTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.HostNamingConditionConditionSimpleHostTechComparisonValue>;
}

export interface HostNamingConditionConditionSimpleHostTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionSimpleTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.HostNamingConditionConditionSimpleTechComparisonValue>;
}

export interface HostNamingConditionConditionSimpleTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionString {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionStringComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionStringConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionStringKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionSyntheticEngine {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionSyntheticEngineTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.HostNamingConditionConditionTagValue>;
}

export interface HostNamingConditionConditionTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.HostNamingConditionConditionTagComparisonValue>;
}

export interface HostNamingConditionConditionTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.HostNamingConditionConditionTechValue>;
}

export interface HostNamingConditionConditionTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface HttpMonitorAnomalyDetection {
    /**
     * Thresholds for loading times
     */
    loadingTimeThresholds?: pulumi.Input<pulumi.Input<inputs.HttpMonitorAnomalyDetectionLoadingTimeThreshold>[]>;
    /**
     * Outage handling configuration
     */
    outageHandlings?: pulumi.Input<pulumi.Input<inputs.HttpMonitorAnomalyDetectionOutageHandling>[]>;
}

export interface HttpMonitorAnomalyDetectionLoadingTimeThreshold {
    enabled?: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<pulumi.Input<inputs.HttpMonitorAnomalyDetectionLoadingTimeThresholdThreshold>[]>;
}

export interface HttpMonitorAnomalyDetectionLoadingTimeThresholdThreshold {
    thresholds: pulumi.Input<pulumi.Input<inputs.HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold>[]>;
}

export interface HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold {
    eventIndex?: pulumi.Input<number>;
    requestIndex?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    valueMs: pulumi.Input<number>;
}

export interface HttpMonitorAnomalyDetectionOutageHandling {
    globalOutage?: pulumi.Input<boolean>;
    globalOutagePolicies?: pulumi.Input<pulumi.Input<inputs.HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy>[]>;
    localOutage?: pulumi.Input<boolean>;
    localOutagePolicies?: pulumi.Input<pulumi.Input<inputs.HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy>[]>;
    retryOnError?: pulumi.Input<boolean>;
}

export interface HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy {
    consecutiveRuns: pulumi.Input<number>;
}

export interface HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy {
    affectedLocations: pulumi.Input<number>;
    consecutiveRuns: pulumi.Input<number>;
}

export interface HttpMonitorCookiesCookies {
    cookies: pulumi.Input<pulumi.Input<inputs.HttpMonitorCookiesCookiesCookie>[]>;
}

export interface HttpMonitorCookiesCookiesCookie {
    domain: pulumi.Input<string>;
    name: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface HttpMonitorPerformanceThresholds {
    thresholds: pulumi.Input<pulumi.Input<inputs.HttpMonitorPerformanceThresholdsThreshold>[]>;
}

export interface HttpMonitorPerformanceThresholdsThreshold {
    event: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
}

export interface HttpMonitorScript {
    /**
     * A HTTP request to be performed by the monitor.
     */
    requests: pulumi.Input<pulumi.Input<inputs.HttpMonitorScriptRequest>[]>;
}

export interface HttpMonitorScriptRequest {
    authentication?: pulumi.Input<inputs.HttpMonitorScriptRequestAuthentication>;
    body?: pulumi.Input<string>;
    configuration?: pulumi.Input<inputs.HttpMonitorScriptRequestConfiguration>;
    description?: pulumi.Input<string>;
    method: pulumi.Input<string>;
    postProcessing?: pulumi.Input<string>;
    preProcessing?: pulumi.Input<string>;
    requestTimeout?: pulumi.Input<number>;
    url: pulumi.Input<string>;
    validation?: pulumi.Input<inputs.HttpMonitorScriptRequestValidation>;
}

export interface HttpMonitorScriptRequestAuthentication {
    credentials: pulumi.Input<string>;
    kdcIp?: pulumi.Input<string>;
    realmName?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttpMonitorScriptRequestConfiguration {
    acceptAnyCertificate?: pulumi.Input<boolean>;
    clientCertificate?: pulumi.Input<string>;
    followRedirects?: pulumi.Input<boolean>;
    headers?: pulumi.Input<inputs.HttpMonitorScriptRequestConfigurationHeaders>;
    sensitiveData?: pulumi.Input<boolean>;
    userAgent?: pulumi.Input<string>;
}

export interface HttpMonitorScriptRequestConfigurationHeaders {
    headers: pulumi.Input<pulumi.Input<inputs.HttpMonitorScriptRequestConfigurationHeadersHeader>[]>;
}

export interface HttpMonitorScriptRequestConfigurationHeadersHeader {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface HttpMonitorScriptRequestValidation {
    rules: pulumi.Input<pulumi.Input<inputs.HttpMonitorScriptRequestValidationRule>[]>;
}

export interface HttpMonitorScriptRequestValidationRule {
    passIfFound?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface HttpMonitorTag {
    /**
     * Tag with source of a Dynatrace entity.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.HttpMonitorTagTag>[]>;
}

export interface HttpMonitorTagTag {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface IamGroupPermissions {
    /**
     * A Permission
     */
    permissions: pulumi.Input<pulumi.Input<inputs.IamGroupPermissionsPermission>[]>;
}

export interface IamGroupPermissionsPermission {
    name: pulumi.Input<string>;
    scope: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ImsBridgesQueueManager {
    /**
     * Queue manager definition for IMS bridge
     */
    queueManagers?: pulumi.Input<pulumi.Input<inputs.ImsBridgesQueueManagerQueueManager>[]>;
}

export interface ImsBridgesQueueManagerQueueManager {
    /**
     * The name of the IMS bridge
     */
    name: pulumi.Input<string>;
    queueManagerQueues?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface K8sClusterAnomaliesCpuRequestsSaturation {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sClusterAnomaliesCpuRequestsSaturationConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sClusterAnomaliesCpuRequestsSaturationConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sClusterAnomaliesMemoryRequestsSaturation {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sClusterAnomaliesMemoryRequestsSaturationConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sClusterAnomaliesMemoryRequestsSaturationConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sClusterAnomaliesMonitoringIssues {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sClusterAnomaliesMonitoringIssuesConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sClusterAnomaliesMonitoringIssuesConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
}

export interface K8sClusterAnomaliesPodsSaturation {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sClusterAnomaliesPodsSaturationConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sClusterAnomaliesPodsSaturationConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sClusterAnomaliesReadinessIssues {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sClusterAnomaliesReadinessIssuesConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sClusterAnomaliesReadinessIssuesConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
}

export interface K8sCredentialsEventsFieldSelector {
    /**
     * Whether subscription to this events field selector is enabled (value set to `true`). If disabled (value set to `false`), Dynatrace will stop fetching events from the Kubernetes API for this events field selector
     */
    active: pulumi.Input<boolean>;
    /**
     * The field selector string (url decoding is applied) when storing it.
     */
    fieldSelector: pulumi.Input<string>;
    /**
     * A label of the events field selector.
     */
    label: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface K8sNamespaceAnomaliesCpuLimitsQuotaSaturation {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sNamespaceAnomaliesCpuLimitsQuotaSaturationConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sNamespaceAnomaliesCpuLimitsQuotaSaturationConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sNamespaceAnomaliesCpuRequestsQuotaSaturation {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sNamespaceAnomaliesCpuRequestsQuotaSaturationConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sNamespaceAnomaliesCpuRequestsQuotaSaturationConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sNamespaceAnomaliesMemoryLimitsQuotaSaturation {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sNamespaceAnomaliesMemoryRequestsQuotaSaturation {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sNamespaceAnomaliesPodsQuotaSaturation {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sNamespaceAnomaliesPodsQuotaSaturationConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sNamespaceAnomaliesPodsQuotaSaturationConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sNodeAnomaliesCpuRequestsSaturation {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sNodeAnomaliesCpuRequestsSaturationConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sNodeAnomaliesCpuRequestsSaturationConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sNodeAnomaliesMemoryRequestsSaturation {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sNodeAnomaliesMemoryRequestsSaturationConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sNodeAnomaliesMemoryRequestsSaturationConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sNodeAnomaliesNodeProblematicCondition {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sNodeAnomaliesNodeProblematicConditionConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sNodeAnomaliesNodeProblematicConditionConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
}

export interface K8sNodeAnomaliesPodsSaturation {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sNodeAnomaliesPodsSaturationConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sNodeAnomaliesPodsSaturationConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sNodeAnomaliesReadinessIssues {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sNodeAnomaliesReadinessIssuesConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sNodeAnomaliesReadinessIssuesConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
}

export interface K8sPvcAnomaliesLowDiskSpaceCritical {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sPvcAnomaliesLowDiskSpaceCriticalConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sPvcAnomaliesLowDiskSpaceCriticalConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sPvcAnomaliesLowDiskSpaceCriticalPercentage {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sPvcAnomaliesLowDiskSpaceCriticalPercentageConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sPvcAnomaliesLowDiskSpaceCriticalPercentageConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sWorkloadAnomaliesContainerRestarts {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sWorkloadAnomaliesContainerRestartsConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sWorkloadAnomaliesContainerRestartsConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sWorkloadAnomaliesDeploymentStuck {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sWorkloadAnomaliesDeploymentStuckConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sWorkloadAnomaliesDeploymentStuckConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
}

export interface K8sWorkloadAnomaliesHighCpuThrottling {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sWorkloadAnomaliesHighCpuThrottlingConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sWorkloadAnomaliesHighCpuThrottlingConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sWorkloadAnomaliesHighCpuUsage {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sWorkloadAnomaliesHighCpuUsageConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sWorkloadAnomaliesHighCpuUsageConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sWorkloadAnomaliesHighMemoryUsage {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sWorkloadAnomaliesHighMemoryUsageConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sWorkloadAnomaliesHighMemoryUsageConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sWorkloadAnomaliesNotAllPodsReady {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sWorkloadAnomaliesNotAllPodsReadyConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sWorkloadAnomaliesNotAllPodsReadyConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
}

export interface K8sWorkloadAnomaliesPendingPods {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sWorkloadAnomaliesPendingPodsConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sWorkloadAnomaliesPendingPodsConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
}

export interface K8sWorkloadAnomaliesPodStuckInTerminating {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sWorkloadAnomaliesPodStuckInTerminatingConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sWorkloadAnomaliesPodStuckInTerminatingConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
}

export interface K8sWorkloadAnomaliesWorkloadWithoutReadyPods {
    /**
     * Alert if
     */
    configuration?: pulumi.Input<inputs.K8sWorkloadAnomaliesWorkloadWithoutReadyPodsConfiguration>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface K8sWorkloadAnomaliesWorkloadWithoutReadyPodsConfiguration {
    observationPeriodInMinutes: pulumi.Input<number>;
    samplePeriodInMinutes: pulumi.Input<number>;
}

export interface KubernetesEventPatterns {
    eventPatterns: pulumi.Input<pulumi.Input<inputs.KubernetesEventPatternsEventPattern>[]>;
}

export interface KubernetesEventPatternsEventPattern {
    active: pulumi.Input<boolean>;
    label: pulumi.Input<string>;
    pattern: pulumi.Input<string>;
}

export interface LogCustomSourceContext {
    /**
     * Define Custom Log Source only within context if provided
     */
    contexts: pulumi.Input<pulumi.Input<inputs.LogCustomSourceContextContext>[]>;
}

export interface LogCustomSourceContextContext {
    attribute: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogCustomSourceCustomLogSource {
    /**
     * Possible Values: `LOG_PATH_PATTERN`, `WINDOWS_EVENT_LOG`
     */
    type: pulumi.Input<string>;
    /**
     * It might be either an absolute path to log(s) with optional wildcards or Windows Event Log name.
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogEventsEventTemplate {
    /**
     * Davis® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
     */
    davisMerge?: pulumi.Input<boolean>;
    /**
     * The description of the event to trigger.
     */
    description: pulumi.Input<string>;
    /**
     * Possible Values: `AVAILABILITY`, `CUSTOM_ALERT`, `CUSTOM_ANNOTATION`, `CUSTOM_CONFIGURATION`, `CUSTOM_DEPLOYMENT`, `ERROR`, `INFO`, `MARKED_FOR_TERMINATION`, `RESOURCE`, `SLOWDOWN`
     */
    eventType: pulumi.Input<string>;
    /**
     * Set of additional key-value properties to be attached to the triggered event.
     */
    metadata?: pulumi.Input<inputs.LogEventsEventTemplateMetadata>;
    /**
     * The title of the event to trigger.
     */
    title: pulumi.Input<string>;
}

export interface LogEventsEventTemplateMetadata {
    items: pulumi.Input<pulumi.Input<inputs.LogEventsEventTemplateMetadataItem>[]>;
}

export interface LogEventsEventTemplateMetadataItem {
    metadataKey: pulumi.Input<string>;
    metadataValue: pulumi.Input<string>;
}

export interface LogProcessingProcessorDefinition {
    rule: pulumi.Input<string>;
}

export interface LogProcessingRuleTesting {
    sampleLog: pulumi.Input<string>;
}

export interface LogSensitiveDataMaskingMasking {
    /**
     * Maximum one capture group is allowed. If none was given, the whole expression will be treated as a capture group.
     */
    expression: pulumi.Input<string>;
    /**
     * The string to replace the masked expression with. Irrelevant if `type` is `SHA1`.
     */
    replacement?: pulumi.Input<string>;
    /**
     * Possible Values: `SHA1`, `STRING`
     */
    type: pulumi.Input<string>;
}

export interface LogSensitiveDataMaskingMatchers {
    matchers: pulumi.Input<pulumi.Input<inputs.LogSensitiveDataMaskingMatchersMatcher>[]>;
}

export interface LogSensitiveDataMaskingMatchersMatcher {
    attribute: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogStorageMatchers {
    matchers: pulumi.Input<pulumi.Input<inputs.LogStorageMatchersMatcher>[]>;
}

export interface LogStorageMatchersMatcher {
    attribute: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogTimestampMatchers {
    matchers: pulumi.Input<pulumi.Input<inputs.LogTimestampMatchersMatcher>[]>;
}

export interface LogTimestampMatchersMatcher {
    attribute: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MaintenanceFilter {
    /**
     * A list of matching rules for dynamic filter formation.  If several rules are set, the OR logic applies
     */
    filters?: pulumi.Input<pulumi.Input<inputs.MaintenanceFilterFilter>[]>;
}

export interface MaintenanceFilterFilter {
    entityId?: pulumi.Input<string>;
    entityTags?: pulumi.Input<pulumi.Input<string>[]>;
    entityType?: pulumi.Input<string>;
    managementZones?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MaintenanceGeneralProperties {
    /**
     * A short description of the maintenance purpose
     */
    description?: pulumi.Input<string>;
    /**
     * Suppress execution of synthetic monitors during the maintenance
     */
    disableSynthetic?: pulumi.Input<boolean>;
    /**
     * The name of the maintenance window, displayed in the UI
     */
    name: pulumi.Input<string>;
    /**
     * The type of suppression of alerting and problem detection during the maintenance
     */
    suppression: pulumi.Input<string>;
    /**
     * The type of the maintenance: planned or unplanned
     */
    type: pulumi.Input<string>;
}

export interface MaintenanceSchedule {
    /**
     * The configuration for maintenance windows occuring daily
     */
    dailyRecurrence?: pulumi.Input<inputs.MaintenanceScheduleDailyRecurrence>;
    /**
     * The configuration for maintenance windows occuring monthly
     */
    monthlyRecurrence?: pulumi.Input<inputs.MaintenanceScheduleMonthlyRecurrence>;
    /**
     * The configuration for maintenance windows occuring once
     */
    onceRecurrence?: pulumi.Input<inputs.MaintenanceScheduleOnceRecurrence>;
    /**
     * The time window of the maintenance window
     */
    type: pulumi.Input<string>;
    /**
     * The configuration for maintenance windows occuring weekly
     */
    weeklyRecurrence?: pulumi.Input<inputs.MaintenanceScheduleWeeklyRecurrence>;
}

export interface MaintenanceScheduleDailyRecurrence {
    recurrenceRange: pulumi.Input<inputs.MaintenanceScheduleDailyRecurrenceRecurrenceRange>;
    timeWindow: pulumi.Input<inputs.MaintenanceScheduleDailyRecurrenceTimeWindow>;
}

export interface MaintenanceScheduleDailyRecurrenceRecurrenceRange {
    endDate: pulumi.Input<string>;
    startDate: pulumi.Input<string>;
}

export interface MaintenanceScheduleDailyRecurrenceTimeWindow {
    endTime: pulumi.Input<string>;
    startTime: pulumi.Input<string>;
    timeZone: pulumi.Input<string>;
}

export interface MaintenanceScheduleMonthlyRecurrence {
    dayOfMonth: pulumi.Input<number>;
    recurrenceRange: pulumi.Input<inputs.MaintenanceScheduleMonthlyRecurrenceRecurrenceRange>;
    timeWindow: pulumi.Input<inputs.MaintenanceScheduleMonthlyRecurrenceTimeWindow>;
}

export interface MaintenanceScheduleMonthlyRecurrenceRecurrenceRange {
    endDate: pulumi.Input<string>;
    startDate: pulumi.Input<string>;
}

export interface MaintenanceScheduleMonthlyRecurrenceTimeWindow {
    endTime: pulumi.Input<string>;
    startTime: pulumi.Input<string>;
    timeZone: pulumi.Input<string>;
}

export interface MaintenanceScheduleOnceRecurrence {
    endTime: pulumi.Input<string>;
    startTime: pulumi.Input<string>;
    timeZone: pulumi.Input<string>;
}

export interface MaintenanceScheduleWeeklyRecurrence {
    dayOfWeek: pulumi.Input<string>;
    recurrenceRange: pulumi.Input<inputs.MaintenanceScheduleWeeklyRecurrenceRecurrenceRange>;
    timeWindow: pulumi.Input<inputs.MaintenanceScheduleWeeklyRecurrenceTimeWindow>;
}

export interface MaintenanceScheduleWeeklyRecurrenceRecurrenceRange {
    endDate: pulumi.Input<string>;
    startDate: pulumi.Input<string>;
}

export interface MaintenanceScheduleWeeklyRecurrenceTimeWindow {
    endTime: pulumi.Input<string>;
    startTime: pulumi.Input<string>;
    timeZone: pulumi.Input<string>;
}

export interface MaintenanceWindowSchedule {
    /**
     * The end date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
     */
    end: pulumi.Input<string>;
    /**
     * The recurrence of the maintenance window
     */
    recurrence?: pulumi.Input<inputs.MaintenanceWindowScheduleRecurrence>;
    /**
     * The type of the schedule recurrence. Possible values are `DAILY`, `MONTHLY`, `ONCE` and `WEEKLY`
     */
    recurrenceType: pulumi.Input<string>;
    /**
     * The start date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
     */
    start: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
     */
    zoneId: pulumi.Input<string>;
}

export interface MaintenanceWindowScheduleRecurrence {
    dayOfMonth?: pulumi.Input<number>;
    dayOfWeek?: pulumi.Input<string>;
    durationMinutes: pulumi.Input<number>;
    startTime: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface MaintenanceWindowScope {
    /**
     * A list of Dynatrace entities (for example, hosts or services) to be included in the scope.  Allowed values are Dynatrace entity IDs
     */
    entities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of matching rules for dynamic scope formation.  If several rules are set, the OR logic applies
     */
    matches?: pulumi.Input<pulumi.Input<inputs.MaintenanceWindowScopeMatch>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface MaintenanceWindowScopeMatch {
    mzId?: pulumi.Input<string>;
    tagCombination?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.MaintenanceWindowScopeMatchTag>[]>;
    /**
     * The type of the maintenance: planned or unplanned
     */
    type?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface MaintenanceWindowScopeMatchTag {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneDimensionalRule {
    appliesTo: pulumi.Input<string>;
    conditions?: pulumi.Input<pulumi.Input<inputs.ManagementZoneDimensionalRuleCondition>[]>;
    enabled?: pulumi.Input<boolean>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneDimensionalRuleCondition {
    key: pulumi.Input<string>;
    match: pulumi.Input<string>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneEntitySelectorBasedRule {
    enabled?: pulumi.Input<boolean>;
    selector?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRule {
    conditions?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleCondition>[]>;
    enabled?: pulumi.Input<boolean>;
    propagationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleCondition {
    /**
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionApplicationTypeComparison>[]>;
    applicationTypes?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionApplicationType>[]>;
    azureComputeModeComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionAzureComputeModeComparison>[]>;
    /**
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionAzureComputeMode>[]>;
    /**
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionAzureSkuComparision>[]>;
    azureSkus?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionAzureSkus>[]>;
    /**
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionBaseComparisonBasic>[]>;
    /**
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionBaseConditionKey>[]>;
    /**
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionBitnessComparision>[]>;
    bitnesses?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionBitness>[]>;
    /**
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionCloudTypeComparison>[]>;
    cloudTypes?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionCloudType>[]>;
    comparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionComparison>[]>;
    /**
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionCustomApplicationTypeComparison>[]>;
    customApplicationTypes?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionCustomApplicationType>[]>;
    /**
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionCustomHostMetadataConditionKey>[]>;
    customHostMetadatas?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionCustomHostMetadata>[]>;
    /**
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionCustomProcessMetadataConditionKey>[]>;
    customProcessMetadatas?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionCustomProcessMetadata>[]>;
    databaseTopologies?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionDatabaseTopology>[]>;
    /**
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionDatabaseTopologyComparison>[]>;
    /**
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionDcrumDecoderComparison>[]>;
    dcrumDecoders?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionDcrumDecoder>[]>;
    entities?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionEntity>[]>;
    /**
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionEntityIdComparison>[]>;
    hostTeches?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionHostTech>[]>;
    /**
     * @deprecated `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionHypervisorTypeComparision>[]>;
    hypervisors?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionHypervisor>[]>;
    /**
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIndexedNameComparison>[]>;
    indexedNames?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIndexedName>[]>;
    /**
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIndexedStringComparison>[]>;
    indexedStrings?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIndexedString>[]>;
    /**
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIndexedTagComparison>[]>;
    indexedTags?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIndexedTag>[]>;
    /**
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIntegerComparison>[]>;
    integers?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionInteger>[]>;
    /**
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIpaddressComparison>[]>;
    ipaddresses?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIpaddress>[]>;
    keys?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionKey>[]>;
    /**
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionMobilePlatformComparison>[]>;
    mobilePlatforms?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionMobilePlatform>[]>;
    osArches?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionOsArch>[]>;
    osTypes?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionOsType>[]>;
    /**
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionOsarchitectureComparison>[]>;
    /**
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionOstypeComparison>[]>;
    /**
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionPaasTypeComparison>[]>;
    paasTypes?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionPaasType>[]>;
    /**
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionProcessMetadataConditionKey>[]>;
    processMetadatas?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionProcessMetadata>[]>;
    serviceTopologies?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionServiceTopology>[]>;
    /**
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionServiceTopologyComparison>[]>;
    /**
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionServiceTypeComparison>[]>;
    serviceTypes?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionServiceType>[]>;
    /**
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionSimpleHostTechComparison>[]>;
    /**
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionSimpleTechComparison>[]>;
    /**
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionStringComparison>[]>;
    /**
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionStringConditionKey>[]>;
    stringKeys?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionStringKey>[]>;
    strings?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionString>[]>;
    /**
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionSyntheticEngineTypeComparison>[]>;
    syntheticEngines?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionSyntheticEngine>[]>;
    /**
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionTagComparison>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionTag>[]>;
    teches?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionTech>[]>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionAzureComputeMode {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionAzureComputeModeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionAzureSkuComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionAzureSkus {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionBaseComparisonBasic {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionBaseConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionBitness {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionBitnessComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCloudType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCloudTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionComparison {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomHostMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ManagementZoneRuleConditionCustomHostMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomHostMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ManagementZoneRuleConditionCustomHostMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomHostMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomHostMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ManagementZoneRuleConditionCustomProcessMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ManagementZoneRuleConditionCustomProcessMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomProcessMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomProcessMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionDatabaseTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionDatabaseTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionDcrumDecoder {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionDcrumDecoderComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionEntity {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionEntityIdComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionHostTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ManagementZoneRuleConditionHostTechValue>;
}

export interface ManagementZoneRuleConditionHostTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionHypervisor {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionHypervisorTypeComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionIndexedName {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionIndexedNameComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionIndexedString {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionIndexedStringComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionIndexedTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ManagementZoneRuleConditionIndexedTagValue>;
}

export interface ManagementZoneRuleConditionIndexedTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ManagementZoneRuleConditionIndexedTagComparisonValue>;
}

export interface ManagementZoneRuleConditionIndexedTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionIndexedTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionInteger {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface ManagementZoneRuleConditionIntegerComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface ManagementZoneRuleConditionIpaddress {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionIpaddressComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionMobilePlatform {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionMobilePlatformComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionOsArch {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionOsType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionOsarchitectureComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionOstypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionPaasType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionPaasTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionServiceTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionServiceTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionServiceType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionServiceTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionSimpleHostTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ManagementZoneRuleConditionSimpleHostTechComparisonValue>;
}

export interface ManagementZoneRuleConditionSimpleHostTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionSimpleTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ManagementZoneRuleConditionSimpleTechComparisonValue>;
}

export interface ManagementZoneRuleConditionSimpleTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionString {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionStringComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionStringConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionStringKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionSyntheticEngine {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionSyntheticEngineTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ManagementZoneRuleConditionTagValue>;
}

export interface ManagementZoneRuleConditionTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ManagementZoneRuleConditionTagComparisonValue>;
}

export interface ManagementZoneRuleConditionTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ManagementZoneRuleConditionTechValue>;
}

export interface ManagementZoneRuleConditionTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ManagementZoneV2Rules {
    /**
     * A management zone rule
     */
    rules?: pulumi.Input<pulumi.Input<inputs.ManagementZoneV2RulesRule>[]>;
}

export interface ManagementZoneV2RulesRule {
    attributeRule?: pulumi.Input<inputs.ManagementZoneV2RulesRuleAttributeRule>;
    dimensionRule?: pulumi.Input<inputs.ManagementZoneV2RulesRuleDimensionRule>;
    enabled: pulumi.Input<boolean>;
    entitySelector?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ManagementZoneV2RulesRuleAttributeRule {
    attributeConditions: pulumi.Input<inputs.ManagementZoneV2RulesRuleAttributeRuleAttributeConditions>;
    azureToPgpropagation?: pulumi.Input<boolean>;
    azureToServicePropagation?: pulumi.Input<boolean>;
    customDeviceGroupToCustomDevicePropagation?: pulumi.Input<boolean>;
    entityType: pulumi.Input<string>;
    hostToPgpropagation?: pulumi.Input<boolean>;
    pgToHostPropagation?: pulumi.Input<boolean>;
    pgToServicePropagation?: pulumi.Input<boolean>;
    serviceToHostPropagation?: pulumi.Input<boolean>;
    serviceToPgpropagation?: pulumi.Input<boolean>;
}

export interface ManagementZoneV2RulesRuleAttributeRuleAttributeConditions {
    conditions?: pulumi.Input<pulumi.Input<inputs.ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsCondition>[]>;
}

export interface ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsCondition {
    caseSensitive?: pulumi.Input<boolean>;
    dynamicKey?: pulumi.Input<string>;
    dynamicKeySource?: pulumi.Input<string>;
    entityId?: pulumi.Input<string>;
    enumValue?: pulumi.Input<string>;
    integerValue?: pulumi.Input<number>;
    key: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    stringValue?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface ManagementZoneV2RulesRuleDimensionRule {
    appliesTo: pulumi.Input<string>;
    dimensionConditions?: pulumi.Input<inputs.ManagementZoneV2RulesRuleDimensionRuleDimensionConditions>;
}

export interface ManagementZoneV2RulesRuleDimensionRuleDimensionConditions {
    conditions?: pulumi.Input<pulumi.Input<inputs.ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsCondition>[]>;
}

export interface ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsCondition {
    conditionType: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    ruleMatcher: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface MetricEventsEventTemplate {
    /**
     * Davis® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
     */
    davisMerge?: pulumi.Input<boolean>;
    /**
     * The description of the event to trigger.
     */
    description: pulumi.Input<string>;
    /**
     * The event type to trigger.
     */
    eventType: pulumi.Input<string>;
    /**
     * Set of additional key-value properties to be attached to the triggered event.
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.MetricEventsEventTemplateMetadata>[]>;
    /**
     * The title of the event to trigger.
     */
    title: pulumi.Input<string>;
}

export interface MetricEventsEventTemplateMetadata {
    metadataKey: pulumi.Input<string>;
    metadataValue: pulumi.Input<string>;
}

export interface MetricEventsModelProperties {
    /**
     * The alert condition of the model properties
     */
    alertCondition: pulumi.Input<string>;
    /**
     * The ability to set an alert on missing data in a metric. When enabled, missing data samples will contribute as violating samples defined in advanced model properties. We recommend to not alert on missing data for sparse timeseries as this leads to alert spam.
     */
    alertOnNoData: pulumi.Input<boolean>;
    /**
     * The number of one-minute samples within the evaluation window that must go back to normal to close the event.
     */
    dealertingSamples: pulumi.Input<number>;
    /**
     * The number of one-minute samples that form the sliding evaluation window.
     */
    samples: pulumi.Input<number>;
    /**
     * Controls how many times the signal fluctuation is added to the baseline to produce the actual threshold for alerting
     */
    signalFluctuation?: pulumi.Input<number>;
    /**
     * Raise an event if this value is violated
     */
    threshold?: pulumi.Input<number>;
    /**
     * Controls the width of the confidence band and larger values lead to a less sensitive model
     */
    tolerance?: pulumi.Input<number>;
    /**
     * Metric-key-based query definitions only support static thresholds.
     */
    type: pulumi.Input<string>;
    /**
     * The number of one-minute samples within the evaluation window that must violate to trigger an event.
     */
    violatingSamples: pulumi.Input<number>;
}

export interface MetricEventsQueryDefinition {
    /**
     * The aggregation of the query definition
     */
    aggregation?: pulumi.Input<string>;
    /**
     * The dimension filters of the query definition
     */
    dimensionFilter?: pulumi.Input<inputs.MetricEventsQueryDefinitionDimensionFilter>;
    /**
     * Use rule-based filters to define the scope this event monitors.
     */
    entityFilter?: pulumi.Input<inputs.MetricEventsQueryDefinitionEntityFilter>;
    /**
     * The metric key of the query definition
     */
    metricKey: pulumi.Input<string>;
    /**
     * To learn more, visit [Metric Selector](https://dt-url.net/metselad)
     */
    metricSelector?: pulumi.Input<string>;
    /**
     * Minute offset of sliding evaluation window for metrics with latency
     */
    queryOffset?: pulumi.Input<number>;
    /**
     * The type of query definition
     */
    type: pulumi.Input<string>;
}

export interface MetricEventsQueryDefinitionDimensionFilter {
    filters?: pulumi.Input<pulumi.Input<inputs.MetricEventsQueryDefinitionDimensionFilterFilter>[]>;
}

export interface MetricEventsQueryDefinitionDimensionFilterFilter {
    dimensionKey: pulumi.Input<string>;
    dimensionValue: pulumi.Input<string>;
}

export interface MetricEventsQueryDefinitionEntityFilter {
    conditions?: pulumi.Input<pulumi.Input<inputs.MetricEventsQueryDefinitionEntityFilterCondition>[]>;
    dimensionKey?: pulumi.Input<string>;
}

export interface MetricEventsQueryDefinitionEntityFilterCondition {
    conditions?: pulumi.Input<pulumi.Input<inputs.MetricEventsQueryDefinitionEntityFilterConditionCondition>[]>;
}

export interface MetricEventsQueryDefinitionEntityFilterConditionCondition {
    operator: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface MetricMetadataDimensions {
    dimensions: pulumi.Input<pulumi.Input<inputs.MetricMetadataDimensionsDimension>[]>;
}

export interface MetricMetadataDimensionsDimension {
    /**
     * Display name
     */
    displayName?: pulumi.Input<string>;
    key: pulumi.Input<string>;
}

export interface MetricMetadataMetricProperties {
    /**
     * Whether (true or false) the metric is relevant to a problem's impact.
     */
    impactRelevant?: pulumi.Input<boolean>;
    latency?: pulumi.Input<number>;
    maxValue?: pulumi.Input<number>;
    minValue?: pulumi.Input<number>;
    rootCauseRelevant?: pulumi.Input<boolean>;
    /**
     * Possible Values: `Error`, `Score`, `Unknown`
     */
    valueType: pulumi.Input<string>;
}

export interface MobileAppAnomaliesErrorRateIncrease {
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Alert if the percentage of user actions affected by reported errors exceeds **both** the absolute threshold and the relative threshold
     */
    errorRateIncreaseAuto?: pulumi.Input<inputs.MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto>;
    /**
     * Alert if the custom reported error rate threshold is exceeded during any 5-minute period
     */
    errorRateIncreaseFixed?: pulumi.Input<inputs.MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed>;
}

export interface MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto {
    thresholdAbsolute: pulumi.Input<number>;
    thresholdRelative: pulumi.Input<number>;
}

export interface MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed {
    sensitivity: pulumi.Input<string>;
    thresholdAbsolute: pulumi.Input<number>;
}

export interface MobileAppAnomaliesSlowUserActions {
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * no documentation available
     */
    slowUserActionsAuto?: pulumi.Input<inputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsAuto>;
    /**
     * no documentation available
     */
    slowUserActionsFixed?: pulumi.Input<inputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsFixed>;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsAuto {
    durationAvoidOveralerting: pulumi.Input<inputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting>;
    durationThresholdAll: pulumi.Input<inputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll>;
    durationThresholdSlowest: pulumi.Input<inputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest>;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting {
    minActionRate: pulumi.Input<number>;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll {
    durationThreshold: pulumi.Input<number>;
    slowdownPercentage: pulumi.Input<number>;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest {
    durationThreshold: pulumi.Input<number>;
    slowdownPercentage: pulumi.Input<number>;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsFixed {
    durationAvoidOveralerting: pulumi.Input<inputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting>;
    durationThresholdAllFixed: pulumi.Input<inputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed>;
    durationThresholdSlowest: pulumi.Input<inputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest>;
    sensitivity: pulumi.Input<string>;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting {
    minActionRate: pulumi.Input<number>;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed {
    durationThreshold: pulumi.Input<number>;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest {
    durationThreshold: pulumi.Input<number>;
}

export interface MobileAppAnomaliesUnexpectedHighLoad {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic spikes within your application.
     */
    thresholdPercentage?: pulumi.Input<number>;
}

export interface MobileAppAnomaliesUnexpectedLowLoad {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic drops within your application.
     */
    thresholdPercentage?: pulumi.Input<number>;
}

export interface MobileAppCrashRateCrashRateIncrease {
    /**
     * Alert crash rate increases when auto-detected baseline is exceeded by a certain number of users
     */
    crashRateIncreaseAuto?: pulumi.Input<inputs.MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto>;
    /**
     * Alert crash rate increases when the defined threshold is exceeded by a certain number of users
     */
    crashRateIncreaseFixed?: pulumi.Input<inputs.MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed>;
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto {
    baselineViolationPercentage: pulumi.Input<number>;
    concurrentUsers: pulumi.Input<number>;
    sensitivity: pulumi.Input<string>;
}

export interface MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed {
    absoluteCrashRate: pulumi.Input<number>;
    concurrentUsers: pulumi.Input<number>;
}

export interface MobileAppEnablementRum {
    /**
     * Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
     */
    costAndTrafficControl: pulumi.Input<number>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface MobileAppEnablementSessionReplay {
    /**
     * Before enabling, Dynatrace checks your system against the [prerequisites for Session Replay](https://dt-url.net/t23s0ppi).
     */
    onCrash: pulumi.Input<boolean>;
}

export interface MobileAppRequestErrorsErrorRules {
    errorRules: pulumi.Input<pulumi.Input<inputs.MobileAppRequestErrorsErrorRulesErrorRule>[]>;
}

export interface MobileAppRequestErrorsErrorRulesErrorRule {
    errorCodes: pulumi.Input<string>;
}

export interface MobileApplicationApdex {
    /**
     * Apdex **frustrated** threshold, in milliseconds: a duration greater than or equal to this value is considered frustrated
     */
    frustrated: pulumi.Input<number>;
    /**
     * Apdex error condition: if `true` the user session is considered frustrated when an error is reported
     */
    frustratedOnError?: pulumi.Input<boolean>;
    /**
     * Apdex **tolerable** threshold, in milliseconds: a duration greater than or equal to this value is considered tolerable
     */
    tolerable: pulumi.Input<number>;
}

export interface MobileApplicationProperties {
    /**
     * A User Action / Session Property based on a value reported by the API
     */
    apiValues?: pulumi.Input<pulumi.Input<inputs.MobileApplicationPropertiesApiValue>[]>;
    /**
     * A User Action / Session Property based on a Server Side Request Attribute
     */
    requestAttributes?: pulumi.Input<pulumi.Input<inputs.MobileApplicationPropertiesRequestAttribute>[]>;
}

export interface MobileApplicationPropertiesApiValue {
    aggregation?: pulumi.Input<string>;
    cleanupRule?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    /**
     * The name of the application
     */
    name?: pulumi.Input<string>;
    storeAsSessionProperty?: pulumi.Input<boolean>;
    storeAsUserActionProperty?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
}

export interface MobileApplicationPropertiesRequestAttribute {
    aggregation?: pulumi.Input<string>;
    cleanupRule?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    key: pulumi.Input<string>;
    storeAsSessionProperty?: pulumi.Input<boolean>;
    storeAsUserActionProperty?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
}

export interface NetworkTrafficExcludeIp {
    ipAddressForms: pulumi.Input<pulumi.Input<inputs.NetworkTrafficExcludeIpIpAddressForm>[]>;
}

export interface NetworkTrafficExcludeIpIpAddressForm {
    ipAddress: pulumi.Input<string>;
}

export interface NetworkTrafficExcludeNic {
    nicForms: pulumi.Input<pulumi.Input<inputs.NetworkTrafficExcludeNicNicForm>[]>;
}

export interface NetworkTrafficExcludeNicNicForm {
    interface: pulumi.Input<string>;
    os: pulumi.Input<string>;
}

export interface NotificationAnsibleTower {
    /**
     * Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     */
    acceptAnyCertificate: pulumi.Input<boolean>;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The custom message of the notification.   This message will be displayed in the extra variables **Message** field of your job template.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    customMessage: pulumi.Input<string>;
    /**
     * The ID of the target Ansible Tower job template
     */
    jobTemplateId: pulumi.Input<number>;
    /**
     * The URL of the target Ansible Tower job template
     */
    jobTemplateUrl: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The password for the Ansible Tower account
     */
    password?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The username of the Ansible Tower account
     */
    username: pulumi.Input<string>;
}

export interface NotificationConfig {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * Defines the actual set of fields depending on the value. See one of the following objects:  * `EMAIL` > EmailNotificationConfig  * `PAGER_DUTY` > PagerDutyNotificationConfig  * `WEBHOOK` > WebHookNotificationConfig  * `SLACK` > SlackNotificationConfig  * `HIPCHAT` > HipChatNotificationConfig  * `VICTOROPS` > VictorOpsNotificationConfig  * `SERVICE_NOW` > ServiceNowNotificationConfig  * `XMATTERS` > XMattersNotificationConfig  * `ANSIBLETOWER` > AnsibleTowerNotificationConfig  * `OPS_GENIE` > OpsGenieNotificationConfig  * `JIRA` > JiraNotificationConfig  * `TRELLO` > TrelloNotificationConfig
     */
    type: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface NotificationEmail {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The list of the email BCC-recipients
     */
    bccReceivers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    body: pulumi.Input<string>;
    /**
     * The list of the email CC-recipients
     */
    ccReceivers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The list of the email recipients
     */
    receivers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The subject of the email notifications
     */
    subject: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface NotificationJira {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
     */
    description: pulumi.Input<string>;
    /**
     * The type of the Jira issue to be created by this notification
     */
    issueType: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The password for the Jira profile
     */
    password?: pulumi.Input<string>;
    /**
     * The project key of the Jira issue to be created by this notification
     */
    projectKey: pulumi.Input<string>;
    /**
     * The summary of the Jira issue to be created by this notification.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    summary: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The URL of the Jira API endpoint
     */
    url: pulumi.Input<string>;
    /**
     * The username of the Jira profile
     */
    username: pulumi.Input<string>;
}

export interface NotificationOpsGenie {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The API key to access OpsGenie
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The region domain of the OpsGenie
     */
    domain: pulumi.Input<string>;
    /**
     * The content of the message.  You can use the following placeholders:  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem
     */
    message: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface NotificationPagerDuty {
    /**
     * The name of the PagerDuty account
     */
    account: pulumi.Input<string>;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The API key to access PagerDuty
     */
    serviceApiKey?: pulumi.Input<string>;
    /**
     * The name of the service
     */
    serviceName: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface NotificationServiceNow {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.   This field is mutually exclusive with the **url** field. You can only use one of them
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The content of the ServiceNow description.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    message: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The username to the ServiceNow account
     */
    password?: pulumi.Input<string>;
    /**
     * Send events into ServiceNow ITOM (`true`)
     */
    sendEvents: pulumi.Input<boolean>;
    /**
     * Send incidents into ServiceNow ITSM (`true`)
     */
    sendIncidents: pulumi.Input<boolean>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The URL of the on-premise ServiceNow installation.   This field is mutually exclusive with the **instanceName** field. You can only use one of them
     */
    url?: pulumi.Input<string>;
    /**
     * The username of the ServiceNow account.   Make sure that your user account has the `restService`, `webRequestAdmin`, and `x_dynat_ruxit.Integration` roles
     */
    username: pulumi.Input<string>;
}

export interface NotificationSlack {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to
     */
    channel: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    title: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The URL of the Slack WebHook.  This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
     */
    url?: pulumi.Input<string>;
}

export interface NotificationTrello {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The application key for the Trello account
     */
    applicationKey: pulumi.Input<string>;
    /**
     * The application token for the Trello account
     */
    authorizationToken?: pulumi.Input<string>;
    /**
     * The Trello board to which the card should be assigned
     */
    boardId: pulumi.Input<string>;
    /**
     * The description of the Trello card.   You can use same placeholders as in card text
     */
    description: pulumi.Input<string>;
    /**
     * The Trello list to which the card should be assigned
     */
    listId: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The Trello list to which the card of the resolved problem should be assigned
     */
    resolvedListId: pulumi.Input<string>;
    /**
     * The text of the generated Trello card.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    text: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface NotificationVictorOps {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The API key for the target VictorOps account
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`
     */
    message: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The routing key, defining the group to be notified
     */
    routingKey: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface NotificationWebHook {
    /**
     * Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     */
    acceptAnyCertificate: pulumi.Input<boolean>;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * A list of the additional HTTP headers
     */
    headers?: pulumi.Input<pulumi.Input<inputs.NotificationWebHookHeader>[]>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * Call webhook if new events merge into existing problems
     */
    notifyEventMerges?: pulumi.Input<boolean>;
    /**
     * The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    payload: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The URL of the WebHook endpoint
     */
    url: pulumi.Input<string>;
}

export interface NotificationWebHookHeader {
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NotificationXmatters {
    /**
     * Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     */
    acceptAnyCertificate: pulumi.Input<boolean>;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * A list of the additional HTTP headers
     */
    headers?: pulumi.Input<pulumi.Input<inputs.NotificationXmattersHeader>[]>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    payload: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The URL of the xMatters WebHook
     */
    url: pulumi.Input<string>;
}

export interface NotificationXmattersHeader {
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface OneagentUpdatesMaintenanceWindows {
    maintenanceWindows: pulumi.Input<pulumi.Input<inputs.OneagentUpdatesMaintenanceWindowsMaintenanceWindow>[]>;
}

export interface OneagentUpdatesMaintenanceWindowsMaintenanceWindow {
    maintenanceWindow: pulumi.Input<string>;
}

export interface OpentelemetryMetricsAdditionalAttributes {
    additionalAttributes: pulumi.Input<pulumi.Input<inputs.OpentelemetryMetricsAdditionalAttributesAdditionalAttribute>[]>;
}

export interface OpentelemetryMetricsAdditionalAttributesAdditionalAttribute {
    attributeKey: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface OpentelemetryMetricsToDropAttributes {
    toDropAttributes: pulumi.Input<pulumi.Input<inputs.OpentelemetryMetricsToDropAttributesToDropAttribute>[]>;
}

export interface OpentelemetryMetricsToDropAttributesToDropAttribute {
    attributeKey: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface OsServicesDetectionConditionsLinux {
    linuxDetectionConditions: pulumi.Input<pulumi.Input<inputs.OsServicesDetectionConditionsLinuxLinuxDetectionCondition>[]>;
}

export interface OsServicesDetectionConditionsLinuxLinuxDetectionCondition {
    condition?: pulumi.Input<string>;
    property: pulumi.Input<string>;
    startupCondition?: pulumi.Input<string>;
}

export interface OsServicesDetectionConditionsWindows {
    detectionConditionsWindows: pulumi.Input<pulumi.Input<inputs.OsServicesDetectionConditionsWindowsDetectionConditionsWindow>[]>;
}

export interface OsServicesDetectionConditionsWindowsDetectionConditionsWindow {
    condition?: pulumi.Input<string>;
    property: pulumi.Input<string>;
    startupCondition?: pulumi.Input<string>;
}

export interface OsServicesMetadata {
    items: pulumi.Input<pulumi.Input<inputs.OsServicesMetadataItem>[]>;
}

export interface OsServicesMetadataItem {
    metadataKey: pulumi.Input<string>;
    metadataValue: pulumi.Input<string>;
}

export interface OwnershipConfigOwnershipIdentifiers {
    ownershipIdentifiers: pulumi.Input<pulumi.Input<inputs.OwnershipConfigOwnershipIdentifiersOwnershipIdentifier>[]>;
}

export interface OwnershipConfigOwnershipIdentifiersOwnershipIdentifier {
    enabled: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
}

export interface OwnershipTeamsAdditionalInformation {
    /**
     * Define key/value pairs that further describe this team — for example, cost center, solution type, or business unit assignments.
     */
    additionalInformations: pulumi.Input<pulumi.Input<inputs.OwnershipTeamsAdditionalInformationAdditionalInformation>[]>;
}

export interface OwnershipTeamsAdditionalInformationAdditionalInformation {
    key: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface OwnershipTeamsContactDetails {
    contactDetails: pulumi.Input<pulumi.Input<inputs.OwnershipTeamsContactDetailsContactDetail>[]>;
}

export interface OwnershipTeamsContactDetailsContactDetail {
    email?: pulumi.Input<string>;
    integrationType: pulumi.Input<string>;
    jira?: pulumi.Input<inputs.OwnershipTeamsContactDetailsContactDetailJira>;
    msTeams?: pulumi.Input<string>;
    slackChannel?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface OwnershipTeamsContactDetailsContactDetailJira {
    defaultAssignee: pulumi.Input<string>;
    project: pulumi.Input<string>;
}

export interface OwnershipTeamsLinks {
    links: pulumi.Input<pulumi.Input<inputs.OwnershipTeamsLinksLink>[]>;
}

export interface OwnershipTeamsLinksLink {
    linkType: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface OwnershipTeamsResponsibilities {
    /**
     * Responsible for developing and maintaining high quality software. Development teams are responsible for making code changes to address performance regressions, errors, or security vulnerabilities.
     */
    development: pulumi.Input<boolean>;
    /**
     * Responsible for the administration, management, and support of the IT infrastructure including physical servers, virtualization, and cloud. Teams with infrastructure responsibility are responsible for addressing hardware issues, resource limits, and operating system vulnerabilities.
     */
    infrastructure: pulumi.Input<boolean>;
    /**
     * Responsible for ensuring that applications in development align with business needs and meet the usability requirements of users, stakeholders, customers, and external partners. Teams with line of business responsibility are responsible for understanding the customer experience and how it affects business goals.
     */
    lineOfBusiness: pulumi.Input<boolean>;
    /**
     * Responsible for deploying and managing software, with a focus on high availability and performance. Teams with operations responsibilities needs to understand the impact, priority, and team responsible for addressing problems detected by Dynatrace.
     */
    operations: pulumi.Input<boolean>;
    /**
     * Responsible for the security posture of the organization. Teams with security responsibility must understand the impact, priority, and team responsible for addressing security vulnerabilities.
     */
    security: pulumi.Input<boolean>;
}

export interface OwnershipTeamsSupplementaryIdentifiers {
    supplementaryIdentifiers: pulumi.Input<pulumi.Input<inputs.OwnershipTeamsSupplementaryIdentifiersSupplementaryIdentifier>[]>;
}

export interface OwnershipTeamsSupplementaryIdentifiersSupplementaryIdentifier {
    supplementaryIdentifier: pulumi.Input<string>;
}

export interface PgAnomaliesAvailability {
    /**
     * How to monitor the availability of the process group:  * `PROCESS_IMPACT`: Alert if any process of the group becomes unavailable.  * `MINIMUM_THRESHOLD`: Alert if the number of active processes in the group falls below the specified threshold.  * `OFF`: Availability monitoring is disabled.
     */
    method: pulumi.Input<string>;
    /**
     * Alert if the number of active processes in the group is lower than this value.
     */
    minimumThreshold?: pulumi.Input<number>;
}

export interface ProcessAvailabilityMetadata {
    items: pulumi.Input<pulumi.Input<inputs.ProcessAvailabilityMetadataItem>[]>;
}

export interface ProcessAvailabilityMetadataItem {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ProcessAvailabilityRules {
    rules: pulumi.Input<pulumi.Input<inputs.ProcessAvailabilityRulesRule>[]>;
}

export interface ProcessAvailabilityRulesRule {
    condition: pulumi.Input<string>;
    property: pulumi.Input<string>;
}

export interface ProcessGroupDetectionGroupExtraction {
    /**
     * Optionally delimit this property between *From* and *To*.
     */
    delimiter: pulumi.Input<inputs.ProcessGroupDetectionGroupExtractionDelimiter>;
    /**
     * Possible values: `DOTNET_COMMAND`, `DOTNET_COMMAND_PATH`, `ASP_NET_CORE_APPLICATION_PATH`, `AWS_ECR_ACCOUNT_ID`, `AWS_ECR_REGION`, `AWS_ECS_CLUSTER`, `AWS_ECS_CONTAINERNAME`, `AWS_ECS_FAMILY`, `AWS_ECS_REVISION`, `AWS_LAMBDA_FUNCTION_NAME`, `AWS_REGION`, `APACHE_SPARK_MASTER_IP_ADDRESS`, `APACHE_CONFIG_PATH`, `CATALINA_BASE`, `CATALINA_HOME`, `CLOUD_FOUNDRY_APP_NAME`, `CLOUD_FOUNDRY_APPLICATION_ID`, `CLOUD_FOUNDRY_INSTANCE_INDEX`, `CLOUD_FOUNDRY_SPACE_NAME`, `CLOUD_FOUNDRY_SPACE_ID`, `COLDFUSION_JVM_CONFIG_FILE`, `SERVICE_NAME`, `COMMAND_LINE_ARGS`, `CONTAINER_ID`, `CONTAINER_IMAGE_VERSION`, `CONTAINER_NAME`, `DECLARATIVE_ID`, `CONTAINER_IMAGE_NAME`, `RUXIT_CLUSTER_ID`, `RUXIT_NODE_ID`, `EXE_NAME`, `EXE_PATH`, `ELASTIC_SEARCH_CLUSTER_NAME`, `ELASTIC_SEARCH_NODE_NAME`, `EQUINOX_CONFIG_PATH`, `GLASSFISH_DOMAIN_NAME`, `GLASSFISH_INSTANCE_NAME`, `PG_ID_CALC_INPUT_KEY_LINKAGE`, `GAE_INSTANCE`, `GAE_SERVICE`, `GOOGLE_CLOUD_PROJECT`, `HYBRIS_BIN_DIR`, `HYBRIS_CONFIG_DIR`, `HYBRIS_DATA_DIR`, `IBM_CICS_REGION`, `IBM_CICS_IMS_APPLID`, `IBM_CICS_IMS_JOBNAME`, `IBM_CTG_NAME`, `IBM_IMS_CONNECT`, `IBM_IMS_CONTROL`, `IBM_IMS_MPR`, `IBM_IMS_SOAP_GW_NAME`, `IIB_BROKER_NAME`, `IIB_EXECUTION_GROUP_NAME`, `IIS_APP_POOL`, `IIS_ROLE_NAME`, `JBOSS_HOME`, `JBOSS_MODE`, `JBOSS_SERVER_NAME`, `JAVA_JAR_FILE`, `JAVA_JAR_PATH`, `JAVA_MAIN_CLASS`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`, `KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`, `MSSQL_INSTANCE_NAME`, `NODEJS_APP_NAME`, `NODEJS_APP_BASE_DIR`, `NODEJS_SCRIPT_NAME`, `ORACLE_SID`, `PHP_CLI_SCRIPT_PATH`, `PHP_CLI_WORKING_DIR`, `SOFTWAREAG_INSTALL_ROOT`, `SOFTWAREAG_PRODUCTPROPNAME`, `SPRINGBOOT_APP_NAME`, `SPRINGBOOT_PROFILE_NAME`, `SPRINGBOOT_STARTUP_CLASS`, `TIBCO_BUSINESSWORKS_CE_APP_NAME`, `TIBCO_BUSINESSWORKS_CE_VERSION`, `TIBCO_BUSINESSWORKS_APP_NODE_NAME`, `TIBCO_BUSINESSWORKS_APP_SPACE_NAME`, `TIBCO_BUSINESSWORKS_DOMAIN_NAME`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE_PATH`, `TIBCO_BUSINESSWORKS_HOME`, `VARNISH_INSTANCE_NAME`, `WEBLOGIC_NAME`, `WEBLOGIC_CLUSTER_NAME`, `WEBLOGIC_DOMAIN_NAME`, `WEBLOGIC_HOME`, `WEBSPHERE_LIBERTY_SERVER_NAME`, `WEBSPHERE_CELL_NAME`, `WEBSPHERE_CLUSTER_NAME`, `WEBSPHERE_NODE_NAME`, `WEBSPHERE_SERVER_NAME`
     */
    property: pulumi.Input<string>;
    /**
     * If this option is selected, the default Dynatrace behavior is disabled for these detected processes. Only this rule is used to separate the process group.
     */
    standaloneRule?: pulumi.Input<boolean>;
}

export interface ProcessGroupDetectionGroupExtractionDelimiter {
    from?: pulumi.Input<string>;
    removeIds: pulumi.Input<boolean>;
    to?: pulumi.Input<string>;
}

export interface ProcessGroupDetectionInstanceExtraction {
    /**
     * Optionally delimit this property between *From* and *To*.
     */
    delimiter?: pulumi.Input<inputs.ProcessGroupDetectionInstanceExtractionDelimiter>;
    /**
     * Possible values: `DOTNET_COMMAND`, `DOTNET_COMMAND_PATH`, `ASP_NET_CORE_APPLICATION_PATH`, `AWS_ECR_ACCOUNT_ID`, `AWS_ECR_REGION`, `AWS_ECS_CLUSTER`, `AWS_ECS_CONTAINERNAME`, `AWS_ECS_FAMILY`, `AWS_ECS_REVISION`, `AWS_LAMBDA_FUNCTION_NAME`, `AWS_REGION`, `APACHE_SPARK_MASTER_IP_ADDRESS`, `APACHE_CONFIG_PATH`, `CATALINA_BASE`, `CATALINA_HOME`, `CLOUD_FOUNDRY_APP_NAME`, `CLOUD_FOUNDRY_APPLICATION_ID`, `CLOUD_FOUNDRY_INSTANCE_INDEX`, `CLOUD_FOUNDRY_SPACE_NAME`, `CLOUD_FOUNDRY_SPACE_ID`, `COLDFUSION_JVM_CONFIG_FILE`, `SERVICE_NAME`, `COMMAND_LINE_ARGS`, `CONTAINER_ID`, `CONTAINER_IMAGE_VERSION`, `CONTAINER_NAME`, `DECLARATIVE_ID`, `CONTAINER_IMAGE_NAME`, `RUXIT_CLUSTER_ID`, `RUXIT_NODE_ID`, `EXE_NAME`, `EXE_PATH`, `ELASTIC_SEARCH_CLUSTER_NAME`, `ELASTIC_SEARCH_NODE_NAME`, `EQUINOX_CONFIG_PATH`, `GLASSFISH_DOMAIN_NAME`, `GLASSFISH_INSTANCE_NAME`, `PG_ID_CALC_INPUT_KEY_LINKAGE`, `GAE_INSTANCE`, `GAE_SERVICE`, `GOOGLE_CLOUD_PROJECT`, `HYBRIS_BIN_DIR`, `HYBRIS_CONFIG_DIR`, `HYBRIS_DATA_DIR`, `IBM_CICS_REGION`, `IBM_CICS_IMS_APPLID`, `IBM_CICS_IMS_JOBNAME`, `IBM_CTG_NAME`, `IBM_IMS_CONNECT`, `IBM_IMS_CONTROL`, `IBM_IMS_MPR`, `IBM_IMS_SOAP_GW_NAME`, `IIB_BROKER_NAME`, `IIB_EXECUTION_GROUP_NAME`, `IIS_APP_POOL`, `IIS_ROLE_NAME`, `JBOSS_HOME`, `JBOSS_MODE`, `JBOSS_SERVER_NAME`, `JAVA_JAR_FILE`, `JAVA_JAR_PATH`, `JAVA_MAIN_CLASS`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`, `KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`, `MSSQL_INSTANCE_NAME`, `NODEJS_APP_NAME`, `NODEJS_APP_BASE_DIR`, `NODEJS_SCRIPT_NAME`, `ORACLE_SID`, `PHP_CLI_SCRIPT_PATH`, `PHP_CLI_WORKING_DIR`, `SOFTWAREAG_INSTALL_ROOT`, `SOFTWAREAG_PRODUCTPROPNAME`, `SPRINGBOOT_APP_NAME`, `SPRINGBOOT_PROFILE_NAME`, `SPRINGBOOT_STARTUP_CLASS`, `TIBCO_BUSINESSWORKS_CE_APP_NAME`, `TIBCO_BUSINESSWORKS_CE_VERSION`, `TIBCO_BUSINESSWORKS_APP_NODE_NAME`, `TIBCO_BUSINESSWORKS_APP_SPACE_NAME`, `TIBCO_BUSINESSWORKS_DOMAIN_NAME`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE_PATH`, `TIBCO_BUSINESSWORKS_HOME`, `VARNISH_INSTANCE_NAME`, `WEBLOGIC_NAME`, `WEBLOGIC_CLUSTER_NAME`, `WEBLOGIC_DOMAIN_NAME`, `WEBLOGIC_HOME`, `WEBSPHERE_LIBERTY_SERVER_NAME`, `WEBSPHERE_CELL_NAME`, `WEBSPHERE_CLUSTER_NAME`, `WEBSPHERE_NODE_NAME`, `WEBSPHERE_SERVER_NAME`
     */
    property?: pulumi.Input<string>;
}

export interface ProcessGroupDetectionInstanceExtractionDelimiter {
    from?: pulumi.Input<string>;
    removeIds: pulumi.Input<boolean>;
    to?: pulumi.Input<string>;
}

export interface ProcessGroupDetectionProcessDetection {
    /**
     * The substring to be contained in the value `property` refers to. Case Sensitive
     */
    containedString: pulumi.Input<string>;
    /**
     * Possible values: `DOTNET_COMMAND`, `DOTNET_COMMAND_PATH`, `ASP_NET_CORE_APPLICATION_PATH`, `AWS_ECR_ACCOUNT_ID`, `AWS_ECR_REGION`, `AWS_ECS_CLUSTER`, `AWS_ECS_CONTAINERNAME`, `AWS_ECS_FAMILY`, `AWS_ECS_REVISION`, `AWS_LAMBDA_FUNCTION_NAME`, `AWS_REGION`, `APACHE_SPARK_MASTER_IP_ADDRESS`, `APACHE_CONFIG_PATH`, `CATALINA_BASE`, `CATALINA_HOME`, `CLOUD_FOUNDRY_APP_NAME`, `CLOUD_FOUNDRY_APPLICATION_ID`, `CLOUD_FOUNDRY_INSTANCE_INDEX`, `CLOUD_FOUNDRY_SPACE_NAME`, `CLOUD_FOUNDRY_SPACE_ID`, `COLDFUSION_JVM_CONFIG_FILE`, `SERVICE_NAME`, `COMMAND_LINE_ARGS`, `CONTAINER_ID`, `CONTAINER_IMAGE_VERSION`, `CONTAINER_NAME`, `DECLARATIVE_ID`, `CONTAINER_IMAGE_NAME`, `RUXIT_CLUSTER_ID`, `RUXIT_NODE_ID`, `EXE_NAME`, `EXE_PATH`, `ELASTIC_SEARCH_CLUSTER_NAME`, `ELASTIC_SEARCH_NODE_NAME`, `EQUINOX_CONFIG_PATH`, `GLASSFISH_DOMAIN_NAME`, `GLASSFISH_INSTANCE_NAME`, `PG_ID_CALC_INPUT_KEY_LINKAGE`, `GAE_INSTANCE`, `GAE_SERVICE`, `GOOGLE_CLOUD_PROJECT`, `HYBRIS_BIN_DIR`, `HYBRIS_CONFIG_DIR`, `HYBRIS_DATA_DIR`, `IBM_CICS_REGION`, `IBM_CICS_IMS_APPLID`, `IBM_CICS_IMS_JOBNAME`, `IBM_CTG_NAME`, `IBM_IMS_CONNECT`, `IBM_IMS_CONTROL`, `IBM_IMS_MPR`, `IBM_IMS_SOAP_GW_NAME`, `IIB_BROKER_NAME`, `IIB_EXECUTION_GROUP_NAME`, `IIS_APP_POOL`, `IIS_ROLE_NAME`, `JBOSS_HOME`, `JBOSS_MODE`, `JBOSS_SERVER_NAME`, `JAVA_JAR_FILE`, `JAVA_JAR_PATH`, `JAVA_MAIN_CLASS`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`, `KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`, `MSSQL_INSTANCE_NAME`, `NODEJS_APP_NAME`, `NODEJS_APP_BASE_DIR`, `NODEJS_SCRIPT_NAME`, `ORACLE_SID`, `PHP_CLI_SCRIPT_PATH`, `PHP_CLI_WORKING_DIR`, `SOFTWAREAG_INSTALL_ROOT`, `SOFTWAREAG_PRODUCTPROPNAME`, `SPRINGBOOT_APP_NAME`, `SPRINGBOOT_PROFILE_NAME`, `SPRINGBOOT_STARTUP_CLASS`, `TIBCO_BUSINESSWORKS_CE_APP_NAME`, `TIBCO_BUSINESSWORKS_CE_VERSION`, `TIBCO_BUSINESSWORKS_APP_NODE_NAME`, `TIBCO_BUSINESSWORKS_APP_SPACE_NAME`, `TIBCO_BUSINESSWORKS_DOMAIN_NAME`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE_PATH`, `TIBCO_BUSINESSWORKS_HOME`, `VARNISH_INSTANCE_NAME`, `WEBLOGIC_NAME`, `WEBLOGIC_CLUSTER_NAME`, `WEBLOGIC_DOMAIN_NAME`, `WEBLOGIC_HOME`, `WEBSPHERE_LIBERTY_SERVER_NAME`, `WEBSPHERE_CELL_NAME`, `WEBSPHERE_CLUSTER_NAME`, `WEBSPHERE_NODE_NAME`, `WEBSPHERE_SERVER_NAME`
     */
    property: pulumi.Input<string>;
    /**
     * Restrict this rule to specific process types. Note: Not all types can be detected at startup. Possible values: `PROCESS_TYPE_APACHE_HTTPD`, `PROCESS_TYPE_GLASSFISH`, `PROCESS_TYPE_GO`, `PROCESS_TYPE_IIS_APP_POOL`, `PROCESS_TYPE_JBOSS`, `PROCESS_TYPE_JAVA`, `PROCESS_TYPE_NGINX`, `PROCESS_TYPE_NODE_JS`, `PROCESS_TYPE_PHP`, `PROCESS_TYPE_TOMCAT`, `PROCESS_TYPE_WEBLOGIC`, `PROCESS_TYPE_WEBSPHERE`
     */
    restrictToProcessType?: pulumi.Input<string>;
}

export interface ProcessMonitoringRuleCondition {
    /**
     * supported only with OneAgent 1.167+
     */
    envVar?: pulumi.Input<string>;
    /**
     * Condition target
     */
    item: pulumi.Input<string>;
    /**
     * Condition operator
     */
    operator: pulumi.Input<string>;
    /**
     * Condition value
     */
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingCondition {
    conditions?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionCondition>[]>;
}

export interface ProcessgroupNamingConditionCondition {
    /**
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionApplicationTypeComparison>[]>;
    applicationTypes?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionApplicationType>[]>;
    azureComputeModeComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionAzureComputeModeComparison>[]>;
    /**
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionAzureComputeMode>[]>;
    /**
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionAzureSkuComparision>[]>;
    azureSkus?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionAzureSkus>[]>;
    /**
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionBaseComparisonBasic>[]>;
    /**
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionBaseConditionKey>[]>;
    /**
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionBitnessComparision>[]>;
    bitnesses?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionBitness>[]>;
    /**
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionCloudTypeComparison>[]>;
    cloudTypes?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionCloudType>[]>;
    comparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionComparison>[]>;
    /**
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomApplicationTypeComparison>[]>;
    customApplicationTypes?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomApplicationType>[]>;
    /**
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomHostMetadataConditionKey>[]>;
    customHostMetadatas?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomHostMetadata>[]>;
    /**
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKey>[]>;
    customProcessMetadatas?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomProcessMetadata>[]>;
    databaseTopologies?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionDatabaseTopology>[]>;
    /**
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionDatabaseTopologyComparison>[]>;
    /**
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionDcrumDecoderComparison>[]>;
    dcrumDecoders?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionDcrumDecoder>[]>;
    entities?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionEntity>[]>;
    /**
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionEntityIdComparison>[]>;
    hostTeches?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionHostTech>[]>;
    /**
     * @deprecated `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionHypervisorTypeComparision>[]>;
    hypervisors?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionHypervisor>[]>;
    /**
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIndexedNameComparison>[]>;
    indexedNames?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIndexedName>[]>;
    /**
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIndexedStringComparison>[]>;
    indexedStrings?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIndexedString>[]>;
    /**
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIndexedTagComparison>[]>;
    indexedTags?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIndexedTag>[]>;
    /**
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIntegerComparison>[]>;
    integers?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionInteger>[]>;
    /**
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIpaddressComparison>[]>;
    ipaddresses?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIpaddress>[]>;
    keys?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionKey>[]>;
    /**
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionMobilePlatformComparison>[]>;
    mobilePlatforms?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionMobilePlatform>[]>;
    osArches?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionOsArch>[]>;
    osTypes?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionOsType>[]>;
    /**
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionOsarchitectureComparison>[]>;
    /**
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionOstypeComparison>[]>;
    /**
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionPaasTypeComparison>[]>;
    paasTypes?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionPaasType>[]>;
    /**
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionProcessMetadataConditionKey>[]>;
    processMetadatas?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionProcessMetadata>[]>;
    serviceTopologies?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionServiceTopology>[]>;
    /**
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionServiceTopologyComparison>[]>;
    /**
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionServiceTypeComparison>[]>;
    serviceTypes?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionServiceType>[]>;
    /**
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionSimpleHostTechComparison>[]>;
    /**
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionSimpleTechComparison>[]>;
    /**
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionStringComparison>[]>;
    /**
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionStringConditionKey>[]>;
    stringKeys?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionStringKey>[]>;
    strings?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionString>[]>;
    /**
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionSyntheticEngineTypeComparison>[]>;
    syntheticEngines?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionSyntheticEngine>[]>;
    /**
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionTagComparison>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionTag>[]>;
    teches?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionTech>[]>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionAzureComputeMode {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionAzureComputeModeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionAzureSkuComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionAzureSkus {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionBaseComparisonBasic {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionBaseConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionBitness {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionBitnessComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCloudType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCloudTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionComparison {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomHostMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomHostMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomHostMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomHostMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomProcessMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomProcessMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionDatabaseTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionDatabaseTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionDcrumDecoder {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionDcrumDecoderComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionEntity {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionEntityIdComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionHostTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ProcessgroupNamingConditionConditionHostTechValue>;
}

export interface ProcessgroupNamingConditionConditionHostTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionHypervisor {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionHypervisorTypeComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionIndexedName {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionIndexedNameComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionIndexedString {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionIndexedStringComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionIndexedTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ProcessgroupNamingConditionConditionIndexedTagValue>;
}

export interface ProcessgroupNamingConditionConditionIndexedTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ProcessgroupNamingConditionConditionIndexedTagComparisonValue>;
}

export interface ProcessgroupNamingConditionConditionIndexedTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionIndexedTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionInteger {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface ProcessgroupNamingConditionConditionIntegerComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface ProcessgroupNamingConditionConditionIpaddress {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionIpaddressComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionMobilePlatform {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionMobilePlatformComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionOsArch {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionOsType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionOsarchitectureComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionOstypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionPaasType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionPaasTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionServiceTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionServiceTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionServiceType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionServiceTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionSimpleHostTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ProcessgroupNamingConditionConditionSimpleHostTechComparisonValue>;
}

export interface ProcessgroupNamingConditionConditionSimpleHostTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionSimpleTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ProcessgroupNamingConditionConditionSimpleTechComparisonValue>;
}

export interface ProcessgroupNamingConditionConditionSimpleTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionString {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionStringComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionStringConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionStringKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionSyntheticEngine {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionSyntheticEngineTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ProcessgroupNamingConditionConditionTagValue>;
}

export interface ProcessgroupNamingConditionConditionTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ProcessgroupNamingConditionConditionTagComparisonValue>;
}

export interface ProcessgroupNamingConditionConditionTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ProcessgroupNamingConditionConditionTechValue>;
}

export interface ProcessgroupNamingConditionConditionTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface QueueManagerAliasQueue {
    /**
     * Alias queue definitions for queue manager
     */
    aliasQueues?: pulumi.Input<pulumi.Input<inputs.QueueManagerAliasQueueAliasQueue>[]>;
}

export interface QueueManagerAliasQueueAliasQueue {
    aliasQueueName: pulumi.Input<string>;
    baseQueueName: pulumi.Input<string>;
    clusterVisibilities?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface QueueManagerClusterQueue {
    /**
     * Cluster queue definitions for queue manager
     */
    clusterQueues?: pulumi.Input<pulumi.Input<inputs.QueueManagerClusterQueueClusterQueue>[]>;
}

export interface QueueManagerClusterQueueClusterQueue {
    clusterVisibilities?: pulumi.Input<pulumi.Input<string>[]>;
    localQueueName: pulumi.Input<string>;
}

export interface QueueManagerRemoteQueue {
    /**
     * Remote queue definitions for queue manager
     */
    remoteQueues?: pulumi.Input<pulumi.Input<inputs.QueueManagerRemoteQueueRemoteQueue>[]>;
}

export interface QueueManagerRemoteQueueRemoteQueue {
    clusterVisibilities?: pulumi.Input<pulumi.Input<string>[]>;
    localQueueName: pulumi.Input<string>;
    remoteQueueManager: pulumi.Input<string>;
    remoteQueueName: pulumi.Input<string>;
}

export interface RequestAttributeDataSource {
    /**
     * Specifies the location where the values are captured and stored.  Required if the **source** is one of the following: `GET_PARAMETER`, `URI`, `REQUEST_HEADER`, `RESPONSE_HEADER`.   Not applicable in other cases.   If the **source** value is `REQUEST_HEADER` or `RESPONSE_HEADER`, the `CAPTURE_AND_STORE_ON_BOTH` location is not allowed
     */
    capturingAndStorageLocation?: pulumi.Input<string>;
    /**
     * IBM integration bus label node name condition for which the value is captured
     */
    cicsSdkMethodNodeCondition?: pulumi.Input<inputs.RequestAttributeDataSourceCicsSdkMethodNodeCondition>;
    /**
     * The data source is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * IBM integration bus label node name condition for which the value is captured
     */
    iibLabelMethodNodeCondition?: pulumi.Input<inputs.RequestAttributeDataSourceIibLabelMethodNodeCondition>;
    /**
     * IBM integration bus label node name condition for which the value is captured
     */
    iibMethodNodeCondition?: pulumi.Input<inputs.RequestAttributeDataSourceIibMethodNodeCondition>;
    /**
     * The IBM integration bus node type for which the value is captured.  This or `iibMethodNodeCondition` is required if the **source** is: `IIB_NODE`.  Not applicable in other cases
     */
    iibNodeType?: pulumi.Input<string>;
    /**
     * The method specification if the **source** value is `METHOD_PARAM`.   Not applicable in other cases
     */
    methods?: pulumi.Input<pulumi.Input<inputs.RequestAttributeDataSourceMethod>[]>;
    /**
     * The name of the web request parameter to capture.  Required if the **source** is one of the following: `POST_PARAMETER`, `GET_PARAMETER`, `REQUEST_HEADER`, `RESPONSE_HEADER`, `CUSTOM_ATTRIBUTE`.  Not applicable in other cases
     */
    parameterName?: pulumi.Input<string>;
    /**
     * Conditions for data capturing
     */
    scope?: pulumi.Input<inputs.RequestAttributeDataSourceScope>;
    /**
     * The technology of the session attribute to capture if the **source** value is `SESSION_ATTRIBUTE`.
     */
    sessionAttributeTechnology?: pulumi.Input<string>;
    /**
     * The source of the attribute to capture. Works in conjunction with **parameterName** or **methods** and **technology**
     */
    source: pulumi.Input<string>;
    technology?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    valueProcessing?: pulumi.Input<inputs.RequestAttributeDataSourceValueProcessing>;
}

export interface RequestAttributeDataSourceCicsSdkMethodNodeCondition {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface RequestAttributeDataSourceIibLabelMethodNodeCondition {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface RequestAttributeDataSourceIibMethodNodeCondition {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface RequestAttributeDataSourceMethod {
    argumentIndex?: pulumi.Input<number>;
    capture: pulumi.Input<string>;
    deepObjectAccess?: pulumi.Input<string>;
    method?: pulumi.Input<inputs.RequestAttributeDataSourceMethodMethod>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface RequestAttributeDataSourceMethodMethod {
    argumentTypes?: pulumi.Input<pulumi.Input<string>[]>;
    className?: pulumi.Input<string>;
    fileName?: pulumi.Input<string>;
    fileNameMatcher?: pulumi.Input<string>;
    methodName: pulumi.Input<string>;
    modifiers?: pulumi.Input<pulumi.Input<string>[]>;
    returnType: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    visibility: pulumi.Input<string>;
}

export interface RequestAttributeDataSourceScope {
    hostGroup?: pulumi.Input<string>;
    processGroup?: pulumi.Input<string>;
    serviceTechnology?: pulumi.Input<string>;
    tagOfProcessGroup?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface RequestAttributeDataSourceValueProcessing {
    extractSubstring?: pulumi.Input<inputs.RequestAttributeDataSourceValueProcessingExtractSubstring>;
    splitAt?: pulumi.Input<string>;
    trim?: pulumi.Input<boolean>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    valueCondition?: pulumi.Input<inputs.RequestAttributeDataSourceValueProcessingValueCondition>;
    valueExtractorRegex?: pulumi.Input<string>;
}

export interface RequestAttributeDataSourceValueProcessingExtractSubstring {
    delimiter: pulumi.Input<string>;
    endDelimiter?: pulumi.Input<string>;
    position: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface RequestAttributeDataSourceValueProcessingValueCondition {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface RequestNamingConditions {
    conditions?: pulumi.Input<pulumi.Input<inputs.RequestNamingConditionsCondition>[]>;
}

export interface RequestNamingConditionsCondition {
    attribute: pulumi.Input<string>;
    comparison: pulumi.Input<inputs.RequestNamingConditionsConditionComparison>;
    unknowns?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparison {
    boolean?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonBoolean>;
    esbInputNodeType?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonEsbInputNodeType>;
    failedState?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonFailedState>;
    failureReason?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonFailureReason>;
    fastString?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonFastString>;
    flawState?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonFlawState>;
    generic?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonGeneric>;
    httpMethod?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonHttpMethod>;
    httpStatusClass?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonHttpStatusClass>;
    iibInputNodeType?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonIibInputNodeType>;
    negate?: pulumi.Input<boolean>;
    number?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonNumber>;
    numberRequestAttribute?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonNumberRequestAttribute>;
    serviceType?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonServiceType>;
    string?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonString>;
    stringRequestAttribute?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonStringRequestAttribute>;
    tag?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonTag>;
    zosCallType?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonZosCallType>;
}

export interface RequestNamingConditionsConditionComparisonBoolean {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value: pulumi.Input<boolean>;
    values?: pulumi.Input<pulumi.Input<boolean>[]>;
}

export interface RequestNamingConditionsConditionComparisonEsbInputNodeType {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonFailedState {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonFailureReason {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonFastString {
    caseSensitive?: pulumi.Input<boolean>;
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonFlawState {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonGeneric {
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonHttpMethod {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonHttpStatusClass {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonIibInputNodeType {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonNumber {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
    values?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface RequestNamingConditionsConditionComparisonNumberRequestAttribute {
    matchOnChildCalls?: pulumi.Input<boolean>;
    operator?: pulumi.Input<string>;
    requestAttribute: pulumi.Input<string>;
    source?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonNumberRequestAttributeSource>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
    values?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface RequestNamingConditionsConditionComparisonNumberRequestAttributeSource {
    managementZone?: pulumi.Input<string>;
    serviceTag?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTag>;
    unknowns?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTag {
    context?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    tagKey?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey>;
    value?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey {
    context?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonServiceType {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonString {
    caseSensitive?: pulumi.Input<boolean>;
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonStringRequestAttribute {
    caseSensitive?: pulumi.Input<boolean>;
    matchOnChildCalls?: pulumi.Input<boolean>;
    operator?: pulumi.Input<string>;
    requestAttribute: pulumi.Input<string>;
    source?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonStringRequestAttributeSource>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonStringRequestAttributeSource {
    managementZone?: pulumi.Input<string>;
    serviceTag?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTag>;
    unknowns?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTag {
    context?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    tagKey?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey>;
    value?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey {
    context?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonTag {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonTagValue>;
    values?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonTagValues>;
}

export interface RequestNamingConditionsConditionComparisonTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonTagValues {
    values?: pulumi.Input<pulumi.Input<inputs.RequestNamingConditionsConditionComparisonTagValuesValue>[]>;
}

export interface RequestNamingConditionsConditionComparisonTagValuesValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonZosCallType {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingPlaceholders {
    placeholders?: pulumi.Input<pulumi.Input<inputs.RequestNamingPlaceholdersPlaceholder>[]>;
}

export interface RequestNamingPlaceholdersPlaceholder {
    aggregation?: pulumi.Input<string>;
    attribute: pulumi.Input<string>;
    delimiterOrRegex?: pulumi.Input<string>;
    endDelimiter?: pulumi.Input<string>;
    kind: pulumi.Input<string>;
    name: pulumi.Input<string>;
    normalization?: pulumi.Input<string>;
    requestAttribute?: pulumi.Input<string>;
    source?: pulumi.Input<inputs.RequestNamingPlaceholdersPlaceholderSource>;
    unknowns?: pulumi.Input<string>;
    useFromChildCalls?: pulumi.Input<boolean>;
}

export interface RequestNamingPlaceholdersPlaceholderSource {
    managementZone?: pulumi.Input<string>;
    serviceTag?: pulumi.Input<inputs.RequestNamingPlaceholdersPlaceholderSourceServiceTag>;
    unknowns?: pulumi.Input<string>;
}

export interface RequestNamingPlaceholdersPlaceholderSourceServiceTag {
    context?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    tagKey?: pulumi.Input<inputs.RequestNamingPlaceholdersPlaceholderSourceServiceTagTagKey>;
    value?: pulumi.Input<string>;
}

export interface RequestNamingPlaceholdersPlaceholderSourceServiceTagTagKey {
    context?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
}

export interface ResourceAttributesKeys {
    rules?: pulumi.Input<pulumi.Input<inputs.ResourceAttributesKeysRule>[]>;
}

export interface ResourceAttributesKeysRule {
    attributeKey: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
    masking: pulumi.Input<string>;
}

export interface RumProviderBreakdownDomainNamePatternList {
    domainNamePatterns: pulumi.Input<pulumi.Input<inputs.RumProviderBreakdownDomainNamePatternListDomainNamePattern>[]>;
}

export interface RumProviderBreakdownDomainNamePatternListDomainNamePattern {
    pattern: pulumi.Input<string>;
}

export interface ServiceAnomaliesFailureRates {
    /**
     * Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
     */
    auto?: pulumi.Input<inputs.ServiceAnomaliesFailureRatesAuto>;
    /**
     * Fixed thresholds for failure rate increase detection
     */
    thresholds?: pulumi.Input<inputs.ServiceAnomaliesFailureRatesThresholds>;
}

export interface ServiceAnomaliesFailureRatesAuto {
    absolute: pulumi.Input<number>;
    relative: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceAnomaliesFailureRatesThresholds {
    sensitivity: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceAnomaliesLoad {
    /**
     * The configuration of traffic drops detection
     */
    drops?: pulumi.Input<inputs.ServiceAnomaliesLoadDrops>;
    /**
     * The configuration of traffic spikes detection
     */
    spikes?: pulumi.Input<inputs.ServiceAnomaliesLoadSpikes>;
}

export interface ServiceAnomaliesLoadDrops {
    /**
     * Alert if the service stays in abnormal state for at least *X* minutes
     */
    minutes?: pulumi.Input<number>;
    /**
     * Alert if the observed load is more than *X* % of the expected value
     */
    percent?: pulumi.Input<number>;
}

export interface ServiceAnomaliesLoadSpikes {
    minutes?: pulumi.Input<number>;
    percent?: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceAnomaliesResponseTimes {
    /**
     * Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
     */
    auto?: pulumi.Input<inputs.ServiceAnomaliesResponseTimesAuto>;
    /**
     * Fixed thresholds for response time degradation detection
     */
    thresholds?: pulumi.Input<inputs.ServiceAnomaliesResponseTimesThresholds>;
}

export interface ServiceAnomaliesResponseTimesAuto {
    /**
     * The configuration of load spikes detection. Detecting load spikes will be disabled if this block is omitted.
     */
    load: pulumi.Input<string>;
    milliseconds: pulumi.Input<number>;
    percent: pulumi.Input<number>;
    slowestMilliseconds: pulumi.Input<number>;
    slowestPercent: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceAnomaliesResponseTimesThresholds {
    /**
     * The configuration of load spikes detection. Detecting load spikes will be disabled if this block is omitted.
     */
    load: pulumi.Input<string>;
    milliseconds: pulumi.Input<number>;
    sensitivity: pulumi.Input<string>;
    slowestMilliseconds: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceAnomaliesV2FailureRate {
    /**
     * . Alert if the percentage of failing service calls increases by **both** the absolute and relative thresholds:
     */
    autoDetection?: pulumi.Input<inputs.ServiceAnomaliesV2FailureRateAutoDetection>;
    /**
     * Detection mode for increases in failure rate
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * Detect increases in failure rate
     */
    enabled: pulumi.Input<boolean>;
    /**
     * . Alert if a given failure rate is exceeded during any 5-minute-period
     */
    fixedDetection?: pulumi.Input<inputs.ServiceAnomaliesV2FailureRateFixedDetection>;
}

export interface ServiceAnomaliesV2FailureRateAutoDetection {
    absoluteIncrease: pulumi.Input<number>;
    overAlertingProtection: pulumi.Input<inputs.ServiceAnomaliesV2FailureRateAutoDetectionOverAlertingProtection>;
    relativeIncrease: pulumi.Input<number>;
}

export interface ServiceAnomaliesV2FailureRateAutoDetectionOverAlertingProtection {
    minutesAbnormalState: pulumi.Input<number>;
    requestsPerMinute: pulumi.Input<number>;
}

export interface ServiceAnomaliesV2FailureRateFixedDetection {
    overAlertingProtection: pulumi.Input<inputs.ServiceAnomaliesV2FailureRateFixedDetectionOverAlertingProtection>;
    sensitivity: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
}

export interface ServiceAnomaliesV2FailureRateFixedDetectionOverAlertingProtection {
    minutesAbnormalState: pulumi.Input<number>;
    requestsPerMinute: pulumi.Input<number>;
}

export interface ServiceAnomaliesV2LoadDrops {
    /**
     * Detect service load drops
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Threshold
     */
    loadDropPercent?: pulumi.Input<number>;
    /**
     * Time span
     */
    minutesAbnormalState?: pulumi.Input<number>;
}

export interface ServiceAnomaliesV2LoadSpikes {
    /**
     * Detect service load spikes
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Threshold
     */
    loadSpikePercent?: pulumi.Input<number>;
    /**
     * Time span
     */
    minutesAbnormalState?: pulumi.Input<number>;
}

export interface ServiceAnomaliesV2ResponseTime {
    /**
     * No documentation available
     */
    autoDetection?: pulumi.Input<inputs.ServiceAnomaliesV2ResponseTimeAutoDetection>;
    /**
     * Detection mode for response time degradations
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * Detect response time degradations
     */
    enabled: pulumi.Input<boolean>;
    /**
     * No documentation available
     */
    fixedDetection?: pulumi.Input<inputs.ServiceAnomaliesV2ResponseTimeFixedDetection>;
}

export interface ServiceAnomaliesV2ResponseTimeAutoDetection {
    overAlertingProtection: pulumi.Input<inputs.ServiceAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection>;
    responseTimeAll: pulumi.Input<inputs.ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll>;
    responseTimeSlowest: pulumi.Input<inputs.ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest>;
}

export interface ServiceAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection {
    minutesAbnormalState: pulumi.Input<number>;
    requestsPerMinute: pulumi.Input<number>;
}

export interface ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll {
    degradationMilliseconds: pulumi.Input<number>;
    degradationPercent: pulumi.Input<number>;
}

export interface ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest {
    slowestDegradationMilliseconds: pulumi.Input<number>;
    slowestDegradationPercent: pulumi.Input<number>;
}

export interface ServiceAnomaliesV2ResponseTimeFixedDetection {
    overAlertingProtection: pulumi.Input<inputs.ServiceAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection>;
    responseTimeAll: pulumi.Input<inputs.ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll>;
    responseTimeSlowest: pulumi.Input<inputs.ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest>;
    sensitivity: pulumi.Input<string>;
}

export interface ServiceAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection {
    minutesAbnormalState: pulumi.Input<number>;
    requestsPerMinute: pulumi.Input<number>;
}

export interface ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll {
    degradationMilliseconds: pulumi.Input<number>;
}

export interface ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest {
    slowestDegradationMilliseconds: pulumi.Input<number>;
}

export interface ServiceExternalWebRequestConditions {
    conditions: pulumi.Input<pulumi.Input<inputs.ServiceExternalWebRequestConditionsCondition>[]>;
}

export interface ServiceExternalWebRequestConditionsCondition {
    attribute: pulumi.Input<string>;
    compareOperationType: pulumi.Input<string>;
    frameworks?: pulumi.Input<pulumi.Input<string>[]>;
    ignoreCase?: pulumi.Input<boolean>;
    intValue?: pulumi.Input<number>;
    intValues?: pulumi.Input<pulumi.Input<number>[]>;
    ipRangeFrom?: pulumi.Input<string>;
    ipRangeTo?: pulumi.Input<string>;
    tagValues?: pulumi.Input<pulumi.Input<string>[]>;
    textValues?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServiceExternalWebRequestIdContributors {
    /**
     * Application identifier
     */
    applicationId: pulumi.Input<inputs.ServiceExternalWebRequestIdContributorsApplicationId>;
    /**
     * URL context root
     */
    contextRoot: pulumi.Input<inputs.ServiceExternalWebRequestIdContributorsContextRoot>;
    /**
     * Let the Port contribute to the Service Id
     */
    portForServiceId: pulumi.Input<boolean>;
    /**
     * Public domain name
     */
    publicDomainName: pulumi.Input<inputs.ServiceExternalWebRequestIdContributorsPublicDomainName>;
}

export interface ServiceExternalWebRequestIdContributorsApplicationId {
    enableIdContributor: pulumi.Input<boolean>;
    serviceIdContributor?: pulumi.Input<inputs.ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributor>;
}

export interface ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributor {
    contributionType: pulumi.Input<string>;
    transformations?: pulumi.Input<inputs.ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformations>;
    valueOverride?: pulumi.Input<inputs.ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride>;
}

export interface ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformations {
    transformations: pulumi.Input<pulumi.Input<inputs.ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation>[]>;
}

export interface ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation {
    includeHexNumbers?: pulumi.Input<boolean>;
    minDigitCount?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    replacementValue?: pulumi.Input<string>;
    segmentCount?: pulumi.Input<number>;
    selectIndex?: pulumi.Input<number>;
    splitDelimiter?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
    takeFromEnd?: pulumi.Input<boolean>;
    transformationType: pulumi.Input<string>;
}

export interface ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride {
    value: pulumi.Input<string>;
}

export interface ServiceExternalWebRequestIdContributorsContextRoot {
    enableIdContributor: pulumi.Input<boolean>;
    serviceIdContributor?: pulumi.Input<inputs.ServiceExternalWebRequestIdContributorsContextRootServiceIdContributor>;
}

export interface ServiceExternalWebRequestIdContributorsContextRootServiceIdContributor {
    contributionType: pulumi.Input<string>;
    segmentCount?: pulumi.Input<number>;
    transformations?: pulumi.Input<inputs.ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformations>;
    valueOverride?: pulumi.Input<inputs.ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorValueOverride>;
}

export interface ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformations {
    transformations: pulumi.Input<pulumi.Input<inputs.ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation>[]>;
}

export interface ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation {
    includeHexNumbers?: pulumi.Input<boolean>;
    minDigitCount?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    replacementValue?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
    transformationType: pulumi.Input<string>;
}

export interface ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorValueOverride {
    value: pulumi.Input<string>;
}

export interface ServiceExternalWebRequestIdContributorsPublicDomainName {
    enableIdContributor: pulumi.Input<boolean>;
    serviceIdContributor?: pulumi.Input<inputs.ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributor>;
}

export interface ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributor {
    contributionType: pulumi.Input<string>;
    copyFromHostName?: pulumi.Input<boolean>;
    transformations?: pulumi.Input<inputs.ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformations>;
    valueOverride?: pulumi.Input<inputs.ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorValueOverride>;
}

export interface ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformations {
    transformations: pulumi.Input<pulumi.Input<inputs.ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsTransformation>[]>;
}

export interface ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsTransformation {
    includeHexNumbers?: pulumi.Input<boolean>;
    minDigitCount?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    replacementValue?: pulumi.Input<string>;
    segmentCount?: pulumi.Input<number>;
    selectIndex?: pulumi.Input<number>;
    splitDelimiter?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
    takeFromEnd?: pulumi.Input<boolean>;
    transformationType: pulumi.Input<string>;
}

export interface ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorValueOverride {
    value: pulumi.Input<string>;
}

export interface ServiceExternalWebServiceConditions {
    conditions: pulumi.Input<pulumi.Input<inputs.ServiceExternalWebServiceConditionsCondition>[]>;
}

export interface ServiceExternalWebServiceConditionsCondition {
    attribute: pulumi.Input<string>;
    compareOperationType: pulumi.Input<string>;
    frameworks?: pulumi.Input<pulumi.Input<string>[]>;
    ignoreCase?: pulumi.Input<boolean>;
    intValue?: pulumi.Input<number>;
    intValues?: pulumi.Input<pulumi.Input<number>[]>;
    ipRangeFrom?: pulumi.Input<string>;
    ipRangeTo?: pulumi.Input<string>;
    tagValues?: pulumi.Input<pulumi.Input<string>[]>;
    textValues?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServiceExternalWebServiceIdContributors {
    /**
     * Detect the matching requests as web request services instead of web services.
     */
    detectAsWebRequestService: pulumi.Input<boolean>;
    portForServiceId?: pulumi.Input<boolean>;
    urlPath?: pulumi.Input<inputs.ServiceExternalWebServiceIdContributorsUrlPath>;
}

export interface ServiceExternalWebServiceIdContributorsUrlPath {
    enableIdContributor: pulumi.Input<boolean>;
    serviceIdContributor?: pulumi.Input<inputs.ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributor>;
}

export interface ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributor {
    contributionType: pulumi.Input<string>;
    transformations?: pulumi.Input<inputs.ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformations>;
    valueOverride?: pulumi.Input<inputs.ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorValueOverride>;
}

export interface ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformations {
    transformations: pulumi.Input<pulumi.Input<inputs.ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsTransformation>[]>;
}

export interface ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsTransformation {
    includeHexNumbers?: pulumi.Input<boolean>;
    minDigitCount?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    replacementValue?: pulumi.Input<string>;
    segmentCount?: pulumi.Input<number>;
    selectIndex?: pulumi.Input<number>;
    splitDelimiter?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
    takeFromEnd?: pulumi.Input<boolean>;
    transformationType: pulumi.Input<string>;
}

export interface ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorValueOverride {
    value: pulumi.Input<string>;
}

export interface ServiceFailureExceptionRules {
    /**
     * Some custom error situations are only detectable via a return value or other means. To support such cases, [define a request attribute](https://dt-url.net/ys5k0p4y) that captures the required data. Then define a custom error rule that determines if the request has failed based on the value of the request attribute.
     */
    customErrorRules?: pulumi.Input<inputs.ServiceFailureExceptionRulesCustomErrorRules>;
    /**
     * There may be situations where your application code handles exceptions gracefully in a manner that these failures aren't detected by Dynatrace. Use this setting to define specific gracefully-handled exceptions that should be treated as service failures.
     */
    customHandledExceptions?: pulumi.Input<inputs.ServiceFailureExceptionRulesCustomHandledExceptions>;
    /**
     * Ignore all exceptions
     */
    ignoreAllExceptions: pulumi.Input<boolean>;
    /**
     * Ignore span failure detection
     */
    ignoreSpanFailureDetection: pulumi.Input<boolean>;
    /**
     * Some exceptions that are thrown by legacy or 3rd-party code indicate a specific response, not an error. Use this setting to instruct Dynatrace to treat such exceptions as non-failed requests.. If an exception matching any of the defined patterns occurs in a request, it will not be considered as a failure. Other exceptions occurring at the same request might still mark the request as failed.
     */
    ignoredExceptions?: pulumi.Input<inputs.ServiceFailureExceptionRulesIgnoredExceptions>;
    /**
     * Define exceptions which indicate that a service call should not be considered as failed. E.g. an exception indicating that the client aborted the operation.. If an exception matching any of the defined patterns occurs on the entry node of the service, it will be considered successful. Compared to ignored exceptions, the request will be considered successful even if other exceptions occur in the same request.
     */
    successForcingExceptions?: pulumi.Input<inputs.ServiceFailureExceptionRulesSuccessForcingExceptions>;
}

export interface ServiceFailureExceptionRulesCustomErrorRules {
    customErrorRules: pulumi.Input<pulumi.Input<inputs.ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRule>[]>;
}

export interface ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRule {
    condition: pulumi.Input<inputs.ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleCondition>;
    requestAttribute: pulumi.Input<string>;
}

export interface ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleCondition {
    caseSensitive?: pulumi.Input<boolean>;
    compareOperationType: pulumi.Input<string>;
    doubleValue?: pulumi.Input<number>;
    intValue?: pulumi.Input<number>;
    textValue?: pulumi.Input<string>;
}

export interface ServiceFailureExceptionRulesCustomHandledExceptions {
    customHandledExceptions: pulumi.Input<pulumi.Input<inputs.ServiceFailureExceptionRulesCustomHandledExceptionsCustomHandledException>[]>;
}

export interface ServiceFailureExceptionRulesCustomHandledExceptionsCustomHandledException {
    classPattern?: pulumi.Input<string>;
    messagePattern?: pulumi.Input<string>;
}

export interface ServiceFailureExceptionRulesIgnoredExceptions {
    customHandledExceptions: pulumi.Input<pulumi.Input<inputs.ServiceFailureExceptionRulesIgnoredExceptionsCustomHandledException>[]>;
}

export interface ServiceFailureExceptionRulesIgnoredExceptionsCustomHandledException {
    classPattern?: pulumi.Input<string>;
    messagePattern?: pulumi.Input<string>;
}

export interface ServiceFailureExceptionRulesSuccessForcingExceptions {
    customHandledExceptions: pulumi.Input<pulumi.Input<inputs.ServiceFailureExceptionRulesSuccessForcingExceptionsCustomHandledException>[]>;
}

export interface ServiceFailureExceptionRulesSuccessForcingExceptionsCustomHandledException {
    classPattern?: pulumi.Input<string>;
    messagePattern?: pulumi.Input<string>;
}

export interface ServiceFullWebRequestConditions {
    conditions: pulumi.Input<pulumi.Input<inputs.ServiceFullWebRequestConditionsCondition>[]>;
}

export interface ServiceFullWebRequestConditionsCondition {
    attribute: pulumi.Input<string>;
    compareOperationType: pulumi.Input<string>;
    frameworks?: pulumi.Input<pulumi.Input<string>[]>;
    ignoreCase?: pulumi.Input<boolean>;
    intValue?: pulumi.Input<number>;
    intValues?: pulumi.Input<pulumi.Input<number>[]>;
    ipRangeFrom?: pulumi.Input<string>;
    ipRangeTo?: pulumi.Input<string>;
    tagValues?: pulumi.Input<pulumi.Input<string>[]>;
    textValues?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServiceFullWebRequestIdContributors {
    /**
     * Application identifier
     */
    applicationId: pulumi.Input<inputs.ServiceFullWebRequestIdContributorsApplicationId>;
    /**
     * The context root is the first segment of the request URL after the Server name. For example, in the `www.dynatrace.com/support/help/dynatrace-api/` URL the context root is `/support`. The context root value can be found on the Service screen under **Properties and tags**.
     */
    contextRoot: pulumi.Input<inputs.ServiceFullWebRequestIdContributorsContextRoot>;
    /**
     * Server Name
     */
    serverName: pulumi.Input<inputs.ServiceFullWebRequestIdContributorsServerName>;
}

export interface ServiceFullWebRequestIdContributorsApplicationId {
    enableIdContributor: pulumi.Input<boolean>;
    serviceIdContributor?: pulumi.Input<inputs.ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributor>;
}

export interface ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributor {
    contributionType: pulumi.Input<string>;
    transformations?: pulumi.Input<inputs.ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformations>;
    valueOverride?: pulumi.Input<inputs.ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride>;
}

export interface ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformations {
    transformations: pulumi.Input<pulumi.Input<inputs.ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation>[]>;
}

export interface ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation {
    includeHexNumbers?: pulumi.Input<boolean>;
    minDigitCount?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    replacementValue?: pulumi.Input<string>;
    segmentCount?: pulumi.Input<number>;
    selectIndex?: pulumi.Input<number>;
    splitDelimiter?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
    takeFromEnd?: pulumi.Input<boolean>;
    transformationType: pulumi.Input<string>;
}

export interface ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride {
    value: pulumi.Input<string>;
}

export interface ServiceFullWebRequestIdContributorsContextRoot {
    enableIdContributor: pulumi.Input<boolean>;
    serviceIdContributor?: pulumi.Input<inputs.ServiceFullWebRequestIdContributorsContextRootServiceIdContributor>;
}

export interface ServiceFullWebRequestIdContributorsContextRootServiceIdContributor {
    contributionType: pulumi.Input<string>;
    segmentCount?: pulumi.Input<number>;
    transformations?: pulumi.Input<inputs.ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformations>;
    valueOverride?: pulumi.Input<inputs.ServiceFullWebRequestIdContributorsContextRootServiceIdContributorValueOverride>;
}

export interface ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformations {
    transformations: pulumi.Input<pulumi.Input<inputs.ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation>[]>;
}

export interface ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation {
    includeHexNumbers?: pulumi.Input<boolean>;
    minDigitCount?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    replacementValue?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
    transformationType: pulumi.Input<string>;
}

export interface ServiceFullWebRequestIdContributorsContextRootServiceIdContributorValueOverride {
    value: pulumi.Input<string>;
}

export interface ServiceFullWebRequestIdContributorsServerName {
    enableIdContributor: pulumi.Input<boolean>;
    serviceIdContributor?: pulumi.Input<inputs.ServiceFullWebRequestIdContributorsServerNameServiceIdContributor>;
}

export interface ServiceFullWebRequestIdContributorsServerNameServiceIdContributor {
    contributionType: pulumi.Input<string>;
    transformations?: pulumi.Input<inputs.ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformations>;
    valueOverride?: pulumi.Input<inputs.ServiceFullWebRequestIdContributorsServerNameServiceIdContributorValueOverride>;
}

export interface ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformations {
    transformations: pulumi.Input<pulumi.Input<inputs.ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsTransformation>[]>;
}

export interface ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsTransformation {
    includeHexNumbers?: pulumi.Input<boolean>;
    minDigitCount?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    replacementValue?: pulumi.Input<string>;
    segmentCount?: pulumi.Input<number>;
    selectIndex?: pulumi.Input<number>;
    splitDelimiter?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
    takeFromEnd?: pulumi.Input<boolean>;
    transformationType: pulumi.Input<string>;
}

export interface ServiceFullWebRequestIdContributorsServerNameServiceIdContributorValueOverride {
    value: pulumi.Input<string>;
}

export interface ServiceFullWebServiceConditions {
    conditions: pulumi.Input<pulumi.Input<inputs.ServiceFullWebServiceConditionsCondition>[]>;
}

export interface ServiceFullWebServiceConditionsCondition {
    attribute: pulumi.Input<string>;
    compareOperationType: pulumi.Input<string>;
    frameworks?: pulumi.Input<pulumi.Input<string>[]>;
    ignoreCase?: pulumi.Input<boolean>;
    intValue?: pulumi.Input<number>;
    intValues?: pulumi.Input<pulumi.Input<number>[]>;
    ipRangeFrom?: pulumi.Input<string>;
    ipRangeTo?: pulumi.Input<string>;
    tagValues?: pulumi.Input<pulumi.Input<string>[]>;
    textValues?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServiceFullWebServiceIdContributors {
    applicationId?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsApplicationId>;
    contextRoot?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsContextRoot>;
    /**
     * Detect the matching requests as full web services (false) or web request services (true).
     */
    detectAsWebRequestService: pulumi.Input<boolean>;
    serverName?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsServerName>;
    webServiceName?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsWebServiceName>;
    webServiceNamespace?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsWebServiceNamespace>;
}

export interface ServiceFullWebServiceIdContributorsApplicationId {
    enableIdContributor: pulumi.Input<boolean>;
    serviceIdContributor?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributor>;
}

export interface ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributor {
    contributionType: pulumi.Input<string>;
    transformations?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformations>;
    valueOverride?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorValueOverride>;
}

export interface ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformations {
    transformations: pulumi.Input<pulumi.Input<inputs.ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsTransformation>[]>;
}

export interface ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsTransformation {
    includeHexNumbers?: pulumi.Input<boolean>;
    minDigitCount?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    replacementValue?: pulumi.Input<string>;
    segmentCount?: pulumi.Input<number>;
    selectIndex?: pulumi.Input<number>;
    splitDelimiter?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
    takeFromEnd?: pulumi.Input<boolean>;
    transformationType: pulumi.Input<string>;
}

export interface ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorValueOverride {
    value: pulumi.Input<string>;
}

export interface ServiceFullWebServiceIdContributorsContextRoot {
    enableIdContributor: pulumi.Input<boolean>;
    serviceIdContributor?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsContextRootServiceIdContributor>;
}

export interface ServiceFullWebServiceIdContributorsContextRootServiceIdContributor {
    contributionType: pulumi.Input<string>;
    segmentCount?: pulumi.Input<number>;
    transformations?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformations>;
    valueOverride?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsContextRootServiceIdContributorValueOverride>;
}

export interface ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformations {
    transformations: pulumi.Input<pulumi.Input<inputs.ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsTransformation>[]>;
}

export interface ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsTransformation {
    includeHexNumbers?: pulumi.Input<boolean>;
    minDigitCount?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    replacementValue?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
    transformationType: pulumi.Input<string>;
}

export interface ServiceFullWebServiceIdContributorsContextRootServiceIdContributorValueOverride {
    value: pulumi.Input<string>;
}

export interface ServiceFullWebServiceIdContributorsServerName {
    enableIdContributor: pulumi.Input<boolean>;
    serviceIdContributor?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsServerNameServiceIdContributor>;
}

export interface ServiceFullWebServiceIdContributorsServerNameServiceIdContributor {
    contributionType: pulumi.Input<string>;
    transformations?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformations>;
    valueOverride?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsServerNameServiceIdContributorValueOverride>;
}

export interface ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformations {
    transformations: pulumi.Input<pulumi.Input<inputs.ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsTransformation>[]>;
}

export interface ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsTransformation {
    includeHexNumbers?: pulumi.Input<boolean>;
    minDigitCount?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    replacementValue?: pulumi.Input<string>;
    segmentCount?: pulumi.Input<number>;
    selectIndex?: pulumi.Input<number>;
    splitDelimiter?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
    takeFromEnd?: pulumi.Input<boolean>;
    transformationType: pulumi.Input<string>;
}

export interface ServiceFullWebServiceIdContributorsServerNameServiceIdContributorValueOverride {
    value: pulumi.Input<string>;
}

export interface ServiceFullWebServiceIdContributorsWebServiceName {
    enableIdContributor: pulumi.Input<boolean>;
    serviceIdContributor?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributor>;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributor {
    contributionType: pulumi.Input<string>;
    transformations?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformations>;
    valueOverride?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorValueOverride>;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformations {
    transformations: pulumi.Input<pulumi.Input<inputs.ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsTransformation>[]>;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsTransformation {
    includeHexNumbers?: pulumi.Input<boolean>;
    minDigitCount?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    replacementValue?: pulumi.Input<string>;
    segmentCount?: pulumi.Input<number>;
    selectIndex?: pulumi.Input<number>;
    splitDelimiter?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
    takeFromEnd?: pulumi.Input<boolean>;
    transformationType: pulumi.Input<string>;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorValueOverride {
    value: pulumi.Input<string>;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNamespace {
    enableIdContributor: pulumi.Input<boolean>;
    serviceIdContributor?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributor>;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributor {
    contributionType: pulumi.Input<string>;
    transformations?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformations>;
    valueOverride?: pulumi.Input<inputs.ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorValueOverride>;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformations {
    transformations: pulumi.Input<pulumi.Input<inputs.ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsTransformation>[]>;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsTransformation {
    includeHexNumbers?: pulumi.Input<boolean>;
    minDigitCount?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    replacementValue?: pulumi.Input<string>;
    segmentCount?: pulumi.Input<number>;
    selectIndex?: pulumi.Input<number>;
    splitDelimiter?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
    takeFromEnd?: pulumi.Input<boolean>;
    transformationType: pulumi.Input<string>;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorValueOverride {
    value: pulumi.Input<string>;
}

export interface ServiceHttpFailureBrokenLinks {
    /**
     * If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
     */
    brokenLinkDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Consider 404 HTTP response codes as failures
     */
    http404NotFoundFailures: pulumi.Input<boolean>;
}

export interface ServiceHttpFailureHttpResponseCodes {
    /**
     * HTTP response codes which indicate client side errors
     */
    clientSideErrors: pulumi.Input<string>;
    /**
     * Treat missing HTTP response code as client side error
     */
    failOnMissingResponseCodeClientSide: pulumi.Input<boolean>;
    /**
     * Treat missing HTTP response code as server side errors
     */
    failOnMissingResponseCodeServerSide: pulumi.Input<boolean>;
    /**
     * HTTP response codes which indicate an error on the server side
     */
    serverSideErrors: pulumi.Input<string>;
}

export interface ServiceNamingCondition {
    conditions?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionCondition>[]>;
}

export interface ServiceNamingConditionCondition {
    /**
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionApplicationTypeComparison>[]>;
    applicationTypes?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionApplicationType>[]>;
    azureComputeModeComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionAzureComputeModeComparison>[]>;
    /**
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionAzureComputeMode>[]>;
    /**
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionAzureSkuComparision>[]>;
    azureSkus?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionAzureSkus>[]>;
    /**
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionBaseComparisonBasic>[]>;
    /**
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionBaseConditionKey>[]>;
    /**
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionBitnessComparision>[]>;
    bitnesses?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionBitness>[]>;
    /**
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionCloudTypeComparison>[]>;
    cloudTypes?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionCloudType>[]>;
    comparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionComparison>[]>;
    /**
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionCustomApplicationTypeComparison>[]>;
    customApplicationTypes?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionCustomApplicationType>[]>;
    /**
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionCustomHostMetadataConditionKey>[]>;
    customHostMetadatas?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionCustomHostMetadata>[]>;
    /**
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionCustomProcessMetadataConditionKey>[]>;
    customProcessMetadatas?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionCustomProcessMetadata>[]>;
    databaseTopologies?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionDatabaseTopology>[]>;
    /**
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionDatabaseTopologyComparison>[]>;
    /**
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionDcrumDecoderComparison>[]>;
    dcrumDecoders?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionDcrumDecoder>[]>;
    entities?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionEntity>[]>;
    /**
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionEntityIdComparison>[]>;
    hostTeches?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionHostTech>[]>;
    /**
     * @deprecated `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionHypervisorTypeComparision>[]>;
    hypervisors?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionHypervisor>[]>;
    /**
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIndexedNameComparison>[]>;
    indexedNames?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIndexedName>[]>;
    /**
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIndexedStringComparison>[]>;
    indexedStrings?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIndexedString>[]>;
    /**
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIndexedTagComparison>[]>;
    indexedTags?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIndexedTag>[]>;
    /**
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIntegerComparison>[]>;
    integers?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionInteger>[]>;
    /**
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIpaddressComparison>[]>;
    ipaddresses?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIpaddress>[]>;
    keys?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionKey>[]>;
    /**
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionMobilePlatformComparison>[]>;
    mobilePlatforms?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionMobilePlatform>[]>;
    osArches?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionOsArch>[]>;
    osTypes?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionOsType>[]>;
    /**
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionOsarchitectureComparison>[]>;
    /**
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionOstypeComparison>[]>;
    /**
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionPaasTypeComparison>[]>;
    paasTypes?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionPaasType>[]>;
    /**
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionProcessMetadataConditionKey>[]>;
    processMetadatas?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionProcessMetadata>[]>;
    serviceTopologies?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionServiceTopology>[]>;
    /**
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionServiceTopologyComparison>[]>;
    /**
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionServiceTypeComparison>[]>;
    serviceTypes?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionServiceType>[]>;
    /**
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionSimpleHostTechComparison>[]>;
    /**
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionSimpleTechComparison>[]>;
    /**
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionStringComparison>[]>;
    /**
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionStringConditionKey>[]>;
    stringKeys?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionStringKey>[]>;
    strings?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionString>[]>;
    /**
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionSyntheticEngineTypeComparison>[]>;
    syntheticEngines?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionSyntheticEngine>[]>;
    /**
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionTagComparison>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionTag>[]>;
    teches?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionTech>[]>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionAzureComputeMode {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionAzureComputeModeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionAzureSkuComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionAzureSkus {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionBaseComparisonBasic {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionBaseConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionBitness {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionBitnessComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCloudType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCloudTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionComparison {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomHostMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ServiceNamingConditionConditionCustomHostMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomHostMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ServiceNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomHostMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ServiceNamingConditionConditionCustomProcessMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ServiceNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomProcessMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionDatabaseTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionDatabaseTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionDcrumDecoder {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionDcrumDecoderComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionEntity {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionEntityIdComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionHostTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ServiceNamingConditionConditionHostTechValue>;
}

export interface ServiceNamingConditionConditionHostTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionHypervisor {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionHypervisorTypeComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionIndexedName {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionIndexedNameComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionIndexedString {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionIndexedStringComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionIndexedTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ServiceNamingConditionConditionIndexedTagValue>;
}

export interface ServiceNamingConditionConditionIndexedTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ServiceNamingConditionConditionIndexedTagComparisonValue>;
}

export interface ServiceNamingConditionConditionIndexedTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionIndexedTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionInteger {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface ServiceNamingConditionConditionIntegerComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface ServiceNamingConditionConditionIpaddress {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionIpaddressComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionMobilePlatform {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionMobilePlatformComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionOsArch {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionOsType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionOsarchitectureComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionOstypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionPaasType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionPaasTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionServiceTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionServiceTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionServiceType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionServiceTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionSimpleHostTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ServiceNamingConditionConditionSimpleHostTechComparisonValue>;
}

export interface ServiceNamingConditionConditionSimpleHostTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionSimpleTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ServiceNamingConditionConditionSimpleTechComparisonValue>;
}

export interface ServiceNamingConditionConditionSimpleTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionString {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionStringComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionStringConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionStringKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionSyntheticEngine {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionSyntheticEngineTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ServiceNamingConditionConditionTagValue>;
}

export interface ServiceNamingConditionConditionTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ServiceNamingConditionConditionTagComparisonValue>;
}

export interface ServiceNamingConditionConditionTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ServiceNamingConditionConditionTechValue>;
}

export interface ServiceNamingConditionConditionTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface SessionReplayWebPrivacyMaskingPresets {
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     */
    playbackMaskingAllowListRules?: pulumi.Input<inputs.SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRules>;
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     */
    playbackMaskingBlockListRules?: pulumi.Input<inputs.SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRules>;
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) Possible Values: `MASK_ALL`, `MASK_USER_INPUT`, `ALLOW_LIST`, `BLOCK_LIST`
     */
    playbackMaskingPreset: pulumi.Input<string>;
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     */
    recordingMaskingAllowListRules?: pulumi.Input<inputs.SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRules>;
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     */
    recordingMaskingBlockListRules?: pulumi.Input<inputs.SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRules>;
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) Possible Values: `MASK_USER_INPUT`, `ALLOW_LIST`, `BLOCK_LIST`, `MASK_ALL`
     */
    recordingMaskingPreset: pulumi.Input<string>;
}

export interface SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRules {
    allowListRules: pulumi.Input<pulumi.Input<inputs.SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesAllowListRule>[]>;
}

export interface SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesAllowListRule {
    attributeExpression?: pulumi.Input<string>;
    cssExpression?: pulumi.Input<string>;
    target: pulumi.Input<string>;
}

export interface SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRules {
    blockListRules: pulumi.Input<pulumi.Input<inputs.SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesBlockListRule>[]>;
}

export interface SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesBlockListRule {
    attributeExpression?: pulumi.Input<string>;
    cssExpression?: pulumi.Input<string>;
    hideUserInteraction?: pulumi.Input<boolean>;
    target: pulumi.Input<string>;
}

export interface SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRules {
    allowListRules: pulumi.Input<pulumi.Input<inputs.SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesAllowListRule>[]>;
}

export interface SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesAllowListRule {
    attributeExpression?: pulumi.Input<string>;
    cssExpression?: pulumi.Input<string>;
    target: pulumi.Input<string>;
}

export interface SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRules {
    blockListRules: pulumi.Input<pulumi.Input<inputs.SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesBlockListRule>[]>;
}

export interface SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesBlockListRule {
    attributeExpression?: pulumi.Input<string>;
    cssExpression?: pulumi.Input<string>;
    hideUserInteraction?: pulumi.Input<boolean>;
    target: pulumi.Input<string>;
}

export interface SloV2ErrorBudgetBurnRate {
    /**
     * Burn rate visualization enabled
     */
    burnRateVisualizationEnabled: pulumi.Input<boolean>;
    /**
     * The threshold defines when a burn rate is marked as fast-burning (high-emergency). Burn rates lower than this threshold (and greater than 1) are highlighted as slow-burn (low-emergency).
     */
    fastBurnThreshold?: pulumi.Input<number>;
}

export interface SpanCaptureRuleMatches {
    /**
     * Matching strategies for the Span
     */
    matches: pulumi.Input<pulumi.Input<inputs.SpanCaptureRuleMatchesMatch>[]>;
}

export interface SpanCaptureRuleMatchesMatch {
    caseSensitive?: pulumi.Input<boolean>;
    comparison: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    source: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SpanContextPropagationMatches {
    /**
     * Matching strategies for the Span
     */
    matches: pulumi.Input<pulumi.Input<inputs.SpanContextPropagationMatchesMatch>[]>;
}

export interface SpanContextPropagationMatchesMatch {
    caseSensitive?: pulumi.Input<boolean>;
    comparison: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    source: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SpanEntryPointMatches {
    /**
     * Matching strategies for the Span
     */
    matches: pulumi.Input<pulumi.Input<inputs.SpanEntryPointMatchesMatch>[]>;
}

export interface SpanEntryPointMatchesMatch {
    caseSensitive?: pulumi.Input<boolean>;
    comparison: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    source: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface UpdateWindowsDailyRecurrence {
    every: pulumi.Input<number>;
    recurrenceRange: pulumi.Input<inputs.UpdateWindowsDailyRecurrenceRecurrenceRange>;
    updateTime: pulumi.Input<inputs.UpdateWindowsDailyRecurrenceUpdateTime>;
}

export interface UpdateWindowsDailyRecurrenceRecurrenceRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface UpdateWindowsDailyRecurrenceUpdateTime {
    duration: pulumi.Input<number>;
    startTime: pulumi.Input<string>;
    timeZone: pulumi.Input<string>;
}

export interface UpdateWindowsMonthlyRecurrence {
    every: pulumi.Input<number>;
    recurrenceRange: pulumi.Input<inputs.UpdateWindowsMonthlyRecurrenceRecurrenceRange>;
    selectedMonthDay: pulumi.Input<number>;
    updateTime: pulumi.Input<inputs.UpdateWindowsMonthlyRecurrenceUpdateTime>;
}

export interface UpdateWindowsMonthlyRecurrenceRecurrenceRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface UpdateWindowsMonthlyRecurrenceUpdateTime {
    duration: pulumi.Input<number>;
    startTime: pulumi.Input<string>;
    timeZone: pulumi.Input<string>;
}

export interface UpdateWindowsOnceRecurrence {
    recurrenceRange: pulumi.Input<inputs.UpdateWindowsOnceRecurrenceRecurrenceRange>;
}

export interface UpdateWindowsOnceRecurrenceRecurrenceRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface UpdateWindowsWeeklyRecurrence {
    every: pulumi.Input<number>;
    recurrenceRange: pulumi.Input<inputs.UpdateWindowsWeeklyRecurrenceRecurrenceRange>;
    selectedWeekDays: pulumi.Input<inputs.UpdateWindowsWeeklyRecurrenceSelectedWeekDays>;
    updateTime: pulumi.Input<inputs.UpdateWindowsWeeklyRecurrenceUpdateTime>;
}

export interface UpdateWindowsWeeklyRecurrenceRecurrenceRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface UpdateWindowsWeeklyRecurrenceSelectedWeekDays {
    friday: pulumi.Input<boolean>;
    monday: pulumi.Input<boolean>;
    saturday: pulumi.Input<boolean>;
    sunday: pulumi.Input<boolean>;
    thursday: pulumi.Input<boolean>;
    tuesday: pulumi.Input<boolean>;
    wednesday: pulumi.Input<boolean>;
}

export interface UpdateWindowsWeeklyRecurrenceUpdateTime {
    duration: pulumi.Input<number>;
    startTime: pulumi.Input<string>;
    timeZone: pulumi.Input<string>;
}

export interface UserActionMetricsFilters {
    filters: pulumi.Input<pulumi.Input<inputs.UserActionMetricsFiltersFilter>[]>;
}

export interface UserActionMetricsFiltersFilter {
    fieldName: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    /**
     * Defines the type of value to be extracted from the user action. When using **user action counter**, the number of user actions is counted (similar to count(*) when using USQL). When using **user action field value**, the value of a user action field is extracted.
     */
    value?: pulumi.Input<string>;
    valueIns?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface UserActionMetricsValue {
    /**
     * Field name
     */
    fieldName?: pulumi.Input<string>;
    /**
     * Possible Values: `COUNTER`, `FIELD`
     */
    type: pulumi.Input<string>;
}

export interface UserGroupPermissions {
    /**
     * A permission granted to one or multiple environments
     */
    grants: pulumi.Input<pulumi.Input<inputs.UserGroupPermissionsGrant>[]>;
}

export interface UserGroupPermissionsGrant {
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    permission: pulumi.Input<string>;
}

export interface UserSessionMetricsFilters {
    filters: pulumi.Input<pulumi.Input<inputs.UserSessionMetricsFiltersFilter>[]>;
}

export interface UserSessionMetricsFiltersFilter {
    fieldName: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    /**
     * Defines the type of value to be extracted from the user session. When using **User session counter**, the number of user sessions is counted (similar to count(*) when using USQL). When using **User session field value**, the value of a user session field is extracted.
     */
    value?: pulumi.Input<string>;
    valueIns?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface UserSessionMetricsValue {
    /**
     * Field name
     */
    fieldName?: pulumi.Input<string>;
    /**
     * Possible Values: `COUNTER`, `FIELD`
     */
    type: pulumi.Input<string>;
}

export interface VmwareAnomaliesDroppedPacketsDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: pulumi.Input<inputs.VmwareAnomaliesDroppedPacketsDetectionCustomThresholds>;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface VmwareAnomaliesDroppedPacketsDetectionCustomThresholds {
    droppedPacketsPerSecond: pulumi.Input<number>;
}

export interface VmwareAnomaliesEsxiHighCpuDetection {
    /**
     * Alert if **all three** conditions are met in 3 out of 5 samples
     */
    customThresholds?: pulumi.Input<inputs.VmwareAnomaliesEsxiHighCpuDetectionCustomThresholds>;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface VmwareAnomaliesEsxiHighCpuDetectionCustomThresholds {
    cpuPeakPercentage: pulumi.Input<number>;
    cpuUsagePercentage: pulumi.Input<number>;
    vmCpuReadyPercentage: pulumi.Input<number>;
}

export interface VmwareAnomaliesEsxiHighMemoryDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: pulumi.Input<inputs.VmwareAnomaliesEsxiHighMemoryDetectionCustomThresholds>;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface VmwareAnomaliesEsxiHighMemoryDetectionCustomThresholds {
    compressionDecompressionRate: pulumi.Input<number>;
}

export interface VmwareAnomaliesGuestCpuLimitDetection {
    /**
     * Alert if **all three** conditions are met in 3 out of 5 samples
     */
    customThresholds?: pulumi.Input<inputs.VmwareAnomaliesGuestCpuLimitDetectionCustomThresholds>;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface VmwareAnomaliesGuestCpuLimitDetectionCustomThresholds {
    hostCpuUsagePercentage: pulumi.Input<number>;
    vmCpuReadyPercentage: pulumi.Input<number>;
    vmCpuUsagePercentage: pulumi.Input<number>;
}

export interface VmwareAnomaliesLowDatastoreSpaceDetection {
    /**
     * Alert if the condition is met in 1 out of 5 samples
     */
    customThresholds?: pulumi.Input<inputs.VmwareAnomaliesLowDatastoreSpaceDetectionCustomThresholds>;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface VmwareAnomaliesLowDatastoreSpaceDetectionCustomThresholds {
    freeSpacePercentage: pulumi.Input<number>;
}

export interface VmwareAnomaliesOverloadedStorageDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: pulumi.Input<inputs.VmwareAnomaliesOverloadedStorageDetectionCustomThresholds>;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface VmwareAnomaliesOverloadedStorageDetectionCustomThresholds {
    commandAbortsNumber: pulumi.Input<number>;
}

export interface VmwareAnomaliesSlowPhysicalStorageDetection {
    /**
     * Alert if **any** condition is met in 4 out of 5 samples
     */
    customThresholds?: pulumi.Input<inputs.VmwareAnomaliesSlowPhysicalStorageDetectionCustomThresholds>;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface VmwareAnomaliesSlowPhysicalStorageDetectionCustomThresholds {
    avgReadWriteLatency: pulumi.Input<number>;
    peakReadWriteLatency: pulumi.Input<number>;
}

export interface VmwareAnomaliesUndersizedStorageDetection {
    /**
     * Alert if **any** condition is met in 3 out of 5 samples
     */
    customThresholds?: pulumi.Input<inputs.VmwareAnomaliesUndersizedStorageDetectionCustomThresholds>;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface VmwareAnomaliesUndersizedStorageDetectionCustomThresholds {
    averageQueueCommandLatency: pulumi.Input<number>;
    peakQueueCommandLatency: pulumi.Input<number>;
}

export interface WebAppAnomaliesErrorRate {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Alert if the percentage of failing user actions increases by **both** the absolute and relative thresholds:
     */
    errorRateAuto?: pulumi.Input<inputs.WebAppAnomaliesErrorRateErrorRateAuto>;
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    errorRateDetectionMode?: pulumi.Input<string>;
    /**
     * no documentation available
     */
    errorRateFixed?: pulumi.Input<inputs.WebAppAnomaliesErrorRateErrorRateFixed>;
}

export interface WebAppAnomaliesErrorRateErrorRateAuto {
    absoluteIncrease: pulumi.Input<number>;
    overAlertingProtection: pulumi.Input<inputs.WebAppAnomaliesErrorRateErrorRateAutoOverAlertingProtection>;
    relativeIncrease: pulumi.Input<number>;
}

export interface WebAppAnomaliesErrorRateErrorRateAutoOverAlertingProtection {
    actionsPerMinute: pulumi.Input<number>;
    minutesAbnormalState: pulumi.Input<number>;
}

export interface WebAppAnomaliesErrorRateErrorRateFixed {
    errorRateReqPerMin: pulumi.Input<number>;
    errorRateSensitivity: pulumi.Input<string>;
    maxFailureRateIncrease: pulumi.Input<number>;
    minutesAbnormalState: pulumi.Input<number>;
}

export interface WebAppAnomaliesResponseTime {
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * no documentation available
     */
    responseTimeAuto?: pulumi.Input<inputs.WebAppAnomaliesResponseTimeResponseTimeAuto>;
    /**
     * no documentation available
     */
    responseTimeFixed?: pulumi.Input<inputs.WebAppAnomaliesResponseTimeResponseTimeFixed>;
}

export interface WebAppAnomaliesResponseTimeResponseTimeAuto {
    overAlertingProtection: pulumi.Input<inputs.WebAppAnomaliesResponseTimeResponseTimeAutoOverAlertingProtection>;
    responseTimeAll: pulumi.Input<inputs.WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeAll>;
    responseTimeSlowest: pulumi.Input<inputs.WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeSlowest>;
}

export interface WebAppAnomaliesResponseTimeResponseTimeAutoOverAlertingProtection {
    actionsPerMinute: pulumi.Input<number>;
    minutesAbnormalState: pulumi.Input<number>;
}

export interface WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeAll {
    degradationMilliseconds: pulumi.Input<number>;
    degradationPercent: pulumi.Input<number>;
}

export interface WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeSlowest {
    slowestDegradationMilliseconds: pulumi.Input<number>;
    slowestDegradationPercent: pulumi.Input<number>;
}

export interface WebAppAnomaliesResponseTimeResponseTimeFixed {
    overAlertingProtection: pulumi.Input<inputs.WebAppAnomaliesResponseTimeResponseTimeFixedOverAlertingProtection>;
    responseTimeAll: pulumi.Input<inputs.WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeAll>;
    responseTimeSlowest: pulumi.Input<inputs.WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeSlowest>;
    sensitivity: pulumi.Input<string>;
}

export interface WebAppAnomaliesResponseTimeResponseTimeFixedOverAlertingProtection {
    actionsPerMinute: pulumi.Input<number>;
    minutesAbnormalState: pulumi.Input<number>;
}

export interface WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeAll {
    degradationMilliseconds: pulumi.Input<number>;
}

export interface WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeSlowest {
    slowestDegradationMilliseconds: pulumi.Input<number>;
}

export interface WebAppAnomaliesTrafficDrops {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week.
     */
    trafficDrops?: pulumi.Input<inputs.WebAppAnomaliesTrafficDropsTrafficDrops>;
}

export interface WebAppAnomaliesTrafficDropsTrafficDrops {
    abnormalStateAbnormalState: pulumi.Input<number>;
    trafficDropPercentage: pulumi.Input<number>;
}

export interface WebAppAnomaliesTrafficSpikes {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week.
     */
    trafficSpikes?: pulumi.Input<inputs.WebAppAnomaliesTrafficSpikesTrafficSpikes>;
}

export interface WebAppAnomaliesTrafficSpikesTrafficSpikes {
    minutesAbnormalState: pulumi.Input<number>;
    trafficSpikePercentage: pulumi.Input<number>;
}

export interface WebAppCustomErrorsErrorRules {
    errorRules: pulumi.Input<pulumi.Input<inputs.WebAppCustomErrorsErrorRulesErrorRule>[]>;
}

export interface WebAppCustomErrorsErrorRulesErrorRule {
    captureSettings: pulumi.Input<inputs.WebAppCustomErrorsErrorRulesErrorRuleCaptureSettings>;
    keyMatcher: pulumi.Input<string>;
    keyPattern?: pulumi.Input<string>;
    valueMatcher: pulumi.Input<string>;
    valuePattern?: pulumi.Input<string>;
}

export interface WebAppCustomErrorsErrorRulesErrorRuleCaptureSettings {
    capture: pulumi.Input<boolean>;
    considerForAi?: pulumi.Input<boolean>;
    impactApdex?: pulumi.Input<boolean>;
}

export interface WebAppEnablementRum {
    /**
     * (Field has overlap with `dynatrace.WebApplication`) Percentage of user sessions captured and analyzed
     */
    costAndTrafficControl: pulumi.Input<number>;
    /**
     * (Field has overlap with `dynatrace.WebApplication`) This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface WebAppEnablementSessionReplay {
    /**
     * (Field has overlap with `dynatrace.WebApplication`) [Percentage of user sessions recorded with Session Replay](https://dt-url.net/sr-cost-traffic-control). For example, if you have 50% for RUM and 50% for Session Replay, it results in 25% of sessions recorded with Session Replay.
     */
    costAndTrafficControl: pulumi.Input<number>;
    /**
     * (Field has overlap with `dynatrace.WebApplication`) This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
}

export interface WebAppRequestErrorsErrorRules {
    errorRules: pulumi.Input<pulumi.Input<inputs.WebAppRequestErrorsErrorRulesErrorRule>[]>;
}

export interface WebAppRequestErrorsErrorRulesErrorRule {
    captureSettings: pulumi.Input<inputs.WebAppRequestErrorsErrorRulesErrorRuleCaptureSettings>;
    considerCspViolations: pulumi.Input<boolean>;
    considerFailedImages: pulumi.Input<boolean>;
    errorCodes?: pulumi.Input<string>;
    filterSettings: pulumi.Input<inputs.WebAppRequestErrorsErrorRulesErrorRuleFilterSettings>;
}

export interface WebAppRequestErrorsErrorRulesErrorRuleCaptureSettings {
    capture: pulumi.Input<boolean>;
    considerForAi?: pulumi.Input<boolean>;
    impactApdex?: pulumi.Input<boolean>;
}

export interface WebAppRequestErrorsErrorRulesErrorRuleFilterSettings {
    filter?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface WebApplicationConversionGoals {
    /**
     * A conversion goal of the application
     */
    goals: pulumi.Input<pulumi.Input<inputs.WebApplicationConversionGoalsGoal>[]>;
}

export interface WebApplicationConversionGoalsGoal {
    destination?: pulumi.Input<inputs.WebApplicationConversionGoalsGoalDestination>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the web application, displayed in the UI
     */
    name: pulumi.Input<string>;
    /**
     * The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
     */
    type?: pulumi.Input<string>;
    userAction?: pulumi.Input<inputs.WebApplicationConversionGoalsGoalUserAction>;
    visitDuration?: pulumi.Input<inputs.WebApplicationConversionGoalsGoalVisitDuration>;
    visitNumAction?: pulumi.Input<inputs.WebApplicationConversionGoalsGoalVisitNumAction>;
}

export interface WebApplicationConversionGoalsGoalDestination {
    caseSensitive?: pulumi.Input<boolean>;
    matchType?: pulumi.Input<string>;
    urlOrPath: pulumi.Input<string>;
}

export interface WebApplicationConversionGoalsGoalUserAction {
    actionType?: pulumi.Input<string>;
    caseSensitive?: pulumi.Input<boolean>;
    matchEntity?: pulumi.Input<string>;
    matchType?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface WebApplicationConversionGoalsGoalVisitDuration {
    duration: pulumi.Input<number>;
}

export interface WebApplicationConversionGoalsGoalVisitNumAction {
    numUserActions?: pulumi.Input<number>;
}

export interface WebApplicationCustomActionApdexSettings {
    /**
     * Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
     */
    frustratingFallbackThreshold?: pulumi.Input<number>;
    /**
     * Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
     */
    frustratingThreshold?: pulumi.Input<number>;
    /**
     * no documentation available
     */
    threshold?: pulumi.Input<number>;
    /**
     * Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
     */
    toleratedFallbackThreshold?: pulumi.Input<number>;
    /**
     * Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
     */
    toleratedThreshold?: pulumi.Input<number>;
}

export interface WebApplicationKeyUserAction {
    /**
     * Configuration of the key user action
     */
    actions: pulumi.Input<pulumi.Input<inputs.WebApplicationKeyUserActionAction>[]>;
}

export interface WebApplicationKeyUserActionAction {
    domain?: pulumi.Input<string>;
    /**
     * The name of the web application, displayed in the UI
     */
    name: pulumi.Input<string>;
    /**
     * The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
     */
    type: pulumi.Input<string>;
}

export interface WebApplicationLoadActionApdexSettings {
    /**
     * Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
     */
    frustratingFallbackThreshold?: pulumi.Input<number>;
    /**
     * Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
     */
    frustratingThreshold?: pulumi.Input<number>;
    /**
     * no documentation available
     */
    threshold?: pulumi.Input<number>;
    /**
     * Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
     */
    toleratedFallbackThreshold?: pulumi.Input<number>;
    /**
     * Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
     */
    toleratedThreshold?: pulumi.Input<number>;
}

export interface WebApplicationMetaDataCaptureSettings {
    /**
     * Java script agent meta data capture settings
     */
    captures?: pulumi.Input<pulumi.Input<inputs.WebApplicationMetaDataCaptureSettingsCapture>[]>;
}

export interface WebApplicationMetaDataCaptureSettingsCapture {
    capturingName: pulumi.Input<string>;
    /**
     * The name of the web application, displayed in the UI
     */
    name: pulumi.Input<string>;
    publicMetadata?: pulumi.Input<boolean>;
    /**
     * The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
     */
    type: pulumi.Input<string>;
    uniqueId?: pulumi.Input<number>;
    useLastValue?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettings {
    /**
     * Add the cross origin = anonymous attribute to capture JavaScript error messages and W3C resource timings
     */
    addCrossOriginAnonymousAttribute?: pulumi.Input<boolean>;
    /**
     * Advanced JavaScript tag settings
     */
    advancedJavascriptTagSettings?: pulumi.Input<inputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettings>;
    /**
     * The name of the angular package
     */
    angularPackageName?: pulumi.Input<string>;
    /**
     * Settings for restricting certain browser type, version, platform and, comparator. It also restricts the mode
     */
    browserRestrictionSettings?: pulumi.Input<inputs.WebApplicationMonitoringSettingsBrowserRestrictionSettings>;
    /**
     * Optimize the value of cache control headers for use with Dynatrace real user monitoring enabled/disabled
     */
    cacheControlHeaderOptimizations?: pulumi.Input<boolean>;
    /**
     * Settings for content capture
     */
    contentCapture: pulumi.Input<inputs.WebApplicationMonitoringSettingsContentCapture>;
    /**
     * Domain for cookie placement. Maximum 150 characters.
     */
    cookiePlacementDomain?: pulumi.Input<string>;
    /**
     * To enable RUM for XHR calls to AWS Lambda, define a regular expression matching these calls, Dynatrace can then automatically add a custom header (`x-dtc`) to each such request to the respective endpoints in AWS.
     */
    correlationHeaderInclusionRegex?: pulumi.Input<string>;
    customConfigurationProperties?: pulumi.Input<string>;
    excludeXhrRegex?: pulumi.Input<string>;
    fetchRequests?: pulumi.Input<boolean>;
    /**
     * Possible valures are `CODE_SNIPPET`, `CODE_SNIPPET_ASYNC`, `INLINE_CODE` and `JAVASCRIPT_TAG`.
     */
    injectionMode: pulumi.Input<string>;
    ipAddressRestrictionSettings?: pulumi.Input<inputs.WebApplicationMonitoringSettingsIpAddressRestrictionSettings>;
    javascriptFrameworkSupport?: pulumi.Input<inputs.WebApplicationMonitoringSettingsJavascriptFrameworkSupport>;
    javascriptInjectionRules?: pulumi.Input<inputs.WebApplicationMonitoringSettingsJavascriptInjectionRules>;
    libraryFileLocation?: pulumi.Input<string>;
    monitoringDataPath?: pulumi.Input<string>;
    scriptTagCacheDurationInHours?: pulumi.Input<number>;
    secureCookieAttribute?: pulumi.Input<boolean>;
    serverRequestPathId?: pulumi.Input<string>;
    xmlHttpRequest?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettingsAdvancedJavascriptTagSettings {
    additionalEventHandlers?: pulumi.Input<inputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlers>;
    eventWrapperSettings?: pulumi.Input<inputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsEventWrapperSettings>;
    globalEventCaptureSettings?: pulumi.Input<inputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGlobalEventCaptureSettings>;
    instrumentUnsupportedAjaxFrameworks?: pulumi.Input<boolean>;
    maxActionNameLength: pulumi.Input<number>;
    maxErrorsToCapture: pulumi.Input<number>;
    specialCharactersToEscape?: pulumi.Input<string>;
    syncBeaconFirefox?: pulumi.Input<boolean>;
    syncBeaconInternetExplorer?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlers {
    blur?: pulumi.Input<boolean>;
    change?: pulumi.Input<boolean>;
    click?: pulumi.Input<boolean>;
    maxDomNodes: pulumi.Input<number>;
    mouseup?: pulumi.Input<boolean>;
    toStringMethod?: pulumi.Input<boolean>;
    useMouseUpEventForClicks?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsEventWrapperSettings {
    blur?: pulumi.Input<boolean>;
    change?: pulumi.Input<boolean>;
    click?: pulumi.Input<boolean>;
    mouseup?: pulumi.Input<boolean>;
    touchEnd?: pulumi.Input<boolean>;
    touchStart?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGlobalEventCaptureSettings {
    additionalEventCapturedAsUserInput?: pulumi.Input<string>;
    click?: pulumi.Input<boolean>;
    doubleclick?: pulumi.Input<boolean>;
    keydown?: pulumi.Input<boolean>;
    keyup?: pulumi.Input<boolean>;
    mousedown?: pulumi.Input<boolean>;
    mouseup?: pulumi.Input<boolean>;
    scroll?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettingsBrowserRestrictionSettings {
    mode: pulumi.Input<string>;
    restrictions?: pulumi.Input<inputs.WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictions>;
}

export interface WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictions {
    restrictions: pulumi.Input<pulumi.Input<inputs.WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsRestriction>[]>;
}

export interface WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsRestriction {
    browserType: pulumi.Input<string>;
    browserVersion?: pulumi.Input<string>;
    comparator?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
}

export interface WebApplicationMonitoringSettingsContentCapture {
    javascriptErrors?: pulumi.Input<boolean>;
    resourceTimingSettings?: pulumi.Input<inputs.WebApplicationMonitoringSettingsContentCaptureResourceTimingSettings>;
    timeoutSettings?: pulumi.Input<inputs.WebApplicationMonitoringSettingsContentCaptureTimeoutSettings>;
    visuallyCompleteAndSpeedIndex?: pulumi.Input<boolean>;
    visuallyCompleteSettings?: pulumi.Input<inputs.WebApplicationMonitoringSettingsContentCaptureVisuallyCompleteSettings>;
}

export interface WebApplicationMonitoringSettingsContentCaptureResourceTimingSettings {
    instrumentationDelay: pulumi.Input<number>;
    nonW3cResourceTimings?: pulumi.Input<boolean>;
    resourceTimingCaptureType?: pulumi.Input<string>;
    resourceTimingsDomainLimit?: pulumi.Input<number>;
    w3cResourceTimings?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettingsContentCaptureTimeoutSettings {
    temporaryActionLimit: pulumi.Input<number>;
    temporaryActionTotalTimeout: pulumi.Input<number>;
    timedActionSupport?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettingsContentCaptureVisuallyCompleteSettings {
    excludeUrlRegex?: pulumi.Input<string>;
    ignoredMutationsList?: pulumi.Input<string>;
    inactivityTimeout?: pulumi.Input<number>;
    mutationTimeout?: pulumi.Input<number>;
    threshold?: pulumi.Input<number>;
}

export interface WebApplicationMonitoringSettingsIpAddressRestrictionSettings {
    mode: pulumi.Input<string>;
    restrictions?: pulumi.Input<inputs.WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictions>;
}

export interface WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictions {
    ranges: pulumi.Input<pulumi.Input<inputs.WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsRange>[]>;
}

export interface WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsRange {
    address: pulumi.Input<string>;
    addressTo?: pulumi.Input<string>;
    subnetMask?: pulumi.Input<number>;
}

export interface WebApplicationMonitoringSettingsJavascriptFrameworkSupport {
    activeXObject?: pulumi.Input<boolean>;
    angular?: pulumi.Input<boolean>;
    dojo?: pulumi.Input<boolean>;
    extjs?: pulumi.Input<boolean>;
    icefaces?: pulumi.Input<boolean>;
    jquery?: pulumi.Input<boolean>;
    mooTools?: pulumi.Input<boolean>;
    prototype?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettingsJavascriptInjectionRules {
    rules: pulumi.Input<pulumi.Input<inputs.WebApplicationMonitoringSettingsJavascriptInjectionRulesRule>[]>;
}

export interface WebApplicationMonitoringSettingsJavascriptInjectionRulesRule {
    enabled?: pulumi.Input<boolean>;
    htmlPattern?: pulumi.Input<string>;
    rule: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    urlOperator: pulumi.Input<string>;
    urlPattern?: pulumi.Input<string>;
}

export interface WebApplicationSessionReplayConfig {
    /**
     * (Field has overlap with `dynatrace.WebAppEnablement`) Session replay sampling rating in percent
     */
    costControlPercentage: pulumi.Input<number>;
    /**
     * (Field has overlap with `dynatrace.SessionReplayResourceCapture`) A list of URLs to be excluded from CSS resource capturing
     */
    cssResourceCapturingExclusionRules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Field has overlap with `dynatrace.SessionReplayResourceCapture`) Capture (`true`) or don't capture (`false`) CSS resources from the session
     */
    enableCssResourceCapturing?: pulumi.Input<boolean>;
    /**
     * (Field has overlap with `dynatrace.WebAppEnablement`) SessionReplay Enabled/Disabled
     */
    enabled?: pulumi.Input<boolean>;
}

export interface WebApplicationUserActionAndSessionProperties {
    /**
     * User action and session properties settings
     */
    properties?: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionAndSessionPropertiesProperty>[]>;
}

export interface WebApplicationUserActionAndSessionPropertiesProperty {
    aggregation?: pulumi.Input<string>;
    cleanupRule?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    /**
     * The ID of this resource.
     */
    id: pulumi.Input<number>;
    ignoreCase?: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
    longStringLength?: pulumi.Input<number>;
    metadataId?: pulumi.Input<number>;
    origin: pulumi.Input<string>;
    serverSideRequestAttribute?: pulumi.Input<string>;
    storeAsSessionProperty?: pulumi.Input<boolean>;
    storeAsUserActionProperty?: pulumi.Input<boolean>;
    /**
     * The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
     */
    type: pulumi.Input<string>;
}

export interface WebApplicationUserActionNamingSettings {
    /**
     * User action naming rules for custom actions
     */
    customActionNamingRules?: pulumi.Input<inputs.WebApplicationUserActionNamingSettingsCustomActionNamingRules>;
    /**
     * Case insensitive naming
     */
    ignoreCase?: pulumi.Input<boolean>;
    /**
     * User action naming rules for loading actions
     */
    loadActionNamingRules?: pulumi.Input<inputs.WebApplicationUserActionNamingSettingsLoadActionNamingRules>;
    /**
     * User action placeholders
     */
    placeholders?: pulumi.Input<inputs.WebApplicationUserActionNamingSettingsPlaceholders>;
    /**
     * User action naming rules for custom actions
     */
    queryParameterCleanups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Deactivate this setting if different domains should not result in separate user actions
     */
    splitUserActionsByDomain?: pulumi.Input<boolean>;
    /**
     * First load action found under an XHR action should be used when true. Else the deepest one under the xhr action is used
     */
    useFirstDetectedLoadAction?: pulumi.Input<boolean>;
    /**
     * User action naming rules for XHR actions
     */
    xhrActionNamingRules?: pulumi.Input<inputs.WebApplicationUserActionNamingSettingsXhrActionNamingRules>;
}

export interface WebApplicationUserActionNamingSettingsCustomActionNamingRules {
    rules: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionNamingSettingsCustomActionNamingRulesRule>[]>;
}

export interface WebApplicationUserActionNamingSettingsCustomActionNamingRulesRule {
    conditions?: pulumi.Input<inputs.WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditions>;
    template: pulumi.Input<string>;
    useOrConditions?: pulumi.Input<boolean>;
}

export interface WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditions {
    conditions: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsCondition>[]>;
}

export interface WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsCondition {
    operand1: pulumi.Input<string>;
    operand2?: pulumi.Input<string>;
    operator: pulumi.Input<string>;
}

export interface WebApplicationUserActionNamingSettingsLoadActionNamingRules {
    rules: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionNamingSettingsLoadActionNamingRulesRule>[]>;
}

export interface WebApplicationUserActionNamingSettingsLoadActionNamingRulesRule {
    conditions?: pulumi.Input<inputs.WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditions>;
    template: pulumi.Input<string>;
    useOrConditions?: pulumi.Input<boolean>;
}

export interface WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditions {
    conditions: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsCondition>[]>;
}

export interface WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsCondition {
    operand1: pulumi.Input<string>;
    operand2?: pulumi.Input<string>;
    operator: pulumi.Input<string>;
}

export interface WebApplicationUserActionNamingSettingsPlaceholders {
    placeholders: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionNamingSettingsPlaceholdersPlaceholder>[]>;
}

export interface WebApplicationUserActionNamingSettingsPlaceholdersPlaceholder {
    input: pulumi.Input<string>;
    metadataId?: pulumi.Input<number>;
    /**
     * The name of the web application, displayed in the UI
     */
    name: pulumi.Input<string>;
    processingPart: pulumi.Input<string>;
    processingSteps?: pulumi.Input<inputs.WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingSteps>;
    useGuessedElementIdentifier?: pulumi.Input<boolean>;
}

export interface WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingSteps {
    steps: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStep>[]>;
}

export interface WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStep {
    fallbackToInput?: pulumi.Input<boolean>;
    patternAfter?: pulumi.Input<string>;
    patternAfterSearchType?: pulumi.Input<string>;
    patternBefore?: pulumi.Input<string>;
    patternBeforeSearchType?: pulumi.Input<string>;
    patternToReplace?: pulumi.Input<string>;
    regularExpression?: pulumi.Input<string>;
    replacement?: pulumi.Input<string>;
    /**
     * The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
     */
    type: pulumi.Input<string>;
}

export interface WebApplicationUserActionNamingSettingsXhrActionNamingRules {
    rules: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionNamingSettingsXhrActionNamingRulesRule>[]>;
}

export interface WebApplicationUserActionNamingSettingsXhrActionNamingRulesRule {
    conditions?: pulumi.Input<inputs.WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditions>;
    template: pulumi.Input<string>;
    useOrConditions?: pulumi.Input<boolean>;
}

export interface WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditions {
    conditions: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsCondition>[]>;
}

export interface WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsCondition {
    operand1: pulumi.Input<string>;
    operand2?: pulumi.Input<string>;
    operator: pulumi.Input<string>;
}

export interface WebApplicationUserTags {
    /**
     * User tag settings
     */
    tags: pulumi.Input<pulumi.Input<inputs.WebApplicationUserTagsTag>[]>;
}

export interface WebApplicationUserTagsTag {
    cleanupRule?: pulumi.Input<string>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<number>;
    ignoreCase?: pulumi.Input<boolean>;
    metadataId?: pulumi.Input<number>;
    serverSideRequestAttribute?: pulumi.Input<string>;
    uniqueId?: pulumi.Input<number>;
}

export interface WebApplicationWaterfallSettings {
    /**
     * Warn about resources with a lower browser cache rate above *X*%. Values between 1 and 100 are allowed.
     */
    resourceBrowserCachingThreshold: pulumi.Input<number>;
    /**
     * Warn about resources larger than *X* bytes. Values between 0 and 99999000 are allowed.
     */
    resourcesThreshold: pulumi.Input<number>;
    /**
     * Warn about slow CDN resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
     */
    slowCndResourcesThreshold: pulumi.Input<number>;
    /**
     * Warn about slow 1st party resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
     */
    slowFirstPartyResourcesThreshold: pulumi.Input<number>;
    /**
     * Warn about slow 3rd party resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
     */
    slowThirdPartyResourcesThreshold: pulumi.Input<number>;
    /**
     * Warn if Speed index exceeds *X* % of Visually complete. Values between 1 and 99 are allowed.
     */
    speedIndexVisuallyCompleteRatioThreshold: pulumi.Input<number>;
    /**
     * Warn about uncompressed resources larger than *X* bytes. Values between 0 and 99999 are allowed.
     */
    uncompressedResourcesThreshold: pulumi.Input<number>;
}

export interface WebApplicationXhrActionApdexSettings {
    /**
     * Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
     */
    frustratingFallbackThreshold?: pulumi.Input<number>;
    /**
     * Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
     */
    frustratingThreshold?: pulumi.Input<number>;
    /**
     * no documentation available
     */
    threshold?: pulumi.Input<number>;
    /**
     * Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
     */
    toleratedFallbackThreshold?: pulumi.Input<number>;
    /**
     * Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
     */
    toleratedThreshold?: pulumi.Input<number>;
}

export interface WebhookNotificationHeaders {
    /**
     * An additional HTTP Header to include when sending requests
     */
    headers: pulumi.Input<pulumi.Input<inputs.WebhookNotificationHeadersHeader>[]>;
}

export interface WebhookNotificationHeadersHeader {
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    secretValue?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface XmattersNotificationHeaders {
    /**
     * An additional HTTP Header to include when sending requests
     */
    headers: pulumi.Input<pulumi.Input<inputs.XmattersNotificationHeadersHeader>[]>;
}

export interface XmattersNotificationHeadersHeader {
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    secretValue?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}
