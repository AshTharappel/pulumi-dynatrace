// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertingFilters {
    /**
     * A conditions for the metric usage
     */
    filters?: pulumi.Input<pulumi.Input<inputs.AlertingFiltersFilter>[]>;
}

export interface AlertingFiltersFilter {
    custom?: pulumi.Input<inputs.AlertingFiltersFilterCustom>;
    predefined?: pulumi.Input<inputs.AlertingFiltersFilterPredefined>;
}

export interface AlertingFiltersFilterCustom {
    description?: pulumi.Input<inputs.AlertingFiltersFilterCustomDescription>;
    title?: pulumi.Input<inputs.AlertingFiltersFilterCustomTitle>;
}

export interface AlertingFiltersFilterCustomDescription {
    caseSensitive?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface AlertingFiltersFilterCustomTitle {
    caseSensitive?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface AlertingFiltersFilterPredefined {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
}

export interface AlertingProfileEventTypeFilter {
    /**
     * Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
     */
    customEventFilters?: pulumi.Input<pulumi.Input<inputs.AlertingProfileEventTypeFilterCustomEventFilter>[]>;
    /**
     * Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
     */
    predefinedEventFilters?: pulumi.Input<pulumi.Input<inputs.AlertingProfileEventTypeFilterPredefinedEventFilter>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AlertingProfileEventTypeFilterCustomEventFilter {
    customDescriptionFilters?: pulumi.Input<pulumi.Input<inputs.AlertingProfileEventTypeFilterCustomEventFilterCustomDescriptionFilter>[]>;
    customTitleFilters?: pulumi.Input<pulumi.Input<inputs.AlertingProfileEventTypeFilterCustomEventFilterCustomTitleFilter>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AlertingProfileEventTypeFilterCustomEventFilterCustomDescriptionFilter {
    caseInsensitive?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface AlertingProfileEventTypeFilterCustomEventFilterCustomTitleFilter {
    caseInsensitive?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface AlertingProfileEventTypeFilterPredefinedEventFilter {
    eventType: pulumi.Input<string>;
    negate?: pulumi.Input<boolean>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AlertingProfileMetadata {
    /**
     * Dynatrace server version
     */
    clusterVersion?: pulumi.Input<string>;
    /**
     * A Sorted list of the version numbers of the configuration
     */
    configurationVersions?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A Sorted list of the version numbers of the configuration
     */
    currentConfigurationVersions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AlertingProfileRule {
    /**
     * Send a notification if a problem remains open longer than *X* minutes
     */
    delayInMinutes: pulumi.Input<number>;
    /**
     * The severity level to trigger the alert. Possible values are `AVAILABILITY`,	`CUSTOM_ALERT`,	`ERROR`,`MONITORING_UNAVAILABLE`,`PERFORMANCE` and `RESOURCE_CONTENTION`.
     */
    severityLevel: pulumi.Input<string>;
    /**
     * Configuration of the tag filtering of the alerting profile
     */
    tagFilters: pulumi.Input<pulumi.Input<inputs.AlertingProfileRuleTagFilter>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AlertingProfileRuleTagFilter {
    includeMode: pulumi.Input<string>;
    tagFilters?: pulumi.Input<pulumi.Input<inputs.AlertingProfileRuleTagFilterTagFilter>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AlertingProfileRuleTagFilterTagFilter {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AlertingRules {
    /**
     * A conditions for the metric usage
     */
    rules?: pulumi.Input<pulumi.Input<inputs.AlertingRulesRule>[]>;
}

export interface AlertingRulesRule {
    delayInMinutes: pulumi.Input<number>;
    includeMode: pulumi.Input<string>;
    severityLevel: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ApplicationAnomaliesFailureRate {
    /**
     * Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
     */
    auto?: pulumi.Input<inputs.ApplicationAnomaliesFailureRateAuto>;
    /**
     * Fixed thresholds for failure rate increase detection
     */
    thresholds?: pulumi.Input<inputs.ApplicationAnomaliesFailureRateThresholds>;
}

export interface ApplicationAnomaliesFailureRateAuto {
    absolute: pulumi.Input<number>;
    relative: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ApplicationAnomaliesFailureRateThresholds {
    sensitivity: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ApplicationAnomaliesResponseTime {
    /**
     * Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
     */
    auto?: pulumi.Input<inputs.ApplicationAnomaliesResponseTimeAuto>;
    /**
     * Fixed thresholds for response time degradation detection
     */
    thresholds?: pulumi.Input<inputs.ApplicationAnomaliesResponseTimeThresholds>;
}

export interface ApplicationAnomaliesResponseTimeAuto {
    load: pulumi.Input<string>;
    milliseconds: pulumi.Input<number>;
    percent: pulumi.Input<number>;
    slowestMilliseconds: pulumi.Input<number>;
    slowestPercent: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ApplicationAnomaliesResponseTimeThresholds {
    load: pulumi.Input<string>;
    milliseconds: pulumi.Input<number>;
    sensitivity: pulumi.Input<string>;
    slowestMilliseconds: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ApplicationAnomaliesTraffic {
    /**
     * The configuration of traffic drops detection
     */
    drops?: pulumi.Input<inputs.ApplicationAnomaliesTrafficDrops>;
    /**
     * The configuration of traffic spikes detection
     */
    spikes?: pulumi.Input<inputs.ApplicationAnomaliesTrafficSpikes>;
}

export interface ApplicationAnomaliesTrafficDrops {
    enabled: pulumi.Input<boolean>;
    percent?: pulumi.Input<number>;
}

export interface ApplicationAnomaliesTrafficSpikes {
    enabled: pulumi.Input<boolean>;
    percent?: pulumi.Input<number>;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacy {
    /**
     * Content masking settings for Session Replay.
     */
    contentMaskingSettings: pulumi.Input<inputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettings>;
    optIn?: pulumi.Input<boolean>;
    urlExclusionRules?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettings {
    playback: pulumi.Input<inputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlayback>;
    recording: pulumi.Input<inputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecording>;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlayback {
    preset: pulumi.Input<string>;
    rules?: pulumi.Input<inputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRules>;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRules {
    rules: pulumi.Input<pulumi.Input<inputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesRule>[]>;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesRule {
    selector: pulumi.Input<string>;
    type: pulumi.Input<string>;
    userInteractionHidden?: pulumi.Input<boolean>;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecording {
    preset: pulumi.Input<string>;
    rules?: pulumi.Input<inputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRules>;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRules {
    rules: pulumi.Input<pulumi.Input<inputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesRule>[]>;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesRule {
    selector: pulumi.Input<string>;
    type: pulumi.Input<string>;
    userInteractionHidden?: pulumi.Input<boolean>;
}

export interface ApplicationDetectionRuleFilterConfig {
    /**
     * Where to look for the pattern value, possible values are `DOMAIN` or `URL`
     */
    applicationMatchTarget: pulumi.Input<string>;
    /**
     * The operator used for matching the application detection rule, possible values are `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `MATCHES`
     */
    applicationMatchType: pulumi.Input<string>;
    /**
     * The value to look for with the application detection rule
     */
    pattern: pulumi.Input<string>;
}

export interface ApplicationErrorRulesCustomErrors {
    /**
     * Configuration of the custom error in the web application
     */
    rules: pulumi.Input<pulumi.Input<inputs.ApplicationErrorRulesCustomErrorsRule>[]>;
}

export interface ApplicationErrorRulesCustomErrorsRule {
    capture?: pulumi.Input<boolean>;
    customAlerting?: pulumi.Input<boolean>;
    impactApdex?: pulumi.Input<boolean>;
    keyMatcher?: pulumi.Input<string>;
    keyPattern?: pulumi.Input<string>;
    valueMatcher?: pulumi.Input<string>;
    valuePattern?: pulumi.Input<string>;
}

export interface ApplicationErrorRulesHttpErrors {
    /**
     * Configuration of the HTTP error in the web application
     */
    rules: pulumi.Input<pulumi.Input<inputs.ApplicationErrorRulesHttpErrorsRule>[]>;
}

export interface ApplicationErrorRulesHttpErrorsRule {
    capture?: pulumi.Input<boolean>;
    considerBlockedRequests?: pulumi.Input<boolean>;
    considerForAi?: pulumi.Input<boolean>;
    considerUnknownErrorCode?: pulumi.Input<boolean>;
    errorCodes?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterByUrl?: pulumi.Input<boolean>;
    impactApdex?: pulumi.Input<boolean>;
    url?: pulumi.Input<string>;
}

export interface AutotagEntitySelectorBasedRule {
    enabled?: pulumi.Input<boolean>;
    selector?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    valueFormat?: pulumi.Input<string>;
}

export interface AutotagMetadata {
    clusterVersion?: pulumi.Input<string>;
    configurationVersions?: pulumi.Input<pulumi.Input<number>[]>;
    currentConfigurationVersions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AutotagRule {
    conditions?: pulumi.Input<pulumi.Input<inputs.AutotagRuleCondition>[]>;
    enabled?: pulumi.Input<boolean>;
    normalization?: pulumi.Input<string>;
    propagationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    valueFormat?: pulumi.Input<string>;
}

export interface AutotagRuleCondition {
    /**
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionApplicationTypeComparison>[]>;
    applicationTypes?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionApplicationType>[]>;
    azureComputeModeComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionAzureComputeModeComparison>[]>;
    /**
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionAzureComputeMode>[]>;
    /**
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionAzureSkuComparision>[]>;
    azureSkus?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionAzureSkus>[]>;
    /**
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionBaseComparisonBasic>[]>;
    /**
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionBaseConditionKey>[]>;
    /**
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionBitnessComparision>[]>;
    bitnesses?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionBitness>[]>;
    /**
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionCloudTypeComparison>[]>;
    cloudTypes?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionCloudType>[]>;
    comparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionComparison>[]>;
    /**
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionCustomApplicationTypeComparison>[]>;
    customApplicationTypes?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionCustomApplicationType>[]>;
    /**
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionCustomHostMetadataConditionKey>[]>;
    customHostMetadatas?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionCustomHostMetadata>[]>;
    /**
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionCustomProcessMetadataConditionKey>[]>;
    customProcessMetadatas?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionCustomProcessMetadata>[]>;
    databaseTopologies?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionDatabaseTopology>[]>;
    /**
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionDatabaseTopologyComparison>[]>;
    /**
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionDcrumDecoderComparison>[]>;
    dcrumDecoders?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionDcrumDecoder>[]>;
    entities?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionEntity>[]>;
    /**
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionEntityIdComparison>[]>;
    hostTeches?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionHostTech>[]>;
    /**
     * @deprecated `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionHypervisorTypeComparision>[]>;
    hypervisors?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionHypervisor>[]>;
    /**
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIndexedNameComparison>[]>;
    indexedNames?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIndexedName>[]>;
    /**
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIndexedStringComparison>[]>;
    indexedStrings?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIndexedString>[]>;
    /**
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIndexedTagComparison>[]>;
    indexedTags?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIndexedTag>[]>;
    /**
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIntegerComparison>[]>;
    integers?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionInteger>[]>;
    /**
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIpaddressComparison>[]>;
    ipaddresses?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionIpaddress>[]>;
    keys?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionKey>[]>;
    /**
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionMobilePlatformComparison>[]>;
    mobilePlatforms?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionMobilePlatform>[]>;
    osArches?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionOsArch>[]>;
    osTypes?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionOsType>[]>;
    /**
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionOsarchitectureComparison>[]>;
    /**
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionOstypeComparison>[]>;
    /**
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionPaasTypeComparison>[]>;
    paasTypes?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionPaasType>[]>;
    /**
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionProcessMetadataConditionKey>[]>;
    processMetadatas?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionProcessMetadata>[]>;
    serviceTopologies?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionServiceTopology>[]>;
    /**
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionServiceTopologyComparison>[]>;
    /**
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionServiceTypeComparison>[]>;
    serviceTypes?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionServiceType>[]>;
    /**
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionSimpleHostTechComparison>[]>;
    /**
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionSimpleTechComparison>[]>;
    /**
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionStringComparison>[]>;
    /**
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionStringConditionKey>[]>;
    stringKeys?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionStringKey>[]>;
    strings?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionString>[]>;
    /**
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionSyntheticEngineTypeComparison>[]>;
    syntheticEngines?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionSyntheticEngine>[]>;
    /**
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionTagComparison>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionTag>[]>;
    teches?: pulumi.Input<pulumi.Input<inputs.AutotagRuleConditionTech>[]>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionAzureComputeMode {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionAzureComputeModeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionAzureSkuComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionAzureSkus {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionBaseComparisonBasic {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionBaseConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionBitness {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionBitnessComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCloudType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCloudTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionComparison {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomHostMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.AutotagRuleConditionCustomHostMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomHostMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.AutotagRuleConditionCustomHostMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomHostMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomHostMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.AutotagRuleConditionCustomProcessMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.AutotagRuleConditionCustomProcessMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomProcessMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionCustomProcessMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionDatabaseTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionDatabaseTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionDcrumDecoder {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionDcrumDecoderComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionEntity {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionEntityIdComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionHostTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AutotagRuleConditionHostTechValue>;
}

export interface AutotagRuleConditionHostTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface AutotagRuleConditionHypervisor {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionHypervisorTypeComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionIndexedName {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionIndexedNameComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionIndexedString {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionIndexedStringComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionIndexedTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AutotagRuleConditionIndexedTagValue>;
}

export interface AutotagRuleConditionIndexedTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AutotagRuleConditionIndexedTagComparisonValue>;
}

export interface AutotagRuleConditionIndexedTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionIndexedTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionInteger {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface AutotagRuleConditionIntegerComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface AutotagRuleConditionIpaddress {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionIpaddressComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionMobilePlatform {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionMobilePlatformComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionOsArch {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionOsType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionOsarchitectureComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionOstypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionPaasType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionPaasTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionServiceTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionServiceTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionServiceType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionServiceTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionSimpleHostTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AutotagRuleConditionSimpleHostTechComparisonValue>;
}

export interface AutotagRuleConditionSimpleHostTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface AutotagRuleConditionSimpleTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AutotagRuleConditionSimpleTechComparisonValue>;
}

export interface AutotagRuleConditionSimpleTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface AutotagRuleConditionString {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionStringComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionStringConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionStringKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface AutotagRuleConditionSyntheticEngine {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionSyntheticEngineTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AutotagRuleConditionTagValue>;
}

export interface AutotagRuleConditionTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AutotagRuleConditionTagComparisonValue>;
}

export interface AutotagRuleConditionTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutotagRuleConditionTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AutotagRuleConditionTechValue>;
}

export interface AutotagRuleConditionTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface AwsCredentialsAuthenticationData {
    /**
     * the access key
     */
    accessKey?: pulumi.Input<string>;
    /**
     * the ID of the Amazon account
     */
    accountId?: pulumi.Input<string>;
    /**
     * the external ID token for setting an IAM role. You can obtain it with the `GET /aws/iamExternalId` request
     */
    externalId?: pulumi.Input<string>;
    /**
     * the IAM role to be used by Dynatrace to get monitoring data
     */
    iamRole?: pulumi.Input<string>;
    /**
     * the secret access key
     */
    secretKey?: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AwsCredentialsSupportingServicesToMonitor {
    /**
     * a list of metrics to be monitored for this service
     */
    monitoredMetrics?: pulumi.Input<pulumi.Input<inputs.AwsCredentialsSupportingServicesToMonitorMonitoredMetric>[]>;
    /**
     * the name of the supporting service
     */
    name?: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AwsCredentialsSupportingServicesToMonitorMonitoredMetric {
    dimensions?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    statistic?: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AwsCredentialsTagsToMonitor {
    /**
     * the key of the AWS tag.
     */
    name?: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * the value of the AWS tag
     */
    value?: pulumi.Input<string>;
}

export interface AzureCredentialsMonitorOnlyExcludingTagPair {
    /**
     * The name of the tag.
     */
    name?: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The value of the tag.   If set to `null`, then resources with any value of the tag are monitored.
     */
    value?: pulumi.Input<string>;
}

export interface AzureCredentialsMonitorOnlyTagPair {
    /**
     * The name of the tag.
     */
    name?: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The value of the tag.   If set to `null`, then resources with any value of the tag are monitored.
     */
    value?: pulumi.Input<string>;
}

export interface AzureCredentialsSupportingService {
    /**
     * A list of Azure tags to be monitored.  You can specify up to 10 tags. A resource tagged with *any* of the specified tags is monitored.  Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`
     */
    monitoredMetrics?: pulumi.Input<pulumi.Input<inputs.AzureCredentialsSupportingServiceMonitoredMetric>[]>;
    /**
     * The name of the supporting service.
     */
    name?: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface AzureCredentialsSupportingServiceMonitoredMetric {
    dimensions?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface BrowserMonitorAnomalyDetection {
    /**
     * Thresholds for loading times
     */
    loadingTimeThresholds?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorAnomalyDetectionLoadingTimeThreshold>[]>;
    /**
     * Outage handling configuration
     */
    outageHandlings?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorAnomalyDetectionOutageHandling>[]>;
}

export interface BrowserMonitorAnomalyDetectionLoadingTimeThreshold {
    enabled?: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorAnomalyDetectionLoadingTimeThresholdThreshold>[]>;
}

export interface BrowserMonitorAnomalyDetectionLoadingTimeThresholdThreshold {
    thresholds: pulumi.Input<pulumi.Input<inputs.BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold>[]>;
}

export interface BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold {
    eventIndex?: pulumi.Input<number>;
    requestIndex?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    valueMs: pulumi.Input<number>;
}

export interface BrowserMonitorAnomalyDetectionOutageHandling {
    globalOutage?: pulumi.Input<boolean>;
    localOutage?: pulumi.Input<boolean>;
    localOutagePolicies?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy>[]>;
    retryOnError?: pulumi.Input<boolean>;
}

export interface BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy {
    affectedLocations: pulumi.Input<number>;
    consecutiveRuns: pulumi.Input<number>;
}

export interface BrowserMonitorKeyPerformanceMetrics {
    /**
     * Defines the key performance metric for load actions. Supported values are `VISUALLY_COMPLETE`, `SPEED_INDEX`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE`, `HTML_DOWNLOADED`, `DOM_INTERACTIVE`, `LOAD_EVENT_START` and `LOAD_EVENT_END`.
     */
    loadActionKpm: pulumi.Input<string>;
    /**
     * Defines the key performance metric for XHR actions. Supported values are `VISUALLY_COMPLETE`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE` and `RESPONSE_END`.
     */
    xhrActionKpm: pulumi.Input<string>;
}

export interface BrowserMonitorScript {
    /**
     * The setup of the monitor
     */
    configuration?: pulumi.Input<inputs.BrowserMonitorScriptConfiguration>;
    /**
     * Steps of the clickpath—the first step must always be of the `navigate` type
     */
    events?: pulumi.Input<inputs.BrowserMonitorScriptEvents>;
    /**
     * The type of monitor. Possible values are `clickpath` for clickpath monitors and `availability` for single-URL browser monitors. These monitors are only allowed to have one event of the `navigate` type
     */
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptConfiguration {
    bandwidth?: pulumi.Input<inputs.BrowserMonitorScriptConfigurationBandwidth>;
    blocks?: pulumi.Input<pulumi.Input<string>[]>;
    bypassCsp?: pulumi.Input<boolean>;
    cookies?: pulumi.Input<inputs.BrowserMonitorScriptConfigurationCookies>;
    device?: pulumi.Input<inputs.BrowserMonitorScriptConfigurationDevice>;
    disableWebSecurity?: pulumi.Input<boolean>;
    headers?: pulumi.Input<inputs.BrowserMonitorScriptConfigurationHeaders>;
    ignoredErrorCodes?: pulumi.Input<inputs.BrowserMonitorScriptConfigurationIgnoredErrorCodes>;
    javascriptSetttings?: pulumi.Input<inputs.BrowserMonitorScriptConfigurationJavascriptSetttings>;
    monitorFrames?: pulumi.Input<boolean>;
    userAgent?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptConfigurationBandwidth {
    download?: pulumi.Input<number>;
    latency?: pulumi.Input<number>;
    networkType?: pulumi.Input<string>;
    upload?: pulumi.Input<number>;
}

export interface BrowserMonitorScriptConfigurationCookies {
    cookies: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptConfigurationCookiesCookie>[]>;
}

export interface BrowserMonitorScriptConfigurationCookiesCookie {
    domain: pulumi.Input<string>;
    name: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptConfigurationDevice {
    height?: pulumi.Input<number>;
    mobile?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    orientation?: pulumi.Input<string>;
    scaleFactor?: pulumi.Input<number>;
    touchEnabled?: pulumi.Input<boolean>;
    width?: pulumi.Input<number>;
}

export interface BrowserMonitorScriptConfigurationHeaders {
    headers: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptConfigurationHeadersHeader>[]>;
    restrictions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BrowserMonitorScriptConfigurationHeadersHeader {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptConfigurationIgnoredErrorCodes {
    matchingDocumentRequests?: pulumi.Input<string>;
    statusCodes: pulumi.Input<string>;
}

export interface BrowserMonitorScriptConfigurationJavascriptSetttings {
    customProperties?: pulumi.Input<string>;
    timeoutSettings?: pulumi.Input<inputs.BrowserMonitorScriptConfigurationJavascriptSetttingsTimeoutSettings>;
    visuallyCompleteOptions?: pulumi.Input<inputs.BrowserMonitorScriptConfigurationJavascriptSetttingsVisuallyCompleteOptions>;
}

export interface BrowserMonitorScriptConfigurationJavascriptSetttingsTimeoutSettings {
    actionLimit: pulumi.Input<number>;
    totalTimeout: pulumi.Input<number>;
}

export interface BrowserMonitorScriptConfigurationJavascriptSetttingsVisuallyCompleteOptions {
    excludedElements?: pulumi.Input<pulumi.Input<string>[]>;
    excludedUrls?: pulumi.Input<pulumi.Input<string>[]>;
    imageSizeThreshold: pulumi.Input<number>;
    inactivityTimeout: pulumi.Input<number>;
    mutationTimeout: pulumi.Input<number>;
}

export interface BrowserMonitorScriptEvents {
    events?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEvent>[]>;
}

export interface BrowserMonitorScriptEventsEvent {
    click?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventClick>;
    cookie?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventCookie>;
    description: pulumi.Input<string>;
    javascript?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascript>;
    keystrokes?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokes>;
    navigate?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigate>;
    select?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelect>;
    tap?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventTap>;
}

export interface BrowserMonitorScriptEventsEventClick {
    button: pulumi.Input<number>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickTarget>;
    validate?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickValidate>;
    wait?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickWait>;
}

export interface BrowserMonitorScriptEventsEventClickTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventClickTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventClickTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventClickValidate {
    validations: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickValidateValidation>[]>;
}

export interface BrowserMonitorScriptEventsEventClickValidateValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickValidateValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventClickValidateValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickValidateValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventClickValidateValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventClickWait {
    milliseconds?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    validation?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickWaitValidation>;
    waitFor: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventClickWaitValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickWaitValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventClickWaitValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickWaitValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventClickWaitValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventCookie {
    cookies: pulumi.Input<inputs.BrowserMonitorScriptEventsEventCookieCookies>;
}

export interface BrowserMonitorScriptEventsEventCookieCookies {
    cookies: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventCookieCookiesCookie>[]>;
}

export interface BrowserMonitorScriptEventsEventCookieCookiesCookie {
    domain: pulumi.Input<string>;
    name: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventJavascript {
    code: pulumi.Input<string>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascriptTarget>;
    wait?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascriptWait>;
}

export interface BrowserMonitorScriptEventsEventJavascriptTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascriptTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventJavascriptTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascriptTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventJavascriptTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventJavascriptWait {
    milliseconds?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    validation?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascriptWaitValidation>;
    waitFor: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventJavascriptWaitValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascriptWaitValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventJavascriptWaitValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokes {
    masked?: pulumi.Input<boolean>;
    simulateBlurEvent?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesTarget>;
    text: pulumi.Input<string>;
    validate?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesValidate>;
    wait?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesWait>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidate {
    validations: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesValidateValidation>[]>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidateValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesValidateValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidateValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWait {
    milliseconds?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    validation?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesWaitValidation>;
    waitFor: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWaitValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesWaitValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWaitValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigate {
    authentication?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateAuthentication>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateTarget>;
    url: pulumi.Input<string>;
    validate?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateValidate>;
    wait?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateWait>;
}

export interface BrowserMonitorScriptEventsEventNavigateAuthentication {
    creds: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventNavigateTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateValidate {
    validations: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateValidateValidation>[]>;
}

export interface BrowserMonitorScriptEventsEventNavigateValidateValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateValidateValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateValidateValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateWait {
    milliseconds?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    validation?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateWaitValidation>;
    waitFor: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateWaitValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateWaitValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateWaitValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelect {
    selections: pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectSelections>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectTarget>;
    validate?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectValidate>;
    wait?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectWait>;
}

export interface BrowserMonitorScriptEventsEventSelectSelections {
    options: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectSelectionsOption>[]>;
}

export interface BrowserMonitorScriptEventsEventSelectSelectionsOption {
    index: pulumi.Input<number>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventSelectTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectValidate {
    validations: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectValidateValidation>[]>;
}

export interface BrowserMonitorScriptEventsEventSelectValidateValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectValidateValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectValidateValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectWait {
    milliseconds?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    validation?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectWaitValidation>;
    waitFor: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectWaitValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectWaitValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectWaitValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTap {
    button: pulumi.Input<number>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapTarget>;
    validate?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapValidate>;
    wait?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapWait>;
}

export interface BrowserMonitorScriptEventsEventTapTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTapTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventTapTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTapValidate {
    validations: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapValidateValidation>[]>;
}

export interface BrowserMonitorScriptEventsEventTapValidateValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapValidateValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTapValidateValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapValidateValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTapValidateValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTapWait {
    milliseconds?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    validation?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapWaitValidation>;
    waitFor: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTapWaitValidation {
    failIfFound?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    regex?: pulumi.Input<boolean>;
    target?: pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapWaitValidationTarget>;
    type: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTapWaitValidationTarget {
    locators?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapWaitValidationTargetLocator>[]>;
    window?: pulumi.Input<string>;
}

export interface BrowserMonitorScriptEventsEventTapWaitValidationTargetLocator {
    locators: pulumi.Input<pulumi.Input<inputs.BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorLocator>[]>;
}

export interface BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorLocator {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BrowserMonitorTag {
    /**
     * Tag with source of a Dynatrace entity.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.BrowserMonitorTagTag>[]>;
}

export interface BrowserMonitorTagTag {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricCondition {
    conditions?: pulumi.Input<pulumi.Input<inputs.CalculatedServiceMetricConditionCondition>[]>;
}

export interface CalculatedServiceMetricConditionCondition {
    attribute: pulumi.Input<string>;
    comparison: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparison>;
}

export interface CalculatedServiceMetricConditionConditionComparison {
    boolean?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonBoolean>;
    esbInputNodeType?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonEsbInputNodeType>;
    failedState?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonFailedState>;
    failureReason?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonFailureReason>;
    fastString?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonFastString>;
    flawState?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonFlawState>;
    generic?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonGeneric>;
    httpMethod?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonHttpMethod>;
    httpStatusClass?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonHttpStatusClass>;
    iibInputNodeType?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonIibInputNodeType>;
    negate?: pulumi.Input<boolean>;
    number?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonNumber>;
    numberRequestAttribute?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonNumberRequestAttribute>;
    serviceType?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonServiceType>;
    string?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonString>;
    stringRequestAttribute?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonStringRequestAttribute>;
    tag?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonTag>;
    zosCallType?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonZosCallType>;
}

export interface CalculatedServiceMetricConditionConditionComparisonBoolean {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<boolean>;
    values?: pulumi.Input<pulumi.Input<boolean>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonEsbInputNodeType {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonFailedState {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonFailureReason {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonFastString {
    caseSensitive?: pulumi.Input<boolean>;
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonFlawState {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonGeneric {
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonHttpMethod {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonHttpStatusClass {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonIibInputNodeType {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonNumber {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
    values?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonNumberRequestAttribute {
    matchOnChildCalls?: pulumi.Input<boolean>;
    operator?: pulumi.Input<string>;
    requestAttribute: pulumi.Input<string>;
    source?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSource>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
    values?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSource {
    managementZone?: pulumi.Input<string>;
    serviceTag?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTag>;
    unknowns?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTag {
    context?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    tagKey?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagTagKey>;
    value?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagTagKey {
    context?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonServiceType {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonString {
    caseSensitive?: pulumi.Input<boolean>;
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonStringRequestAttribute {
    caseSensitive?: pulumi.Input<boolean>;
    matchOnChildCalls?: pulumi.Input<boolean>;
    operator?: pulumi.Input<string>;
    requestAttribute: pulumi.Input<string>;
    source?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSource>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSource {
    managementZone?: pulumi.Input<string>;
    serviceTag?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTag>;
    unknowns?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTag {
    context?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    tagKey?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagTagKey>;
    value?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagTagKey {
    context?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonTag {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonTagValue>;
    values?: pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonTagValues>;
}

export interface CalculatedServiceMetricConditionConditionComparisonTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonTagValues {
    values?: pulumi.Input<pulumi.Input<inputs.CalculatedServiceMetricConditionConditionComparisonTagValuesValue>[]>;
}

export interface CalculatedServiceMetricConditionConditionComparisonTagValuesValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricConditionConditionComparisonZosCallType {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CalculatedServiceMetricDimensionDefinition {
    dimension: pulumi.Input<string>;
    name: pulumi.Input<string>;
    placeholders?: pulumi.Input<inputs.CalculatedServiceMetricDimensionDefinitionPlaceholders>;
    topX: pulumi.Input<number>;
    topXAggregation: pulumi.Input<string>;
    topXDirection: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholders {
    placeholders?: pulumi.Input<pulumi.Input<inputs.CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholder>[]>;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholder {
    aggregation?: pulumi.Input<string>;
    attribute: pulumi.Input<string>;
    delimiterOrRegex?: pulumi.Input<string>;
    endDelimiter?: pulumi.Input<string>;
    kind: pulumi.Input<string>;
    name: pulumi.Input<string>;
    normalization?: pulumi.Input<string>;
    requestAttribute?: pulumi.Input<string>;
    source?: pulumi.Input<inputs.CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSource>;
    unknowns?: pulumi.Input<string>;
    useFromChildCalls?: pulumi.Input<boolean>;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSource {
    managementZone?: pulumi.Input<string>;
    serviceTag?: pulumi.Input<inputs.CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag>;
    unknowns?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag {
    context?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    tagKey?: pulumi.Input<inputs.CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey>;
    value?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey {
    context?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
}

export interface CalculatedServiceMetricMetricDefinition {
    metric: pulumi.Input<string>;
    requestAttribute?: pulumi.Input<string>;
}

export interface CustomAnomaliesDimension {
    /**
     * A generic definition for a filter
     */
    dimensions?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesDimensionDimension>[]>;
    /**
     * A filter for the metrics entity dimensions
     */
    entities?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesDimensionEntity>[]>;
    /**
     * A filter for the metrics string dimensions
     */
    strings?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesDimensionString>[]>;
}

export interface CustomAnomaliesDimensionDimension {
    key?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesDimensionEntity {
    filter: pulumi.Input<inputs.CustomAnomaliesDimensionEntityFilter>;
    key?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesDimensionEntityFilter {
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface CustomAnomaliesDimensionString {
    filter: pulumi.Input<inputs.CustomAnomaliesDimensionStringFilter>;
    key?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesDimensionStringFilter {
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface CustomAnomaliesScope {
    /**
     * A scope filter for the related custom device group name
     */
    customDeviceGroupNames?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeCustomDeviceGroupName>[]>;
    /**
     * A scope filter for a monitored entity identifier
     */
    entities?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeEntity>[]>;
    /**
     * A scope filter for the related host group name
     */
    hostGroupNames?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeHostGroupName>[]>;
    /**
     * A scope filter for the related host name
     */
    hostNames?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeHostName>[]>;
    /**
     * A scope filter for a management zone identifier
     */
    managementZones?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeManagementZone>[]>;
    /**
     * A scope filter for a monitored entity name
     */
    names?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeName>[]>;
    /**
     * A scope filter for a process group identifier
     */
    processGroupIds?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeProcessGroupId>[]>;
    /**
     * A scope filter for the related process group name
     */
    processGroupNames?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeProcessGroupName>[]>;
    /**
     * A generic scope filter
     */
    scopes?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeScope>[]>;
    /**
     * A scope filter for tags on entities
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScopeTag>[]>;
}

export interface CustomAnomaliesScopeCustomDeviceGroupName {
    filter: pulumi.Input<inputs.CustomAnomaliesScopeCustomDeviceGroupNameFilter>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeCustomDeviceGroupNameFilter {
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeEntity {
    /**
     * The ID of this resource.
     */
    id: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeHostGroupName {
    filter: pulumi.Input<inputs.CustomAnomaliesScopeHostGroupNameFilter>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeHostGroupNameFilter {
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeHostName {
    filter: pulumi.Input<inputs.CustomAnomaliesScopeHostNameFilter>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeHostNameFilter {
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeManagementZone {
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeName {
    filter: pulumi.Input<inputs.CustomAnomaliesScopeNameFilter>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeNameFilter {
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeProcessGroupId {
    /**
     * The ID of this resource.
     */
    id: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeProcessGroupName {
    filter: pulumi.Input<inputs.CustomAnomaliesScopeProcessGroupNameFilter>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeProcessGroupNameFilter {
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeScope {
    type: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeTag {
    filter: pulumi.Input<inputs.CustomAnomaliesScopeTagFilter>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesScopeTagFilter {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface CustomAnomaliesStrategy {
    /**
     * An auto-adaptive baseline strategy to detect anomalies within metrics that show a regular change over time, as the baseline is also updated automatically. An example is to detect an anomaly in the number of received network packets or within the number of user actions over time
     */
    auto?: pulumi.Input<inputs.CustomAnomaliesStrategyAuto>;
    /**
     * A generic monitoring strategy
     */
    generics?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesStrategyGeneric>[]>;
    /**
     * A static threshold monitoring strategy to alert on hard limits within a given metric. An example is the violation of a critical memory limit
     */
    static?: pulumi.Input<inputs.CustomAnomaliesStrategyStatic>;
}

export interface CustomAnomaliesStrategyAuto {
    alertCondition: pulumi.Input<string>;
    alertingOnMissingData?: pulumi.Input<boolean>;
    dealertingSamples: pulumi.Input<number>;
    samples: pulumi.Input<number>;
    signalFluctuations: pulumi.Input<number>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    violatingSamples: pulumi.Input<number>;
}

export interface CustomAnomaliesStrategyGeneric {
    type: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomAnomaliesStrategyStatic {
    alertCondition: pulumi.Input<string>;
    alertingOnMissingData?: pulumi.Input<boolean>;
    dealertingSamples: pulumi.Input<number>;
    samples: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
    unit: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    violatingSamples: pulumi.Input<number>;
}

export interface CustomServiceRule {
    /**
     * Additional annotations filter of the rule. Only classes where all listed annotations are available in the class itself or any of its superclasses are instrumented. Not applicable to PHP
     */
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fully qualified class or interface to instrument (or a substring if matching to a string). Required for Java and .NET custom services. Not applicable to PHP
     */
    class?: pulumi.Input<inputs.CustomServiceRuleClass>;
    /**
     * Rule enabled/disabled
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The PHP file containing the class or methods to instrument. Required for PHP custom service. Not applicable to Java and .NET
     */
    file?: pulumi.Input<inputs.CustomServiceRuleFile>;
    /**
     * The ID of the detection rule
     */
    id?: pulumi.Input<string>;
    /**
     * methods to instrument
     */
    methods: pulumi.Input<pulumi.Input<inputs.CustomServiceRuleMethod>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface CustomServiceRuleClass {
    match?: pulumi.Input<string>;
    /**
     * The name of the custom service, displayed in the UI
     */
    name: pulumi.Input<string>;
}

export interface CustomServiceRuleFile {
    match?: pulumi.Input<string>;
    /**
     * The name of the custom service, displayed in the UI
     */
    name: pulumi.Input<string>;
}

export interface CustomServiceRuleMethod {
    arguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    modifiers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the custom service, displayed in the UI
     */
    name: pulumi.Input<string>;
    returns?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    visibility?: pulumi.Input<string>;
}

export interface DashboardDashboardMetadata {
    /**
     * The tile uses consistent colors when rendering its content
     */
    consistentColors?: pulumi.Input<boolean>;
    /**
     * Dashboard filter configuration of a dashboard
     */
    dynamicFilters?: pulumi.Input<inputs.DashboardDashboardMetadataDynamicFilters>;
    /**
     * Global filter Settings for the Dashboard
     */
    filter?: pulumi.Input<inputs.DashboardDashboardMetadataFilter>;
    /**
     * the name of the dashboard
     */
    name: pulumi.Input<string>;
    /**
     * the owner of the dashboard
     */
    owner: pulumi.Input<string>;
    /**
     * the dashboard is shared (`true`) or private (`false`)
     */
    shared?: pulumi.Input<boolean>;
    /**
     * represents sharing configuration of a dashboard
     */
    sharingDetails?: pulumi.Input<inputs.DashboardDashboardMetadataSharingDetails>;
    /**
     * a set of tags assigned to the dashboard
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * a set of all possible global dashboard filters that can be applied to dashboard
     */
    validFilterKeys?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardDashboardMetadataDynamicFilters {
    filters: pulumi.Input<pulumi.Input<string>[]>;
    tagSuggestionTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardDashboardMetadataFilter {
    managementZones?: pulumi.Input<pulumi.Input<inputs.DashboardDashboardMetadataFilterManagementZone>[]>;
    timeframe?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardDashboardMetadataFilterManagementZone {
    description?: pulumi.Input<string>;
    /**
     * The ID of this resource.
     */
    id: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardDashboardMetadataSharingDetails {
    linkShared?: pulumi.Input<boolean>;
    published?: pulumi.Input<boolean>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardMetadata {
    /**
     * Dynatrace server version
     */
    clusterVersion?: pulumi.Input<string>;
    /**
     * A Sorted list of the version numbers of the configuration
     */
    configurationVersions?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A Sorted list of the version numbers of the configuration
     */
    currentConfigurationVersions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardSharingPermissions {
    /**
     * Access permissions of the dashboard
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.DashboardSharingPermissionsPermission>[]>;
}

export interface DashboardSharingPermissionsPermission {
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    level: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DashboardSharingPublic {
    /**
     * A list of management zones that can display data on the publicly shared dashboard.
     */
    managementZones: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardTile {
    /**
     * The list of Dynatrace entities, assigned to the tile
     */
    assignedEntities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * the position and size of a tile
     */
    bounds?: pulumi.Input<inputs.DashboardTileBounds>;
    chartVisible?: pulumi.Input<boolean>;
    /**
     * The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`)
     */
    configured?: pulumi.Input<boolean>;
    /**
     * The name of the tile, set by user
     */
    customName?: pulumi.Input<string>;
    /**
     * Include (`false') or exclude (`true`) maintenance windows from availability calculations
     */
    excludeMaintenanceWindows?: pulumi.Input<boolean>;
    /**
     * is filter applied to a tile. It overrides dashboard's filter
     */
    filter?: pulumi.Input<inputs.DashboardTileFilter>;
    /**
     * the position and size of a tile
     */
    filterConfig?: pulumi.Input<inputs.DashboardTileFilterConfig>;
    /**
     * The limit of the results, if not set will use the default value of the system
     */
    limit?: pulumi.Input<number>;
    /**
     * The markdown-formatted content of the tile
     */
    markdown?: pulumi.Input<string>;
    /**
     * The metric assigned to the tile
     */
    metric?: pulumi.Input<string>;
    /**
     * the name of the tile
     */
    name: pulumi.Input<string>;
    /**
     * The size of the tile name. Possible values are `small`, `medium` and `large`.
     */
    nameSize?: pulumi.Input<string>;
    /**
     * A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
     */
    query?: pulumi.Input<string>;
    /**
     * the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
     */
    tileType: pulumi.Input<string>;
    /**
     * The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
     */
    timeFrameShift?: pulumi.Input<string>;
    /**
     * The attribute `type` exists for backwards compatibilty. Usage is discouraged. You should use `visualization` instead.
     */
    type?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
     */
    visualization?: pulumi.Input<string>;
    /**
     * Configuration of a User session query visualization tile
     */
    visualizationConfig?: pulumi.Input<inputs.DashboardTileVisualizationConfig>;
}

export interface DashboardTileBounds {
    height: pulumi.Input<number>;
    left: pulumi.Input<number>;
    top: pulumi.Input<number>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    width: pulumi.Input<number>;
}

export interface DashboardTileFilter {
    managementZones?: pulumi.Input<pulumi.Input<inputs.DashboardTileFilterManagementZone>[]>;
    timeframe?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardTileFilterConfig {
    chartConfig?: pulumi.Input<inputs.DashboardTileFilterConfigChartConfig>;
    customName: pulumi.Input<string>;
    defaultName: pulumi.Input<string>;
    filters?: pulumi.Input<inputs.DashboardTileFilterConfigFilters>;
    type: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardTileFilterConfigChartConfig {
    axisLimits?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    leftAxisCustomUnit?: pulumi.Input<string>;
    legend?: pulumi.Input<boolean>;
    resultMetadatas?: pulumi.Input<pulumi.Input<inputs.DashboardTileFilterConfigChartConfigResultMetadata>[]>;
    rightAxisCustomUnit?: pulumi.Input<string>;
    series?: pulumi.Input<pulumi.Input<inputs.DashboardTileFilterConfigChartConfigSeries>[]>;
    type: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardTileFilterConfigChartConfigResultMetadata {
    configs?: pulumi.Input<pulumi.Input<inputs.DashboardTileFilterConfigChartConfigResultMetadataConfig>[]>;
}

export interface DashboardTileFilterConfigChartConfigResultMetadataConfig {
    customColor?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    lastModified?: pulumi.Input<number>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardTileFilterConfigChartConfigSeries {
    aggregation: pulumi.Input<string>;
    aggregationRate?: pulumi.Input<string>;
    dimensions?: pulumi.Input<pulumi.Input<inputs.DashboardTileFilterConfigChartConfigSeriesDimension>[]>;
    entityType: pulumi.Input<string>;
    metric: pulumi.Input<string>;
    percentile?: pulumi.Input<number>;
    sortAscending?: pulumi.Input<boolean>;
    sortColumn?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardTileFilterConfigChartConfigSeriesDimension {
    entityDimension?: pulumi.Input<boolean>;
    /**
     * The ID of this resource.
     */
    id: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardTileFilterConfigFilters {
    filters?: pulumi.Input<pulumi.Input<inputs.DashboardTileFilterConfigFiltersFilter>[]>;
}

export interface DashboardTileFilterConfigFiltersFilter {
    entityType: pulumi.Input<string>;
    matches?: pulumi.Input<pulumi.Input<inputs.DashboardTileFilterConfigFiltersFilterMatch>[]>;
}

export interface DashboardTileFilterConfigFiltersFilterMatch {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DashboardTileFilterManagementZone {
    description?: pulumi.Input<string>;
    /**
     * The ID of this resource.
     */
    id: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DashboardTileVisualizationConfig {
    hasAxisBucketing?: pulumi.Input<boolean>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface DatabaseAnomaliesDbConnectFailures {
    /**
     * Number of failed database connections during any **eval_period** minutes period to trigger an alert
     */
    connectionFailsCount?: pulumi.Input<number>;
    /**
     * The *X* minutes time period during which the **connection*fails*count** is evaluated
     */
    evalPeriod?: pulumi.Input<number>;
}

export interface DatabaseAnomaliesFailureRate {
    /**
     * Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
     */
    auto?: pulumi.Input<inputs.DatabaseAnomaliesFailureRateAuto>;
    /**
     * Fixed thresholds for failure rate increase detection
     */
    thresholds?: pulumi.Input<inputs.DatabaseAnomaliesFailureRateThresholds>;
}

export interface DatabaseAnomaliesFailureRateAuto {
    absolute: pulumi.Input<number>;
    relative: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface DatabaseAnomaliesFailureRateThresholds {
    sensitivity: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface DatabaseAnomaliesLoad {
    /**
     * The configuration of traffic drops detection
     */
    drops?: pulumi.Input<inputs.DatabaseAnomaliesLoadDrops>;
    /**
     * The configuration of traffic spikes detection
     */
    spikes?: pulumi.Input<inputs.DatabaseAnomaliesLoadSpikes>;
}

export interface DatabaseAnomaliesLoadDrops {
    minutes?: pulumi.Input<number>;
    percent?: pulumi.Input<number>;
}

export interface DatabaseAnomaliesLoadSpikes {
    minutes?: pulumi.Input<number>;
    percent?: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface DatabaseAnomaliesResponseTime {
    /**
     * Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
     */
    auto?: pulumi.Input<inputs.DatabaseAnomaliesResponseTimeAuto>;
    /**
     * Fixed thresholds for response time degradation detection
     */
    thresholds?: pulumi.Input<inputs.DatabaseAnomaliesResponseTimeThresholds>;
}

export interface DatabaseAnomaliesResponseTimeAuto {
    /**
     * Configuration for anomalies regarding load drops and spikes
     */
    load: pulumi.Input<string>;
    milliseconds: pulumi.Input<number>;
    percent: pulumi.Input<number>;
    slowestMilliseconds: pulumi.Input<number>;
    slowestPercent: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface DatabaseAnomaliesResponseTimeThresholds {
    /**
     * Configuration for anomalies regarding load drops and spikes
     */
    load: pulumi.Input<string>;
    milliseconds: pulumi.Input<number>;
    sensitivity: pulumi.Input<string>;
    slowestMilliseconds: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface DiskAnomaliesDiskName {
    /**
     * Possible values are: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS` and `STARTS_WITH`
     */
    operator: pulumi.Input<string>;
    /**
     * Value to compare to
     */
    value: pulumi.Input<string>;
}

export interface DiskAnomaliesTags {
    /**
     * A Tag Filter
     */
    filters?: pulumi.Input<pulumi.Input<inputs.DiskAnomaliesTagsFilter>[]>;
}

export interface DiskAnomaliesTagsFilter {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface EnvironmentQuotas {
    /**
     * Davis Data Units consumption and quota information on environment level. Not set (and not editable) if Davis data units is not enabled
     */
    ddus?: pulumi.Input<inputs.EnvironmentQuotasDdus>;
    /**
     * DEM units consumption and quota information on environment level
     */
    demUnits?: pulumi.Input<inputs.EnvironmentQuotasDemUnits>;
    /**
     * Host units consumption and quota information on environment level
     */
    hostUnits?: pulumi.Input<number>;
    /**
     * Log Monitoring consumption and quota information on environment level. Not set (and not editable) if Log monitoring is not enabled. Not set (and not editable) if Log monitoring is migrated to Davis data on license level
     */
    logs?: pulumi.Input<inputs.EnvironmentQuotasLogs>;
    /**
     * Synthetic monitors consumption and quota information on environment level. Not set (and not editable) if neither Synthetic nor DEM units is enabled
     */
    synthetic?: pulumi.Input<inputs.EnvironmentQuotasSynthetic>;
    /**
     * User sessions consumption and quota information on environment level
     */
    userSessions?: pulumi.Input<inputs.EnvironmentQuotasUserSessions>;
}

export interface EnvironmentQuotasDdus {
    annual?: pulumi.Input<number>;
    monthly?: pulumi.Input<number>;
}

export interface EnvironmentQuotasDemUnits {
    annual?: pulumi.Input<number>;
    monthly?: pulumi.Input<number>;
}

export interface EnvironmentQuotasLogs {
    annual?: pulumi.Input<number>;
    monthly?: pulumi.Input<number>;
}

export interface EnvironmentQuotasSynthetic {
    annual?: pulumi.Input<number>;
    monthly?: pulumi.Input<number>;
}

export interface EnvironmentQuotasUserSessions {
    annual?: pulumi.Input<number>;
    monthly?: pulumi.Input<number>;
}

export interface EnvironmentStorage {
    limits?: pulumi.Input<inputs.EnvironmentStorageLimits>;
    retention?: pulumi.Input<inputs.EnvironmentStorageRetention>;
    /**
     * Maximum number of newly monitored entry point PurePaths captured per process/minute on environment level. Can be set to any value from 100 to 100000
     */
    transactions: pulumi.Input<number>;
    /**
     * Maximum number of user actions generated per minute on environment level. Can be set to any value from 1 to 2147483646 or left unlimited by omitting this property
     */
    userActions?: pulumi.Input<number>;
}

export interface EnvironmentStorageLimits {
    logs?: pulumi.Input<number>;
    sessionReplay?: pulumi.Input<number>;
    symbolFiles?: pulumi.Input<number>;
    transactions?: pulumi.Input<number>;
}

export interface EnvironmentStorageRetention {
    logs: pulumi.Input<number>;
    rum: pulumi.Input<number>;
    serviceCodeLevel: pulumi.Input<number>;
    serviceRequestLevel: pulumi.Input<number>;
    sessionReplay: pulumi.Input<number>;
    synthetic: pulumi.Input<number>;
}

export interface GetSyntheticLocationsLocations {
    /**
     * The name of the location
     */
    locations?: inputs.GetSyntheticLocationsLocationsLocation[];
}

export interface GetSyntheticLocationsLocationsArgs {
    /**
     * The name of the location
     */
    locations?: pulumi.Input<pulumi.Input<inputs.GetSyntheticLocationsLocationsLocationArgs>[]>;
}

export interface GetSyntheticLocationsLocationsLocation {
    cloudPlatform?: string;
    /**
     * The ID of this resource.
     */
    id?: string;
    ips?: string[];
    name?: string;
    stage?: string;
    status?: string;
    type?: string;
}

export interface GetSyntheticLocationsLocationsLocationArgs {
    cloudPlatform?: pulumi.Input<string>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    stage?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface HostAnomaliesConnections {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Alert (`true`) on graceful host shutdowns
     */
    enabledOnGracefulShutdowns: pulumi.Input<boolean>;
}

export interface HostAnomaliesCpu {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Custom thresholds for high CPU saturation. If not set then the automatic mode is used
     */
    thresholds?: pulumi.Input<inputs.HostAnomaliesCpuThresholds>;
}

export interface HostAnomaliesCpuThresholds {
    saturation: pulumi.Input<number>;
}

export interface HostAnomaliesDisks {
    /**
     * Configuration of low disk inodes number detection
     */
    inodes?: pulumi.Input<inputs.HostAnomaliesDisksInodes>;
    /**
     * Configuration of low disk space detection
     */
    space?: pulumi.Input<inputs.HostAnomaliesDisksSpace>;
    /**
     * Configuration of slow running disks detection
     */
    speed?: pulumi.Input<inputs.HostAnomaliesDisksSpeed>;
}

export interface HostAnomaliesDisksInodes {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesDisksInodesThresholds>;
}

export interface HostAnomaliesDisksInodesThresholds {
    percentage: pulumi.Input<number>;
}

export interface HostAnomaliesDisksSpace {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesDisksSpaceThresholds>;
}

export interface HostAnomaliesDisksSpaceThresholds {
    percentage: pulumi.Input<number>;
}

export interface HostAnomaliesDisksSpeed {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesDisksSpeedThresholds>;
}

export interface HostAnomaliesDisksSpeedThresholds {
    writeAndReadTime: pulumi.Input<number>;
}

export interface HostAnomaliesGc {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Custom thresholds for high GC activity. If not set, automatic mode is used.   Meeting **any** of these conditions triggers an alert
     */
    thresholds?: pulumi.Input<inputs.HostAnomaliesGcThresholds>;
}

export interface HostAnomaliesGcThresholds {
    suspensionPercentage: pulumi.Input<number>;
    timePercentage: pulumi.Input<number>;
}

export interface HostAnomaliesJava {
    /**
     * Configuration of Java out of memory problems detection
     */
    outOfMemory?: pulumi.Input<inputs.HostAnomaliesJavaOutOfMemory>;
    /**
     * Configuration of Java out of threads problems detection
     */
    outOfThreads?: pulumi.Input<inputs.HostAnomaliesJavaOutOfThreads>;
}

export interface HostAnomaliesJavaOutOfMemory {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesJavaOutOfMemoryThresholds>;
}

export interface HostAnomaliesJavaOutOfMemoryThresholds {
    exceptionCount: pulumi.Input<number>;
}

export interface HostAnomaliesJavaOutOfThreads {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesJavaOutOfThreadsThresholds>;
}

export interface HostAnomaliesJavaOutOfThreadsThresholds {
    exceptionCount: pulumi.Input<number>;
}

export interface HostAnomaliesMemory {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Custom thresholds for high memory usage. If not set then the automatic mode is used. **Both** conditions must be met to trigger an alert
     */
    thresholds?: pulumi.Input<inputs.HostAnomaliesMemoryThresholds>;
}

export interface HostAnomaliesMemoryThresholds {
    linux: pulumi.Input<inputs.HostAnomaliesMemoryThresholdsLinux>;
    windows: pulumi.Input<inputs.HostAnomaliesMemoryThresholdsWindows>;
}

export interface HostAnomaliesMemoryThresholdsLinux {
    pageFaults: pulumi.Input<number>;
    usage: pulumi.Input<number>;
}

export interface HostAnomaliesMemoryThresholdsWindows {
    pageFaults: pulumi.Input<number>;
    usage: pulumi.Input<number>;
}

export interface HostAnomaliesNetwork {
    /**
     * Configuration of TCP connectivity problems detection
     */
    connectivity?: pulumi.Input<inputs.HostAnomaliesNetworkConnectivity>;
    /**
     * Configuration of high number of dropped packets detection
     */
    droppedPackets?: pulumi.Input<inputs.HostAnomaliesNetworkDroppedPackets>;
    /**
     * Configuration of high number of network errors detection
     */
    errors?: pulumi.Input<inputs.HostAnomaliesNetworkErrors>;
    /**
     * Configuration of high retransmission rate detection
     */
    retransmission?: pulumi.Input<inputs.HostAnomaliesNetworkRetransmission>;
    /**
     * Configuration of high network utilization detection
     */
    utilization?: pulumi.Input<inputs.HostAnomaliesNetworkUtilization>;
}

export interface HostAnomaliesNetworkConnectivity {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesNetworkConnectivityThresholds>;
}

export interface HostAnomaliesNetworkConnectivityThresholds {
    failedConnections: pulumi.Input<number>;
    newConnectionFailures: pulumi.Input<number>;
}

export interface HostAnomaliesNetworkDroppedPackets {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesNetworkDroppedPacketsThresholds>;
}

export interface HostAnomaliesNetworkDroppedPacketsThresholds {
    droppedPackets: pulumi.Input<number>;
    totalPacketsRate: pulumi.Input<number>;
}

export interface HostAnomaliesNetworkErrors {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesNetworkErrorsThresholds>;
}

export interface HostAnomaliesNetworkErrorsThresholds {
    errorsPercentage: pulumi.Input<number>;
    totalPacketsRate: pulumi.Input<number>;
}

export interface HostAnomaliesNetworkRetransmission {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesNetworkRetransmissionThresholds>;
}

export interface HostAnomaliesNetworkRetransmissionThresholds {
    retransmissionRate: pulumi.Input<number>;
    retransmittedPackets: pulumi.Input<number>;
}

export interface HostAnomaliesNetworkUtilization {
    enabled: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<inputs.HostAnomaliesNetworkUtilizationThresholds>;
}

export interface HostAnomaliesNetworkUtilizationThresholds {
    utilization: pulumi.Input<number>;
}

export interface HostNamingCondition {
    conditions?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionCondition>[]>;
}

export interface HostNamingConditionCondition {
    /**
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionApplicationTypeComparison>[]>;
    applicationTypes?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionApplicationType>[]>;
    azureComputeModeComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionAzureComputeModeComparison>[]>;
    /**
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionAzureComputeMode>[]>;
    /**
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionAzureSkuComparision>[]>;
    azureSkus?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionAzureSkus>[]>;
    /**
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionBaseComparisonBasic>[]>;
    /**
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionBaseConditionKey>[]>;
    /**
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionBitnessComparision>[]>;
    bitnesses?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionBitness>[]>;
    /**
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionCloudTypeComparison>[]>;
    cloudTypes?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionCloudType>[]>;
    comparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionComparison>[]>;
    /**
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionCustomApplicationTypeComparison>[]>;
    customApplicationTypes?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionCustomApplicationType>[]>;
    /**
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionCustomHostMetadataConditionKey>[]>;
    customHostMetadatas?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionCustomHostMetadata>[]>;
    /**
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionCustomProcessMetadataConditionKey>[]>;
    customProcessMetadatas?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionCustomProcessMetadata>[]>;
    databaseTopologies?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionDatabaseTopology>[]>;
    /**
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionDatabaseTopologyComparison>[]>;
    /**
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionDcrumDecoderComparison>[]>;
    dcrumDecoders?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionDcrumDecoder>[]>;
    entities?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionEntity>[]>;
    /**
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionEntityIdComparison>[]>;
    hostTeches?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionHostTech>[]>;
    /**
     * @deprecated `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionHypervisorTypeComparision>[]>;
    hypervisors?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionHypervisor>[]>;
    /**
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIndexedNameComparison>[]>;
    indexedNames?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIndexedName>[]>;
    /**
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIndexedStringComparison>[]>;
    indexedStrings?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIndexedString>[]>;
    /**
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIndexedTagComparison>[]>;
    indexedTags?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIndexedTag>[]>;
    /**
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIntegerComparison>[]>;
    integers?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionInteger>[]>;
    /**
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIpaddressComparison>[]>;
    ipaddresses?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionIpaddress>[]>;
    keys?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionKey>[]>;
    /**
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionMobilePlatformComparison>[]>;
    mobilePlatforms?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionMobilePlatform>[]>;
    osArches?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionOsArch>[]>;
    osTypes?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionOsType>[]>;
    /**
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionOsarchitectureComparison>[]>;
    /**
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionOstypeComparison>[]>;
    /**
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionPaasTypeComparison>[]>;
    paasTypes?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionPaasType>[]>;
    /**
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionProcessMetadataConditionKey>[]>;
    processMetadatas?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionProcessMetadata>[]>;
    serviceTopologies?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionServiceTopology>[]>;
    /**
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionServiceTopologyComparison>[]>;
    /**
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionServiceTypeComparison>[]>;
    serviceTypes?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionServiceType>[]>;
    /**
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionSimpleHostTechComparison>[]>;
    /**
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionSimpleTechComparison>[]>;
    /**
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionStringComparison>[]>;
    /**
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionStringConditionKey>[]>;
    stringKeys?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionStringKey>[]>;
    strings?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionString>[]>;
    /**
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionSyntheticEngineTypeComparison>[]>;
    syntheticEngines?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionSyntheticEngine>[]>;
    /**
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionTagComparison>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionTag>[]>;
    teches?: pulumi.Input<pulumi.Input<inputs.HostNamingConditionConditionTech>[]>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionAzureComputeMode {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionAzureComputeModeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionAzureSkuComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionAzureSkus {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionBaseComparisonBasic {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionBaseConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionBitness {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionBitnessComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCloudType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCloudTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionComparison {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomHostMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.HostNamingConditionConditionCustomHostMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomHostMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.HostNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomHostMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.HostNamingConditionConditionCustomProcessMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.HostNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionCustomProcessMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionDatabaseTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionDatabaseTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionDcrumDecoder {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionDcrumDecoderComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionEntity {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionEntityIdComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionHostTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.HostNamingConditionConditionHostTechValue>;
}

export interface HostNamingConditionConditionHostTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionHypervisor {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionHypervisorTypeComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionIndexedName {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionIndexedNameComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionIndexedString {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionIndexedStringComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionIndexedTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.HostNamingConditionConditionIndexedTagValue>;
}

export interface HostNamingConditionConditionIndexedTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.HostNamingConditionConditionIndexedTagComparisonValue>;
}

export interface HostNamingConditionConditionIndexedTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionIndexedTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionInteger {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface HostNamingConditionConditionIntegerComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface HostNamingConditionConditionIpaddress {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionIpaddressComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionMobilePlatform {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionMobilePlatformComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionOsArch {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionOsType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionOsarchitectureComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionOstypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionPaasType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionPaasTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionServiceTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionServiceTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionServiceType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionServiceTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionSimpleHostTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.HostNamingConditionConditionSimpleHostTechComparisonValue>;
}

export interface HostNamingConditionConditionSimpleHostTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionSimpleTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.HostNamingConditionConditionSimpleTechComparisonValue>;
}

export interface HostNamingConditionConditionSimpleTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionString {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionStringComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionStringConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionStringKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionSyntheticEngine {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionSyntheticEngineTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.HostNamingConditionConditionTagValue>;
}

export interface HostNamingConditionConditionTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.HostNamingConditionConditionTagComparisonValue>;
}

export interface HostNamingConditionConditionTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostNamingConditionConditionTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.HostNamingConditionConditionTechValue>;
}

export interface HostNamingConditionConditionTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface HttpMonitorAnomalyDetection {
    /**
     * Thresholds for loading times
     */
    loadingTimeThresholds?: pulumi.Input<pulumi.Input<inputs.HttpMonitorAnomalyDetectionLoadingTimeThreshold>[]>;
    /**
     * Outage handling configuration
     */
    outageHandlings?: pulumi.Input<pulumi.Input<inputs.HttpMonitorAnomalyDetectionOutageHandling>[]>;
}

export interface HttpMonitorAnomalyDetectionLoadingTimeThreshold {
    enabled?: pulumi.Input<boolean>;
    thresholds?: pulumi.Input<pulumi.Input<inputs.HttpMonitorAnomalyDetectionLoadingTimeThresholdThreshold>[]>;
}

export interface HttpMonitorAnomalyDetectionLoadingTimeThresholdThreshold {
    thresholds: pulumi.Input<pulumi.Input<inputs.HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold>[]>;
}

export interface HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold {
    eventIndex?: pulumi.Input<number>;
    requestIndex?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    valueMs: pulumi.Input<number>;
}

export interface HttpMonitorAnomalyDetectionOutageHandling {
    globalOutage?: pulumi.Input<boolean>;
    localOutage?: pulumi.Input<boolean>;
    localOutagePolicies?: pulumi.Input<pulumi.Input<inputs.HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy>[]>;
    retryOnError?: pulumi.Input<boolean>;
}

export interface HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy {
    affectedLocations: pulumi.Input<number>;
    consecutiveRuns: pulumi.Input<number>;
}

export interface HttpMonitorScript {
    /**
     * A HTTP request to be performed by the monitor.
     */
    requests: pulumi.Input<pulumi.Input<inputs.HttpMonitorScriptRequest>[]>;
}

export interface HttpMonitorScriptRequest {
    authentication?: pulumi.Input<inputs.HttpMonitorScriptRequestAuthentication>;
    body?: pulumi.Input<string>;
    configuration?: pulumi.Input<inputs.HttpMonitorScriptRequestConfiguration>;
    description?: pulumi.Input<string>;
    method: pulumi.Input<string>;
    postProcessing?: pulumi.Input<string>;
    preProcessing?: pulumi.Input<string>;
    url: pulumi.Input<string>;
    validation?: pulumi.Input<inputs.HttpMonitorScriptRequestValidation>;
}

export interface HttpMonitorScriptRequestAuthentication {
    credentials: pulumi.Input<string>;
    kdcIp?: pulumi.Input<string>;
    realmName?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttpMonitorScriptRequestConfiguration {
    acceptAnyCertificate?: pulumi.Input<boolean>;
    followRedirects?: pulumi.Input<boolean>;
    headers?: pulumi.Input<inputs.HttpMonitorScriptRequestConfigurationHeaders>;
    userAgent?: pulumi.Input<string>;
}

export interface HttpMonitorScriptRequestConfigurationHeaders {
    headers: pulumi.Input<pulumi.Input<inputs.HttpMonitorScriptRequestConfigurationHeadersHeader>[]>;
}

export interface HttpMonitorScriptRequestConfigurationHeadersHeader {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface HttpMonitorScriptRequestValidation {
    rules: pulumi.Input<pulumi.Input<inputs.HttpMonitorScriptRequestValidationRule>[]>;
}

export interface HttpMonitorScriptRequestValidationRule {
    passIfFound?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface HttpMonitorTag {
    /**
     * Tag with source of a Dynatrace entity.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.HttpMonitorTagTag>[]>;
}

export interface HttpMonitorTagTag {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ImsBridgesQueueManager {
    /**
     * Queue manager definition for IMS bridge
     */
    queueManagers?: pulumi.Input<pulumi.Input<inputs.ImsBridgesQueueManagerQueueManager>[]>;
}

export interface ImsBridgesQueueManagerQueueManager {
    /**
     * The name of the IMS bridge
     */
    name: pulumi.Input<string>;
    queueManagerQueues?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface K8sCredentialsEventsFieldSelector {
    /**
     * Whether subscription to this events field selector is enabled (value set to `true`). If disabled (value set to `false`), Dynatrace will stop fetching events from the Kubernetes API for this events field selector
     */
    active: pulumi.Input<boolean>;
    /**
     * The field selector string (url decoding is applied) when storing it.
     */
    fieldSelector: pulumi.Input<string>;
    /**
     * A label of the events field selector.
     */
    label: pulumi.Input<string>;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface MaintenanceWindowMetadata {
    /**
     * Dynatrace server version
     */
    clusterVersion?: pulumi.Input<string>;
    /**
     * A Sorted list of the version numbers of the configuration
     */
    configurationVersions?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A Sorted list of the version numbers of the configuration
     */
    currentConfigurationVersions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MaintenanceWindowSchedule {
    /**
     * The end date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
     */
    end: pulumi.Input<string>;
    /**
     * The recurrence of the maintenance window
     */
    recurrence?: pulumi.Input<inputs.MaintenanceWindowScheduleRecurrence>;
    /**
     * The type of the schedule recurrence. Possible values are `DAILY`, `MONTHLY`, `ONCE` and `WEEKLY`
     */
    recurrenceType: pulumi.Input<string>;
    /**
     * The start date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
     */
    start: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
     */
    zoneId: pulumi.Input<string>;
}

export interface MaintenanceWindowScheduleRecurrence {
    dayOfMonth?: pulumi.Input<number>;
    dayOfWeek?: pulumi.Input<string>;
    durationMinutes: pulumi.Input<number>;
    startTime: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface MaintenanceWindowScope {
    /**
     * A list of Dynatrace entities (for example, hosts or services) to be included in the scope.  Allowed values are Dynatrace entity IDs
     */
    entities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of matching rules for dynamic scope formation.  If several rules are set, the OR logic applies
     */
    matches?: pulumi.Input<pulumi.Input<inputs.MaintenanceWindowScopeMatch>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface MaintenanceWindowScopeMatch {
    mzId?: pulumi.Input<string>;
    tagCombination?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.MaintenanceWindowScopeMatchTag>[]>;
    /**
     * The type of the maintenance: planned or unplanned
     */
    type?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface MaintenanceWindowScopeMatchTag {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneDimensionalRule {
    appliesTo: pulumi.Input<string>;
    conditions?: pulumi.Input<pulumi.Input<inputs.ManagementZoneDimensionalRuleCondition>[]>;
    enabled?: pulumi.Input<boolean>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneDimensionalRuleCondition {
    key: pulumi.Input<string>;
    match: pulumi.Input<string>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneEntitySelectorBasedRule {
    enabled?: pulumi.Input<boolean>;
    selector?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneMetadata {
    clusterVersion?: pulumi.Input<string>;
    configurationVersions?: pulumi.Input<pulumi.Input<number>[]>;
    currentConfigurationVersions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ManagementZoneRule {
    conditions?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleCondition>[]>;
    enabled?: pulumi.Input<boolean>;
    propagationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleCondition {
    /**
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionApplicationTypeComparison>[]>;
    applicationTypes?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionApplicationType>[]>;
    azureComputeModeComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionAzureComputeModeComparison>[]>;
    /**
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionAzureComputeMode>[]>;
    /**
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionAzureSkuComparision>[]>;
    azureSkus?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionAzureSkus>[]>;
    /**
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionBaseComparisonBasic>[]>;
    /**
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionBaseConditionKey>[]>;
    /**
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionBitnessComparision>[]>;
    bitnesses?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionBitness>[]>;
    /**
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionCloudTypeComparison>[]>;
    cloudTypes?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionCloudType>[]>;
    comparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionComparison>[]>;
    /**
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionCustomApplicationTypeComparison>[]>;
    customApplicationTypes?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionCustomApplicationType>[]>;
    /**
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionCustomHostMetadataConditionKey>[]>;
    customHostMetadatas?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionCustomHostMetadata>[]>;
    /**
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionCustomProcessMetadataConditionKey>[]>;
    customProcessMetadatas?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionCustomProcessMetadata>[]>;
    databaseTopologies?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionDatabaseTopology>[]>;
    /**
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionDatabaseTopologyComparison>[]>;
    /**
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionDcrumDecoderComparison>[]>;
    dcrumDecoders?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionDcrumDecoder>[]>;
    entities?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionEntity>[]>;
    /**
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionEntityIdComparison>[]>;
    hostTeches?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionHostTech>[]>;
    /**
     * @deprecated `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionHypervisorTypeComparision>[]>;
    hypervisors?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionHypervisor>[]>;
    /**
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIndexedNameComparison>[]>;
    indexedNames?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIndexedName>[]>;
    /**
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIndexedStringComparison>[]>;
    indexedStrings?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIndexedString>[]>;
    /**
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIndexedTagComparison>[]>;
    indexedTags?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIndexedTag>[]>;
    /**
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIntegerComparison>[]>;
    integers?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionInteger>[]>;
    /**
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIpaddressComparison>[]>;
    ipaddresses?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionIpaddress>[]>;
    keys?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionKey>[]>;
    /**
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionMobilePlatformComparison>[]>;
    mobilePlatforms?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionMobilePlatform>[]>;
    osArches?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionOsArch>[]>;
    osTypes?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionOsType>[]>;
    /**
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionOsarchitectureComparison>[]>;
    /**
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionOstypeComparison>[]>;
    /**
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionPaasTypeComparison>[]>;
    paasTypes?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionPaasType>[]>;
    /**
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionProcessMetadataConditionKey>[]>;
    processMetadatas?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionProcessMetadata>[]>;
    serviceTopologies?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionServiceTopology>[]>;
    /**
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionServiceTopologyComparison>[]>;
    /**
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionServiceTypeComparison>[]>;
    serviceTypes?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionServiceType>[]>;
    /**
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionSimpleHostTechComparison>[]>;
    /**
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionSimpleTechComparison>[]>;
    /**
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionStringComparison>[]>;
    /**
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionStringConditionKey>[]>;
    stringKeys?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionStringKey>[]>;
    strings?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionString>[]>;
    /**
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionSyntheticEngineTypeComparison>[]>;
    syntheticEngines?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionSyntheticEngine>[]>;
    /**
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionTagComparison>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionTag>[]>;
    teches?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRuleConditionTech>[]>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionAzureComputeMode {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionAzureComputeModeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionAzureSkuComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionAzureSkus {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionBaseComparisonBasic {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionBaseConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionBitness {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionBitnessComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCloudType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCloudTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionComparison {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomHostMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ManagementZoneRuleConditionCustomHostMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomHostMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ManagementZoneRuleConditionCustomHostMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomHostMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomHostMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ManagementZoneRuleConditionCustomProcessMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ManagementZoneRuleConditionCustomProcessMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomProcessMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionCustomProcessMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionDatabaseTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionDatabaseTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionDcrumDecoder {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionDcrumDecoderComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionEntity {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionEntityIdComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionHostTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ManagementZoneRuleConditionHostTechValue>;
}

export interface ManagementZoneRuleConditionHostTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionHypervisor {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionHypervisorTypeComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionIndexedName {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionIndexedNameComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionIndexedString {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionIndexedStringComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionIndexedTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ManagementZoneRuleConditionIndexedTagValue>;
}

export interface ManagementZoneRuleConditionIndexedTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ManagementZoneRuleConditionIndexedTagComparisonValue>;
}

export interface ManagementZoneRuleConditionIndexedTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionIndexedTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionInteger {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface ManagementZoneRuleConditionIntegerComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface ManagementZoneRuleConditionIpaddress {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionIpaddressComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionMobilePlatform {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionMobilePlatformComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionOsArch {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionOsType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionOsarchitectureComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionOstypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionPaasType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionPaasTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionServiceTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionServiceTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionServiceType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionServiceTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionSimpleHostTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ManagementZoneRuleConditionSimpleHostTechComparisonValue>;
}

export interface ManagementZoneRuleConditionSimpleHostTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionSimpleTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ManagementZoneRuleConditionSimpleTechComparisonValue>;
}

export interface ManagementZoneRuleConditionSimpleTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionString {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionStringComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionStringConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionStringKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionSyntheticEngine {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionSyntheticEngineTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ManagementZoneRuleConditionTagValue>;
}

export interface ManagementZoneRuleConditionTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ManagementZoneRuleConditionTagComparisonValue>;
}

export interface ManagementZoneRuleConditionTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ManagementZoneRuleConditionTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ManagementZoneRuleConditionTechValue>;
}

export interface ManagementZoneRuleConditionTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface MobileApplicationApdex {
    /**
     * Apdex **frustrated** threshold, in milliseconds: a duration greater than or equal to this value is considered frustrated
     */
    frustrated: pulumi.Input<number>;
    /**
     * Apdex error condition: if `true` the user session is considered frustrated when an error is reported
     */
    frustratedOnError?: pulumi.Input<boolean>;
    /**
     * Apdex **tolerable** threshold, in milliseconds: a duration greater than or equal to this value is considered tolerable
     */
    tolerable: pulumi.Input<number>;
}

export interface MobileApplicationProperties {
    /**
     * A User Action / Session Property based on a value reported by the API
     */
    apiValues?: pulumi.Input<pulumi.Input<inputs.MobileApplicationPropertiesApiValue>[]>;
    /**
     * A User Action / Session Property based on a Server Side Request Attribute
     */
    requestAttributes?: pulumi.Input<pulumi.Input<inputs.MobileApplicationPropertiesRequestAttribute>[]>;
}

export interface MobileApplicationPropertiesApiValue {
    aggregation?: pulumi.Input<string>;
    cleanupRule?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    /**
     * The name of the application
     */
    name?: pulumi.Input<string>;
    storeAsSessionProperty?: pulumi.Input<boolean>;
    storeAsUserActionProperty?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
}

export interface MobileApplicationPropertiesRequestAttribute {
    aggregation?: pulumi.Input<string>;
    cleanupRule?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    key: pulumi.Input<string>;
    storeAsSessionProperty?: pulumi.Input<boolean>;
    storeAsUserActionProperty?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
}

export interface NotificationAnsibleTower {
    /**
     * Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     */
    acceptAnyCertificate: pulumi.Input<boolean>;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The custom message of the notification.   This message will be displayed in the extra variables **Message** field of your job template.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    customMessage: pulumi.Input<string>;
    /**
     * The ID of the target Ansible Tower job template
     */
    jobTemplateId: pulumi.Input<number>;
    /**
     * The URL of the target Ansible Tower job template
     */
    jobTemplateUrl: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The password for the Ansible Tower account
     */
    password?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The username of the Ansible Tower account
     */
    username: pulumi.Input<string>;
}

export interface NotificationConfig {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * Defines the actual set of fields depending on the value. See one of the following objects:  * `EMAIL` > EmailNotificationConfig  * `PAGER_DUTY` > PagerDutyNotificationConfig  * `WEBHOOK` > WebHookNotificationConfig  * `SLACK` > SlackNotificationConfig  * `HIPCHAT` > HipChatNotificationConfig  * `VICTOROPS` > VictorOpsNotificationConfig  * `SERVICE_NOW` > ServiceNowNotificationConfig  * `XMATTERS` > XMattersNotificationConfig  * `ANSIBLETOWER` > AnsibleTowerNotificationConfig  * `OPS_GENIE` > OpsGenieNotificationConfig  * `JIRA` > JiraNotificationConfig  * `TRELLO` > TrelloNotificationConfig
     */
    type: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface NotificationEmail {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The list of the email BCC-recipients
     */
    bccReceivers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    body: pulumi.Input<string>;
    /**
     * The list of the email CC-recipients
     */
    ccReceivers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The list of the email recipients
     */
    receivers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The subject of the email notifications
     */
    subject: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface NotificationHipchat {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    message: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The URL of the HipChat WebHook.  This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
     */
    url?: pulumi.Input<string>;
}

export interface NotificationJira {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
     */
    description: pulumi.Input<string>;
    /**
     * The type of the Jira issue to be created by this notification
     */
    issueType: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The password for the Jira profile
     */
    password?: pulumi.Input<string>;
    /**
     * The project key of the Jira issue to be created by this notification
     */
    projectKey: pulumi.Input<string>;
    /**
     * The summary of the Jira issue to be created by this notification.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    summary: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The URL of the Jira API endpoint
     */
    url: pulumi.Input<string>;
    /**
     * The username of the Jira profile
     */
    username: pulumi.Input<string>;
}

export interface NotificationOpsGenie {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The API key to access OpsGenie
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The region domain of the OpsGenie
     */
    domain: pulumi.Input<string>;
    /**
     * The content of the message.  You can use the following placeholders:  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem
     */
    message: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface NotificationPagerDuty {
    /**
     * The name of the PagerDuty account
     */
    account: pulumi.Input<string>;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The API key to access PagerDuty
     */
    serviceApiKey?: pulumi.Input<string>;
    /**
     * The name of the service
     */
    serviceName: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface NotificationServiceNow {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.   This field is mutually exclusive with the **url** field. You can only use one of them
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The content of the ServiceNow description.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    message: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The username to the ServiceNow account
     */
    password?: pulumi.Input<string>;
    /**
     * Send events into ServiceNow ITOM (`true`)
     */
    sendEvents: pulumi.Input<boolean>;
    /**
     * Send incidents into ServiceNow ITSM (`true`)
     */
    sendIncidents: pulumi.Input<boolean>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The URL of the on-premise ServiceNow installation.   This field is mutually exclusive with the **instanceName** field. You can only use one of them
     */
    url?: pulumi.Input<string>;
    /**
     * The username of the ServiceNow account.   Make sure that your user account has the `restService`, `webRequestAdmin`, and `x_dynat_ruxit.Integration` roles
     */
    username: pulumi.Input<string>;
}

export interface NotificationSlack {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to
     */
    channel: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    title: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The URL of the Slack WebHook.  This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
     */
    url?: pulumi.Input<string>;
}

export interface NotificationTrello {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The application key for the Trello account
     */
    applicationKey: pulumi.Input<string>;
    /**
     * The application token for the Trello account
     */
    authorizationToken?: pulumi.Input<string>;
    /**
     * The Trello board to which the card should be assigned
     */
    boardId: pulumi.Input<string>;
    /**
     * The description of the Trello card.   You can use same placeholders as in card text
     */
    description: pulumi.Input<string>;
    /**
     * The Trello list to which the card should be assigned
     */
    listId: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The Trello list to which the card of the resolved problem should be assigned
     */
    resolvedListId: pulumi.Input<string>;
    /**
     * The text of the generated Trello card.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    text: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface NotificationVictorOps {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * The API key for the target VictorOps account
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`
     */
    message: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The routing key, defining the group to be notified
     */
    routingKey: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface NotificationWebHook {
    /**
     * Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     */
    acceptAnyCertificate: pulumi.Input<boolean>;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * A list of the additional HTTP headers
     */
    headers?: pulumi.Input<pulumi.Input<inputs.NotificationWebHookHeader>[]>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * Call webhook if new events merge into existing problems
     */
    notifyEventMerges?: pulumi.Input<boolean>;
    /**
     * The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    payload: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The URL of the WebHook endpoint
     */
    url: pulumi.Input<string>;
}

export interface NotificationWebHookHeader {
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NotificationXmatters {
    /**
     * Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     */
    acceptAnyCertificate: pulumi.Input<boolean>;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: pulumi.Input<string>;
    /**
     * A list of the additional HTTP headers
     */
    headers?: pulumi.Input<pulumi.Input<inputs.NotificationXmattersHeader>[]>;
    /**
     * The name of the notification configuration
     */
    name: pulumi.Input<string>;
    /**
     * The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    payload: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The URL of the xMatters WebHook
     */
    url: pulumi.Input<string>;
}

export interface NotificationXmattersHeader {
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingCondition {
    conditions?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionCondition>[]>;
}

export interface ProcessgroupNamingConditionCondition {
    /**
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionApplicationTypeComparison>[]>;
    applicationTypes?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionApplicationType>[]>;
    azureComputeModeComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionAzureComputeModeComparison>[]>;
    /**
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionAzureComputeMode>[]>;
    /**
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionAzureSkuComparision>[]>;
    azureSkus?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionAzureSkus>[]>;
    /**
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionBaseComparisonBasic>[]>;
    /**
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionBaseConditionKey>[]>;
    /**
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionBitnessComparision>[]>;
    bitnesses?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionBitness>[]>;
    /**
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionCloudTypeComparison>[]>;
    cloudTypes?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionCloudType>[]>;
    comparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionComparison>[]>;
    /**
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomApplicationTypeComparison>[]>;
    customApplicationTypes?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomApplicationType>[]>;
    /**
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomHostMetadataConditionKey>[]>;
    customHostMetadatas?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomHostMetadata>[]>;
    /**
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKey>[]>;
    customProcessMetadatas?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomProcessMetadata>[]>;
    databaseTopologies?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionDatabaseTopology>[]>;
    /**
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionDatabaseTopologyComparison>[]>;
    /**
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionDcrumDecoderComparison>[]>;
    dcrumDecoders?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionDcrumDecoder>[]>;
    entities?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionEntity>[]>;
    /**
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionEntityIdComparison>[]>;
    hostTeches?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionHostTech>[]>;
    /**
     * @deprecated `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionHypervisorTypeComparision>[]>;
    hypervisors?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionHypervisor>[]>;
    /**
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIndexedNameComparison>[]>;
    indexedNames?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIndexedName>[]>;
    /**
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIndexedStringComparison>[]>;
    indexedStrings?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIndexedString>[]>;
    /**
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIndexedTagComparison>[]>;
    indexedTags?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIndexedTag>[]>;
    /**
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIntegerComparison>[]>;
    integers?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionInteger>[]>;
    /**
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIpaddressComparison>[]>;
    ipaddresses?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionIpaddress>[]>;
    keys?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionKey>[]>;
    /**
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionMobilePlatformComparison>[]>;
    mobilePlatforms?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionMobilePlatform>[]>;
    osArches?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionOsArch>[]>;
    osTypes?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionOsType>[]>;
    /**
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionOsarchitectureComparison>[]>;
    /**
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionOstypeComparison>[]>;
    /**
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionPaasTypeComparison>[]>;
    paasTypes?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionPaasType>[]>;
    /**
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionProcessMetadataConditionKey>[]>;
    processMetadatas?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionProcessMetadata>[]>;
    serviceTopologies?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionServiceTopology>[]>;
    /**
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionServiceTopologyComparison>[]>;
    /**
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionServiceTypeComparison>[]>;
    serviceTypes?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionServiceType>[]>;
    /**
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionSimpleHostTechComparison>[]>;
    /**
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionSimpleTechComparison>[]>;
    /**
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionStringComparison>[]>;
    /**
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionStringConditionKey>[]>;
    stringKeys?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionStringKey>[]>;
    strings?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionString>[]>;
    /**
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionSyntheticEngineTypeComparison>[]>;
    syntheticEngines?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionSyntheticEngine>[]>;
    /**
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionTagComparison>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionTag>[]>;
    teches?: pulumi.Input<pulumi.Input<inputs.ProcessgroupNamingConditionConditionTech>[]>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionAzureComputeMode {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionAzureComputeModeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionAzureSkuComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionAzureSkus {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionBaseComparisonBasic {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionBaseConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionBitness {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionBitnessComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCloudType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCloudTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionComparison {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomHostMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomHostMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomHostMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomHostMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomProcessMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionCustomProcessMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionDatabaseTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionDatabaseTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionDcrumDecoder {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionDcrumDecoderComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionEntity {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionEntityIdComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionHostTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ProcessgroupNamingConditionConditionHostTechValue>;
}

export interface ProcessgroupNamingConditionConditionHostTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionHypervisor {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionHypervisorTypeComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionIndexedName {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionIndexedNameComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionIndexedString {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionIndexedStringComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionIndexedTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ProcessgroupNamingConditionConditionIndexedTagValue>;
}

export interface ProcessgroupNamingConditionConditionIndexedTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ProcessgroupNamingConditionConditionIndexedTagComparisonValue>;
}

export interface ProcessgroupNamingConditionConditionIndexedTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionIndexedTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionInteger {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface ProcessgroupNamingConditionConditionIntegerComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface ProcessgroupNamingConditionConditionIpaddress {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionIpaddressComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionMobilePlatform {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionMobilePlatformComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionOsArch {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionOsType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionOsarchitectureComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionOstypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionPaasType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionPaasTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionServiceTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionServiceTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionServiceType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionServiceTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionSimpleHostTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ProcessgroupNamingConditionConditionSimpleHostTechComparisonValue>;
}

export interface ProcessgroupNamingConditionConditionSimpleHostTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionSimpleTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ProcessgroupNamingConditionConditionSimpleTechComparisonValue>;
}

export interface ProcessgroupNamingConditionConditionSimpleTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionString {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionStringComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionStringConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionStringKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionSyntheticEngine {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionSyntheticEngineTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ProcessgroupNamingConditionConditionTagValue>;
}

export interface ProcessgroupNamingConditionConditionTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ProcessgroupNamingConditionConditionTagComparisonValue>;
}

export interface ProcessgroupNamingConditionConditionTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProcessgroupNamingConditionConditionTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ProcessgroupNamingConditionConditionTechValue>;
}

export interface ProcessgroupNamingConditionConditionTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface QueueManagerAliasQueue {
    /**
     * Alias queue definitions for queue manager
     */
    aliasQueues?: pulumi.Input<pulumi.Input<inputs.QueueManagerAliasQueueAliasQueue>[]>;
}

export interface QueueManagerAliasQueueAliasQueue {
    aliasQueueName: pulumi.Input<string>;
    baseQueueName: pulumi.Input<string>;
    clusterVisibilities?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface QueueManagerClusterQueue {
    /**
     * Cluster queue definitions for queue manager
     */
    clusterQueues?: pulumi.Input<pulumi.Input<inputs.QueueManagerClusterQueueClusterQueue>[]>;
}

export interface QueueManagerClusterQueueClusterQueue {
    clusterVisibilities?: pulumi.Input<pulumi.Input<string>[]>;
    localQueueName: pulumi.Input<string>;
}

export interface QueueManagerRemoteQueue {
    /**
     * Remote queue definitions for queue manager
     */
    remoteQueues?: pulumi.Input<pulumi.Input<inputs.QueueManagerRemoteQueueRemoteQueue>[]>;
}

export interface QueueManagerRemoteQueueRemoteQueue {
    clusterVisibilities?: pulumi.Input<pulumi.Input<string>[]>;
    localQueueName: pulumi.Input<string>;
    remoteQueueManager: pulumi.Input<string>;
    remoteQueueName: pulumi.Input<string>;
}

export interface RequestAttributeDataSource {
    /**
     * Specifies the location where the values are captured and stored.  Required if the **source** is one of the following: `GET_PARAMETER`, `URI`, `REQUEST_HEADER`, `RESPONSE_HEADER`.   Not applicable in other cases.   If the **source** value is `REQUEST_HEADER` or `RESPONSE_HEADER`, the `CAPTURE_AND_STORE_ON_BOTH` location is not allowed
     */
    capturingAndStorageLocation?: pulumi.Input<string>;
    /**
     * IBM integration bus label node name condition for which the value is captured
     */
    cicsSdkMethodNodeCondition?: pulumi.Input<inputs.RequestAttributeDataSourceCicsSdkMethodNodeCondition>;
    /**
     * The data source is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * IBM integration bus label node name condition for which the value is captured
     */
    iibLabelMethodNodeCondition?: pulumi.Input<inputs.RequestAttributeDataSourceIibLabelMethodNodeCondition>;
    /**
     * IBM integration bus label node name condition for which the value is captured
     */
    iibMethodNodeCondition?: pulumi.Input<inputs.RequestAttributeDataSourceIibMethodNodeCondition>;
    /**
     * The IBM integration bus node type for which the value is captured.  This or `iibMethodNodeCondition` is required if the **source** is: `IIB_NODE`.  Not applicable in other cases
     */
    iibNodeType?: pulumi.Input<string>;
    /**
     * The method specification if the **source** value is `METHOD_PARAM`.   Not applicable in other cases
     */
    methods?: pulumi.Input<pulumi.Input<inputs.RequestAttributeDataSourceMethod>[]>;
    /**
     * The name of the web request parameter to capture.  Required if the **source** is one of the following: `POST_PARAMETER`, `GET_PARAMETER`, `REQUEST_HEADER`, `RESPONSE_HEADER`, `CUSTOM_ATTRIBUTE`.  Not applicable in other cases
     */
    parameterName?: pulumi.Input<string>;
    /**
     * Conditions for data capturing
     */
    scope?: pulumi.Input<inputs.RequestAttributeDataSourceScope>;
    /**
     * The technology of the session attribute to capture if the **source** value is `SESSION_ATTRIBUTE`.
     */
    sessionAttributeTechnology?: pulumi.Input<string>;
    /**
     * The source of the attribute to capture. Works in conjunction with **parameterName** or **methods** and **technology**
     */
    source: pulumi.Input<string>;
    technology?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    valueProcessing?: pulumi.Input<inputs.RequestAttributeDataSourceValueProcessing>;
}

export interface RequestAttributeDataSourceCicsSdkMethodNodeCondition {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface RequestAttributeDataSourceIibLabelMethodNodeCondition {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface RequestAttributeDataSourceIibMethodNodeCondition {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface RequestAttributeDataSourceMethod {
    argumentIndex?: pulumi.Input<number>;
    capture: pulumi.Input<string>;
    deepObjectAccess?: pulumi.Input<string>;
    method?: pulumi.Input<inputs.RequestAttributeDataSourceMethodMethod>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface RequestAttributeDataSourceMethodMethod {
    argumentTypes?: pulumi.Input<pulumi.Input<string>[]>;
    className?: pulumi.Input<string>;
    fileName?: pulumi.Input<string>;
    fileNameMatcher?: pulumi.Input<string>;
    methodName: pulumi.Input<string>;
    modifiers?: pulumi.Input<pulumi.Input<string>[]>;
    returnType: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    visibility: pulumi.Input<string>;
}

export interface RequestAttributeDataSourceScope {
    hostGroup?: pulumi.Input<string>;
    processGroup?: pulumi.Input<string>;
    serviceTechnology?: pulumi.Input<string>;
    tagOfProcessGroup?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface RequestAttributeDataSourceValueProcessing {
    extractSubstring?: pulumi.Input<inputs.RequestAttributeDataSourceValueProcessingExtractSubstring>;
    splitAt?: pulumi.Input<string>;
    trim?: pulumi.Input<boolean>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    valueCondition?: pulumi.Input<inputs.RequestAttributeDataSourceValueProcessingValueCondition>;
    valueExtractorRegex?: pulumi.Input<string>;
}

export interface RequestAttributeDataSourceValueProcessingExtractSubstring {
    delimiter: pulumi.Input<string>;
    endDelimiter?: pulumi.Input<string>;
    position: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

export interface RequestAttributeDataSourceValueProcessingValueCondition {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface RequestNamingConditions {
    conditions?: pulumi.Input<pulumi.Input<inputs.RequestNamingConditionsCondition>[]>;
}

export interface RequestNamingConditionsCondition {
    attribute: pulumi.Input<string>;
    comparison: pulumi.Input<inputs.RequestNamingConditionsConditionComparison>;
}

export interface RequestNamingConditionsConditionComparison {
    boolean?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonBoolean>;
    esbInputNodeType?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonEsbInputNodeType>;
    failedState?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonFailedState>;
    failureReason?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonFailureReason>;
    fastString?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonFastString>;
    flawState?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonFlawState>;
    generic?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonGeneric>;
    httpMethod?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonHttpMethod>;
    httpStatusClass?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonHttpStatusClass>;
    iibInputNodeType?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonIibInputNodeType>;
    negate?: pulumi.Input<boolean>;
    number?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonNumber>;
    numberRequestAttribute?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonNumberRequestAttribute>;
    serviceType?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonServiceType>;
    string?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonString>;
    stringRequestAttribute?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonStringRequestAttribute>;
    tag?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonTag>;
    zosCallType?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonZosCallType>;
}

export interface RequestNamingConditionsConditionComparisonBoolean {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<boolean>;
    values?: pulumi.Input<pulumi.Input<boolean>[]>;
}

export interface RequestNamingConditionsConditionComparisonEsbInputNodeType {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonFailedState {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonFailureReason {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonFastString {
    caseSensitive?: pulumi.Input<boolean>;
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonFlawState {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonGeneric {
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonHttpMethod {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonHttpStatusClass {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonIibInputNodeType {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonNumber {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
    values?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface RequestNamingConditionsConditionComparisonNumberRequestAttribute {
    matchOnChildCalls?: pulumi.Input<boolean>;
    operator?: pulumi.Input<string>;
    requestAttribute: pulumi.Input<string>;
    source?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonNumberRequestAttributeSource>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
    values?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface RequestNamingConditionsConditionComparisonNumberRequestAttributeSource {
    managementZone?: pulumi.Input<string>;
    serviceTag?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTag>;
    unknowns?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTag {
    context?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    tagKey?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey>;
    value?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey {
    context?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonServiceType {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonString {
    caseSensitive?: pulumi.Input<boolean>;
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonStringRequestAttribute {
    caseSensitive?: pulumi.Input<boolean>;
    matchOnChildCalls?: pulumi.Input<boolean>;
    operator?: pulumi.Input<string>;
    requestAttribute: pulumi.Input<string>;
    source?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonStringRequestAttributeSource>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingConditionsConditionComparisonStringRequestAttributeSource {
    managementZone?: pulumi.Input<string>;
    serviceTag?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTag>;
    unknowns?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTag {
    context?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    tagKey?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey>;
    value?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey {
    context?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonTag {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonTagValue>;
    values?: pulumi.Input<inputs.RequestNamingConditionsConditionComparisonTagValues>;
}

export interface RequestNamingConditionsConditionComparisonTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonTagValues {
    values?: pulumi.Input<pulumi.Input<inputs.RequestNamingConditionsConditionComparisonTagValuesValue>[]>;
}

export interface RequestNamingConditionsConditionComparisonTagValuesValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface RequestNamingConditionsConditionComparisonZosCallType {
    operator?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RequestNamingPlaceholders {
    placeholders?: pulumi.Input<pulumi.Input<inputs.RequestNamingPlaceholdersPlaceholder>[]>;
}

export interface RequestNamingPlaceholdersPlaceholder {
    aggregation?: pulumi.Input<string>;
    attribute: pulumi.Input<string>;
    delimiterOrRegex?: pulumi.Input<string>;
    endDelimiter?: pulumi.Input<string>;
    kind: pulumi.Input<string>;
    name: pulumi.Input<string>;
    normalization?: pulumi.Input<string>;
    requestAttribute?: pulumi.Input<string>;
    source?: pulumi.Input<inputs.RequestNamingPlaceholdersPlaceholderSource>;
    unknowns?: pulumi.Input<string>;
    useFromChildCalls?: pulumi.Input<boolean>;
}

export interface RequestNamingPlaceholdersPlaceholderSource {
    managementZone?: pulumi.Input<string>;
    serviceTag?: pulumi.Input<inputs.RequestNamingPlaceholdersPlaceholderSourceServiceTag>;
    unknowns?: pulumi.Input<string>;
}

export interface RequestNamingPlaceholdersPlaceholderSourceServiceTag {
    context?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    tagKey?: pulumi.Input<inputs.RequestNamingPlaceholdersPlaceholderSourceServiceTagTagKey>;
    value?: pulumi.Input<string>;
}

export interface RequestNamingPlaceholdersPlaceholderSourceServiceTagTagKey {
    context?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
}

export interface ServiceAnomaliesFailureRates {
    /**
     * Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
     */
    auto?: pulumi.Input<inputs.ServiceAnomaliesFailureRatesAuto>;
    /**
     * Fixed thresholds for failure rate increase detection
     */
    thresholds?: pulumi.Input<inputs.ServiceAnomaliesFailureRatesThresholds>;
}

export interface ServiceAnomaliesFailureRatesAuto {
    absolute: pulumi.Input<number>;
    relative: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceAnomaliesFailureRatesThresholds {
    sensitivity: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceAnomaliesLoad {
    /**
     * The configuration of traffic drops detection
     */
    drops?: pulumi.Input<inputs.ServiceAnomaliesLoadDrops>;
    /**
     * The configuration of traffic spikes detection
     */
    spikes?: pulumi.Input<inputs.ServiceAnomaliesLoadSpikes>;
}

export interface ServiceAnomaliesLoadDrops {
    /**
     * Alert if the service stays in abnormal state for at least *X* minutes
     */
    minutes?: pulumi.Input<number>;
    /**
     * Alert if the observed load is more than *X* % of the expected value
     */
    percent?: pulumi.Input<number>;
}

export interface ServiceAnomaliesLoadSpikes {
    minutes?: pulumi.Input<number>;
    percent?: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceAnomaliesResponseTimes {
    /**
     * Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
     */
    auto?: pulumi.Input<inputs.ServiceAnomaliesResponseTimesAuto>;
    /**
     * Fixed thresholds for response time degradation detection
     */
    thresholds?: pulumi.Input<inputs.ServiceAnomaliesResponseTimesThresholds>;
}

export interface ServiceAnomaliesResponseTimesAuto {
    /**
     * The configuration of load spikes detection. Detecting load spikes will be disabled if this block is omitted.
     */
    load: pulumi.Input<string>;
    milliseconds: pulumi.Input<number>;
    percent: pulumi.Input<number>;
    slowestMilliseconds: pulumi.Input<number>;
    slowestPercent: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceAnomaliesResponseTimesThresholds {
    /**
     * The configuration of load spikes detection. Detecting load spikes will be disabled if this block is omitted.
     */
    load: pulumi.Input<string>;
    milliseconds: pulumi.Input<number>;
    sensitivity: pulumi.Input<string>;
    slowestMilliseconds: pulumi.Input<number>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingCondition {
    conditions?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionCondition>[]>;
}

export interface ServiceNamingConditionCondition {
    /**
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionApplicationTypeComparison>[]>;
    applicationTypes?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionApplicationType>[]>;
    azureComputeModeComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionAzureComputeModeComparison>[]>;
    /**
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionAzureComputeMode>[]>;
    /**
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionAzureSkuComparision>[]>;
    azureSkus?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionAzureSkus>[]>;
    /**
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionBaseComparisonBasic>[]>;
    /**
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionBaseConditionKey>[]>;
    /**
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionBitnessComparision>[]>;
    bitnesses?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionBitness>[]>;
    /**
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionCloudTypeComparison>[]>;
    cloudTypes?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionCloudType>[]>;
    comparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionComparison>[]>;
    /**
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionCustomApplicationTypeComparison>[]>;
    customApplicationTypes?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionCustomApplicationType>[]>;
    /**
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionCustomHostMetadataConditionKey>[]>;
    customHostMetadatas?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionCustomHostMetadata>[]>;
    /**
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionCustomProcessMetadataConditionKey>[]>;
    customProcessMetadatas?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionCustomProcessMetadata>[]>;
    databaseTopologies?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionDatabaseTopology>[]>;
    /**
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionDatabaseTopologyComparison>[]>;
    /**
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionDcrumDecoderComparison>[]>;
    dcrumDecoders?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionDcrumDecoder>[]>;
    entities?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionEntity>[]>;
    /**
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionEntityIdComparison>[]>;
    hostTeches?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionHostTech>[]>;
    /**
     * @deprecated `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionHypervisorTypeComparision>[]>;
    hypervisors?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionHypervisor>[]>;
    /**
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIndexedNameComparison>[]>;
    indexedNames?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIndexedName>[]>;
    /**
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIndexedStringComparison>[]>;
    indexedStrings?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIndexedString>[]>;
    /**
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIndexedTagComparison>[]>;
    indexedTags?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIndexedTag>[]>;
    /**
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIntegerComparison>[]>;
    integers?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionInteger>[]>;
    /**
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIpaddressComparison>[]>;
    ipaddresses?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionIpaddress>[]>;
    keys?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionKey>[]>;
    /**
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionMobilePlatformComparison>[]>;
    mobilePlatforms?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionMobilePlatform>[]>;
    osArches?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionOsArch>[]>;
    osTypes?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionOsType>[]>;
    /**
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionOsarchitectureComparison>[]>;
    /**
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionOstypeComparison>[]>;
    /**
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionPaasTypeComparison>[]>;
    paasTypes?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionPaasType>[]>;
    /**
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionProcessMetadataConditionKey>[]>;
    processMetadatas?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionProcessMetadata>[]>;
    serviceTopologies?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionServiceTopology>[]>;
    /**
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionServiceTopologyComparison>[]>;
    /**
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionServiceTypeComparison>[]>;
    serviceTypes?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionServiceType>[]>;
    /**
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionSimpleHostTechComparison>[]>;
    /**
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionSimpleTechComparison>[]>;
    /**
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionStringComparison>[]>;
    /**
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionStringConditionKey>[]>;
    stringKeys?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionStringKey>[]>;
    strings?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionString>[]>;
    /**
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionSyntheticEngineTypeComparison>[]>;
    syntheticEngines?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionSyntheticEngine>[]>;
    /**
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionTagComparison>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionTag>[]>;
    teches?: pulumi.Input<pulumi.Input<inputs.ServiceNamingConditionConditionTech>[]>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionAzureComputeMode {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionAzureComputeModeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionAzureSkuComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionAzureSkus {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionBaseComparisonBasic {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionBaseConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionBitness {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionBitnessComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCloudType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCloudTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionComparison {
    negate?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomApplicationType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomApplicationTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomHostMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ServiceNamingConditionConditionCustomHostMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomHostMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ServiceNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomHostMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ServiceNamingConditionConditionCustomProcessMetadataDynamicKey>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<inputs.ServiceNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionCustomProcessMetadataDynamicKey {
    key: pulumi.Input<string>;
    source: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionDatabaseTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionDatabaseTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionDcrumDecoder {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionDcrumDecoderComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionEntity {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionEntityIdComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionHostTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ServiceNamingConditionConditionHostTechValue>;
}

export interface ServiceNamingConditionConditionHostTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionHypervisor {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionHypervisorTypeComparision {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionIndexedName {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionIndexedNameComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionIndexedString {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionIndexedStringComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionIndexedTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ServiceNamingConditionConditionIndexedTagValue>;
}

export interface ServiceNamingConditionConditionIndexedTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ServiceNamingConditionConditionIndexedTagComparisonValue>;
}

export interface ServiceNamingConditionConditionIndexedTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionIndexedTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionInteger {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface ServiceNamingConditionConditionIntegerComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface ServiceNamingConditionConditionIpaddress {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionIpaddressComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionKey {
    attribute: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionMobilePlatform {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionMobilePlatformComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionOsArch {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionOsType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionOsarchitectureComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionOstypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionPaasType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionPaasTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionProcessMetadata {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionProcessMetadataConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionServiceTopology {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionServiceTopologyComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionServiceType {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionServiceTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionSimpleHostTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ServiceNamingConditionConditionSimpleHostTechComparisonValue>;
}

export interface ServiceNamingConditionConditionSimpleHostTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionSimpleTechComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ServiceNamingConditionConditionSimpleTechComparisonValue>;
}

export interface ServiceNamingConditionConditionSimpleTechComparisonValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionString {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionStringComparison {
    caseSensitive?: pulumi.Input<boolean>;
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionStringConditionKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionStringKey {
    attribute: pulumi.Input<string>;
    dynamicKey: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionSyntheticEngine {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionSyntheticEngineTypeComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionTag {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ServiceNamingConditionConditionTagValue>;
}

export interface ServiceNamingConditionConditionTagComparison {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ServiceNamingConditionConditionTagComparisonValue>;
}

export interface ServiceNamingConditionConditionTagComparisonValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionTagValue {
    context: pulumi.Input<string>;
    key: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceNamingConditionConditionTech {
    negate?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    value?: pulumi.Input<inputs.ServiceNamingConditionConditionTechValue>;
}

export interface ServiceNamingConditionConditionTechValue {
    type?: pulumi.Input<string>;
    unknowns?: pulumi.Input<string>;
    verbatimType?: pulumi.Input<string>;
}

export interface SpanCaptureRuleMatches {
    /**
     * Matching strategies for the Span
     */
    matches: pulumi.Input<pulumi.Input<inputs.SpanCaptureRuleMatchesMatch>[]>;
}

export interface SpanCaptureRuleMatchesMatch {
    caseSensitive?: pulumi.Input<boolean>;
    comparison: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    source: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SpanContextPropagationMatches {
    /**
     * Matching strategies for the Span
     */
    matches: pulumi.Input<pulumi.Input<inputs.SpanContextPropagationMatchesMatch>[]>;
}

export interface SpanContextPropagationMatchesMatch {
    caseSensitive?: pulumi.Input<boolean>;
    comparison: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    source: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SpanEntryPointMatches {
    /**
     * Matching strategies for the Span
     */
    matches: pulumi.Input<pulumi.Input<inputs.SpanEntryPointMatchesMatch>[]>;
}

export interface SpanEntryPointMatchesMatch {
    caseSensitive?: pulumi.Input<boolean>;
    comparison: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    source: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface UserGroupPermissions {
    /**
     * A permission granted to one or multiple environments
     */
    grants: pulumi.Input<pulumi.Input<inputs.UserGroupPermissionsGrant>[]>;
}

export interface UserGroupPermissionsGrant {
    environments?: pulumi.Input<pulumi.Input<string>[]>;
    permission: pulumi.Input<string>;
}

export interface WebApplicationConversionGoals {
    /**
     * A conversion goal of the application
     */
    goals: pulumi.Input<pulumi.Input<inputs.WebApplicationConversionGoalsGoal>[]>;
}

export interface WebApplicationConversionGoalsGoal {
    destination?: pulumi.Input<inputs.WebApplicationConversionGoalsGoalDestination>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the web application, displayed in the UI
     */
    name: pulumi.Input<string>;
    /**
     * The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
     */
    type?: pulumi.Input<string>;
    userAction?: pulumi.Input<inputs.WebApplicationConversionGoalsGoalUserAction>;
    visitDuration?: pulumi.Input<inputs.WebApplicationConversionGoalsGoalVisitDuration>;
    visitNumAction?: pulumi.Input<inputs.WebApplicationConversionGoalsGoalVisitNumAction>;
}

export interface WebApplicationConversionGoalsGoalDestination {
    caseSensitive?: pulumi.Input<boolean>;
    matchType?: pulumi.Input<string>;
    urlOrPath: pulumi.Input<string>;
}

export interface WebApplicationConversionGoalsGoalUserAction {
    actionType?: pulumi.Input<string>;
    caseSensitive?: pulumi.Input<boolean>;
    matchEntity?: pulumi.Input<string>;
    matchType?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface WebApplicationConversionGoalsGoalVisitDuration {
    duration: pulumi.Input<number>;
}

export interface WebApplicationConversionGoalsGoalVisitNumAction {
    numUserActions?: pulumi.Input<number>;
}

export interface WebApplicationCustomActionApdexSettings {
    /**
     * Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
     */
    frustratingFallbackThreshold?: pulumi.Input<number>;
    /**
     * Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
     */
    frustratingThreshold?: pulumi.Input<number>;
    /**
     * no documentation available
     */
    threshold?: pulumi.Input<number>;
    /**
     * Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
     */
    toleratedFallbackThreshold?: pulumi.Input<number>;
    /**
     * Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
     */
    toleratedThreshold?: pulumi.Input<number>;
}

export interface WebApplicationKeyUserAction {
    /**
     * Configuration of the key user action
     */
    actions: pulumi.Input<pulumi.Input<inputs.WebApplicationKeyUserActionAction>[]>;
}

export interface WebApplicationKeyUserActionAction {
    domain?: pulumi.Input<string>;
    /**
     * The name of the web application, displayed in the UI
     */
    name: pulumi.Input<string>;
    /**
     * The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
     */
    type: pulumi.Input<string>;
}

export interface WebApplicationLoadActionApdexSettings {
    /**
     * Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
     */
    frustratingFallbackThreshold?: pulumi.Input<number>;
    /**
     * Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
     */
    frustratingThreshold?: pulumi.Input<number>;
    /**
     * no documentation available
     */
    threshold?: pulumi.Input<number>;
    /**
     * Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
     */
    toleratedFallbackThreshold?: pulumi.Input<number>;
    /**
     * Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
     */
    toleratedThreshold?: pulumi.Input<number>;
}

export interface WebApplicationMetaDataCaptureSettings {
    /**
     * Java script agent meta data capture settings
     */
    captures?: pulumi.Input<pulumi.Input<inputs.WebApplicationMetaDataCaptureSettingsCapture>[]>;
}

export interface WebApplicationMetaDataCaptureSettingsCapture {
    capturingName: pulumi.Input<string>;
    /**
     * The name of the web application, displayed in the UI
     */
    name: pulumi.Input<string>;
    publicMetadata?: pulumi.Input<boolean>;
    /**
     * The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
     */
    type: pulumi.Input<string>;
    uniqueId?: pulumi.Input<number>;
    useLastValue?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettings {
    /**
     * Add the cross origin = anonymous attribute to capture JavaScript error messages and W3C resource timings
     */
    addCrossOriginAnonymousAttribute?: pulumi.Input<boolean>;
    /**
     * Advanced JavaScript tag settings
     */
    advancedJavascriptTagSettings?: pulumi.Input<inputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettings>;
    /**
     * The name of the angular package
     */
    angularPackageName?: pulumi.Input<string>;
    /**
     * Settings for restricting certain browser type, version, platform and, comparator. It also restricts the mode
     */
    browserRestrictionSettings?: pulumi.Input<inputs.WebApplicationMonitoringSettingsBrowserRestrictionSettings>;
    /**
     * Optimize the value of cache control headers for use with Dynatrace real user monitoring enabled/disabled
     */
    cacheControlHeaderOptimizations?: pulumi.Input<boolean>;
    /**
     * Settings for content capture
     */
    contentCapture: pulumi.Input<inputs.WebApplicationMonitoringSettingsContentCapture>;
    /**
     * Domain for cookie placement. Maximum 150 characters.
     */
    cookiePlacementDomain?: pulumi.Input<string>;
    /**
     * To enable RUM for XHR calls to AWS Lambda, define a regular expression matching these calls, Dynatrace can then automatically add a custom header (`x-dtc`) to each such request to the respective endpoints in AWS.
     */
    correlationHeaderInclusionRegex?: pulumi.Input<string>;
    customConfigurationProperties?: pulumi.Input<string>;
    excludeXhrRegex?: pulumi.Input<string>;
    fetchRequests?: pulumi.Input<boolean>;
    /**
     * Possible valures are `CODE_SNIPPET`, `CODE_SNIPPET_ASYNC`, `INLINE_CODE` and `JAVASCRIPT_TAG`.
     */
    injectionMode: pulumi.Input<string>;
    ipAddressRestrictionSettings?: pulumi.Input<inputs.WebApplicationMonitoringSettingsIpAddressRestrictionSettings>;
    javascriptFrameworkSupport?: pulumi.Input<inputs.WebApplicationMonitoringSettingsJavascriptFrameworkSupport>;
    javascriptInjectionRules?: pulumi.Input<inputs.WebApplicationMonitoringSettingsJavascriptInjectionRules>;
    libraryFileLocation?: pulumi.Input<string>;
    monitoringDataPath?: pulumi.Input<string>;
    scriptTagCacheDurationInHours?: pulumi.Input<number>;
    secureCookieAttribute?: pulumi.Input<boolean>;
    serverRequestPathId?: pulumi.Input<string>;
    xmlHttpRequest?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettingsAdvancedJavascriptTagSettings {
    additionalEventHandlers?: pulumi.Input<inputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlers>;
    eventWrapperSettings?: pulumi.Input<inputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsEventWrapperSettings>;
    globalEventCaptureSettings?: pulumi.Input<inputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGlobalEventCaptureSettings>;
    instrumentUnsupportedAjaxFrameworks?: pulumi.Input<boolean>;
    maxActionNameLength: pulumi.Input<number>;
    maxErrorsToCapture: pulumi.Input<number>;
    specialCharactersToEscape?: pulumi.Input<string>;
    syncBeaconFirefox?: pulumi.Input<boolean>;
    syncBeaconInternetExplorer?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlers {
    blur?: pulumi.Input<boolean>;
    change?: pulumi.Input<boolean>;
    click?: pulumi.Input<boolean>;
    maxDomNodes: pulumi.Input<number>;
    mouseup?: pulumi.Input<boolean>;
    toStringMethod?: pulumi.Input<boolean>;
    useMouseUpEventForClicks?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsEventWrapperSettings {
    blur?: pulumi.Input<boolean>;
    change?: pulumi.Input<boolean>;
    click?: pulumi.Input<boolean>;
    mouseup?: pulumi.Input<boolean>;
    touchEnd?: pulumi.Input<boolean>;
    touchStart?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGlobalEventCaptureSettings {
    additionalEventCapturedAsUserInput?: pulumi.Input<string>;
    click?: pulumi.Input<boolean>;
    doubleclick?: pulumi.Input<boolean>;
    keydown?: pulumi.Input<boolean>;
    keyup?: pulumi.Input<boolean>;
    mousedown?: pulumi.Input<boolean>;
    mouseup?: pulumi.Input<boolean>;
    scroll?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettingsBrowserRestrictionSettings {
    mode: pulumi.Input<string>;
    restrictions?: pulumi.Input<inputs.WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictions>;
}

export interface WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictions {
    restrictions: pulumi.Input<pulumi.Input<inputs.WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsRestriction>[]>;
}

export interface WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsRestriction {
    browserType: pulumi.Input<string>;
    browserVersion?: pulumi.Input<string>;
    comparator?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
}

export interface WebApplicationMonitoringSettingsContentCapture {
    javascriptErrors?: pulumi.Input<boolean>;
    resourceTimingSettings?: pulumi.Input<inputs.WebApplicationMonitoringSettingsContentCaptureResourceTimingSettings>;
    timeoutSettings?: pulumi.Input<inputs.WebApplicationMonitoringSettingsContentCaptureTimeoutSettings>;
    visuallyCompleteAndSpeedIndex?: pulumi.Input<boolean>;
    visuallyCompleteSettings?: pulumi.Input<inputs.WebApplicationMonitoringSettingsContentCaptureVisuallyCompleteSettings>;
}

export interface WebApplicationMonitoringSettingsContentCaptureResourceTimingSettings {
    instrumentationDelay: pulumi.Input<number>;
    nonW3cResourceTimings?: pulumi.Input<boolean>;
    resourceTimingCaptureType?: pulumi.Input<string>;
    resourceTimingsDomainLimit?: pulumi.Input<number>;
    w3cResourceTimings?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettingsContentCaptureTimeoutSettings {
    temporaryActionLimit: pulumi.Input<number>;
    temporaryActionTotalTimeout: pulumi.Input<number>;
    timedActionSupport?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettingsContentCaptureVisuallyCompleteSettings {
    excludeUrlRegex?: pulumi.Input<string>;
    ignoredMutationsList?: pulumi.Input<string>;
    inactivityTimeout?: pulumi.Input<number>;
    mutationTimeout?: pulumi.Input<number>;
    threshold?: pulumi.Input<number>;
}

export interface WebApplicationMonitoringSettingsIpAddressRestrictionSettings {
    mode: pulumi.Input<string>;
    restrictions?: pulumi.Input<inputs.WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictions>;
}

export interface WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictions {
    ranges: pulumi.Input<pulumi.Input<inputs.WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsRange>[]>;
}

export interface WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsRange {
    address: pulumi.Input<string>;
    addressTo?: pulumi.Input<string>;
    subnetMask?: pulumi.Input<number>;
}

export interface WebApplicationMonitoringSettingsJavascriptFrameworkSupport {
    activeXObject?: pulumi.Input<boolean>;
    angular?: pulumi.Input<boolean>;
    dojo?: pulumi.Input<boolean>;
    extjs?: pulumi.Input<boolean>;
    icefaces?: pulumi.Input<boolean>;
    jquery?: pulumi.Input<boolean>;
    mooTools?: pulumi.Input<boolean>;
    prototype?: pulumi.Input<boolean>;
}

export interface WebApplicationMonitoringSettingsJavascriptInjectionRules {
    rules: pulumi.Input<pulumi.Input<inputs.WebApplicationMonitoringSettingsJavascriptInjectionRulesRule>[]>;
}

export interface WebApplicationMonitoringSettingsJavascriptInjectionRulesRule {
    enabled?: pulumi.Input<boolean>;
    htmlPattern?: pulumi.Input<string>;
    rule: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    urlOperator: pulumi.Input<string>;
    urlPattern?: pulumi.Input<string>;
}

export interface WebApplicationSessionReplayConfig {
    /**
     * Session replay sampling rating in percent
     */
    costControlPercentage: pulumi.Input<number>;
    /**
     * A list of URLs to be excluded from CSS resource capturing
     */
    cssResourceCapturingExclusionRules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Capture (`true`) or don't capture (`false`) CSS resources from the session
     */
    enableCssResourceCapturing?: pulumi.Input<boolean>;
    /**
     * SessionReplay Enabled/Disabled
     */
    enabled?: pulumi.Input<boolean>;
}

export interface WebApplicationUserActionAndSessionProperties {
    /**
     * User action and session properties settings
     */
    properties?: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionAndSessionPropertiesProperty>[]>;
}

export interface WebApplicationUserActionAndSessionPropertiesProperty {
    aggregation?: pulumi.Input<string>;
    cleanupRule?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    /**
     * The ID of this resource.
     */
    id: pulumi.Input<number>;
    ignoreCase?: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
    longStringLength?: pulumi.Input<number>;
    metadataId?: pulumi.Input<number>;
    origin: pulumi.Input<string>;
    serverSideRequestAttribute?: pulumi.Input<string>;
    storeAsSessionProperty?: pulumi.Input<boolean>;
    storeAsUserActionProperty?: pulumi.Input<boolean>;
    /**
     * The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
     */
    type: pulumi.Input<string>;
}

export interface WebApplicationUserActionNamingSettings {
    /**
     * User action naming rules for custom actions
     */
    customActionNamingRules?: pulumi.Input<inputs.WebApplicationUserActionNamingSettingsCustomActionNamingRules>;
    /**
     * Case insensitive naming
     */
    ignoreCase?: pulumi.Input<boolean>;
    /**
     * User action naming rules for loading actions
     */
    loadActionNamingRules?: pulumi.Input<inputs.WebApplicationUserActionNamingSettingsLoadActionNamingRules>;
    /**
     * User action placeholders
     */
    placeholders?: pulumi.Input<inputs.WebApplicationUserActionNamingSettingsPlaceholders>;
    /**
     * User action naming rules for custom actions
     */
    queryParameterCleanups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Deactivate this setting if different domains should not result in separate user actions
     */
    splitUserActionsByDomain?: pulumi.Input<boolean>;
    /**
     * First load action found under an XHR action should be used when true. Else the deepest one under the xhr action is used
     */
    useFirstDetectedLoadAction?: pulumi.Input<boolean>;
    /**
     * User action naming rules for XHR actions
     */
    xhrActionNamingRules?: pulumi.Input<inputs.WebApplicationUserActionNamingSettingsXhrActionNamingRules>;
}

export interface WebApplicationUserActionNamingSettingsCustomActionNamingRules {
    rules: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionNamingSettingsCustomActionNamingRulesRule>[]>;
}

export interface WebApplicationUserActionNamingSettingsCustomActionNamingRulesRule {
    conditions?: pulumi.Input<inputs.WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditions>;
    template: pulumi.Input<string>;
    useOrConditions?: pulumi.Input<boolean>;
}

export interface WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditions {
    conditions: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsCondition>[]>;
}

export interface WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsCondition {
    operand1: pulumi.Input<string>;
    operand2?: pulumi.Input<string>;
    operator: pulumi.Input<string>;
}

export interface WebApplicationUserActionNamingSettingsLoadActionNamingRules {
    rules: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionNamingSettingsLoadActionNamingRulesRule>[]>;
}

export interface WebApplicationUserActionNamingSettingsLoadActionNamingRulesRule {
    conditions?: pulumi.Input<inputs.WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditions>;
    template: pulumi.Input<string>;
    useOrConditions?: pulumi.Input<boolean>;
}

export interface WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditions {
    conditions: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsCondition>[]>;
}

export interface WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsCondition {
    operand1: pulumi.Input<string>;
    operand2?: pulumi.Input<string>;
    operator: pulumi.Input<string>;
}

export interface WebApplicationUserActionNamingSettingsPlaceholders {
    placeholders: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionNamingSettingsPlaceholdersPlaceholder>[]>;
}

export interface WebApplicationUserActionNamingSettingsPlaceholdersPlaceholder {
    input: pulumi.Input<string>;
    metadataId?: pulumi.Input<number>;
    /**
     * The name of the web application, displayed in the UI
     */
    name: pulumi.Input<string>;
    processingPart: pulumi.Input<string>;
    processingSteps?: pulumi.Input<inputs.WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingSteps>;
    useGuessedElementIdentifier?: pulumi.Input<boolean>;
}

export interface WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingSteps {
    steps: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStep>[]>;
}

export interface WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStep {
    fallbackToInput?: pulumi.Input<boolean>;
    patternAfter?: pulumi.Input<string>;
    patternAfterSearchType?: pulumi.Input<string>;
    patternBefore?: pulumi.Input<string>;
    patternBeforeSearchType?: pulumi.Input<string>;
    patternToReplace?: pulumi.Input<string>;
    regularExpression?: pulumi.Input<string>;
    replacement?: pulumi.Input<string>;
    /**
     * The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
     */
    type: pulumi.Input<string>;
}

export interface WebApplicationUserActionNamingSettingsXhrActionNamingRules {
    rules: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionNamingSettingsXhrActionNamingRulesRule>[]>;
}

export interface WebApplicationUserActionNamingSettingsXhrActionNamingRulesRule {
    conditions?: pulumi.Input<inputs.WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditions>;
    template: pulumi.Input<string>;
    useOrConditions?: pulumi.Input<boolean>;
}

export interface WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditions {
    conditions: pulumi.Input<pulumi.Input<inputs.WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsCondition>[]>;
}

export interface WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsCondition {
    operand1: pulumi.Input<string>;
    operand2?: pulumi.Input<string>;
    operator: pulumi.Input<string>;
}

export interface WebApplicationUserTags {
    /**
     * User tag settings
     */
    tags: pulumi.Input<pulumi.Input<inputs.WebApplicationUserTagsTag>[]>;
}

export interface WebApplicationUserTagsTag {
    cleanupRule?: pulumi.Input<string>;
    /**
     * The ID of this resource.
     */
    id: pulumi.Input<number>;
    ignoreCase?: pulumi.Input<boolean>;
    metadataId?: pulumi.Input<number>;
    serverSideRequestAttribute?: pulumi.Input<string>;
}

export interface WebApplicationWaterfallSettings {
    /**
     * Warn about resources with a lower browser cache rate above *X*%. Values between 1 and 100 are allowed.
     */
    resourceBrowserCachingThreshold: pulumi.Input<number>;
    /**
     * Warn about resources larger than *X* bytes. Values between 0 and 99999000 are allowed.
     */
    resourcesThreshold: pulumi.Input<number>;
    /**
     * Warn about slow CDN resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
     */
    slowCndResourcesThreshold: pulumi.Input<number>;
    /**
     * Warn about slow 1st party resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
     */
    slowFirstPartyResourcesThreshold: pulumi.Input<number>;
    /**
     * Warn about slow 3rd party resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
     */
    slowThirdPartyResourcesThreshold: pulumi.Input<number>;
    /**
     * Warn if Speed index exceeds *X* % of Visually complete. Values between 1 and 99 are allowed.
     */
    speedIndexVisuallyCompleteRatioThreshold: pulumi.Input<number>;
    /**
     * Warn about uncompressed resources larger than *X* bytes. Values between 0 and 99999 are allowed.
     */
    uncompressedResourcesThreshold: pulumi.Input<number>;
}

export interface WebApplicationXhrActionApdexSettings {
    /**
     * Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
     */
    frustratingFallbackThreshold?: pulumi.Input<number>;
    /**
     * Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
     */
    frustratingThreshold?: pulumi.Input<number>;
    /**
     * no documentation available
     */
    threshold?: pulumi.Input<number>;
    /**
     * Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
     */
    toleratedFallbackThreshold?: pulumi.Input<number>;
    /**
     * Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
     */
    toleratedThreshold?: pulumi.Input<number>;
}
