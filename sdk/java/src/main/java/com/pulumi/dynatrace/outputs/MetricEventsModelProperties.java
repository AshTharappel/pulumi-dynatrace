// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MetricEventsModelProperties {
    /**
     * @return The alert condition of the model properties
     * 
     */
    private String alertCondition;
    /**
     * @return The ability to set an alert on missing data in a metric. When enabled, missing data samples will contribute as violating samples defined in advanced model properties. We recommend to not alert on missing data for sparse timeseries as this leads to alert spam.
     * 
     */
    private Boolean alertOnNoData;
    /**
     * @return The number of one-minute samples within the evaluation window that must go back to normal to close the event.
     * 
     */
    private Integer dealertingSamples;
    /**
     * @return The number of one-minute samples that form the sliding evaluation window.
     * 
     */
    private Integer samples;
    /**
     * @return Controls how many times the signal fluctuation is added to the baseline to produce the actual threshold for alerting
     * 
     */
    private @Nullable Double signalFluctuation;
    /**
     * @return Raise an event if this value is violated
     * 
     */
    private @Nullable Double threshold;
    /**
     * @return Controls the width of the confidence band and larger values lead to a less sensitive model
     * 
     */
    private @Nullable Double tolerance;
    /**
     * @return Metric-key-based query definitions only support static thresholds.
     * 
     */
    private String type;
    /**
     * @return The number of one-minute samples within the evaluation window that must violate to trigger an event.
     * 
     */
    private Integer violatingSamples;

    private MetricEventsModelProperties() {}
    /**
     * @return The alert condition of the model properties
     * 
     */
    public String alertCondition() {
        return this.alertCondition;
    }
    /**
     * @return The ability to set an alert on missing data in a metric. When enabled, missing data samples will contribute as violating samples defined in advanced model properties. We recommend to not alert on missing data for sparse timeseries as this leads to alert spam.
     * 
     */
    public Boolean alertOnNoData() {
        return this.alertOnNoData;
    }
    /**
     * @return The number of one-minute samples within the evaluation window that must go back to normal to close the event.
     * 
     */
    public Integer dealertingSamples() {
        return this.dealertingSamples;
    }
    /**
     * @return The number of one-minute samples that form the sliding evaluation window.
     * 
     */
    public Integer samples() {
        return this.samples;
    }
    /**
     * @return Controls how many times the signal fluctuation is added to the baseline to produce the actual threshold for alerting
     * 
     */
    public Optional<Double> signalFluctuation() {
        return Optional.ofNullable(this.signalFluctuation);
    }
    /**
     * @return Raise an event if this value is violated
     * 
     */
    public Optional<Double> threshold() {
        return Optional.ofNullable(this.threshold);
    }
    /**
     * @return Controls the width of the confidence band and larger values lead to a less sensitive model
     * 
     */
    public Optional<Double> tolerance() {
        return Optional.ofNullable(this.tolerance);
    }
    /**
     * @return Metric-key-based query definitions only support static thresholds.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The number of one-minute samples within the evaluation window that must violate to trigger an event.
     * 
     */
    public Integer violatingSamples() {
        return this.violatingSamples;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricEventsModelProperties defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String alertCondition;
        private Boolean alertOnNoData;
        private Integer dealertingSamples;
        private Integer samples;
        private @Nullable Double signalFluctuation;
        private @Nullable Double threshold;
        private @Nullable Double tolerance;
        private String type;
        private Integer violatingSamples;
        public Builder() {}
        public Builder(MetricEventsModelProperties defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alertCondition = defaults.alertCondition;
    	      this.alertOnNoData = defaults.alertOnNoData;
    	      this.dealertingSamples = defaults.dealertingSamples;
    	      this.samples = defaults.samples;
    	      this.signalFluctuation = defaults.signalFluctuation;
    	      this.threshold = defaults.threshold;
    	      this.tolerance = defaults.tolerance;
    	      this.type = defaults.type;
    	      this.violatingSamples = defaults.violatingSamples;
        }

        @CustomType.Setter
        public Builder alertCondition(String alertCondition) {
            this.alertCondition = Objects.requireNonNull(alertCondition);
            return this;
        }
        @CustomType.Setter
        public Builder alertOnNoData(Boolean alertOnNoData) {
            this.alertOnNoData = Objects.requireNonNull(alertOnNoData);
            return this;
        }
        @CustomType.Setter
        public Builder dealertingSamples(Integer dealertingSamples) {
            this.dealertingSamples = Objects.requireNonNull(dealertingSamples);
            return this;
        }
        @CustomType.Setter
        public Builder samples(Integer samples) {
            this.samples = Objects.requireNonNull(samples);
            return this;
        }
        @CustomType.Setter
        public Builder signalFluctuation(@Nullable Double signalFluctuation) {
            this.signalFluctuation = signalFluctuation;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(@Nullable Double threshold) {
            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder tolerance(@Nullable Double tolerance) {
            this.tolerance = tolerance;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder violatingSamples(Integer violatingSamples) {
            this.violatingSamples = Objects.requireNonNull(violatingSamples);
            return this;
        }
        public MetricEventsModelProperties build() {
            final var o = new MetricEventsModelProperties();
            o.alertCondition = alertCondition;
            o.alertOnNoData = alertOnNoData;
            o.dealertingSamples = dealertingSamples;
            o.samples = samples;
            o.signalFluctuation = signalFluctuation;
            o.threshold = threshold;
            o.tolerance = tolerance;
            o.type = type;
            o.violatingSamples = violatingSamples;
            return o;
        }
    }
}
