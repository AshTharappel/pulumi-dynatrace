// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DashboardDashboardMetadataArgs;
import com.pulumi.dynatrace.inputs.DashboardMetadataArgs;
import com.pulumi.dynatrace.inputs.DashboardTileArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardArgs Empty = new DashboardArgs();

    /**
     * contains parameters of a dashboard
     * 
     */
    @Import(name="dashboardMetadata")
    private @Nullable Output<DashboardDashboardMetadataArgs> dashboardMetadata;

    /**
     * @return contains parameters of a dashboard
     * 
     */
    public Optional<Output<DashboardDashboardMetadataArgs>> dashboardMetadata() {
        return Optional.ofNullable(this.dashboardMetadata);
    }

    /**
     * `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
     * 
     * @deprecated
     * `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
     * 
     */
    @Deprecated /* `metadata` exists for backwards compatibility but shouldn't get specified anymore */
    @Import(name="metadata")
    private @Nullable Output<DashboardMetadataArgs> metadata;

    /**
     * @return `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
     * 
     * @deprecated
     * `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
     * 
     */
    @Deprecated /* `metadata` exists for backwards compatibility but shouldn't get specified anymore */
    public Optional<Output<DashboardMetadataArgs>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * the tiles this Dashboard consist of
     * 
     */
    @Import(name="tiles")
    private @Nullable Output<List<DashboardTileArgs>> tiles;

    /**
     * @return the tiles this Dashboard consist of
     * 
     */
    public Optional<Output<List<DashboardTileArgs>>> tiles() {
        return Optional.ofNullable(this.tiles);
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    private DashboardArgs() {}

    private DashboardArgs(DashboardArgs $) {
        this.dashboardMetadata = $.dashboardMetadata;
        this.metadata = $.metadata;
        this.tiles = $.tiles;
        this.unknowns = $.unknowns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardArgs $;

        public Builder() {
            $ = new DashboardArgs();
        }

        public Builder(DashboardArgs defaults) {
            $ = new DashboardArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dashboardMetadata contains parameters of a dashboard
         * 
         * @return builder
         * 
         */
        public Builder dashboardMetadata(@Nullable Output<DashboardDashboardMetadataArgs> dashboardMetadata) {
            $.dashboardMetadata = dashboardMetadata;
            return this;
        }

        /**
         * @param dashboardMetadata contains parameters of a dashboard
         * 
         * @return builder
         * 
         */
        public Builder dashboardMetadata(DashboardDashboardMetadataArgs dashboardMetadata) {
            return dashboardMetadata(Output.of(dashboardMetadata));
        }

        /**
         * @param metadata `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
         * 
         * @return builder
         * 
         * @deprecated
         * `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
         * 
         */
        @Deprecated /* `metadata` exists for backwards compatibility but shouldn't get specified anymore */
        public Builder metadata(@Nullable Output<DashboardMetadataArgs> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
         * 
         * @return builder
         * 
         * @deprecated
         * `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
         * 
         */
        @Deprecated /* `metadata` exists for backwards compatibility but shouldn't get specified anymore */
        public Builder metadata(DashboardMetadataArgs metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param tiles the tiles this Dashboard consist of
         * 
         * @return builder
         * 
         */
        public Builder tiles(@Nullable Output<List<DashboardTileArgs>> tiles) {
            $.tiles = tiles;
            return this;
        }

        /**
         * @param tiles the tiles this Dashboard consist of
         * 
         * @return builder
         * 
         */
        public Builder tiles(List<DashboardTileArgs> tiles) {
            return tiles(Output.of(tiles));
        }

        /**
         * @param tiles the tiles this Dashboard consist of
         * 
         * @return builder
         * 
         */
        public Builder tiles(DashboardTileArgs... tiles) {
            return tiles(List.of(tiles));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public DashboardArgs build() {
            return $;
        }
    }

}
