// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.ServiceExternalWebServiceIdContributorsUrlPathArgs;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceExternalWebServiceIdContributorsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceExternalWebServiceIdContributorsArgs Empty = new ServiceExternalWebServiceIdContributorsArgs();

    /**
     * Detect the matching requests as web request services instead of web services.
     * 
     */
    @Import(name="detectAsWebRequestService", required=true)
    private Output<Boolean> detectAsWebRequestService;

    /**
     * @return Detect the matching requests as web request services instead of web services.
     * 
     */
    public Output<Boolean> detectAsWebRequestService() {
        return this.detectAsWebRequestService;
    }

    @Import(name="portForServiceId")
    private @Nullable Output<Boolean> portForServiceId;

    public Optional<Output<Boolean>> portForServiceId() {
        return Optional.ofNullable(this.portForServiceId);
    }

    @Import(name="urlPath")
    private @Nullable Output<ServiceExternalWebServiceIdContributorsUrlPathArgs> urlPath;

    public Optional<Output<ServiceExternalWebServiceIdContributorsUrlPathArgs>> urlPath() {
        return Optional.ofNullable(this.urlPath);
    }

    private ServiceExternalWebServiceIdContributorsArgs() {}

    private ServiceExternalWebServiceIdContributorsArgs(ServiceExternalWebServiceIdContributorsArgs $) {
        this.detectAsWebRequestService = $.detectAsWebRequestService;
        this.portForServiceId = $.portForServiceId;
        this.urlPath = $.urlPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceExternalWebServiceIdContributorsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceExternalWebServiceIdContributorsArgs $;

        public Builder() {
            $ = new ServiceExternalWebServiceIdContributorsArgs();
        }

        public Builder(ServiceExternalWebServiceIdContributorsArgs defaults) {
            $ = new ServiceExternalWebServiceIdContributorsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param detectAsWebRequestService Detect the matching requests as web request services instead of web services.
         * 
         * @return builder
         * 
         */
        public Builder detectAsWebRequestService(Output<Boolean> detectAsWebRequestService) {
            $.detectAsWebRequestService = detectAsWebRequestService;
            return this;
        }

        /**
         * @param detectAsWebRequestService Detect the matching requests as web request services instead of web services.
         * 
         * @return builder
         * 
         */
        public Builder detectAsWebRequestService(Boolean detectAsWebRequestService) {
            return detectAsWebRequestService(Output.of(detectAsWebRequestService));
        }

        public Builder portForServiceId(@Nullable Output<Boolean> portForServiceId) {
            $.portForServiceId = portForServiceId;
            return this;
        }

        public Builder portForServiceId(Boolean portForServiceId) {
            return portForServiceId(Output.of(portForServiceId));
        }

        public Builder urlPath(@Nullable Output<ServiceExternalWebServiceIdContributorsUrlPathArgs> urlPath) {
            $.urlPath = urlPath;
            return this;
        }

        public Builder urlPath(ServiceExternalWebServiceIdContributorsUrlPathArgs urlPath) {
            return urlPath(Output.of(urlPath));
        }

        public ServiceExternalWebServiceIdContributorsArgs build() {
            $.detectAsWebRequestService = Objects.requireNonNull($.detectAsWebRequestService, "expected parameter 'detectAsWebRequestService' to be non-null");
            return $;
        }
    }

}
