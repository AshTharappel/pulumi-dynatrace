// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricQueryState extends com.pulumi.resources.ResourceArgs {

    public static final MetricQueryState Empty = new MetricQueryState();

    /**
     * The scope of this setting (metric)
     * 
     */
    @Import(name="metricId")
    private @Nullable Output<String> metricId;

    /**
     * @return The scope of this setting (metric)
     * 
     */
    public Optional<Output<String>> metricId() {
        return Optional.ofNullable(this.metricId);
    }

    /**
     * Query
     * 
     */
    @Import(name="metricSelector")
    private @Nullable Output<String> metricSelector;

    /**
     * @return Query
     * 
     */
    public Optional<Output<String>> metricSelector() {
        return Optional.ofNullable(this.metricSelector);
    }

    private MetricQueryState() {}

    private MetricQueryState(MetricQueryState $) {
        this.metricId = $.metricId;
        this.metricSelector = $.metricSelector;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricQueryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricQueryState $;

        public Builder() {
            $ = new MetricQueryState();
        }

        public Builder(MetricQueryState defaults) {
            $ = new MetricQueryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param metricId The scope of this setting (metric)
         * 
         * @return builder
         * 
         */
        public Builder metricId(@Nullable Output<String> metricId) {
            $.metricId = metricId;
            return this;
        }

        /**
         * @param metricId The scope of this setting (metric)
         * 
         * @return builder
         * 
         */
        public Builder metricId(String metricId) {
            return metricId(Output.of(metricId));
        }

        /**
         * @param metricSelector Query
         * 
         * @return builder
         * 
         */
        public Builder metricSelector(@Nullable Output<String> metricSelector) {
            $.metricSelector = metricSelector;
            return this;
        }

        /**
         * @param metricSelector Query
         * 
         * @return builder
         * 
         */
        public Builder metricSelector(String metricSelector) {
            return metricSelector(Output.of(metricSelector));
        }

        public MetricQueryState build() {
            return $;
        }
    }

}
