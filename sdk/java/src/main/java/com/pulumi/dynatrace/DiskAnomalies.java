// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.DiskAnomaliesArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.DiskAnomaliesState;
import com.pulumi.dynatrace.outputs.DiskAnomaliesDiskName;
import com.pulumi.dynatrace.outputs.DiskAnomaliesTags;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/diskAnomalies:DiskAnomalies")
public class DiskAnomalies extends com.pulumi.resources.CustomResource {
    /**
     * Narrows the rule usage down to disks, matching the specified criteria
     * 
     */
    @Export(name="diskName", type=DiskAnomaliesDiskName.class, parameters={})
    private Output</* @Nullable */ DiskAnomaliesDiskName> diskName;

    /**
     * @return Narrows the rule usage down to disks, matching the specified criteria
     * 
     */
    public Output<Optional<DiskAnomaliesDiskName>> diskName() {
        return Codegen.optional(this.diskName);
    }
    /**
     * Disk event rule enabled/disabled
     * 
     */
    @Export(name="enabled", type=Boolean.class, parameters={})
    private Output<Boolean> enabled;

    /**
     * @return Disk event rule enabled/disabled
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group
     * 
     */
    @Export(name="hostGroupId", type=String.class, parameters={})
    private Output</* @Nullable */ String> hostGroupId;

    /**
     * @return Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group
     * 
     */
    public Output<Optional<String>> hostGroupId() {
        return Codegen.optional(this.hostGroupId);
    }
    /**
     * The metric to monitor. Possible values are: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING` and `WRITE_TIME_EXCEEDING`
     * 
     */
    @Export(name="metric", type=String.class, parameters={})
    private Output<String> metric;

    /**
     * @return The metric to monitor. Possible values are: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING` and `WRITE_TIME_EXCEEDING`
     * 
     */
    public Output<String> metric() {
        return this.metric;
    }
    /**
     * The name of the disk event rule
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the disk event rule
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The number of samples to evaluate
     * 
     */
    @Export(name="samples", type=Integer.class, parameters={})
    private Output<Integer> samples;

    /**
     * @return The number of samples to evaluate
     * 
     */
    public Output<Integer> samples() {
        return this.samples;
    }
    /**
     * Narrows the rule usage down to the hosts matching the specified tags
     * 
     */
    @Export(name="tags", type=DiskAnomaliesTags.class, parameters={})
    private Output</* @Nullable */ DiskAnomaliesTags> tags;

    /**
     * @return Narrows the rule usage down to the hosts matching the specified tags
     * 
     */
    public Output<Optional<DiskAnomaliesTags>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The threshold to trigger disk event.   * A percentage for `LowDiskSpace` or `LowInodes` metrics.   * In milliseconds for `ReadTimeExceeding` or `WriteTimeExceeding` metrics
     * 
     */
    @Export(name="threshold", type=Double.class, parameters={})
    private Output<Double> threshold;

    /**
     * @return The threshold to trigger disk event.   * A percentage for `LowDiskSpace` or `LowInodes` metrics.   * In milliseconds for `ReadTimeExceeding` or `WriteTimeExceeding` metrics
     * 
     */
    public Output<Double> threshold() {
        return this.threshold;
    }
    /**
     * The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples
     * 
     */
    @Export(name="violatingSamples", type=Integer.class, parameters={})
    private Output<Integer> violatingSamples;

    /**
     * @return The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples
     * 
     */
    public Output<Integer> violatingSamples() {
        return this.violatingSamples;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DiskAnomalies(String name) {
        this(name, DiskAnomaliesArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DiskAnomalies(String name, DiskAnomaliesArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DiskAnomalies(String name, DiskAnomaliesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/diskAnomalies:DiskAnomalies", name, args == null ? DiskAnomaliesArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DiskAnomalies(String name, Output<String> id, @Nullable DiskAnomaliesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/diskAnomalies:DiskAnomalies", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DiskAnomalies get(String name, Output<String> id, @Nullable DiskAnomaliesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DiskAnomalies(name, id, state, options);
    }
}
