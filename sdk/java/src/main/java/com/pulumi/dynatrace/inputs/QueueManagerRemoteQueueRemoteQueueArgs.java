// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QueueManagerRemoteQueueRemoteQueueArgs extends com.pulumi.resources.ResourceArgs {

    public static final QueueManagerRemoteQueueRemoteQueueArgs Empty = new QueueManagerRemoteQueueRemoteQueueArgs();

    @Import(name="clusterVisibilities")
    private @Nullable Output<List<String>> clusterVisibilities;

    public Optional<Output<List<String>>> clusterVisibilities() {
        return Optional.ofNullable(this.clusterVisibilities);
    }

    @Import(name="localQueueName", required=true)
    private Output<String> localQueueName;

    public Output<String> localQueueName() {
        return this.localQueueName;
    }

    @Import(name="remoteQueueManager", required=true)
    private Output<String> remoteQueueManager;

    public Output<String> remoteQueueManager() {
        return this.remoteQueueManager;
    }

    @Import(name="remoteQueueName", required=true)
    private Output<String> remoteQueueName;

    public Output<String> remoteQueueName() {
        return this.remoteQueueName;
    }

    private QueueManagerRemoteQueueRemoteQueueArgs() {}

    private QueueManagerRemoteQueueRemoteQueueArgs(QueueManagerRemoteQueueRemoteQueueArgs $) {
        this.clusterVisibilities = $.clusterVisibilities;
        this.localQueueName = $.localQueueName;
        this.remoteQueueManager = $.remoteQueueManager;
        this.remoteQueueName = $.remoteQueueName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QueueManagerRemoteQueueRemoteQueueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QueueManagerRemoteQueueRemoteQueueArgs $;

        public Builder() {
            $ = new QueueManagerRemoteQueueRemoteQueueArgs();
        }

        public Builder(QueueManagerRemoteQueueRemoteQueueArgs defaults) {
            $ = new QueueManagerRemoteQueueRemoteQueueArgs(Objects.requireNonNull(defaults));
        }

        public Builder clusterVisibilities(@Nullable Output<List<String>> clusterVisibilities) {
            $.clusterVisibilities = clusterVisibilities;
            return this;
        }

        public Builder clusterVisibilities(List<String> clusterVisibilities) {
            return clusterVisibilities(Output.of(clusterVisibilities));
        }

        public Builder clusterVisibilities(String... clusterVisibilities) {
            return clusterVisibilities(List.of(clusterVisibilities));
        }

        public Builder localQueueName(Output<String> localQueueName) {
            $.localQueueName = localQueueName;
            return this;
        }

        public Builder localQueueName(String localQueueName) {
            return localQueueName(Output.of(localQueueName));
        }

        public Builder remoteQueueManager(Output<String> remoteQueueManager) {
            $.remoteQueueManager = remoteQueueManager;
            return this;
        }

        public Builder remoteQueueManager(String remoteQueueManager) {
            return remoteQueueManager(Output.of(remoteQueueManager));
        }

        public Builder remoteQueueName(Output<String> remoteQueueName) {
            $.remoteQueueName = remoteQueueName;
            return this;
        }

        public Builder remoteQueueName(String remoteQueueName) {
            return remoteQueueName(Output.of(remoteQueueName));
        }

        public QueueManagerRemoteQueueRemoteQueueArgs build() {
            $.localQueueName = Objects.requireNonNull($.localQueueName, "expected parameter 'localQueueName' to be non-null");
            $.remoteQueueManager = Objects.requireNonNull($.remoteQueueManager, "expected parameter 'remoteQueueManager' to be non-null");
            $.remoteQueueName = Objects.requireNonNull($.remoteQueueName, "expected parameter 'remoteQueueName' to be non-null");
            return $;
        }
    }

}
