// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProcessMonitoringArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProcessMonitoringArgs Empty = new ProcessMonitoringArgs();

    /**
     * By disabling automatic deep monitoring the Dynatrace OneAgent will only deep monitor processes that are covered by a respective deep monitoring rule or where monitoring is enabled explicitly.
     * Disabling only works if all installed Agents have version 1.123 or higher.
     * 
     */
    @Import(name="autoMonitoring", required=true)
    private Output<Boolean> autoMonitoring;

    /**
     * @return By disabling automatic deep monitoring the Dynatrace OneAgent will only deep monitor processes that are covered by a respective deep monitoring rule or where monitoring is enabled explicitly.
     * Disabling only works if all installed Agents have version 1.123 or higher.
     * 
     */
    public Output<Boolean> autoMonitoring() {
        return this.autoMonitoring;
    }

    /**
     * The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
     * 
     */
    @Import(name="hostGroupId")
    private @Nullable Output<String> hostGroupId;

    /**
     * @return The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
     * 
     */
    public Optional<Output<String>> hostGroupId() {
        return Optional.ofNullable(this.hostGroupId);
    }

    private ProcessMonitoringArgs() {}

    private ProcessMonitoringArgs(ProcessMonitoringArgs $) {
        this.autoMonitoring = $.autoMonitoring;
        this.hostGroupId = $.hostGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProcessMonitoringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProcessMonitoringArgs $;

        public Builder() {
            $ = new ProcessMonitoringArgs();
        }

        public Builder(ProcessMonitoringArgs defaults) {
            $ = new ProcessMonitoringArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoMonitoring By disabling automatic deep monitoring the Dynatrace OneAgent will only deep monitor processes that are covered by a respective deep monitoring rule or where monitoring is enabled explicitly.
         * Disabling only works if all installed Agents have version 1.123 or higher.
         * 
         * @return builder
         * 
         */
        public Builder autoMonitoring(Output<Boolean> autoMonitoring) {
            $.autoMonitoring = autoMonitoring;
            return this;
        }

        /**
         * @param autoMonitoring By disabling automatic deep monitoring the Dynatrace OneAgent will only deep monitor processes that are covered by a respective deep monitoring rule or where monitoring is enabled explicitly.
         * Disabling only works if all installed Agents have version 1.123 or higher.
         * 
         * @return builder
         * 
         */
        public Builder autoMonitoring(Boolean autoMonitoring) {
            return autoMonitoring(Output.of(autoMonitoring));
        }

        /**
         * @param hostGroupId The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
         * 
         * @return builder
         * 
         */
        public Builder hostGroupId(@Nullable Output<String> hostGroupId) {
            $.hostGroupId = hostGroupId;
            return this;
        }

        /**
         * @param hostGroupId The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
         * 
         * @return builder
         * 
         */
        public Builder hostGroupId(String hostGroupId) {
            return hostGroupId(Output.of(hostGroupId));
        }

        public ProcessMonitoringArgs build() {
            $.autoMonitoring = Objects.requireNonNull($.autoMonitoring, "expected parameter 'autoMonitoring' to be non-null");
            return $;
        }
    }

}
