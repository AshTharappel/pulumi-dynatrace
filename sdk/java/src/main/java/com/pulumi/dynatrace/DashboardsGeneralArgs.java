// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DashboardsGeneralDefaultDashboardListArgs;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardsGeneralArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardsGeneralArgs Empty = new DashboardsGeneralArgs();

    /**
     * Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page for this environment.
     * 
     */
    @Import(name="defaultDashboardList")
    private @Nullable Output<DashboardsGeneralDefaultDashboardListArgs> defaultDashboardList;

    /**
     * @return Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page for this environment.
     * 
     */
    public Optional<Output<DashboardsGeneralDefaultDashboardListArgs>> defaultDashboardList() {
        return Optional.ofNullable(this.defaultDashboardList);
    }

    /**
     * Allow users to grant anonymous access to dashboards. No sign-in will be required to view those dashboards read-only.
     * 
     */
    @Import(name="enablePublicSharing", required=true)
    private Output<Boolean> enablePublicSharing;

    /**
     * @return Allow users to grant anonymous access to dashboards. No sign-in will be required to view those dashboards read-only.
     * 
     */
    public Output<Boolean> enablePublicSharing() {
        return this.enablePublicSharing;
    }

    private DashboardsGeneralArgs() {}

    private DashboardsGeneralArgs(DashboardsGeneralArgs $) {
        this.defaultDashboardList = $.defaultDashboardList;
        this.enablePublicSharing = $.enablePublicSharing;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardsGeneralArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardsGeneralArgs $;

        public Builder() {
            $ = new DashboardsGeneralArgs();
        }

        public Builder(DashboardsGeneralArgs defaults) {
            $ = new DashboardsGeneralArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultDashboardList Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page for this environment.
         * 
         * @return builder
         * 
         */
        public Builder defaultDashboardList(@Nullable Output<DashboardsGeneralDefaultDashboardListArgs> defaultDashboardList) {
            $.defaultDashboardList = defaultDashboardList;
            return this;
        }

        /**
         * @param defaultDashboardList Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page for this environment.
         * 
         * @return builder
         * 
         */
        public Builder defaultDashboardList(DashboardsGeneralDefaultDashboardListArgs defaultDashboardList) {
            return defaultDashboardList(Output.of(defaultDashboardList));
        }

        /**
         * @param enablePublicSharing Allow users to grant anonymous access to dashboards. No sign-in will be required to view those dashboards read-only.
         * 
         * @return builder
         * 
         */
        public Builder enablePublicSharing(Output<Boolean> enablePublicSharing) {
            $.enablePublicSharing = enablePublicSharing;
            return this;
        }

        /**
         * @param enablePublicSharing Allow users to grant anonymous access to dashboards. No sign-in will be required to view those dashboards read-only.
         * 
         * @return builder
         * 
         */
        public Builder enablePublicSharing(Boolean enablePublicSharing) {
            return enablePublicSharing(Output.of(enablePublicSharing));
        }

        public DashboardsGeneralArgs build() {
            $.enablePublicSharing = Objects.requireNonNull($.enablePublicSharing, "expected parameter 'enablePublicSharing' to be non-null");
            return $;
        }
    }

}
