// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DashboardTileBoundsArgs;
import com.pulumi.dynatrace.inputs.DashboardTileFilterArgs;
import com.pulumi.dynatrace.inputs.DashboardTileFilterConfigArgs;
import com.pulumi.dynatrace.inputs.DashboardTileVisualizationConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardTileArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardTileArgs Empty = new DashboardTileArgs();

    /**
     * The list of Dynatrace entities, assigned to the tile
     * 
     */
    @Import(name="assignedEntities")
    private @Nullable Output<List<String>> assignedEntities;

    /**
     * @return The list of Dynatrace entities, assigned to the tile
     * 
     */
    public Optional<Output<List<String>>> assignedEntities() {
        return Optional.ofNullable(this.assignedEntities);
    }

    /**
     * the position and size of a tile
     * 
     */
    @Import(name="bounds")
    private @Nullable Output<DashboardTileBoundsArgs> bounds;

    /**
     * @return the position and size of a tile
     * 
     */
    public Optional<Output<DashboardTileBoundsArgs>> bounds() {
        return Optional.ofNullable(this.bounds);
    }

    @Import(name="chartVisible")
    private @Nullable Output<Boolean> chartVisible;

    public Optional<Output<Boolean>> chartVisible() {
        return Optional.ofNullable(this.chartVisible);
    }

    /**
     * The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`)
     * 
     */
    @Import(name="configured")
    private @Nullable Output<Boolean> configured;

    /**
     * @return The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`)
     * 
     */
    public Optional<Output<Boolean>> configured() {
        return Optional.ofNullable(this.configured);
    }

    /**
     * The name of the tile, set by user
     * 
     */
    @Import(name="customName")
    private @Nullable Output<String> customName;

    /**
     * @return The name of the tile, set by user
     * 
     */
    public Optional<Output<String>> customName() {
        return Optional.ofNullable(this.customName);
    }

    /**
     * Include (`false&#39;) or exclude (`true`) maintenance windows from availability calculations
     * 
     */
    @Import(name="excludeMaintenanceWindows")
    private @Nullable Output<Boolean> excludeMaintenanceWindows;

    /**
     * @return Include (`false&#39;) or exclude (`true`) maintenance windows from availability calculations
     * 
     */
    public Optional<Output<Boolean>> excludeMaintenanceWindows() {
        return Optional.ofNullable(this.excludeMaintenanceWindows);
    }

    /**
     * is filter applied to a tile. It overrides dashboard&#39;s filter
     * 
     */
    @Import(name="filter")
    private @Nullable Output<DashboardTileFilterArgs> filter;

    /**
     * @return is filter applied to a tile. It overrides dashboard&#39;s filter
     * 
     */
    public Optional<Output<DashboardTileFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * the position and size of a tile
     * 
     */
    @Import(name="filterConfig")
    private @Nullable Output<DashboardTileFilterConfigArgs> filterConfig;

    /**
     * @return the position and size of a tile
     * 
     */
    public Optional<Output<DashboardTileFilterConfigArgs>> filterConfig() {
        return Optional.ofNullable(this.filterConfig);
    }

    /**
     * The limit of the results, if not set will use the default value of the system
     * 
     */
    @Import(name="limit")
    private @Nullable Output<Integer> limit;

    /**
     * @return The limit of the results, if not set will use the default value of the system
     * 
     */
    public Optional<Output<Integer>> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * The markdown-formatted content of the tile
     * 
     */
    @Import(name="markdown")
    private @Nullable Output<String> markdown;

    /**
     * @return The markdown-formatted content of the tile
     * 
     */
    public Optional<Output<String>> markdown() {
        return Optional.ofNullable(this.markdown);
    }

    /**
     * The metric assigned to the tile
     * 
     */
    @Import(name="metric")
    private @Nullable Output<String> metric;

    /**
     * @return The metric assigned to the tile
     * 
     */
    public Optional<Output<String>> metric() {
        return Optional.ofNullable(this.metric);
    }

    /**
     * the name of the tile
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return the name of the tile
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The size of the tile name. Possible values are `small`, `medium` and `large`.
     * 
     */
    @Import(name="nameSize")
    private @Nullable Output<String> nameSize;

    /**
     * @return The size of the tile name. Possible values are `small`, `medium` and `large`.
     * 
     */
    public Optional<Output<String>> nameSize() {
        return Optional.ofNullable(this.nameSize);
    }

    /**
     * A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
     * 
     */
    @Import(name="tileType", required=true)
    private Output<String> tileType;

    /**
     * @return the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
     * 
     */
    public Output<String> tileType() {
        return this.tileType;
    }

    /**
     * The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
     * 
     */
    @Import(name="timeFrameShift")
    private @Nullable Output<String> timeFrameShift;

    /**
     * @return The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
     * 
     */
    public Optional<Output<String>> timeFrameShift() {
        return Optional.ofNullable(this.timeFrameShift);
    }

    /**
     * The attribute `type` exists for backwards compatibilty. Usage is discouraged. You should use `visualization` instead.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The attribute `type` exists for backwards compatibilty. Usage is discouraged. You should use `visualization` instead.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    /**
     * The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
     * 
     */
    @Import(name="visualization")
    private @Nullable Output<String> visualization;

    /**
     * @return The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
     * 
     */
    public Optional<Output<String>> visualization() {
        return Optional.ofNullable(this.visualization);
    }

    /**
     * Configuration of a User session query visualization tile
     * 
     */
    @Import(name="visualizationConfig")
    private @Nullable Output<DashboardTileVisualizationConfigArgs> visualizationConfig;

    /**
     * @return Configuration of a User session query visualization tile
     * 
     */
    public Optional<Output<DashboardTileVisualizationConfigArgs>> visualizationConfig() {
        return Optional.ofNullable(this.visualizationConfig);
    }

    private DashboardTileArgs() {}

    private DashboardTileArgs(DashboardTileArgs $) {
        this.assignedEntities = $.assignedEntities;
        this.bounds = $.bounds;
        this.chartVisible = $.chartVisible;
        this.configured = $.configured;
        this.customName = $.customName;
        this.excludeMaintenanceWindows = $.excludeMaintenanceWindows;
        this.filter = $.filter;
        this.filterConfig = $.filterConfig;
        this.limit = $.limit;
        this.markdown = $.markdown;
        this.metric = $.metric;
        this.name = $.name;
        this.nameSize = $.nameSize;
        this.query = $.query;
        this.tileType = $.tileType;
        this.timeFrameShift = $.timeFrameShift;
        this.type = $.type;
        this.unknowns = $.unknowns;
        this.visualization = $.visualization;
        this.visualizationConfig = $.visualizationConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardTileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardTileArgs $;

        public Builder() {
            $ = new DashboardTileArgs();
        }

        public Builder(DashboardTileArgs defaults) {
            $ = new DashboardTileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignedEntities The list of Dynatrace entities, assigned to the tile
         * 
         * @return builder
         * 
         */
        public Builder assignedEntities(@Nullable Output<List<String>> assignedEntities) {
            $.assignedEntities = assignedEntities;
            return this;
        }

        /**
         * @param assignedEntities The list of Dynatrace entities, assigned to the tile
         * 
         * @return builder
         * 
         */
        public Builder assignedEntities(List<String> assignedEntities) {
            return assignedEntities(Output.of(assignedEntities));
        }

        /**
         * @param assignedEntities The list of Dynatrace entities, assigned to the tile
         * 
         * @return builder
         * 
         */
        public Builder assignedEntities(String... assignedEntities) {
            return assignedEntities(List.of(assignedEntities));
        }

        /**
         * @param bounds the position and size of a tile
         * 
         * @return builder
         * 
         */
        public Builder bounds(@Nullable Output<DashboardTileBoundsArgs> bounds) {
            $.bounds = bounds;
            return this;
        }

        /**
         * @param bounds the position and size of a tile
         * 
         * @return builder
         * 
         */
        public Builder bounds(DashboardTileBoundsArgs bounds) {
            return bounds(Output.of(bounds));
        }

        public Builder chartVisible(@Nullable Output<Boolean> chartVisible) {
            $.chartVisible = chartVisible;
            return this;
        }

        public Builder chartVisible(Boolean chartVisible) {
            return chartVisible(Output.of(chartVisible));
        }

        /**
         * @param configured The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`)
         * 
         * @return builder
         * 
         */
        public Builder configured(@Nullable Output<Boolean> configured) {
            $.configured = configured;
            return this;
        }

        /**
         * @param configured The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`)
         * 
         * @return builder
         * 
         */
        public Builder configured(Boolean configured) {
            return configured(Output.of(configured));
        }

        /**
         * @param customName The name of the tile, set by user
         * 
         * @return builder
         * 
         */
        public Builder customName(@Nullable Output<String> customName) {
            $.customName = customName;
            return this;
        }

        /**
         * @param customName The name of the tile, set by user
         * 
         * @return builder
         * 
         */
        public Builder customName(String customName) {
            return customName(Output.of(customName));
        }

        /**
         * @param excludeMaintenanceWindows Include (`false&#39;) or exclude (`true`) maintenance windows from availability calculations
         * 
         * @return builder
         * 
         */
        public Builder excludeMaintenanceWindows(@Nullable Output<Boolean> excludeMaintenanceWindows) {
            $.excludeMaintenanceWindows = excludeMaintenanceWindows;
            return this;
        }

        /**
         * @param excludeMaintenanceWindows Include (`false&#39;) or exclude (`true`) maintenance windows from availability calculations
         * 
         * @return builder
         * 
         */
        public Builder excludeMaintenanceWindows(Boolean excludeMaintenanceWindows) {
            return excludeMaintenanceWindows(Output.of(excludeMaintenanceWindows));
        }

        /**
         * @param filter is filter applied to a tile. It overrides dashboard&#39;s filter
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<DashboardTileFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter is filter applied to a tile. It overrides dashboard&#39;s filter
         * 
         * @return builder
         * 
         */
        public Builder filter(DashboardTileFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param filterConfig the position and size of a tile
         * 
         * @return builder
         * 
         */
        public Builder filterConfig(@Nullable Output<DashboardTileFilterConfigArgs> filterConfig) {
            $.filterConfig = filterConfig;
            return this;
        }

        /**
         * @param filterConfig the position and size of a tile
         * 
         * @return builder
         * 
         */
        public Builder filterConfig(DashboardTileFilterConfigArgs filterConfig) {
            return filterConfig(Output.of(filterConfig));
        }

        /**
         * @param limit The limit of the results, if not set will use the default value of the system
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable Output<Integer> limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param limit The limit of the results, if not set will use the default value of the system
         * 
         * @return builder
         * 
         */
        public Builder limit(Integer limit) {
            return limit(Output.of(limit));
        }

        /**
         * @param markdown The markdown-formatted content of the tile
         * 
         * @return builder
         * 
         */
        public Builder markdown(@Nullable Output<String> markdown) {
            $.markdown = markdown;
            return this;
        }

        /**
         * @param markdown The markdown-formatted content of the tile
         * 
         * @return builder
         * 
         */
        public Builder markdown(String markdown) {
            return markdown(Output.of(markdown));
        }

        /**
         * @param metric The metric assigned to the tile
         * 
         * @return builder
         * 
         */
        public Builder metric(@Nullable Output<String> metric) {
            $.metric = metric;
            return this;
        }

        /**
         * @param metric The metric assigned to the tile
         * 
         * @return builder
         * 
         */
        public Builder metric(String metric) {
            return metric(Output.of(metric));
        }

        /**
         * @param name the name of the tile
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name the name of the tile
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nameSize The size of the tile name. Possible values are `small`, `medium` and `large`.
         * 
         * @return builder
         * 
         */
        public Builder nameSize(@Nullable Output<String> nameSize) {
            $.nameSize = nameSize;
            return this;
        }

        /**
         * @param nameSize The size of the tile name. Possible values are `small`, `medium` and `large`.
         * 
         * @return builder
         * 
         */
        public Builder nameSize(String nameSize) {
            return nameSize(Output.of(nameSize));
        }

        /**
         * @param query A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param tileType the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
         * 
         * @return builder
         * 
         */
        public Builder tileType(Output<String> tileType) {
            $.tileType = tileType;
            return this;
        }

        /**
         * @param tileType the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
         * 
         * @return builder
         * 
         */
        public Builder tileType(String tileType) {
            return tileType(Output.of(tileType));
        }

        /**
         * @param timeFrameShift The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
         * 
         * @return builder
         * 
         */
        public Builder timeFrameShift(@Nullable Output<String> timeFrameShift) {
            $.timeFrameShift = timeFrameShift;
            return this;
        }

        /**
         * @param timeFrameShift The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
         * 
         * @return builder
         * 
         */
        public Builder timeFrameShift(String timeFrameShift) {
            return timeFrameShift(Output.of(timeFrameShift));
        }

        /**
         * @param type The attribute `type` exists for backwards compatibilty. Usage is discouraged. You should use `visualization` instead.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The attribute `type` exists for backwards compatibilty. Usage is discouraged. You should use `visualization` instead.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        /**
         * @param visualization The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
         * 
         * @return builder
         * 
         */
        public Builder visualization(@Nullable Output<String> visualization) {
            $.visualization = visualization;
            return this;
        }

        /**
         * @param visualization The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
         * 
         * @return builder
         * 
         */
        public Builder visualization(String visualization) {
            return visualization(Output.of(visualization));
        }

        /**
         * @param visualizationConfig Configuration of a User session query visualization tile
         * 
         * @return builder
         * 
         */
        public Builder visualizationConfig(@Nullable Output<DashboardTileVisualizationConfigArgs> visualizationConfig) {
            $.visualizationConfig = visualizationConfig;
            return this;
        }

        /**
         * @param visualizationConfig Configuration of a User session query visualization tile
         * 
         * @return builder
         * 
         */
        public Builder visualizationConfig(DashboardTileVisualizationConfigArgs visualizationConfig) {
            return visualizationConfig(Output.of(visualizationConfig));
        }

        public DashboardTileArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.tileType = Objects.requireNonNull($.tileType, "expected parameter 'tileType' to be non-null");
            return $;
        }
    }

}
