// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IamPolicyBindingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final IamPolicyBindingsArgs Empty = new IamPolicyBindingsArgs();

    /**
     * The UUID of the account (`urn:dtaccount:&lt;account-uuid&gt;`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
     * 
     */
    @Import(name="account")
    private @Nullable Output<String> account;

    /**
     * @return The UUID of the account (`urn:dtaccount:&lt;account-uuid&gt;`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
     * 
     */
    public Optional<Output<String>> account() {
        return Optional.ofNullable(this.account);
    }

    /**
     * The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
     * 
     */
    @Import(name="environment")
    private @Nullable Output<String> environment;

    /**
     * @return The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
     * 
     */
    public Optional<Output<String>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * The name of the policy
     * 
     */
    @Import(name="group", required=true)
    private Output<String> group;

    /**
     * @return The name of the policy
     * 
     */
    public Output<String> group() {
        return this.group;
    }

    /**
     * A list of IDs referring to policies bound to that group. It&#39;s not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
     * 
     */
    @Import(name="policies", required=true)
    private Output<List<String>> policies;

    /**
     * @return A list of IDs referring to policies bound to that group. It&#39;s not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
     * 
     */
    public Output<List<String>> policies() {
        return this.policies;
    }

    private IamPolicyBindingsArgs() {}

    private IamPolicyBindingsArgs(IamPolicyBindingsArgs $) {
        this.account = $.account;
        this.environment = $.environment;
        this.group = $.group;
        this.policies = $.policies;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IamPolicyBindingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IamPolicyBindingsArgs $;

        public Builder() {
            $ = new IamPolicyBindingsArgs();
        }

        public Builder(IamPolicyBindingsArgs defaults) {
            $ = new IamPolicyBindingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param account The UUID of the account (`urn:dtaccount:&lt;account-uuid&gt;`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
         * 
         * @return builder
         * 
         */
        public Builder account(@Nullable Output<String> account) {
            $.account = account;
            return this;
        }

        /**
         * @param account The UUID of the account (`urn:dtaccount:&lt;account-uuid&gt;`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
         * 
         * @return builder
         * 
         */
        public Builder account(String account) {
            return account(Output.of(account));
        }

        /**
         * @param environment The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param group The name of the policy
         * 
         * @return builder
         * 
         */
        public Builder group(Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group The name of the policy
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param policies A list of IDs referring to policies bound to that group. It&#39;s not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
         * 
         * @return builder
         * 
         */
        public Builder policies(Output<List<String>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies A list of IDs referring to policies bound to that group. It&#39;s not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
         * 
         * @return builder
         * 
         */
        public Builder policies(List<String> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies A list of IDs referring to policies bound to that group. It&#39;s not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
         * 
         * @return builder
         * 
         */
        public Builder policies(String... policies) {
            return policies(List.of(policies));
        }

        public IamPolicyBindingsArgs build() {
            $.group = Objects.requireNonNull($.group, "expected parameter 'group' to be non-null");
            $.policies = Objects.requireNonNull($.policies, "expected parameter 'policies' to be non-null");
            return $;
        }
    }

}
