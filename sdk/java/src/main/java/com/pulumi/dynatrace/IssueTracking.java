// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.IssueTrackingArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.IssueTrackingState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/issueTracking:IssueTracking")
public class IssueTracking extends com.pulumi.resources.CustomResource {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * Set a label to identify these issues, for example, `release_blocker` or `non-critical`
     * 
     */
    @Export(name="issuelabel", refs={String.class}, tree="[0]")
    private Output<String> issuelabel;

    /**
     * @return Set a label to identify these issues, for example, `release_blocker` or `non-critical`
     * 
     */
    public Output<String> issuelabel() {
        return this.issuelabel;
    }
    /**
     * You can use the following placeholders to automatically insert values from the **Release monitoring** page in your query: `{NAME}`, `{VERSION}`, `{STAGE}`, `{PRODUCT}`.
     * 
     */
    @Export(name="issuequery", refs={String.class}, tree="[0]")
    private Output<String> issuequery;

    /**
     * @return You can use the following placeholders to automatically insert values from the **Release monitoring** page in your query: `{NAME}`, `{VERSION}`, `{STAGE}`, `{PRODUCT}`.
     * 
     */
    public Output<String> issuequery() {
        return this.issuequery;
    }
    /**
     * Possible Values: `ERROR`, `INFO`, `RESOLVED`
     * 
     */
    @Export(name="issuetheme", refs={String.class}, tree="[0]")
    private Output<String> issuetheme;

    /**
     * @return Possible Values: `ERROR`, `INFO`, `RESOLVED`
     * 
     */
    public Output<String> issuetheme() {
        return this.issuetheme;
    }
    /**
     * Possible Values: `GITHUB`, `GITLAB`, `JIRA`, `JIRA_CLOUD`, `JIRA_ON_PREMISE`, `SERVICENOW`
     * 
     */
    @Export(name="issuetrackersystem", refs={String.class}, tree="[0]")
    private Output<String> issuetrackersystem;

    /**
     * @return Possible Values: `GITHUB`, `GITLAB`, `JIRA`, `JIRA_CLOUD`, `JIRA_ON_PREMISE`, `SERVICENOW`
     * 
     */
    public Output<String> issuetrackersystem() {
        return this.issuetrackersystem;
    }
    /**
     * Password
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> password;

    /**
     * @return Password
     * 
     */
    public Output<Optional<String>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * Token
     * 
     */
    @Export(name="token", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> token;

    /**
     * @return Token
     * 
     */
    public Output<Optional<String>> token() {
        return Codegen.optional(this.token);
    }
    /**
     * For Jira, use the base URL (for example, https://jira.yourcompany.com); for GitHub, use the repository URL (for example, https://github.com/org/repo); for GitLab, use the specific project API for a single project (for example, https://gitlab.com/api/v4/projects/:projectId), and the specific group API for a multiple projects (for example, https://gitlab.com/api/v4/groups/:groupId); for ServiceNow, use your company instance URL (for example, https://yourinstance.service-now.com/)
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return For Jira, use the base URL (for example, https://jira.yourcompany.com); for GitHub, use the repository URL (for example, https://github.com/org/repo); for GitLab, use the specific project API for a single project (for example, https://gitlab.com/api/v4/projects/:projectId), and the specific group API for a multiple projects (for example, https://gitlab.com/api/v4/groups/:groupId); for ServiceNow, use your company instance URL (for example, https://yourinstance.service-now.com/)
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * Username
     * 
     */
    @Export(name="username", refs={String.class}, tree="[0]")
    private Output<String> username;

    /**
     * @return Username
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public IssueTracking(String name) {
        this(name, IssueTrackingArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public IssueTracking(String name, IssueTrackingArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public IssueTracking(String name, IssueTrackingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/issueTracking:IssueTracking", name, args == null ? IssueTrackingArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private IssueTracking(String name, Output<String> id, @Nullable IssueTrackingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/issueTracking:IssueTracking", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "token"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static IssueTracking get(String name, Output<String> id, @Nullable IssueTrackingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new IssueTracking(name, id, state, options);
    }
}
