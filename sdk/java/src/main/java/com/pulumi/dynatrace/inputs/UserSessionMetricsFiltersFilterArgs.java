// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserSessionMetricsFiltersFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserSessionMetricsFiltersFilterArgs Empty = new UserSessionMetricsFiltersFilterArgs();

    @Import(name="fieldName", required=true)
    private Output<String> fieldName;

    public Output<String> fieldName() {
        return this.fieldName;
    }

    @Import(name="operator", required=true)
    private Output<String> operator;

    public Output<String> operator() {
        return this.operator;
    }

    /**
     * Defines the type of value to be extracted from the user session. When using **User session counter**, the number of user sessions is counted (similar to count(*) when using USQL). When using **User session field value**, the value of a user session field is extracted.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return Defines the type of value to be extracted from the user session. When using **User session counter**, the number of user sessions is counted (similar to count(*) when using USQL). When using **User session field value**, the value of a user session field is extracted.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    @Import(name="valueIns")
    private @Nullable Output<List<String>> valueIns;

    public Optional<Output<List<String>>> valueIns() {
        return Optional.ofNullable(this.valueIns);
    }

    private UserSessionMetricsFiltersFilterArgs() {}

    private UserSessionMetricsFiltersFilterArgs(UserSessionMetricsFiltersFilterArgs $) {
        this.fieldName = $.fieldName;
        this.operator = $.operator;
        this.value = $.value;
        this.valueIns = $.valueIns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserSessionMetricsFiltersFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserSessionMetricsFiltersFilterArgs $;

        public Builder() {
            $ = new UserSessionMetricsFiltersFilterArgs();
        }

        public Builder(UserSessionMetricsFiltersFilterArgs defaults) {
            $ = new UserSessionMetricsFiltersFilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder fieldName(Output<String> fieldName) {
            $.fieldName = fieldName;
            return this;
        }

        public Builder fieldName(String fieldName) {
            return fieldName(Output.of(fieldName));
        }

        public Builder operator(Output<String> operator) {
            $.operator = operator;
            return this;
        }

        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param value Defines the type of value to be extracted from the user session. When using **User session counter**, the number of user sessions is counted (similar to count(*) when using USQL). When using **User session field value**, the value of a user session field is extracted.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Defines the type of value to be extracted from the user session. When using **User session counter**, the number of user sessions is counted (similar to count(*) when using USQL). When using **User session field value**, the value of a user session field is extracted.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public Builder valueIns(@Nullable Output<List<String>> valueIns) {
            $.valueIns = valueIns;
            return this;
        }

        public Builder valueIns(List<String> valueIns) {
            return valueIns(Output.of(valueIns));
        }

        public Builder valueIns(String... valueIns) {
            return valueIns(List.of(valueIns));
        }

        public UserSessionMetricsFiltersFilterArgs build() {
            $.fieldName = Objects.requireNonNull($.fieldName, "expected parameter 'fieldName' to be non-null");
            $.operator = Objects.requireNonNull($.operator, "expected parameter 'operator' to be non-null");
            return $;
        }
    }

}
