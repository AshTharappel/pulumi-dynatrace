// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class FailureDetectionParametersHttpResponseCodesArgs extends com.pulumi.resources.ResourceArgs {

    public static final FailureDetectionParametersHttpResponseCodesArgs Empty = new FailureDetectionParametersHttpResponseCodesArgs();

    /**
     * HTTP response codes which indicate client side errors
     * 
     */
    @Import(name="clientSideErrors", required=true)
    private Output<String> clientSideErrors;

    /**
     * @return HTTP response codes which indicate client side errors
     * 
     */
    public Output<String> clientSideErrors() {
        return this.clientSideErrors;
    }

    /**
     * Treat missing HTTP response code as client side error
     * 
     */
    @Import(name="failOnMissingResponseCodeClientSide", required=true)
    private Output<Boolean> failOnMissingResponseCodeClientSide;

    /**
     * @return Treat missing HTTP response code as client side error
     * 
     */
    public Output<Boolean> failOnMissingResponseCodeClientSide() {
        return this.failOnMissingResponseCodeClientSide;
    }

    /**
     * Treat missing HTTP response code as server side errors
     * 
     */
    @Import(name="failOnMissingResponseCodeServerSide", required=true)
    private Output<Boolean> failOnMissingResponseCodeServerSide;

    /**
     * @return Treat missing HTTP response code as server side errors
     * 
     */
    public Output<Boolean> failOnMissingResponseCodeServerSide() {
        return this.failOnMissingResponseCodeServerSide;
    }

    /**
     * HTTP response codes which indicate an error on the server side
     * 
     */
    @Import(name="serverSideErrors", required=true)
    private Output<String> serverSideErrors;

    /**
     * @return HTTP response codes which indicate an error on the server side
     * 
     */
    public Output<String> serverSideErrors() {
        return this.serverSideErrors;
    }

    private FailureDetectionParametersHttpResponseCodesArgs() {}

    private FailureDetectionParametersHttpResponseCodesArgs(FailureDetectionParametersHttpResponseCodesArgs $) {
        this.clientSideErrors = $.clientSideErrors;
        this.failOnMissingResponseCodeClientSide = $.failOnMissingResponseCodeClientSide;
        this.failOnMissingResponseCodeServerSide = $.failOnMissingResponseCodeServerSide;
        this.serverSideErrors = $.serverSideErrors;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FailureDetectionParametersHttpResponseCodesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FailureDetectionParametersHttpResponseCodesArgs $;

        public Builder() {
            $ = new FailureDetectionParametersHttpResponseCodesArgs();
        }

        public Builder(FailureDetectionParametersHttpResponseCodesArgs defaults) {
            $ = new FailureDetectionParametersHttpResponseCodesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientSideErrors HTTP response codes which indicate client side errors
         * 
         * @return builder
         * 
         */
        public Builder clientSideErrors(Output<String> clientSideErrors) {
            $.clientSideErrors = clientSideErrors;
            return this;
        }

        /**
         * @param clientSideErrors HTTP response codes which indicate client side errors
         * 
         * @return builder
         * 
         */
        public Builder clientSideErrors(String clientSideErrors) {
            return clientSideErrors(Output.of(clientSideErrors));
        }

        /**
         * @param failOnMissingResponseCodeClientSide Treat missing HTTP response code as client side error
         * 
         * @return builder
         * 
         */
        public Builder failOnMissingResponseCodeClientSide(Output<Boolean> failOnMissingResponseCodeClientSide) {
            $.failOnMissingResponseCodeClientSide = failOnMissingResponseCodeClientSide;
            return this;
        }

        /**
         * @param failOnMissingResponseCodeClientSide Treat missing HTTP response code as client side error
         * 
         * @return builder
         * 
         */
        public Builder failOnMissingResponseCodeClientSide(Boolean failOnMissingResponseCodeClientSide) {
            return failOnMissingResponseCodeClientSide(Output.of(failOnMissingResponseCodeClientSide));
        }

        /**
         * @param failOnMissingResponseCodeServerSide Treat missing HTTP response code as server side errors
         * 
         * @return builder
         * 
         */
        public Builder failOnMissingResponseCodeServerSide(Output<Boolean> failOnMissingResponseCodeServerSide) {
            $.failOnMissingResponseCodeServerSide = failOnMissingResponseCodeServerSide;
            return this;
        }

        /**
         * @param failOnMissingResponseCodeServerSide Treat missing HTTP response code as server side errors
         * 
         * @return builder
         * 
         */
        public Builder failOnMissingResponseCodeServerSide(Boolean failOnMissingResponseCodeServerSide) {
            return failOnMissingResponseCodeServerSide(Output.of(failOnMissingResponseCodeServerSide));
        }

        /**
         * @param serverSideErrors HTTP response codes which indicate an error on the server side
         * 
         * @return builder
         * 
         */
        public Builder serverSideErrors(Output<String> serverSideErrors) {
            $.serverSideErrors = serverSideErrors;
            return this;
        }

        /**
         * @param serverSideErrors HTTP response codes which indicate an error on the server side
         * 
         * @return builder
         * 
         */
        public Builder serverSideErrors(String serverSideErrors) {
            return serverSideErrors(Output.of(serverSideErrors));
        }

        public FailureDetectionParametersHttpResponseCodesArgs build() {
            $.clientSideErrors = Objects.requireNonNull($.clientSideErrors, "expected parameter 'clientSideErrors' to be non-null");
            $.failOnMissingResponseCodeClientSide = Objects.requireNonNull($.failOnMissingResponseCodeClientSide, "expected parameter 'failOnMissingResponseCodeClientSide' to be non-null");
            $.failOnMissingResponseCodeServerSide = Objects.requireNonNull($.failOnMissingResponseCodeServerSide, "expected parameter 'failOnMissingResponseCodeServerSide' to be non-null");
            $.serverSideErrors = Objects.requireNonNull($.serverSideErrors, "expected parameter 'serverSideErrors' to be non-null");
            return $;
        }
    }

}
