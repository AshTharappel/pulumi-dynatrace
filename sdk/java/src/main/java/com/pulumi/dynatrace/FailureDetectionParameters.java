// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.FailureDetectionParametersArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.FailureDetectionParametersState;
import com.pulumi.dynatrace.outputs.FailureDetectionParametersBrokenLinks;
import com.pulumi.dynatrace.outputs.FailureDetectionParametersExceptionRules;
import com.pulumi.dynatrace.outputs.FailureDetectionParametersHttpResponseCodes;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/failureDetectionParameters:FailureDetectionParameters")
public class FailureDetectionParameters extends com.pulumi.resources.CustomResource {
    /**
     * HTTP 404 response codes are thrown when a web server can&#39;t find a certain page. 404s are classified as broken links on the client side and therefore aren&#39;t considered to be service failures. By enabling this setting, you can have 404s treated as server-side service failures.
     * 
     */
    @Export(name="brokenLinks", refs={FailureDetectionParametersBrokenLinks.class}, tree="[0]")
    private Output<FailureDetectionParametersBrokenLinks> brokenLinks;

    /**
     * @return HTTP 404 response codes are thrown when a web server can&#39;t find a certain page. 404s are classified as broken links on the client side and therefore aren&#39;t considered to be service failures. By enabling this setting, you can have 404s treated as server-side service failures.
     * 
     */
    public Output<FailureDetectionParametersBrokenLinks> brokenLinks() {
        return this.brokenLinks;
    }
    /**
     * Description
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Customize failure detection for specific exceptions and errors
     * 
     */
    @Export(name="exceptionRules", refs={FailureDetectionParametersExceptionRules.class}, tree="[0]")
    private Output<FailureDetectionParametersExceptionRules> exceptionRules;

    /**
     * @return Customize failure detection for specific exceptions and errors
     * 
     */
    public Output<FailureDetectionParametersExceptionRules> exceptionRules() {
        return this.exceptionRules;
    }
    /**
     * HTTP response codes
     * 
     */
    @Export(name="httpResponseCodes", refs={FailureDetectionParametersHttpResponseCodes.class}, tree="[0]")
    private Output<FailureDetectionParametersHttpResponseCodes> httpResponseCodes;

    /**
     * @return HTTP response codes
     * 
     */
    public Output<FailureDetectionParametersHttpResponseCodes> httpResponseCodes() {
        return this.httpResponseCodes;
    }
    /**
     * Name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public FailureDetectionParameters(String name) {
        this(name, FailureDetectionParametersArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public FailureDetectionParameters(String name, FailureDetectionParametersArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public FailureDetectionParameters(String name, FailureDetectionParametersArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/failureDetectionParameters:FailureDetectionParameters", name, args == null ? FailureDetectionParametersArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private FailureDetectionParameters(String name, Output<String> id, @Nullable FailureDetectionParametersState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/failureDetectionParameters:FailureDetectionParameters", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static FailureDetectionParameters get(String name, Output<String> id, @Nullable FailureDetectionParametersState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new FailureDetectionParameters(name, id, state, options);
    }
}
