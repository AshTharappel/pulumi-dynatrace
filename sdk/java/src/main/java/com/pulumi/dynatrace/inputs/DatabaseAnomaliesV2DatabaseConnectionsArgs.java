// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseAnomaliesV2DatabaseConnectionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseAnomaliesV2DatabaseConnectionsArgs Empty = new DatabaseAnomaliesV2DatabaseConnectionsArgs();

    /**
     * Detect failed database connects
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Detect failed database connects
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Threshold
     * 
     */
    @Import(name="maxFailedConnects")
    private @Nullable Output<Integer> maxFailedConnects;

    /**
     * @return Threshold
     * 
     */
    public Optional<Output<Integer>> maxFailedConnects() {
        return Optional.ofNullable(this.maxFailedConnects);
    }

    /**
     * Time span
     * 
     */
    @Import(name="timePeriod")
    private @Nullable Output<Integer> timePeriod;

    /**
     * @return Time span
     * 
     */
    public Optional<Output<Integer>> timePeriod() {
        return Optional.ofNullable(this.timePeriod);
    }

    private DatabaseAnomaliesV2DatabaseConnectionsArgs() {}

    private DatabaseAnomaliesV2DatabaseConnectionsArgs(DatabaseAnomaliesV2DatabaseConnectionsArgs $) {
        this.enabled = $.enabled;
        this.maxFailedConnects = $.maxFailedConnects;
        this.timePeriod = $.timePeriod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseAnomaliesV2DatabaseConnectionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseAnomaliesV2DatabaseConnectionsArgs $;

        public Builder() {
            $ = new DatabaseAnomaliesV2DatabaseConnectionsArgs();
        }

        public Builder(DatabaseAnomaliesV2DatabaseConnectionsArgs defaults) {
            $ = new DatabaseAnomaliesV2DatabaseConnectionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Detect failed database connects
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Detect failed database connects
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param maxFailedConnects Threshold
         * 
         * @return builder
         * 
         */
        public Builder maxFailedConnects(@Nullable Output<Integer> maxFailedConnects) {
            $.maxFailedConnects = maxFailedConnects;
            return this;
        }

        /**
         * @param maxFailedConnects Threshold
         * 
         * @return builder
         * 
         */
        public Builder maxFailedConnects(Integer maxFailedConnects) {
            return maxFailedConnects(Output.of(maxFailedConnects));
        }

        /**
         * @param timePeriod Time span
         * 
         * @return builder
         * 
         */
        public Builder timePeriod(@Nullable Output<Integer> timePeriod) {
            $.timePeriod = timePeriod;
            return this;
        }

        /**
         * @param timePeriod Time span
         * 
         * @return builder
         * 
         */
        public Builder timePeriod(Integer timePeriod) {
            return timePeriod(Output.of(timePeriod));
        }

        public DatabaseAnomaliesV2DatabaseConnectionsArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
