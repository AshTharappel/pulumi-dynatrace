// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.EmailNotificationArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.EmailNotificationState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/emailNotification:EmailNotification")
public class EmailNotification extends com.pulumi.resources.CustomResource {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    @Export(name="active", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> active;

    /**
     * @return The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Optional<Boolean>> active() {
        return Codegen.optional(this.active);
    }
    /**
     * The list of the email BCC-recipients
     * 
     */
    @Export(name="bccs", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> bccs;

    /**
     * @return The list of the email BCC-recipients
     * 
     */
    public Output<Optional<List<String>>> bccs() {
        return Codegen.optional(this.bccs);
    }
    /**
     * The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     * 
     */
    @Export(name="body", refs={String.class}, tree="[0]")
    private Output<String> body;

    /**
     * @return The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     * 
     */
    public Output<String> body() {
        return this.body;
    }
    /**
     * The list of the email CC-recipients
     * 
     */
    @Export(name="ccs", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> ccs;

    /**
     * @return The list of the email CC-recipients
     * 
     */
    public Output<Optional<List<String>>> ccs() {
        return Codegen.optional(this.ccs);
    }
    /**
     * The ID of these settings when referred to from resources requiring the REST API V1 keys
     * 
     */
    @Export(name="legacyId", refs={String.class}, tree="[0]")
    private Output<String> legacyId;

    /**
     * @return The ID of these settings when referred to from resources requiring the REST API V1 keys
     * 
     */
    public Output<String> legacyId() {
        return this.legacyId;
    }
    /**
     * The name of the notification configuration
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the notification configuration
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Send email if problem is closed
     * 
     */
    @Export(name="notifyClosedProblems", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> notifyClosedProblems;

    /**
     * @return Send email if problem is closed
     * 
     */
    public Output<Optional<Boolean>> notifyClosedProblems() {
        return Codegen.optional(this.notifyClosedProblems);
    }
    /**
     * The ID of the associated alerting profile
     * 
     */
    @Export(name="profile", refs={String.class}, tree="[0]")
    private Output<String> profile;

    /**
     * @return The ID of the associated alerting profile
     * 
     */
    public Output<String> profile() {
        return this.profile;
    }
    /**
     * The subject of the email notifications
     * 
     */
    @Export(name="subject", refs={String.class}, tree="[0]")
    private Output<String> subject;

    /**
     * @return The subject of the email notifications
     * 
     */
    public Output<String> subject() {
        return this.subject;
    }
    /**
     * The list of the email recipients
     * 
     */
    @Export(name="tos", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> tos;

    /**
     * @return The list of the email recipients
     * 
     */
    public Output<List<String>> tos() {
        return this.tos;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EmailNotification(String name) {
        this(name, EmailNotificationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EmailNotification(String name, EmailNotificationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EmailNotification(String name, EmailNotificationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/emailNotification:EmailNotification", name, args == null ? EmailNotificationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private EmailNotification(String name, Output<String> id, @Nullable EmailNotificationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/emailNotification:EmailNotification", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EmailNotification get(String name, Output<String> id, @Nullable EmailNotificationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new EmailNotification(name, id, state, options);
    }
}
