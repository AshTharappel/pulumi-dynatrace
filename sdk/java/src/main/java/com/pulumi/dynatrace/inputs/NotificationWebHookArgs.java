// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.NotificationWebHookHeaderArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationWebHookArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationWebHookArgs Empty = new NotificationWebHookArgs();

    /**
     * Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     * 
     */
    @Import(name="acceptAnyCertificate", required=true)
    private Output<Boolean> acceptAnyCertificate;

    /**
     * @return Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     * 
     */
    public Output<Boolean> acceptAnyCertificate() {
        return this.acceptAnyCertificate;
    }

    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="active", required=true)
    private Output<Boolean> active;

    /**
     * @return The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> active() {
        return this.active;
    }

    /**
     * The ID of the associated alerting profile
     * 
     */
    @Import(name="alertingProfile", required=true)
    private Output<String> alertingProfile;

    /**
     * @return The ID of the associated alerting profile
     * 
     */
    public Output<String> alertingProfile() {
        return this.alertingProfile;
    }

    /**
     * A list of the additional HTTP headers
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<NotificationWebHookHeaderArgs>> headers;

    /**
     * @return A list of the additional HTTP headers
     * 
     */
    public Optional<Output<List<NotificationWebHookHeaderArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * The name of the notification configuration
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the notification configuration
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Call webhook if new events merge into existing problems
     * 
     */
    @Import(name="notifyEventMerges")
    private @Nullable Output<Boolean> notifyEventMerges;

    /**
     * @return Call webhook if new events merge into existing problems
     * 
     */
    public Optional<Output<Boolean>> notifyEventMerges() {
        return Optional.ofNullable(this.notifyEventMerges);
    }

    /**
     * The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     * 
     */
    @Import(name="payload", required=true)
    private Output<String> payload;

    /**
     * @return The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     * 
     */
    public Output<String> payload() {
        return this.payload;
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    /**
     * The URL of the WebHook endpoint
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return The URL of the WebHook endpoint
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    private NotificationWebHookArgs() {}

    private NotificationWebHookArgs(NotificationWebHookArgs $) {
        this.acceptAnyCertificate = $.acceptAnyCertificate;
        this.active = $.active;
        this.alertingProfile = $.alertingProfile;
        this.headers = $.headers;
        this.name = $.name;
        this.notifyEventMerges = $.notifyEventMerges;
        this.payload = $.payload;
        this.unknowns = $.unknowns;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationWebHookArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationWebHookArgs $;

        public Builder() {
            $ = new NotificationWebHookArgs();
        }

        public Builder(NotificationWebHookArgs defaults) {
            $ = new NotificationWebHookArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceptAnyCertificate Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
         * 
         * @return builder
         * 
         */
        public Builder acceptAnyCertificate(Output<Boolean> acceptAnyCertificate) {
            $.acceptAnyCertificate = acceptAnyCertificate;
            return this;
        }

        /**
         * @param acceptAnyCertificate Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
         * 
         * @return builder
         * 
         */
        public Builder acceptAnyCertificate(Boolean acceptAnyCertificate) {
            return acceptAnyCertificate(Output.of(acceptAnyCertificate));
        }

        /**
         * @param active The configuration is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder active(Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active The configuration is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param alertingProfile The ID of the associated alerting profile
         * 
         * @return builder
         * 
         */
        public Builder alertingProfile(Output<String> alertingProfile) {
            $.alertingProfile = alertingProfile;
            return this;
        }

        /**
         * @param alertingProfile The ID of the associated alerting profile
         * 
         * @return builder
         * 
         */
        public Builder alertingProfile(String alertingProfile) {
            return alertingProfile(Output.of(alertingProfile));
        }

        /**
         * @param headers A list of the additional HTTP headers
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<NotificationWebHookHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers A list of the additional HTTP headers
         * 
         * @return builder
         * 
         */
        public Builder headers(List<NotificationWebHookHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers A list of the additional HTTP headers
         * 
         * @return builder
         * 
         */
        public Builder headers(NotificationWebHookHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param name The name of the notification configuration
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the notification configuration
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notifyEventMerges Call webhook if new events merge into existing problems
         * 
         * @return builder
         * 
         */
        public Builder notifyEventMerges(@Nullable Output<Boolean> notifyEventMerges) {
            $.notifyEventMerges = notifyEventMerges;
            return this;
        }

        /**
         * @param notifyEventMerges Call webhook if new events merge into existing problems
         * 
         * @return builder
         * 
         */
        public Builder notifyEventMerges(Boolean notifyEventMerges) {
            return notifyEventMerges(Output.of(notifyEventMerges));
        }

        /**
         * @param payload The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
         * 
         * @return builder
         * 
         */
        public Builder payload(Output<String> payload) {
            $.payload = payload;
            return this;
        }

        /**
         * @param payload The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
         * 
         * @return builder
         * 
         */
        public Builder payload(String payload) {
            return payload(Output.of(payload));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        /**
         * @param url The URL of the WebHook endpoint
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL of the WebHook endpoint
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public NotificationWebHookArgs build() {
            $.acceptAnyCertificate = Objects.requireNonNull($.acceptAnyCertificate, "expected parameter 'acceptAnyCertificate' to be non-null");
            $.active = Objects.requireNonNull($.active, "expected parameter 'active' to be non-null");
            $.alertingProfile = Objects.requireNonNull($.alertingProfile, "expected parameter 'alertingProfile' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.payload = Objects.requireNonNull($.payload, "expected parameter 'payload' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
