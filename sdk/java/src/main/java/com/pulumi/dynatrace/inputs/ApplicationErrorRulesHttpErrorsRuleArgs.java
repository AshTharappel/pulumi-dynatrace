// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationErrorRulesHttpErrorsRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationErrorRulesHttpErrorsRuleArgs Empty = new ApplicationErrorRulesHttpErrorsRuleArgs();

    @Import(name="capture")
    private @Nullable Output<Boolean> capture;

    public Optional<Output<Boolean>> capture() {
        return Optional.ofNullable(this.capture);
    }

    @Import(name="considerBlockedRequests")
    private @Nullable Output<Boolean> considerBlockedRequests;

    public Optional<Output<Boolean>> considerBlockedRequests() {
        return Optional.ofNullable(this.considerBlockedRequests);
    }

    @Import(name="considerForAi")
    private @Nullable Output<Boolean> considerForAi;

    public Optional<Output<Boolean>> considerForAi() {
        return Optional.ofNullable(this.considerForAi);
    }

    @Import(name="considerUnknownErrorCode")
    private @Nullable Output<Boolean> considerUnknownErrorCode;

    public Optional<Output<Boolean>> considerUnknownErrorCode() {
        return Optional.ofNullable(this.considerUnknownErrorCode);
    }

    @Import(name="errorCodes")
    private @Nullable Output<String> errorCodes;

    public Optional<Output<String>> errorCodes() {
        return Optional.ofNullable(this.errorCodes);
    }

    @Import(name="filter")
    private @Nullable Output<String> filter;

    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    @Import(name="filterByUrl")
    private @Nullable Output<Boolean> filterByUrl;

    public Optional<Output<Boolean>> filterByUrl() {
        return Optional.ofNullable(this.filterByUrl);
    }

    @Import(name="impactApdex")
    private @Nullable Output<Boolean> impactApdex;

    public Optional<Output<Boolean>> impactApdex() {
        return Optional.ofNullable(this.impactApdex);
    }

    @Import(name="url")
    private @Nullable Output<String> url;

    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private ApplicationErrorRulesHttpErrorsRuleArgs() {}

    private ApplicationErrorRulesHttpErrorsRuleArgs(ApplicationErrorRulesHttpErrorsRuleArgs $) {
        this.capture = $.capture;
        this.considerBlockedRequests = $.considerBlockedRequests;
        this.considerForAi = $.considerForAi;
        this.considerUnknownErrorCode = $.considerUnknownErrorCode;
        this.errorCodes = $.errorCodes;
        this.filter = $.filter;
        this.filterByUrl = $.filterByUrl;
        this.impactApdex = $.impactApdex;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationErrorRulesHttpErrorsRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationErrorRulesHttpErrorsRuleArgs $;

        public Builder() {
            $ = new ApplicationErrorRulesHttpErrorsRuleArgs();
        }

        public Builder(ApplicationErrorRulesHttpErrorsRuleArgs defaults) {
            $ = new ApplicationErrorRulesHttpErrorsRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder capture(@Nullable Output<Boolean> capture) {
            $.capture = capture;
            return this;
        }

        public Builder capture(Boolean capture) {
            return capture(Output.of(capture));
        }

        public Builder considerBlockedRequests(@Nullable Output<Boolean> considerBlockedRequests) {
            $.considerBlockedRequests = considerBlockedRequests;
            return this;
        }

        public Builder considerBlockedRequests(Boolean considerBlockedRequests) {
            return considerBlockedRequests(Output.of(considerBlockedRequests));
        }

        public Builder considerForAi(@Nullable Output<Boolean> considerForAi) {
            $.considerForAi = considerForAi;
            return this;
        }

        public Builder considerForAi(Boolean considerForAi) {
            return considerForAi(Output.of(considerForAi));
        }

        public Builder considerUnknownErrorCode(@Nullable Output<Boolean> considerUnknownErrorCode) {
            $.considerUnknownErrorCode = considerUnknownErrorCode;
            return this;
        }

        public Builder considerUnknownErrorCode(Boolean considerUnknownErrorCode) {
            return considerUnknownErrorCode(Output.of(considerUnknownErrorCode));
        }

        public Builder errorCodes(@Nullable Output<String> errorCodes) {
            $.errorCodes = errorCodes;
            return this;
        }

        public Builder errorCodes(String errorCodes) {
            return errorCodes(Output.of(errorCodes));
        }

        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        public Builder filterByUrl(@Nullable Output<Boolean> filterByUrl) {
            $.filterByUrl = filterByUrl;
            return this;
        }

        public Builder filterByUrl(Boolean filterByUrl) {
            return filterByUrl(Output.of(filterByUrl));
        }

        public Builder impactApdex(@Nullable Output<Boolean> impactApdex) {
            $.impactApdex = impactApdex;
            return this;
        }

        public Builder impactApdex(Boolean impactApdex) {
            return impactApdex(Output.of(impactApdex));
        }

        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ApplicationErrorRulesHttpErrorsRuleArgs build() {
            return $;
        }
    }

}
