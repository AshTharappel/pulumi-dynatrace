// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


public final class HttpMonitorPerformanceThresholdsThresholdArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpMonitorPerformanceThresholdsThresholdArgs Empty = new HttpMonitorPerformanceThresholdsThresholdArgs();

    @Import(name="event", required=true)
    private Output<String> event;

    public Output<String> event() {
        return this.event;
    }

    @Import(name="threshold", required=true)
    private Output<Double> threshold;

    public Output<Double> threshold() {
        return this.threshold;
    }

    private HttpMonitorPerformanceThresholdsThresholdArgs() {}

    private HttpMonitorPerformanceThresholdsThresholdArgs(HttpMonitorPerformanceThresholdsThresholdArgs $) {
        this.event = $.event;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpMonitorPerformanceThresholdsThresholdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpMonitorPerformanceThresholdsThresholdArgs $;

        public Builder() {
            $ = new HttpMonitorPerformanceThresholdsThresholdArgs();
        }

        public Builder(HttpMonitorPerformanceThresholdsThresholdArgs defaults) {
            $ = new HttpMonitorPerformanceThresholdsThresholdArgs(Objects.requireNonNull(defaults));
        }

        public Builder event(Output<String> event) {
            $.event = event;
            return this;
        }

        public Builder event(String event) {
            return event(Output.of(event));
        }

        public Builder threshold(Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        public HttpMonitorPerformanceThresholdsThresholdArgs build() {
            $.event = Objects.requireNonNull($.event, "expected parameter 'event' to be non-null");
            $.threshold = Objects.requireNonNull($.threshold, "expected parameter 'threshold' to be non-null");
            return $;
        }
    }

}
