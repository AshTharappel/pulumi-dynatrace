// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.ProcessAvailabilityMetadataArgs;
import com.pulumi.dynatrace.inputs.ProcessAvailabilityRulesArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProcessAvailabilityArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProcessAvailabilityArgs Empty = new ProcessAvailabilityArgs();

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Set of additional key-value properties to be attached to the triggered event.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<ProcessAvailabilityMetadataArgs> metadata;

    /**
     * @return Set of additional key-value properties to be attached to the triggered event.
     * 
     */
    public Optional<Output<ProcessAvailabilityMetadataArgs>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * Monitored rule name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Monitored rule name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Define process detection rules by selecting a process property and a condition. Each monitoring rule can have multiple
     * detection rules associated with it.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<ProcessAvailabilityRulesArgs> rules;

    /**
     * @return Define process detection rules by selecting a process property and a condition. Each monitoring rule can have multiple
     * detection rules associated with it.
     * 
     */
    public Optional<Output<ProcessAvailabilityRulesArgs>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    private ProcessAvailabilityArgs() {}

    private ProcessAvailabilityArgs(ProcessAvailabilityArgs $) {
        this.enabled = $.enabled;
        this.metadata = $.metadata;
        this.name = $.name;
        this.rules = $.rules;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProcessAvailabilityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProcessAvailabilityArgs $;

        public Builder() {
            $ = new ProcessAvailabilityArgs();
        }

        public Builder(ProcessAvailabilityArgs defaults) {
            $ = new ProcessAvailabilityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param metadata Set of additional key-value properties to be attached to the triggered event.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<ProcessAvailabilityMetadataArgs> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Set of additional key-value properties to be attached to the triggered event.
         * 
         * @return builder
         * 
         */
        public Builder metadata(ProcessAvailabilityMetadataArgs metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param name Monitored rule name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Monitored rule name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param rules Define process detection rules by selecting a process property and a condition. Each monitoring rule can have multiple
         * detection rules associated with it.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<ProcessAvailabilityRulesArgs> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules Define process detection rules by selecting a process property and a condition. Each monitoring rule can have multiple
         * detection rules associated with it.
         * 
         * @return builder
         * 
         */
        public Builder rules(ProcessAvailabilityRulesArgs rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param scope The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public ProcessAvailabilityArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
