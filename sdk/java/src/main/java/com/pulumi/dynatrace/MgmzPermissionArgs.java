// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class MgmzPermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final MgmzPermissionArgs Empty = new MgmzPermissionArgs();

    /**
     * The UUID of the environment
     * 
     */
    @Import(name="environment", required=true)
    private Output<String> environment;

    /**
     * @return The UUID of the environment
     * 
     */
    public Output<String> environment() {
        return this.environment;
    }

    /**
     * The ID of the group the permissions are valid for. You may refer to the id of a resource `dynatrace.UserGroup` here
     * 
     */
    @Import(name="group", required=true)
    private Output<String> group;

    /**
     * @return The ID of the group the permissions are valid for. You may refer to the id of a resource `dynatrace.UserGroup` here
     * 
     */
    public Output<String> group() {
        return this.group;
    }

    /**
     * The ID of the management zone the permissions are valid for. When referring to resource `dynatrace.ManagementZoneV2` or data source `dynatrace.ManagementZone` you need to refer to the attribute `legacy_id`.
     * 
     */
    @Import(name="managementZone", required=true)
    private Output<String> managementZone;

    /**
     * @return The ID of the management zone the permissions are valid for. When referring to resource `dynatrace.ManagementZoneV2` or data source `dynatrace.ManagementZone` you need to refer to the attribute `legacy_id`.
     * 
     */
    public Output<String> managementZone() {
        return this.managementZone;
    }

    /**
     * The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`, `MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`
     * 
     */
    @Import(name="permissions", required=true)
    private Output<List<String>> permissions;

    /**
     * @return The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`, `MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`
     * 
     */
    public Output<List<String>> permissions() {
        return this.permissions;
    }

    private MgmzPermissionArgs() {}

    private MgmzPermissionArgs(MgmzPermissionArgs $) {
        this.environment = $.environment;
        this.group = $.group;
        this.managementZone = $.managementZone;
        this.permissions = $.permissions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MgmzPermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MgmzPermissionArgs $;

        public Builder() {
            $ = new MgmzPermissionArgs();
        }

        public Builder(MgmzPermissionArgs defaults) {
            $ = new MgmzPermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param environment The UUID of the environment
         * 
         * @return builder
         * 
         */
        public Builder environment(Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment The UUID of the environment
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param group The ID of the group the permissions are valid for. You may refer to the id of a resource `dynatrace.UserGroup` here
         * 
         * @return builder
         * 
         */
        public Builder group(Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group The ID of the group the permissions are valid for. You may refer to the id of a resource `dynatrace.UserGroup` here
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param managementZone The ID of the management zone the permissions are valid for. When referring to resource `dynatrace.ManagementZoneV2` or data source `dynatrace.ManagementZone` you need to refer to the attribute `legacy_id`.
         * 
         * @return builder
         * 
         */
        public Builder managementZone(Output<String> managementZone) {
            $.managementZone = managementZone;
            return this;
        }

        /**
         * @param managementZone The ID of the management zone the permissions are valid for. When referring to resource `dynatrace.ManagementZoneV2` or data source `dynatrace.ManagementZone` you need to refer to the attribute `legacy_id`.
         * 
         * @return builder
         * 
         */
        public Builder managementZone(String managementZone) {
            return managementZone(Output.of(managementZone));
        }

        /**
         * @param permissions The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`, `MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`
         * 
         * @return builder
         * 
         */
        public Builder permissions(Output<List<String>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`, `MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<String> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`, `MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`
         * 
         * @return builder
         * 
         */
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }

        public MgmzPermissionArgs build() {
            $.environment = Objects.requireNonNull($.environment, "expected parameter 'environment' to be non-null");
            $.group = Objects.requireNonNull($.group, "expected parameter 'group' to be non-null");
            $.managementZone = Objects.requireNonNull($.managementZone, "expected parameter 'managementZone' to be non-null");
            $.permissions = Objects.requireNonNull($.permissions, "expected parameter 'permissions' to be non-null");
            return $;
        }
    }

}
