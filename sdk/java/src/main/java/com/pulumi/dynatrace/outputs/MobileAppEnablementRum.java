// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class MobileAppEnablementRum {
    /**
     * @return Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
     * 
     */
    private Integer costAndTrafficControl;
    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    private Boolean enabled;

    private MobileAppEnablementRum() {}
    /**
     * @return Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
     * 
     */
    public Integer costAndTrafficControl() {
        return this.costAndTrafficControl;
    }
    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MobileAppEnablementRum defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer costAndTrafficControl;
        private Boolean enabled;
        public Builder() {}
        public Builder(MobileAppEnablementRum defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.costAndTrafficControl = defaults.costAndTrafficControl;
    	      this.enabled = defaults.enabled;
        }

        @CustomType.Setter
        public Builder costAndTrafficControl(Integer costAndTrafficControl) {
            this.costAndTrafficControl = Objects.requireNonNull(costAndTrafficControl);
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public MobileAppEnablementRum build() {
            final var o = new MobileAppEnablementRum();
            o.costAndTrafficControl = costAndTrafficControl;
            o.enabled = enabled;
            return o;
        }
    }
}
