// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.BrowserMonitorOutageArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.BrowserMonitorOutageState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/browserMonitorOutage:BrowserMonitorOutage")
public class BrowserMonitorOutage extends com.pulumi.resources.CustomResource {
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Alert if all locations are unable to access my web application
     * 
     */
    @Export(name="globalConsecutiveOutageCountThreshold", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> globalConsecutiveOutageCountThreshold;

    /**
     * @return (Field has overlap with `dynatrace.BrowserMonitor`) Alert if all locations are unable to access my web application
     * 
     */
    public Output<Optional<Integer>> globalConsecutiveOutageCountThreshold() {
        return Codegen.optional(this.globalConsecutiveOutageCountThreshold);
    }
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
     * 
     */
    @Export(name="globalOutages", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> globalOutages;

    /**
     * @return (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
     * 
     */
    public Output<Boolean> globalOutages() {
        return this.globalOutages;
    }
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) are unable to access my web application
     * 
     */
    @Export(name="localConsecutiveOutageCountThreshold", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> localConsecutiveOutageCountThreshold;

    /**
     * @return (Field has overlap with `dynatrace.BrowserMonitor`) are unable to access my web application
     * 
     */
    public Output<Optional<Integer>> localConsecutiveOutageCountThreshold() {
        return Codegen.optional(this.localConsecutiveOutageCountThreshold);
    }
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Alert if at least
     * 
     */
    @Export(name="localLocationOutageCountThreshold", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> localLocationOutageCountThreshold;

    /**
     * @return (Field has overlap with `dynatrace.BrowserMonitor`) Alert if at least
     * 
     */
    public Output<Optional<Integer>> localLocationOutageCountThreshold() {
        return Codegen.optional(this.localLocationOutageCountThreshold);
    }
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
     * 
     */
    @Export(name="localOutages", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> localOutages;

    /**
     * @return (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
     * 
     */
    public Output<Boolean> localOutages() {
        return this.localOutages;
    }
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
     * Requires ActiveGate version 1.207+ for private locations.
     * 
     */
    @Export(name="retryOnError", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> retryOnError;

    /**
     * @return (Field has overlap with `dynatrace.BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
     * Requires ActiveGate version 1.207+ for private locations.
     * 
     */
    public Output<Boolean> retryOnError() {
        return this.retryOnError;
    }
    /**
     * The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
     * 
     */
    @Export(name="scope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scope;

    /**
     * @return The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
     * 
     */
    public Output<Optional<String>> scope() {
        return Codegen.optional(this.scope);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BrowserMonitorOutage(String name) {
        this(name, BrowserMonitorOutageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BrowserMonitorOutage(String name, BrowserMonitorOutageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BrowserMonitorOutage(String name, BrowserMonitorOutageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/browserMonitorOutage:BrowserMonitorOutage", name, args == null ? BrowserMonitorOutageArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private BrowserMonitorOutage(String name, Output<String> id, @Nullable BrowserMonitorOutageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/browserMonitorOutage:BrowserMonitorOutage", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BrowserMonitorOutage get(String name, Output<String> id, @Nullable BrowserMonitorOutageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BrowserMonitorOutage(name, id, state, options);
    }
}
