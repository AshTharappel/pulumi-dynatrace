// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dynatrace.outputs.MetricEventsQueryDefinitionDimensionFilter;
import com.pulumi.dynatrace.outputs.MetricEventsQueryDefinitionEntityFilter;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MetricEventsQueryDefinition {
    /**
     * @return The aggregation of the query definition
     * 
     */
    private @Nullable String aggregation;
    /**
     * @return The dimension filters of the query definition
     * 
     */
    private @Nullable MetricEventsQueryDefinitionDimensionFilter dimensionFilter;
    /**
     * @return Use rule-based filters to define the scope this event monitors.
     * 
     */
    private @Nullable MetricEventsQueryDefinitionEntityFilter entityFilter;
    /**
     * @return The metric key of the query definition
     * 
     */
    private String metricKey;
    /**
     * @return To learn more, visit [Metric Selector](https://dt-url.net/metselad)
     * 
     */
    private @Nullable String metricSelector;
    /**
     * @return Minute offset of sliding evaluation window for metrics with latency
     * 
     */
    private @Nullable Integer queryOffset;
    /**
     * @return The type of query definition
     * 
     */
    private String type;

    private MetricEventsQueryDefinition() {}
    /**
     * @return The aggregation of the query definition
     * 
     */
    public Optional<String> aggregation() {
        return Optional.ofNullable(this.aggregation);
    }
    /**
     * @return The dimension filters of the query definition
     * 
     */
    public Optional<MetricEventsQueryDefinitionDimensionFilter> dimensionFilter() {
        return Optional.ofNullable(this.dimensionFilter);
    }
    /**
     * @return Use rule-based filters to define the scope this event monitors.
     * 
     */
    public Optional<MetricEventsQueryDefinitionEntityFilter> entityFilter() {
        return Optional.ofNullable(this.entityFilter);
    }
    /**
     * @return The metric key of the query definition
     * 
     */
    public String metricKey() {
        return this.metricKey;
    }
    /**
     * @return To learn more, visit [Metric Selector](https://dt-url.net/metselad)
     * 
     */
    public Optional<String> metricSelector() {
        return Optional.ofNullable(this.metricSelector);
    }
    /**
     * @return Minute offset of sliding evaluation window for metrics with latency
     * 
     */
    public Optional<Integer> queryOffset() {
        return Optional.ofNullable(this.queryOffset);
    }
    /**
     * @return The type of query definition
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricEventsQueryDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String aggregation;
        private @Nullable MetricEventsQueryDefinitionDimensionFilter dimensionFilter;
        private @Nullable MetricEventsQueryDefinitionEntityFilter entityFilter;
        private String metricKey;
        private @Nullable String metricSelector;
        private @Nullable Integer queryOffset;
        private String type;
        public Builder() {}
        public Builder(MetricEventsQueryDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregation = defaults.aggregation;
    	      this.dimensionFilter = defaults.dimensionFilter;
    	      this.entityFilter = defaults.entityFilter;
    	      this.metricKey = defaults.metricKey;
    	      this.metricSelector = defaults.metricSelector;
    	      this.queryOffset = defaults.queryOffset;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder aggregation(@Nullable String aggregation) {
            this.aggregation = aggregation;
            return this;
        }
        @CustomType.Setter
        public Builder dimensionFilter(@Nullable MetricEventsQueryDefinitionDimensionFilter dimensionFilter) {
            this.dimensionFilter = dimensionFilter;
            return this;
        }
        @CustomType.Setter
        public Builder entityFilter(@Nullable MetricEventsQueryDefinitionEntityFilter entityFilter) {
            this.entityFilter = entityFilter;
            return this;
        }
        @CustomType.Setter
        public Builder metricKey(String metricKey) {
            this.metricKey = Objects.requireNonNull(metricKey);
            return this;
        }
        @CustomType.Setter
        public Builder metricSelector(@Nullable String metricSelector) {
            this.metricSelector = metricSelector;
            return this;
        }
        @CustomType.Setter
        public Builder queryOffset(@Nullable Integer queryOffset) {
            this.queryOffset = queryOffset;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public MetricEventsQueryDefinition build() {
            final var o = new MetricEventsQueryDefinition();
            o.aggregation = aggregation;
            o.dimensionFilter = dimensionFilter;
            o.entityFilter = entityFilter;
            o.metricKey = metricKey;
            o.metricSelector = metricSelector;
            o.queryOffset = queryOffset;
            o.type = type;
            return o;
        }
    }
}
