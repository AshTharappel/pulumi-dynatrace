// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.MetricMetadataDimensionsArgs;
import com.pulumi.dynatrace.inputs.MetricMetadataMetricPropertiesArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricMetadataArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricMetadataArgs Empty = new MetricMetadataArgs();

    /**
     * Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Define metadata per metric dimension.
     * 
     */
    @Import(name="dimensions")
    private @Nullable Output<MetricMetadataDimensionsArgs> dimensions;

    /**
     * @return Define metadata per metric dimension.
     * 
     */
    public Optional<Output<MetricMetadataDimensionsArgs>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    /**
     * Display name
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Display name
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The scope of this setting (metric)
     * 
     */
    @Import(name="metricId", required=true)
    private Output<String> metricId;

    /**
     * @return The scope of this setting (metric)
     * 
     */
    public Output<String> metricId() {
        return this.metricId;
    }

    /**
     * Metric properties
     * 
     */
    @Import(name="metricProperties")
    private @Nullable Output<MetricMetadataMetricPropertiesArgs> metricProperties;

    /**
     * @return Metric properties
     * 
     */
    public Optional<Output<MetricMetadataMetricPropertiesArgs>> metricProperties() {
        return Optional.ofNullable(this.metricProperties);
    }

    /**
     * Specifies which entity dimension should be used as the primary dimension. The property can only be configured for metrics ingested with the Metrics API.
     * 
     */
    @Import(name="sourceEntityType")
    private @Nullable Output<String> sourceEntityType;

    /**
     * @return Specifies which entity dimension should be used as the primary dimension. The property can only be configured for metrics ingested with the Metrics API.
     * 
     */
    public Optional<Output<String>> sourceEntityType() {
        return Optional.ofNullable(this.sourceEntityType);
    }

    /**
     * Tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Unit
     * 
     */
    @Import(name="unit", required=true)
    private Output<String> unit;

    /**
     * @return Unit
     * 
     */
    public Output<String> unit() {
        return this.unit;
    }

    /**
     * The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:
     * 
     */
    @Import(name="unitDisplayFormat")
    private @Nullable Output<String> unitDisplayFormat;

    /**
     * @return The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:
     * 
     */
    public Optional<Output<String>> unitDisplayFormat() {
        return Optional.ofNullable(this.unitDisplayFormat);
    }

    private MetricMetadataArgs() {}

    private MetricMetadataArgs(MetricMetadataArgs $) {
        this.description = $.description;
        this.dimensions = $.dimensions;
        this.displayName = $.displayName;
        this.metricId = $.metricId;
        this.metricProperties = $.metricProperties;
        this.sourceEntityType = $.sourceEntityType;
        this.tags = $.tags;
        this.unit = $.unit;
        this.unitDisplayFormat = $.unitDisplayFormat;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricMetadataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricMetadataArgs $;

        public Builder() {
            $ = new MetricMetadataArgs();
        }

        public Builder(MetricMetadataArgs defaults) {
            $ = new MetricMetadataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dimensions Define metadata per metric dimension.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(@Nullable Output<MetricMetadataDimensionsArgs> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        /**
         * @param dimensions Define metadata per metric dimension.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(MetricMetadataDimensionsArgs dimensions) {
            return dimensions(Output.of(dimensions));
        }

        /**
         * @param displayName Display name
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param metricId The scope of this setting (metric)
         * 
         * @return builder
         * 
         */
        public Builder metricId(Output<String> metricId) {
            $.metricId = metricId;
            return this;
        }

        /**
         * @param metricId The scope of this setting (metric)
         * 
         * @return builder
         * 
         */
        public Builder metricId(String metricId) {
            return metricId(Output.of(metricId));
        }

        /**
         * @param metricProperties Metric properties
         * 
         * @return builder
         * 
         */
        public Builder metricProperties(@Nullable Output<MetricMetadataMetricPropertiesArgs> metricProperties) {
            $.metricProperties = metricProperties;
            return this;
        }

        /**
         * @param metricProperties Metric properties
         * 
         * @return builder
         * 
         */
        public Builder metricProperties(MetricMetadataMetricPropertiesArgs metricProperties) {
            return metricProperties(Output.of(metricProperties));
        }

        /**
         * @param sourceEntityType Specifies which entity dimension should be used as the primary dimension. The property can only be configured for metrics ingested with the Metrics API.
         * 
         * @return builder
         * 
         */
        public Builder sourceEntityType(@Nullable Output<String> sourceEntityType) {
            $.sourceEntityType = sourceEntityType;
            return this;
        }

        /**
         * @param sourceEntityType Specifies which entity dimension should be used as the primary dimension. The property can only be configured for metrics ingested with the Metrics API.
         * 
         * @return builder
         * 
         */
        public Builder sourceEntityType(String sourceEntityType) {
            return sourceEntityType(Output.of(sourceEntityType));
        }

        /**
         * @param tags Tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param unit Unit
         * 
         * @return builder
         * 
         */
        public Builder unit(Output<String> unit) {
            $.unit = unit;
            return this;
        }

        /**
         * @param unit Unit
         * 
         * @return builder
         * 
         */
        public Builder unit(String unit) {
            return unit(Output.of(unit));
        }

        /**
         * @param unitDisplayFormat The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:
         * 
         * @return builder
         * 
         */
        public Builder unitDisplayFormat(@Nullable Output<String> unitDisplayFormat) {
            $.unitDisplayFormat = unitDisplayFormat;
            return this;
        }

        /**
         * @param unitDisplayFormat The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:
         * 
         * @return builder
         * 
         */
        public Builder unitDisplayFormat(String unitDisplayFormat) {
            return unitDisplayFormat(Output.of(unitDisplayFormat));
        }

        public MetricMetadataArgs build() {
            $.metricId = Objects.requireNonNull($.metricId, "expected parameter 'metricId' to be non-null");
            $.unit = Objects.requireNonNull($.unit, "expected parameter 'unit' to be non-null");
            return $;
        }
    }

}
