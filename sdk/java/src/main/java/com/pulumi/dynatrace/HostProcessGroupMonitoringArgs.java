// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class HostProcessGroupMonitoringArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostProcessGroupMonitoringArgs Empty = new HostProcessGroupMonitoringArgs();

    /**
     * The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
     * 
     */
    @Import(name="hostId", required=true)
    private Output<String> hostId;

    /**
     * @return The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
     * 
     */
    public Output<String> hostId() {
        return this.hostId;
    }

    /**
     * Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
     * 
     */
    @Import(name="monitoringState", required=true)
    private Output<String> monitoringState;

    /**
     * @return Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
     * 
     */
    public Output<String> monitoringState() {
        return this.monitoringState;
    }

    /**
     * Process group
     * 
     */
    @Import(name="processGroup", required=true)
    private Output<String> processGroup;

    /**
     * @return Process group
     * 
     */
    public Output<String> processGroup() {
        return this.processGroup;
    }

    private HostProcessGroupMonitoringArgs() {}

    private HostProcessGroupMonitoringArgs(HostProcessGroupMonitoringArgs $) {
        this.hostId = $.hostId;
        this.monitoringState = $.monitoringState;
        this.processGroup = $.processGroup;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostProcessGroupMonitoringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostProcessGroupMonitoringArgs $;

        public Builder() {
            $ = new HostProcessGroupMonitoringArgs();
        }

        public Builder(HostProcessGroupMonitoringArgs defaults) {
            $ = new HostProcessGroupMonitoringArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostId The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
         * 
         * @return builder
         * 
         */
        public Builder hostId(Output<String> hostId) {
            $.hostId = hostId;
            return this;
        }

        /**
         * @param hostId The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
         * 
         * @return builder
         * 
         */
        public Builder hostId(String hostId) {
            return hostId(Output.of(hostId));
        }

        /**
         * @param monitoringState Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
         * 
         * @return builder
         * 
         */
        public Builder monitoringState(Output<String> monitoringState) {
            $.monitoringState = monitoringState;
            return this;
        }

        /**
         * @param monitoringState Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
         * 
         * @return builder
         * 
         */
        public Builder monitoringState(String monitoringState) {
            return monitoringState(Output.of(monitoringState));
        }

        /**
         * @param processGroup Process group
         * 
         * @return builder
         * 
         */
        public Builder processGroup(Output<String> processGroup) {
            $.processGroup = processGroup;
            return this;
        }

        /**
         * @param processGroup Process group
         * 
         * @return builder
         * 
         */
        public Builder processGroup(String processGroup) {
            return processGroup(Output.of(processGroup));
        }

        public HostProcessGroupMonitoringArgs build() {
            $.hostId = Objects.requireNonNull($.hostId, "expected parameter 'hostId' to be non-null");
            $.monitoringState = Objects.requireNonNull($.monitoringState, "expected parameter 'monitoringState' to be non-null");
            $.processGroup = Objects.requireNonNull($.processGroup, "expected parameter 'processGroup' to be non-null");
            return $;
        }
    }

}
