// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CredentialsExternal {
    /**
     * @return Required for Hashicorp Certificate. The ID of Credentials within the Certificate Vault holding the certificate
     * 
     */
    private @Nullable String certificate;
    /**
     * @return Required for Azure Client Secret. No further documentation available
     * 
     */
    private @Nullable String clientSecret;
    /**
     * @return Required for Azure Client Secret. No further documentation available
     * 
     */
    private @Nullable String clientid;
    /**
     * @return No documentation available
     * 
     */
    private @Nullable List<String> credentialsUsedForExternalSynchronizations;
    /**
     * @return No documentation available
     * 
     */
    private @Nullable String passwordSecretName;
    /**
     * @return Required for Hashicorp App Role or Hashicorp Certificate. No further documentation available
     * 
     */
    private @Nullable String pathToCredentials;
    /**
     * @return Required for Hashicorp App Role. No further documentation available
     * 
     */
    private @Nullable String roleid;
    /**
     * @return Required for Hashicorp App Role. The ID of Credentials within the Certificate Vault holding the secret id
     * 
     */
    private @Nullable String secretid;
    /**
     * @return Required for Azure Client Secret. No further documentation available
     * 
     */
    private @Nullable String tenantid;
    /**
     * @return No documentation available
     * 
     */
    private @Nullable String tokenSecretName;
    /**
     * @return No documentation available
     * 
     */
    private @Nullable String usernameSecretName;
    /**
     * @return Required for Hashicorp App Role. No further documentation available
     * 
     */
    private @Nullable String vaultNamespace;
    /**
     * @return No documentation available
     * 
     */
    private @Nullable String vaultUrl;

    private CredentialsExternal() {}
    /**
     * @return Required for Hashicorp Certificate. The ID of Credentials within the Certificate Vault holding the certificate
     * 
     */
    public Optional<String> certificate() {
        return Optional.ofNullable(this.certificate);
    }
    /**
     * @return Required for Azure Client Secret. No further documentation available
     * 
     */
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    /**
     * @return Required for Azure Client Secret. No further documentation available
     * 
     */
    public Optional<String> clientid() {
        return Optional.ofNullable(this.clientid);
    }
    /**
     * @return No documentation available
     * 
     */
    public List<String> credentialsUsedForExternalSynchronizations() {
        return this.credentialsUsedForExternalSynchronizations == null ? List.of() : this.credentialsUsedForExternalSynchronizations;
    }
    /**
     * @return No documentation available
     * 
     */
    public Optional<String> passwordSecretName() {
        return Optional.ofNullable(this.passwordSecretName);
    }
    /**
     * @return Required for Hashicorp App Role or Hashicorp Certificate. No further documentation available
     * 
     */
    public Optional<String> pathToCredentials() {
        return Optional.ofNullable(this.pathToCredentials);
    }
    /**
     * @return Required for Hashicorp App Role. No further documentation available
     * 
     */
    public Optional<String> roleid() {
        return Optional.ofNullable(this.roleid);
    }
    /**
     * @return Required for Hashicorp App Role. The ID of Credentials within the Certificate Vault holding the secret id
     * 
     */
    public Optional<String> secretid() {
        return Optional.ofNullable(this.secretid);
    }
    /**
     * @return Required for Azure Client Secret. No further documentation available
     * 
     */
    public Optional<String> tenantid() {
        return Optional.ofNullable(this.tenantid);
    }
    /**
     * @return No documentation available
     * 
     */
    public Optional<String> tokenSecretName() {
        return Optional.ofNullable(this.tokenSecretName);
    }
    /**
     * @return No documentation available
     * 
     */
    public Optional<String> usernameSecretName() {
        return Optional.ofNullable(this.usernameSecretName);
    }
    /**
     * @return Required for Hashicorp App Role. No further documentation available
     * 
     */
    public Optional<String> vaultNamespace() {
        return Optional.ofNullable(this.vaultNamespace);
    }
    /**
     * @return No documentation available
     * 
     */
    public Optional<String> vaultUrl() {
        return Optional.ofNullable(this.vaultUrl);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CredentialsExternal defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certificate;
        private @Nullable String clientSecret;
        private @Nullable String clientid;
        private @Nullable List<String> credentialsUsedForExternalSynchronizations;
        private @Nullable String passwordSecretName;
        private @Nullable String pathToCredentials;
        private @Nullable String roleid;
        private @Nullable String secretid;
        private @Nullable String tenantid;
        private @Nullable String tokenSecretName;
        private @Nullable String usernameSecretName;
        private @Nullable String vaultNamespace;
        private @Nullable String vaultUrl;
        public Builder() {}
        public Builder(CredentialsExternal defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificate = defaults.certificate;
    	      this.clientSecret = defaults.clientSecret;
    	      this.clientid = defaults.clientid;
    	      this.credentialsUsedForExternalSynchronizations = defaults.credentialsUsedForExternalSynchronizations;
    	      this.passwordSecretName = defaults.passwordSecretName;
    	      this.pathToCredentials = defaults.pathToCredentials;
    	      this.roleid = defaults.roleid;
    	      this.secretid = defaults.secretid;
    	      this.tenantid = defaults.tenantid;
    	      this.tokenSecretName = defaults.tokenSecretName;
    	      this.usernameSecretName = defaults.usernameSecretName;
    	      this.vaultNamespace = defaults.vaultNamespace;
    	      this.vaultUrl = defaults.vaultUrl;
        }

        @CustomType.Setter
        public Builder certificate(@Nullable String certificate) {
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(@Nullable String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder clientid(@Nullable String clientid) {
            this.clientid = clientid;
            return this;
        }
        @CustomType.Setter
        public Builder credentialsUsedForExternalSynchronizations(@Nullable List<String> credentialsUsedForExternalSynchronizations) {
            this.credentialsUsedForExternalSynchronizations = credentialsUsedForExternalSynchronizations;
            return this;
        }
        public Builder credentialsUsedForExternalSynchronizations(String... credentialsUsedForExternalSynchronizations) {
            return credentialsUsedForExternalSynchronizations(List.of(credentialsUsedForExternalSynchronizations));
        }
        @CustomType.Setter
        public Builder passwordSecretName(@Nullable String passwordSecretName) {
            this.passwordSecretName = passwordSecretName;
            return this;
        }
        @CustomType.Setter
        public Builder pathToCredentials(@Nullable String pathToCredentials) {
            this.pathToCredentials = pathToCredentials;
            return this;
        }
        @CustomType.Setter
        public Builder roleid(@Nullable String roleid) {
            this.roleid = roleid;
            return this;
        }
        @CustomType.Setter
        public Builder secretid(@Nullable String secretid) {
            this.secretid = secretid;
            return this;
        }
        @CustomType.Setter
        public Builder tenantid(@Nullable String tenantid) {
            this.tenantid = tenantid;
            return this;
        }
        @CustomType.Setter
        public Builder tokenSecretName(@Nullable String tokenSecretName) {
            this.tokenSecretName = tokenSecretName;
            return this;
        }
        @CustomType.Setter
        public Builder usernameSecretName(@Nullable String usernameSecretName) {
            this.usernameSecretName = usernameSecretName;
            return this;
        }
        @CustomType.Setter
        public Builder vaultNamespace(@Nullable String vaultNamespace) {
            this.vaultNamespace = vaultNamespace;
            return this;
        }
        @CustomType.Setter
        public Builder vaultUrl(@Nullable String vaultUrl) {
            this.vaultUrl = vaultUrl;
            return this;
        }
        public CredentialsExternal build() {
            final var o = new CredentialsExternal();
            o.certificate = certificate;
            o.clientSecret = clientSecret;
            o.clientid = clientid;
            o.credentialsUsedForExternalSynchronizations = credentialsUsedForExternalSynchronizations;
            o.passwordSecretName = passwordSecretName;
            o.pathToCredentials = pathToCredentials;
            o.roleid = roleid;
            o.secretid = secretid;
            o.tenantid = tenantid;
            o.tokenSecretName = tokenSecretName;
            o.usernameSecretName = usernameSecretName;
            o.vaultNamespace = vaultNamespace;
            o.vaultUrl = vaultUrl;
            return o;
        }
    }
}
