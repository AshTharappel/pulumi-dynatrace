// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.UpdateWindowsMonthlyRecurrenceRecurrenceRangeArgs;
import com.pulumi.dynatrace.inputs.UpdateWindowsMonthlyRecurrenceUpdateTimeArgs;
import java.lang.Integer;
import java.util.Objects;


public final class UpdateWindowsMonthlyRecurrenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final UpdateWindowsMonthlyRecurrenceArgs Empty = new UpdateWindowsMonthlyRecurrenceArgs();

    @Import(name="every", required=true)
    private Output<Integer> every;

    public Output<Integer> every() {
        return this.every;
    }

    @Import(name="recurrenceRange", required=true)
    private Output<UpdateWindowsMonthlyRecurrenceRecurrenceRangeArgs> recurrenceRange;

    public Output<UpdateWindowsMonthlyRecurrenceRecurrenceRangeArgs> recurrenceRange() {
        return this.recurrenceRange;
    }

    @Import(name="selectedMonthDay", required=true)
    private Output<Integer> selectedMonthDay;

    public Output<Integer> selectedMonthDay() {
        return this.selectedMonthDay;
    }

    @Import(name="updateTime", required=true)
    private Output<UpdateWindowsMonthlyRecurrenceUpdateTimeArgs> updateTime;

    public Output<UpdateWindowsMonthlyRecurrenceUpdateTimeArgs> updateTime() {
        return this.updateTime;
    }

    private UpdateWindowsMonthlyRecurrenceArgs() {}

    private UpdateWindowsMonthlyRecurrenceArgs(UpdateWindowsMonthlyRecurrenceArgs $) {
        this.every = $.every;
        this.recurrenceRange = $.recurrenceRange;
        this.selectedMonthDay = $.selectedMonthDay;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UpdateWindowsMonthlyRecurrenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UpdateWindowsMonthlyRecurrenceArgs $;

        public Builder() {
            $ = new UpdateWindowsMonthlyRecurrenceArgs();
        }

        public Builder(UpdateWindowsMonthlyRecurrenceArgs defaults) {
            $ = new UpdateWindowsMonthlyRecurrenceArgs(Objects.requireNonNull(defaults));
        }

        public Builder every(Output<Integer> every) {
            $.every = every;
            return this;
        }

        public Builder every(Integer every) {
            return every(Output.of(every));
        }

        public Builder recurrenceRange(Output<UpdateWindowsMonthlyRecurrenceRecurrenceRangeArgs> recurrenceRange) {
            $.recurrenceRange = recurrenceRange;
            return this;
        }

        public Builder recurrenceRange(UpdateWindowsMonthlyRecurrenceRecurrenceRangeArgs recurrenceRange) {
            return recurrenceRange(Output.of(recurrenceRange));
        }

        public Builder selectedMonthDay(Output<Integer> selectedMonthDay) {
            $.selectedMonthDay = selectedMonthDay;
            return this;
        }

        public Builder selectedMonthDay(Integer selectedMonthDay) {
            return selectedMonthDay(Output.of(selectedMonthDay));
        }

        public Builder updateTime(Output<UpdateWindowsMonthlyRecurrenceUpdateTimeArgs> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        public Builder updateTime(UpdateWindowsMonthlyRecurrenceUpdateTimeArgs updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public UpdateWindowsMonthlyRecurrenceArgs build() {
            $.every = Objects.requireNonNull($.every, "expected parameter 'every' to be non-null");
            $.recurrenceRange = Objects.requireNonNull($.recurrenceRange, "expected parameter 'recurrenceRange' to be non-null");
            $.selectedMonthDay = Objects.requireNonNull($.selectedMonthDay, "expected parameter 'selectedMonthDay' to be non-null");
            $.updateTime = Objects.requireNonNull($.updateTime, "expected parameter 'updateTime' to be non-null");
            return $;
        }
    }

}
