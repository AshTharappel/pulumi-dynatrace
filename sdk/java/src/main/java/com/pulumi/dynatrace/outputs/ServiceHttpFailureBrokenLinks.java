// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class ServiceHttpFailureBrokenLinks {
    /**
     * @return If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
     * 
     */
    private @Nullable List<String> brokenLinkDomains;
    /**
     * @return Consider 404 HTTP response codes as failures
     * 
     */
    private Boolean http404NotFoundFailures;

    private ServiceHttpFailureBrokenLinks() {}
    /**
     * @return If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
     * 
     */
    public List<String> brokenLinkDomains() {
        return this.brokenLinkDomains == null ? List.of() : this.brokenLinkDomains;
    }
    /**
     * @return Consider 404 HTTP response codes as failures
     * 
     */
    public Boolean http404NotFoundFailures() {
        return this.http404NotFoundFailures;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceHttpFailureBrokenLinks defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> brokenLinkDomains;
        private Boolean http404NotFoundFailures;
        public Builder() {}
        public Builder(ServiceHttpFailureBrokenLinks defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.brokenLinkDomains = defaults.brokenLinkDomains;
    	      this.http404NotFoundFailures = defaults.http404NotFoundFailures;
        }

        @CustomType.Setter
        public Builder brokenLinkDomains(@Nullable List<String> brokenLinkDomains) {
            this.brokenLinkDomains = brokenLinkDomains;
            return this;
        }
        public Builder brokenLinkDomains(String... brokenLinkDomains) {
            return brokenLinkDomains(List.of(brokenLinkDomains));
        }
        @CustomType.Setter
        public Builder http404NotFoundFailures(Boolean http404NotFoundFailures) {
            this.http404NotFoundFailures = Objects.requireNonNull(http404NotFoundFailures);
            return this;
        }
        public ServiceHttpFailureBrokenLinks build() {
            final var o = new ServiceHttpFailureBrokenLinks();
            o.brokenLinkDomains = brokenLinkDomains;
            o.http404NotFoundFailures = http404NotFoundFailures;
            return o;
        }
    }
}
