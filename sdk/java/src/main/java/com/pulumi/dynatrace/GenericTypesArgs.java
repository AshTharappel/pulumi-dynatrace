// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.GenericTypesRulesArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GenericTypesArgs extends com.pulumi.resources.ResourceArgs {

    public static final GenericTypesArgs Empty = new GenericTypesArgs();

    /**
     * The user or extension that created this type.
     * 
     */
    @Import(name="createdBy", required=true)
    private Output<String> createdBy;

    /**
     * @return The user or extension that created this type.
     * 
     */
    public Output<String> createdBy() {
        return this.createdBy;
    }

    /**
     * The human readable type name for this entity type.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The human readable type name for this entity type.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The entity type name. This type name must be unique and must not be changed after creation.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The entity type name. This type name must be unique and must not be changed after creation.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specify a list of rules which are evaluated in order. When **any** rule matches, the entity defined according to that rule will be extracted. Subsequent rules will not be evaluated.
     * 
     */
    @Import(name="rules", required=true)
    private Output<GenericTypesRulesArgs> rules;

    /**
     * @return Specify a list of rules which are evaluated in order. When **any** rule matches, the entity defined according to that rule will be extracted. Subsequent rules will not be evaluated.
     * 
     */
    public Output<GenericTypesRulesArgs> rules() {
        return this.rules;
    }

    private GenericTypesArgs() {}

    private GenericTypesArgs(GenericTypesArgs $) {
        this.createdBy = $.createdBy;
        this.displayName = $.displayName;
        this.enabled = $.enabled;
        this.name = $.name;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GenericTypesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GenericTypesArgs $;

        public Builder() {
            $ = new GenericTypesArgs();
        }

        public Builder(GenericTypesArgs defaults) {
            $ = new GenericTypesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdBy The user or extension that created this type.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The user or extension that created this type.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param displayName The human readable type name for this entity type.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The human readable type name for this entity type.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name The entity type name. This type name must be unique and must not be changed after creation.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The entity type name. This type name must be unique and must not be changed after creation.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param rules Specify a list of rules which are evaluated in order. When **any** rule matches, the entity defined according to that rule will be extracted. Subsequent rules will not be evaluated.
         * 
         * @return builder
         * 
         */
        public Builder rules(Output<GenericTypesRulesArgs> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules Specify a list of rules which are evaluated in order. When **any** rule matches, the entity defined according to that rule will be extracted. Subsequent rules will not be evaluated.
         * 
         * @return builder
         * 
         */
        public Builder rules(GenericTypesRulesArgs rules) {
            return rules(Output.of(rules));
        }

        public GenericTypesArgs build() {
            $.createdBy = Objects.requireNonNull($.createdBy, "expected parameter 'createdBy' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.rules = Objects.requireNonNull($.rules, "expected parameter 'rules' to be non-null");
            return $;
        }
    }

}
