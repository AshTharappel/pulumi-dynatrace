// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationConfigArgs Empty = new NotificationConfigArgs();

    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="active", required=true)
    private Output<Boolean> active;

    /**
     * @return The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> active() {
        return this.active;
    }

    /**
     * The ID of the associated alerting profile
     * 
     */
    @Import(name="alertingProfile", required=true)
    private Output<String> alertingProfile;

    /**
     * @return The ID of the associated alerting profile
     * 
     */
    public Output<String> alertingProfile() {
        return this.alertingProfile;
    }

    /**
     * The name of the notification configuration
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the notification configuration
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Defines the actual set of fields depending on the value. See one of the following objects:  * `EMAIL` &gt; EmailNotificationConfig  * `PAGER_DUTY` &gt; PagerDutyNotificationConfig  * `WEBHOOK` &gt; WebHookNotificationConfig  * `SLACK` &gt; SlackNotificationConfig  * `HIPCHAT` &gt; HipChatNotificationConfig  * `VICTOROPS` &gt; VictorOpsNotificationConfig  * `SERVICE_NOW` &gt; ServiceNowNotificationConfig  * `XMATTERS` &gt; XMattersNotificationConfig  * `ANSIBLETOWER` &gt; AnsibleTowerNotificationConfig  * `OPS_GENIE` &gt; OpsGenieNotificationConfig  * `JIRA` &gt; JiraNotificationConfig  * `TRELLO` &gt; TrelloNotificationConfig
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Defines the actual set of fields depending on the value. See one of the following objects:  * `EMAIL` &gt; EmailNotificationConfig  * `PAGER_DUTY` &gt; PagerDutyNotificationConfig  * `WEBHOOK` &gt; WebHookNotificationConfig  * `SLACK` &gt; SlackNotificationConfig  * `HIPCHAT` &gt; HipChatNotificationConfig  * `VICTOROPS` &gt; VictorOpsNotificationConfig  * `SERVICE_NOW` &gt; ServiceNowNotificationConfig  * `XMATTERS` &gt; XMattersNotificationConfig  * `ANSIBLETOWER` &gt; AnsibleTowerNotificationConfig  * `OPS_GENIE` &gt; OpsGenieNotificationConfig  * `JIRA` &gt; JiraNotificationConfig  * `TRELLO` &gt; TrelloNotificationConfig
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    private NotificationConfigArgs() {}

    private NotificationConfigArgs(NotificationConfigArgs $) {
        this.active = $.active;
        this.alertingProfile = $.alertingProfile;
        this.name = $.name;
        this.type = $.type;
        this.unknowns = $.unknowns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationConfigArgs $;

        public Builder() {
            $ = new NotificationConfigArgs();
        }

        public Builder(NotificationConfigArgs defaults) {
            $ = new NotificationConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param active The configuration is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder active(Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active The configuration is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param alertingProfile The ID of the associated alerting profile
         * 
         * @return builder
         * 
         */
        public Builder alertingProfile(Output<String> alertingProfile) {
            $.alertingProfile = alertingProfile;
            return this;
        }

        /**
         * @param alertingProfile The ID of the associated alerting profile
         * 
         * @return builder
         * 
         */
        public Builder alertingProfile(String alertingProfile) {
            return alertingProfile(Output.of(alertingProfile));
        }

        /**
         * @param name The name of the notification configuration
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the notification configuration
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type Defines the actual set of fields depending on the value. See one of the following objects:  * `EMAIL` &gt; EmailNotificationConfig  * `PAGER_DUTY` &gt; PagerDutyNotificationConfig  * `WEBHOOK` &gt; WebHookNotificationConfig  * `SLACK` &gt; SlackNotificationConfig  * `HIPCHAT` &gt; HipChatNotificationConfig  * `VICTOROPS` &gt; VictorOpsNotificationConfig  * `SERVICE_NOW` &gt; ServiceNowNotificationConfig  * `XMATTERS` &gt; XMattersNotificationConfig  * `ANSIBLETOWER` &gt; AnsibleTowerNotificationConfig  * `OPS_GENIE` &gt; OpsGenieNotificationConfig  * `JIRA` &gt; JiraNotificationConfig  * `TRELLO` &gt; TrelloNotificationConfig
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Defines the actual set of fields depending on the value. See one of the following objects:  * `EMAIL` &gt; EmailNotificationConfig  * `PAGER_DUTY` &gt; PagerDutyNotificationConfig  * `WEBHOOK` &gt; WebHookNotificationConfig  * `SLACK` &gt; SlackNotificationConfig  * `HIPCHAT` &gt; HipChatNotificationConfig  * `VICTOROPS` &gt; VictorOpsNotificationConfig  * `SERVICE_NOW` &gt; ServiceNowNotificationConfig  * `XMATTERS` &gt; XMattersNotificationConfig  * `ANSIBLETOWER` &gt; AnsibleTowerNotificationConfig  * `OPS_GENIE` &gt; OpsGenieNotificationConfig  * `JIRA` &gt; JiraNotificationConfig  * `TRELLO` &gt; TrelloNotificationConfig
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public NotificationConfigArgs build() {
            $.active = Objects.requireNonNull($.active, "expected parameter 'active' to be non-null");
            $.alertingProfile = Objects.requireNonNull($.alertingProfile, "expected parameter 'alertingProfile' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
