// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;


public final class RumOverloadPreventionArgs extends com.pulumi.resources.ResourceArgs {

    public static final RumOverloadPreventionArgs Empty = new RumOverloadPreventionArgs();

    /**
     * Once this limit is reached, Dynatrace [throttles the number of captured user sessions](https://dt-url.net/fm3v0p7g).
     * 
     */
    @Import(name="overloadPreventionLimit", required=true)
    private Output<Integer> overloadPreventionLimit;

    /**
     * @return Once this limit is reached, Dynatrace [throttles the number of captured user sessions](https://dt-url.net/fm3v0p7g).
     * 
     */
    public Output<Integer> overloadPreventionLimit() {
        return this.overloadPreventionLimit;
    }

    private RumOverloadPreventionArgs() {}

    private RumOverloadPreventionArgs(RumOverloadPreventionArgs $) {
        this.overloadPreventionLimit = $.overloadPreventionLimit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RumOverloadPreventionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RumOverloadPreventionArgs $;

        public Builder() {
            $ = new RumOverloadPreventionArgs();
        }

        public Builder(RumOverloadPreventionArgs defaults) {
            $ = new RumOverloadPreventionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param overloadPreventionLimit Once this limit is reached, Dynatrace [throttles the number of captured user sessions](https://dt-url.net/fm3v0p7g).
         * 
         * @return builder
         * 
         */
        public Builder overloadPreventionLimit(Output<Integer> overloadPreventionLimit) {
            $.overloadPreventionLimit = overloadPreventionLimit;
            return this;
        }

        /**
         * @param overloadPreventionLimit Once this limit is reached, Dynatrace [throttles the number of captured user sessions](https://dt-url.net/fm3v0p7g).
         * 
         * @return builder
         * 
         */
        public Builder overloadPreventionLimit(Integer overloadPreventionLimit) {
            return overloadPreventionLimit(Output.of(overloadPreventionLimit));
        }

        public RumOverloadPreventionArgs build() {
            $.overloadPreventionLimit = Objects.requireNonNull($.overloadPreventionLimit, "expected parameter 'overloadPreventionLimit' to be non-null");
            return $;
        }
    }

}
