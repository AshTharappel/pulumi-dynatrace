// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProcessGroupSimpleDetectionState extends com.pulumi.resources.ResourceArgs {

    public static final ProcessGroupSimpleDetectionState Empty = new ProcessGroupSimpleDetectionState();

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
     * 
     */
    @Import(name="groupIdentifier")
    private @Nullable Output<String> groupIdentifier;

    /**
     * @return If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
     * 
     */
    public Optional<Output<String>> groupIdentifier() {
        return Optional.ofNullable(this.groupIdentifier);
    }

    /**
     * Use a variable to identify instances within a process group.
     * 
     */
    @Import(name="instanceIdentifier")
    private @Nullable Output<String> instanceIdentifier;

    /**
     * @return Use a variable to identify instances within a process group.
     * 
     */
    public Optional<Output<String>> instanceIdentifier() {
        return Optional.ofNullable(this.instanceIdentifier);
    }

    /**
     * Note: Not all types can be detected at startup.
     * 
     */
    @Import(name="processType")
    private @Nullable Output<String> processType;

    /**
     * @return Note: Not all types can be detected at startup.
     * 
     */
    public Optional<Output<String>> processType() {
        return Optional.ofNullable(this.processType);
    }

    /**
     * Possible Values: `Prop`, `Env`
     * 
     */
    @Import(name="ruleType")
    private @Nullable Output<String> ruleType;

    /**
     * @return Possible Values: `Prop`, `Env`
     * 
     */
    public Optional<Output<String>> ruleType() {
        return Optional.ofNullable(this.ruleType);
    }

    private ProcessGroupSimpleDetectionState() {}

    private ProcessGroupSimpleDetectionState(ProcessGroupSimpleDetectionState $) {
        this.enabled = $.enabled;
        this.groupIdentifier = $.groupIdentifier;
        this.instanceIdentifier = $.instanceIdentifier;
        this.processType = $.processType;
        this.ruleType = $.ruleType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProcessGroupSimpleDetectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProcessGroupSimpleDetectionState $;

        public Builder() {
            $ = new ProcessGroupSimpleDetectionState();
        }

        public Builder(ProcessGroupSimpleDetectionState defaults) {
            $ = new ProcessGroupSimpleDetectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param groupIdentifier If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
         * 
         * @return builder
         * 
         */
        public Builder groupIdentifier(@Nullable Output<String> groupIdentifier) {
            $.groupIdentifier = groupIdentifier;
            return this;
        }

        /**
         * @param groupIdentifier If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
         * 
         * @return builder
         * 
         */
        public Builder groupIdentifier(String groupIdentifier) {
            return groupIdentifier(Output.of(groupIdentifier));
        }

        /**
         * @param instanceIdentifier Use a variable to identify instances within a process group.
         * 
         * @return builder
         * 
         */
        public Builder instanceIdentifier(@Nullable Output<String> instanceIdentifier) {
            $.instanceIdentifier = instanceIdentifier;
            return this;
        }

        /**
         * @param instanceIdentifier Use a variable to identify instances within a process group.
         * 
         * @return builder
         * 
         */
        public Builder instanceIdentifier(String instanceIdentifier) {
            return instanceIdentifier(Output.of(instanceIdentifier));
        }

        /**
         * @param processType Note: Not all types can be detected at startup.
         * 
         * @return builder
         * 
         */
        public Builder processType(@Nullable Output<String> processType) {
            $.processType = processType;
            return this;
        }

        /**
         * @param processType Note: Not all types can be detected at startup.
         * 
         * @return builder
         * 
         */
        public Builder processType(String processType) {
            return processType(Output.of(processType));
        }

        /**
         * @param ruleType Possible Values: `Prop`, `Env`
         * 
         * @return builder
         * 
         */
        public Builder ruleType(@Nullable Output<String> ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        /**
         * @param ruleType Possible Values: `Prop`, `Env`
         * 
         * @return builder
         * 
         */
        public Builder ruleType(String ruleType) {
            return ruleType(Output.of(ruleType));
        }

        public ProcessGroupSimpleDetectionState build() {
            return $;
        }
    }

}
