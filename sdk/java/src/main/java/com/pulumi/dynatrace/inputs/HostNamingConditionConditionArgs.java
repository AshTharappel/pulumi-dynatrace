// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionApplicationTypeArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionApplicationTypeComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionAzureComputeModeArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionAzureComputeModeComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionAzureSkuComparisionArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionAzureSkusArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionBaseComparisonBasicArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionBaseConditionKeyArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionBitnessArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionBitnessComparisionArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionCloudTypeArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionCloudTypeComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionCustomApplicationTypeArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionCustomApplicationTypeComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionCustomHostMetadataArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionCustomHostMetadataConditionKeyArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionCustomProcessMetadataArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionCustomProcessMetadataConditionKeyArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionDatabaseTopologyArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionDatabaseTopologyComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionDcrumDecoderArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionDcrumDecoderComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionEntityArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionEntityIdComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionHostTechArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionHypervisorArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionHypervisorTypeComparisionArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionIndexedNameArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionIndexedNameComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionIndexedStringArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionIndexedStringComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionIndexedTagArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionIndexedTagComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionIntegerArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionIntegerComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionIpaddressArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionIpaddressComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionKeyArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionMobilePlatformArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionMobilePlatformComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionOsArchArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionOsTypeArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionOsarchitectureComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionOstypeComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionPaasTypeArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionPaasTypeComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionProcessMetadataArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionProcessMetadataConditionKeyArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionServiceTopologyArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionServiceTopologyComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionServiceTypeArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionServiceTypeComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionSimpleHostTechComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionSimpleTechComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionStringArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionStringComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionStringConditionKeyArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionStringKeyArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionSyntheticEngineArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionSyntheticEngineTypeComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionTagArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionTagComparisonArgs;
import com.pulumi.dynatrace.inputs.HostNamingConditionConditionTechArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HostNamingConditionConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostNamingConditionConditionArgs Empty = new HostNamingConditionConditionArgs();

    /**
     * @deprecated
     * You should use &#39;application_type&#39; instead of &#39;application_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="applicationTypeComparisons")
    private @Nullable Output<List<HostNamingConditionConditionApplicationTypeComparisonArgs>> applicationTypeComparisons;

    /**
     * @deprecated
     * You should use &#39;application_type&#39; instead of &#39;application_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionApplicationTypeComparisonArgs>>> applicationTypeComparisons() {
        return Optional.ofNullable(this.applicationTypeComparisons);
    }

    @Import(name="applicationTypes")
    private @Nullable Output<List<HostNamingConditionConditionApplicationTypeArgs>> applicationTypes;

    public Optional<Output<List<HostNamingConditionConditionApplicationTypeArgs>>> applicationTypes() {
        return Optional.ofNullable(this.applicationTypes);
    }

    @Import(name="azureComputeModeComparisons")
    private @Nullable Output<List<HostNamingConditionConditionAzureComputeModeComparisonArgs>> azureComputeModeComparisons;

    public Optional<Output<List<HostNamingConditionConditionAzureComputeModeComparisonArgs>>> azureComputeModeComparisons() {
        return Optional.ofNullable(this.azureComputeModeComparisons);
    }

    /**
     * @deprecated
     * You should use &#39;azure_compute_mode&#39; instead of &#39;azure_compute_mode_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="azureComputeModes")
    private @Nullable Output<List<HostNamingConditionConditionAzureComputeModeArgs>> azureComputeModes;

    /**
     * @deprecated
     * You should use &#39;azure_compute_mode&#39; instead of &#39;azure_compute_mode_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionAzureComputeModeArgs>>> azureComputeModes() {
        return Optional.ofNullable(this.azureComputeModes);
    }

    /**
     * @deprecated
     * You should use &#39;azure_sku&#39; instead of &#39;azure_sku_comparision&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility. */
    @Import(name="azureSkuComparisions")
    private @Nullable Output<List<HostNamingConditionConditionAzureSkuComparisionArgs>> azureSkuComparisions;

    /**
     * @deprecated
     * You should use &#39;azure_sku&#39; instead of &#39;azure_sku_comparision&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionAzureSkuComparisionArgs>>> azureSkuComparisions() {
        return Optional.ofNullable(this.azureSkuComparisions);
    }

    @Import(name="azureSkus")
    private @Nullable Output<List<HostNamingConditionConditionAzureSkusArgs>> azureSkus;

    public Optional<Output<List<HostNamingConditionConditionAzureSkusArgs>>> azureSkus() {
        return Optional.ofNullable(this.azureSkus);
    }

    /**
     * @deprecated
     * You should use &#39;comparison&#39; instead of &#39;base_comparison_basic&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility. */
    @Import(name="baseComparisonBasics")
    private @Nullable Output<List<HostNamingConditionConditionBaseComparisonBasicArgs>> baseComparisonBasics;

    /**
     * @deprecated
     * You should use &#39;comparison&#39; instead of &#39;base_comparison_basic&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionBaseComparisonBasicArgs>>> baseComparisonBasics() {
        return Optional.ofNullable(this.baseComparisonBasics);
    }

    /**
     * @deprecated
     * &#39;base_condition_key&#39; is deprecated. You should use &#39;key&#39;
     * 
     */
    @Deprecated /* 'base_condition_key' is deprecated. You should use 'key' */
    @Import(name="baseConditionKeys")
    private @Nullable Output<List<HostNamingConditionConditionBaseConditionKeyArgs>> baseConditionKeys;

    /**
     * @deprecated
     * &#39;base_condition_key&#39; is deprecated. You should use &#39;key&#39;
     * 
     */
    @Deprecated /* 'base_condition_key' is deprecated. You should use 'key' */
    public Optional<Output<List<HostNamingConditionConditionBaseConditionKeyArgs>>> baseConditionKeys() {
        return Optional.ofNullable(this.baseConditionKeys);
    }

    /**
     * @deprecated
     * You should use &#39;bitness&#39; instead of &#39;bitness_comparision&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility. */
    @Import(name="bitnessComparisions")
    private @Nullable Output<List<HostNamingConditionConditionBitnessComparisionArgs>> bitnessComparisions;

    /**
     * @deprecated
     * You should use &#39;bitness&#39; instead of &#39;bitness_comparision&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionBitnessComparisionArgs>>> bitnessComparisions() {
        return Optional.ofNullable(this.bitnessComparisions);
    }

    @Import(name="bitnesses")
    private @Nullable Output<List<HostNamingConditionConditionBitnessArgs>> bitnesses;

    public Optional<Output<List<HostNamingConditionConditionBitnessArgs>>> bitnesses() {
        return Optional.ofNullable(this.bitnesses);
    }

    /**
     * @deprecated
     * You should use &#39;cloud_type&#39; instead of &#39;cloud_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="cloudTypeComparisons")
    private @Nullable Output<List<HostNamingConditionConditionCloudTypeComparisonArgs>> cloudTypeComparisons;

    /**
     * @deprecated
     * You should use &#39;cloud_type&#39; instead of &#39;cloud_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionCloudTypeComparisonArgs>>> cloudTypeComparisons() {
        return Optional.ofNullable(this.cloudTypeComparisons);
    }

    @Import(name="cloudTypes")
    private @Nullable Output<List<HostNamingConditionConditionCloudTypeArgs>> cloudTypes;

    public Optional<Output<List<HostNamingConditionConditionCloudTypeArgs>>> cloudTypes() {
        return Optional.ofNullable(this.cloudTypes);
    }

    @Import(name="comparisons")
    private @Nullable Output<List<HostNamingConditionConditionComparisonArgs>> comparisons;

    public Optional<Output<List<HostNamingConditionConditionComparisonArgs>>> comparisons() {
        return Optional.ofNullable(this.comparisons);
    }

    /**
     * @deprecated
     * You should use &#39;custom_application_type&#39; instead of &#39;custom_application_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="customApplicationTypeComparisons")
    private @Nullable Output<List<HostNamingConditionConditionCustomApplicationTypeComparisonArgs>> customApplicationTypeComparisons;

    /**
     * @deprecated
     * You should use &#39;custom_application_type&#39; instead of &#39;custom_application_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionCustomApplicationTypeComparisonArgs>>> customApplicationTypeComparisons() {
        return Optional.ofNullable(this.customApplicationTypeComparisons);
    }

    @Import(name="customApplicationTypes")
    private @Nullable Output<List<HostNamingConditionConditionCustomApplicationTypeArgs>> customApplicationTypes;

    public Optional<Output<List<HostNamingConditionConditionCustomApplicationTypeArgs>>> customApplicationTypes() {
        return Optional.ofNullable(this.customApplicationTypes);
    }

    /**
     * @deprecated
     * &#39;custom_host_metadata_condition_key&#39; is deprecated. You should use &#39;custom_host_metadata&#39;
     * 
     */
    @Deprecated /* 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata' */
    @Import(name="customHostMetadataConditionKeys")
    private @Nullable Output<List<HostNamingConditionConditionCustomHostMetadataConditionKeyArgs>> customHostMetadataConditionKeys;

    /**
     * @deprecated
     * &#39;custom_host_metadata_condition_key&#39; is deprecated. You should use &#39;custom_host_metadata&#39;
     * 
     */
    @Deprecated /* 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata' */
    public Optional<Output<List<HostNamingConditionConditionCustomHostMetadataConditionKeyArgs>>> customHostMetadataConditionKeys() {
        return Optional.ofNullable(this.customHostMetadataConditionKeys);
    }

    @Import(name="customHostMetadatas")
    private @Nullable Output<List<HostNamingConditionConditionCustomHostMetadataArgs>> customHostMetadatas;

    public Optional<Output<List<HostNamingConditionConditionCustomHostMetadataArgs>>> customHostMetadatas() {
        return Optional.ofNullable(this.customHostMetadatas);
    }

    /**
     * @deprecated
     * &#39;custom_process_metadata_condition_key&#39; is deprecated. You should use &#39;custom_process_metadata&#39;
     * 
     */
    @Deprecated /* 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata' */
    @Import(name="customProcessMetadataConditionKeys")
    private @Nullable Output<List<HostNamingConditionConditionCustomProcessMetadataConditionKeyArgs>> customProcessMetadataConditionKeys;

    /**
     * @deprecated
     * &#39;custom_process_metadata_condition_key&#39; is deprecated. You should use &#39;custom_process_metadata&#39;
     * 
     */
    @Deprecated /* 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata' */
    public Optional<Output<List<HostNamingConditionConditionCustomProcessMetadataConditionKeyArgs>>> customProcessMetadataConditionKeys() {
        return Optional.ofNullable(this.customProcessMetadataConditionKeys);
    }

    @Import(name="customProcessMetadatas")
    private @Nullable Output<List<HostNamingConditionConditionCustomProcessMetadataArgs>> customProcessMetadatas;

    public Optional<Output<List<HostNamingConditionConditionCustomProcessMetadataArgs>>> customProcessMetadatas() {
        return Optional.ofNullable(this.customProcessMetadatas);
    }

    @Import(name="databaseTopologies")
    private @Nullable Output<List<HostNamingConditionConditionDatabaseTopologyArgs>> databaseTopologies;

    public Optional<Output<List<HostNamingConditionConditionDatabaseTopologyArgs>>> databaseTopologies() {
        return Optional.ofNullable(this.databaseTopologies);
    }

    /**
     * @deprecated
     * You should use &#39;database_topology&#39; instead of &#39;database_topology_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="databaseTopologyComparisons")
    private @Nullable Output<List<HostNamingConditionConditionDatabaseTopologyComparisonArgs>> databaseTopologyComparisons;

    /**
     * @deprecated
     * You should use &#39;database_topology&#39; instead of &#39;database_topology_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionDatabaseTopologyComparisonArgs>>> databaseTopologyComparisons() {
        return Optional.ofNullable(this.databaseTopologyComparisons);
    }

    /**
     * @deprecated
     * You should use &#39;dcrum_decoder&#39; instead of &#39;dcrum_decoder_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="dcrumDecoderComparisons")
    private @Nullable Output<List<HostNamingConditionConditionDcrumDecoderComparisonArgs>> dcrumDecoderComparisons;

    /**
     * @deprecated
     * You should use &#39;dcrum_decoder&#39; instead of &#39;dcrum_decoder_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionDcrumDecoderComparisonArgs>>> dcrumDecoderComparisons() {
        return Optional.ofNullable(this.dcrumDecoderComparisons);
    }

    @Import(name="dcrumDecoders")
    private @Nullable Output<List<HostNamingConditionConditionDcrumDecoderArgs>> dcrumDecoders;

    public Optional<Output<List<HostNamingConditionConditionDcrumDecoderArgs>>> dcrumDecoders() {
        return Optional.ofNullable(this.dcrumDecoders);
    }

    @Import(name="entities")
    private @Nullable Output<List<HostNamingConditionConditionEntityArgs>> entities;

    public Optional<Output<List<HostNamingConditionConditionEntityArgs>>> entities() {
        return Optional.ofNullable(this.entities);
    }

    /**
     * @deprecated
     * You should use &#39;entity&#39; instead of &#39;entity_id_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="entityIdComparisons")
    private @Nullable Output<List<HostNamingConditionConditionEntityIdComparisonArgs>> entityIdComparisons;

    /**
     * @deprecated
     * You should use &#39;entity&#39; instead of &#39;entity_id_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionEntityIdComparisonArgs>>> entityIdComparisons() {
        return Optional.ofNullable(this.entityIdComparisons);
    }

    @Import(name="hostTeches")
    private @Nullable Output<List<HostNamingConditionConditionHostTechArgs>> hostTeches;

    public Optional<Output<List<HostNamingConditionConditionHostTechArgs>>> hostTeches() {
        return Optional.ofNullable(this.hostTeches);
    }

    /**
     * @deprecated
     * `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     * 
     */
    @Deprecated /* `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead */
    @Import(name="hypervisorTypeComparisions")
    private @Nullable Output<List<HostNamingConditionConditionHypervisorTypeComparisionArgs>> hypervisorTypeComparisions;

    /**
     * @deprecated
     * `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     * 
     */
    @Deprecated /* `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead */
    public Optional<Output<List<HostNamingConditionConditionHypervisorTypeComparisionArgs>>> hypervisorTypeComparisions() {
        return Optional.ofNullable(this.hypervisorTypeComparisions);
    }

    @Import(name="hypervisors")
    private @Nullable Output<List<HostNamingConditionConditionHypervisorArgs>> hypervisors;

    public Optional<Output<List<HostNamingConditionConditionHypervisorArgs>>> hypervisors() {
        return Optional.ofNullable(this.hypervisors);
    }

    /**
     * @deprecated
     * You should use &#39;indexed_name&#39; instead of &#39;indexed_name_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="indexedNameComparisons")
    private @Nullable Output<List<HostNamingConditionConditionIndexedNameComparisonArgs>> indexedNameComparisons;

    /**
     * @deprecated
     * You should use &#39;indexed_name&#39; instead of &#39;indexed_name_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionIndexedNameComparisonArgs>>> indexedNameComparisons() {
        return Optional.ofNullable(this.indexedNameComparisons);
    }

    @Import(name="indexedNames")
    private @Nullable Output<List<HostNamingConditionConditionIndexedNameArgs>> indexedNames;

    public Optional<Output<List<HostNamingConditionConditionIndexedNameArgs>>> indexedNames() {
        return Optional.ofNullable(this.indexedNames);
    }

    /**
     * @deprecated
     * You should use &#39;indexed_string&#39; instead of &#39;indexed_string_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="indexedStringComparisons")
    private @Nullable Output<List<HostNamingConditionConditionIndexedStringComparisonArgs>> indexedStringComparisons;

    /**
     * @deprecated
     * You should use &#39;indexed_string&#39; instead of &#39;indexed_string_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionIndexedStringComparisonArgs>>> indexedStringComparisons() {
        return Optional.ofNullable(this.indexedStringComparisons);
    }

    @Import(name="indexedStrings")
    private @Nullable Output<List<HostNamingConditionConditionIndexedStringArgs>> indexedStrings;

    public Optional<Output<List<HostNamingConditionConditionIndexedStringArgs>>> indexedStrings() {
        return Optional.ofNullable(this.indexedStrings);
    }

    /**
     * @deprecated
     * You should use &#39;indexed_tag&#39; instead of &#39;indexed_tag_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="indexedTagComparisons")
    private @Nullable Output<List<HostNamingConditionConditionIndexedTagComparisonArgs>> indexedTagComparisons;

    /**
     * @deprecated
     * You should use &#39;indexed_tag&#39; instead of &#39;indexed_tag_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionIndexedTagComparisonArgs>>> indexedTagComparisons() {
        return Optional.ofNullable(this.indexedTagComparisons);
    }

    @Import(name="indexedTags")
    private @Nullable Output<List<HostNamingConditionConditionIndexedTagArgs>> indexedTags;

    public Optional<Output<List<HostNamingConditionConditionIndexedTagArgs>>> indexedTags() {
        return Optional.ofNullable(this.indexedTags);
    }

    /**
     * @deprecated
     * You should use &#39;integer&#39; instead of &#39;integer_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="integerComparisons")
    private @Nullable Output<List<HostNamingConditionConditionIntegerComparisonArgs>> integerComparisons;

    /**
     * @deprecated
     * You should use &#39;integer&#39; instead of &#39;integer_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionIntegerComparisonArgs>>> integerComparisons() {
        return Optional.ofNullable(this.integerComparisons);
    }

    @Import(name="integers")
    private @Nullable Output<List<HostNamingConditionConditionIntegerArgs>> integers;

    public Optional<Output<List<HostNamingConditionConditionIntegerArgs>>> integers() {
        return Optional.ofNullable(this.integers);
    }

    /**
     * @deprecated
     * You should use &#39;ipaddress&#39; instead of &#39;ipaddress_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="ipaddressComparisons")
    private @Nullable Output<List<HostNamingConditionConditionIpaddressComparisonArgs>> ipaddressComparisons;

    /**
     * @deprecated
     * You should use &#39;ipaddress&#39; instead of &#39;ipaddress_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionIpaddressComparisonArgs>>> ipaddressComparisons() {
        return Optional.ofNullable(this.ipaddressComparisons);
    }

    @Import(name="ipaddresses")
    private @Nullable Output<List<HostNamingConditionConditionIpaddressArgs>> ipaddresses;

    public Optional<Output<List<HostNamingConditionConditionIpaddressArgs>>> ipaddresses() {
        return Optional.ofNullable(this.ipaddresses);
    }

    @Import(name="keys")
    private @Nullable Output<List<HostNamingConditionConditionKeyArgs>> keys;

    public Optional<Output<List<HostNamingConditionConditionKeyArgs>>> keys() {
        return Optional.ofNullable(this.keys);
    }

    /**
     * @deprecated
     * You should use &#39;mobile_platform&#39; instead of &#39;mobile_platform_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="mobilePlatformComparisons")
    private @Nullable Output<List<HostNamingConditionConditionMobilePlatformComparisonArgs>> mobilePlatformComparisons;

    /**
     * @deprecated
     * You should use &#39;mobile_platform&#39; instead of &#39;mobile_platform_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionMobilePlatformComparisonArgs>>> mobilePlatformComparisons() {
        return Optional.ofNullable(this.mobilePlatformComparisons);
    }

    @Import(name="mobilePlatforms")
    private @Nullable Output<List<HostNamingConditionConditionMobilePlatformArgs>> mobilePlatforms;

    public Optional<Output<List<HostNamingConditionConditionMobilePlatformArgs>>> mobilePlatforms() {
        return Optional.ofNullable(this.mobilePlatforms);
    }

    @Import(name="osArches")
    private @Nullable Output<List<HostNamingConditionConditionOsArchArgs>> osArches;

    public Optional<Output<List<HostNamingConditionConditionOsArchArgs>>> osArches() {
        return Optional.ofNullable(this.osArches);
    }

    @Import(name="osTypes")
    private @Nullable Output<List<HostNamingConditionConditionOsTypeArgs>> osTypes;

    public Optional<Output<List<HostNamingConditionConditionOsTypeArgs>>> osTypes() {
        return Optional.ofNullable(this.osTypes);
    }

    /**
     * @deprecated
     * You should use &#39;os_arch&#39; instead of &#39;osarchitecture_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="osarchitectureComparisons")
    private @Nullable Output<List<HostNamingConditionConditionOsarchitectureComparisonArgs>> osarchitectureComparisons;

    /**
     * @deprecated
     * You should use &#39;os_arch&#39; instead of &#39;osarchitecture_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionOsarchitectureComparisonArgs>>> osarchitectureComparisons() {
        return Optional.ofNullable(this.osarchitectureComparisons);
    }

    /**
     * @deprecated
     * You should use &#39;os_type&#39; instead of &#39;ostype_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="ostypeComparisons")
    private @Nullable Output<List<HostNamingConditionConditionOstypeComparisonArgs>> ostypeComparisons;

    /**
     * @deprecated
     * You should use &#39;os_type&#39; instead of &#39;ostype_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionOstypeComparisonArgs>>> ostypeComparisons() {
        return Optional.ofNullable(this.ostypeComparisons);
    }

    /**
     * @deprecated
     * You should use &#39;paas_type&#39; instead of &#39;paas_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="paasTypeComparisons")
    private @Nullable Output<List<HostNamingConditionConditionPaasTypeComparisonArgs>> paasTypeComparisons;

    /**
     * @deprecated
     * You should use &#39;paas_type&#39; instead of &#39;paas_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionPaasTypeComparisonArgs>>> paasTypeComparisons() {
        return Optional.ofNullable(this.paasTypeComparisons);
    }

    @Import(name="paasTypes")
    private @Nullable Output<List<HostNamingConditionConditionPaasTypeArgs>> paasTypes;

    public Optional<Output<List<HostNamingConditionConditionPaasTypeArgs>>> paasTypes() {
        return Optional.ofNullable(this.paasTypes);
    }

    /**
     * @deprecated
     * &#39;process_metadata_condition_key&#39; is deprecated. You should use &#39;process_metadata&#39;
     * 
     */
    @Deprecated /* 'process_metadata_condition_key' is deprecated. You should use 'process_metadata' */
    @Import(name="processMetadataConditionKeys")
    private @Nullable Output<List<HostNamingConditionConditionProcessMetadataConditionKeyArgs>> processMetadataConditionKeys;

    /**
     * @deprecated
     * &#39;process_metadata_condition_key&#39; is deprecated. You should use &#39;process_metadata&#39;
     * 
     */
    @Deprecated /* 'process_metadata_condition_key' is deprecated. You should use 'process_metadata' */
    public Optional<Output<List<HostNamingConditionConditionProcessMetadataConditionKeyArgs>>> processMetadataConditionKeys() {
        return Optional.ofNullable(this.processMetadataConditionKeys);
    }

    @Import(name="processMetadatas")
    private @Nullable Output<List<HostNamingConditionConditionProcessMetadataArgs>> processMetadatas;

    public Optional<Output<List<HostNamingConditionConditionProcessMetadataArgs>>> processMetadatas() {
        return Optional.ofNullable(this.processMetadatas);
    }

    @Import(name="serviceTopologies")
    private @Nullable Output<List<HostNamingConditionConditionServiceTopologyArgs>> serviceTopologies;

    public Optional<Output<List<HostNamingConditionConditionServiceTopologyArgs>>> serviceTopologies() {
        return Optional.ofNullable(this.serviceTopologies);
    }

    /**
     * @deprecated
     * You should use &#39;service_topology&#39; instead of &#39;service_topology_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="serviceTopologyComparisons")
    private @Nullable Output<List<HostNamingConditionConditionServiceTopologyComparisonArgs>> serviceTopologyComparisons;

    /**
     * @deprecated
     * You should use &#39;service_topology&#39; instead of &#39;service_topology_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionServiceTopologyComparisonArgs>>> serviceTopologyComparisons() {
        return Optional.ofNullable(this.serviceTopologyComparisons);
    }

    /**
     * @deprecated
     * You should use &#39;service_type&#39; instead of &#39;service_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="serviceTypeComparisons")
    private @Nullable Output<List<HostNamingConditionConditionServiceTypeComparisonArgs>> serviceTypeComparisons;

    /**
     * @deprecated
     * You should use &#39;service_type&#39; instead of &#39;service_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionServiceTypeComparisonArgs>>> serviceTypeComparisons() {
        return Optional.ofNullable(this.serviceTypeComparisons);
    }

    @Import(name="serviceTypes")
    private @Nullable Output<List<HostNamingConditionConditionServiceTypeArgs>> serviceTypes;

    public Optional<Output<List<HostNamingConditionConditionServiceTypeArgs>>> serviceTypes() {
        return Optional.ofNullable(this.serviceTypes);
    }

    /**
     * @deprecated
     * You should use &#39;host_tech&#39; instead of &#39;simple_host_tech_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="simpleHostTechComparisons")
    private @Nullable Output<List<HostNamingConditionConditionSimpleHostTechComparisonArgs>> simpleHostTechComparisons;

    /**
     * @deprecated
     * You should use &#39;host_tech&#39; instead of &#39;simple_host_tech_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionSimpleHostTechComparisonArgs>>> simpleHostTechComparisons() {
        return Optional.ofNullable(this.simpleHostTechComparisons);
    }

    /**
     * @deprecated
     * You should use &#39;tech&#39; instead of &#39;simple_tech_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="simpleTechComparisons")
    private @Nullable Output<List<HostNamingConditionConditionSimpleTechComparisonArgs>> simpleTechComparisons;

    /**
     * @deprecated
     * You should use &#39;tech&#39; instead of &#39;simple_tech_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionSimpleTechComparisonArgs>>> simpleTechComparisons() {
        return Optional.ofNullable(this.simpleTechComparisons);
    }

    /**
     * @deprecated
     * You should use &#39;string&#39; instead of &#39;string_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="stringComparisons")
    private @Nullable Output<List<HostNamingConditionConditionStringComparisonArgs>> stringComparisons;

    /**
     * @deprecated
     * You should use &#39;string&#39; instead of &#39;string_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionStringComparisonArgs>>> stringComparisons() {
        return Optional.ofNullable(this.stringComparisons);
    }

    /**
     * @deprecated
     * &#39;string_condition_key&#39; is deprecated. You should use &#39;string_key&#39;
     * 
     */
    @Deprecated /* 'string_condition_key' is deprecated. You should use 'string_key' */
    @Import(name="stringConditionKeys")
    private @Nullable Output<List<HostNamingConditionConditionStringConditionKeyArgs>> stringConditionKeys;

    /**
     * @deprecated
     * &#39;string_condition_key&#39; is deprecated. You should use &#39;string_key&#39;
     * 
     */
    @Deprecated /* 'string_condition_key' is deprecated. You should use 'string_key' */
    public Optional<Output<List<HostNamingConditionConditionStringConditionKeyArgs>>> stringConditionKeys() {
        return Optional.ofNullable(this.stringConditionKeys);
    }

    @Import(name="stringKeys")
    private @Nullable Output<List<HostNamingConditionConditionStringKeyArgs>> stringKeys;

    public Optional<Output<List<HostNamingConditionConditionStringKeyArgs>>> stringKeys() {
        return Optional.ofNullable(this.stringKeys);
    }

    @Import(name="strings")
    private @Nullable Output<List<HostNamingConditionConditionStringArgs>> strings;

    public Optional<Output<List<HostNamingConditionConditionStringArgs>>> strings() {
        return Optional.ofNullable(this.strings);
    }

    /**
     * @deprecated
     * You should use &#39;synthetic_engine&#39; instead of &#39;synthetic_engine_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="syntheticEngineTypeComparisons")
    private @Nullable Output<List<HostNamingConditionConditionSyntheticEngineTypeComparisonArgs>> syntheticEngineTypeComparisons;

    /**
     * @deprecated
     * You should use &#39;synthetic_engine&#39; instead of &#39;synthetic_engine_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionSyntheticEngineTypeComparisonArgs>>> syntheticEngineTypeComparisons() {
        return Optional.ofNullable(this.syntheticEngineTypeComparisons);
    }

    @Import(name="syntheticEngines")
    private @Nullable Output<List<HostNamingConditionConditionSyntheticEngineArgs>> syntheticEngines;

    public Optional<Output<List<HostNamingConditionConditionSyntheticEngineArgs>>> syntheticEngines() {
        return Optional.ofNullable(this.syntheticEngines);
    }

    /**
     * @deprecated
     * You should use &#39;tag&#39; instead of &#39;tag_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility. */
    @Import(name="tagComparisons")
    private @Nullable Output<List<HostNamingConditionConditionTagComparisonArgs>> tagComparisons;

    /**
     * @deprecated
     * You should use &#39;tag&#39; instead of &#39;tag_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility. */
    public Optional<Output<List<HostNamingConditionConditionTagComparisonArgs>>> tagComparisons() {
        return Optional.ofNullable(this.tagComparisons);
    }

    @Import(name="tags")
    private @Nullable Output<List<HostNamingConditionConditionTagArgs>> tags;

    public Optional<Output<List<HostNamingConditionConditionTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="teches")
    private @Nullable Output<List<HostNamingConditionConditionTechArgs>> teches;

    public Optional<Output<List<HostNamingConditionConditionTechArgs>>> teches() {
        return Optional.ofNullable(this.teches);
    }

    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    private HostNamingConditionConditionArgs() {}

    private HostNamingConditionConditionArgs(HostNamingConditionConditionArgs $) {
        this.applicationTypeComparisons = $.applicationTypeComparisons;
        this.applicationTypes = $.applicationTypes;
        this.azureComputeModeComparisons = $.azureComputeModeComparisons;
        this.azureComputeModes = $.azureComputeModes;
        this.azureSkuComparisions = $.azureSkuComparisions;
        this.azureSkus = $.azureSkus;
        this.baseComparisonBasics = $.baseComparisonBasics;
        this.baseConditionKeys = $.baseConditionKeys;
        this.bitnessComparisions = $.bitnessComparisions;
        this.bitnesses = $.bitnesses;
        this.cloudTypeComparisons = $.cloudTypeComparisons;
        this.cloudTypes = $.cloudTypes;
        this.comparisons = $.comparisons;
        this.customApplicationTypeComparisons = $.customApplicationTypeComparisons;
        this.customApplicationTypes = $.customApplicationTypes;
        this.customHostMetadataConditionKeys = $.customHostMetadataConditionKeys;
        this.customHostMetadatas = $.customHostMetadatas;
        this.customProcessMetadataConditionKeys = $.customProcessMetadataConditionKeys;
        this.customProcessMetadatas = $.customProcessMetadatas;
        this.databaseTopologies = $.databaseTopologies;
        this.databaseTopologyComparisons = $.databaseTopologyComparisons;
        this.dcrumDecoderComparisons = $.dcrumDecoderComparisons;
        this.dcrumDecoders = $.dcrumDecoders;
        this.entities = $.entities;
        this.entityIdComparisons = $.entityIdComparisons;
        this.hostTeches = $.hostTeches;
        this.hypervisorTypeComparisions = $.hypervisorTypeComparisions;
        this.hypervisors = $.hypervisors;
        this.indexedNameComparisons = $.indexedNameComparisons;
        this.indexedNames = $.indexedNames;
        this.indexedStringComparisons = $.indexedStringComparisons;
        this.indexedStrings = $.indexedStrings;
        this.indexedTagComparisons = $.indexedTagComparisons;
        this.indexedTags = $.indexedTags;
        this.integerComparisons = $.integerComparisons;
        this.integers = $.integers;
        this.ipaddressComparisons = $.ipaddressComparisons;
        this.ipaddresses = $.ipaddresses;
        this.keys = $.keys;
        this.mobilePlatformComparisons = $.mobilePlatformComparisons;
        this.mobilePlatforms = $.mobilePlatforms;
        this.osArches = $.osArches;
        this.osTypes = $.osTypes;
        this.osarchitectureComparisons = $.osarchitectureComparisons;
        this.ostypeComparisons = $.ostypeComparisons;
        this.paasTypeComparisons = $.paasTypeComparisons;
        this.paasTypes = $.paasTypes;
        this.processMetadataConditionKeys = $.processMetadataConditionKeys;
        this.processMetadatas = $.processMetadatas;
        this.serviceTopologies = $.serviceTopologies;
        this.serviceTopologyComparisons = $.serviceTopologyComparisons;
        this.serviceTypeComparisons = $.serviceTypeComparisons;
        this.serviceTypes = $.serviceTypes;
        this.simpleHostTechComparisons = $.simpleHostTechComparisons;
        this.simpleTechComparisons = $.simpleTechComparisons;
        this.stringComparisons = $.stringComparisons;
        this.stringConditionKeys = $.stringConditionKeys;
        this.stringKeys = $.stringKeys;
        this.strings = $.strings;
        this.syntheticEngineTypeComparisons = $.syntheticEngineTypeComparisons;
        this.syntheticEngines = $.syntheticEngines;
        this.tagComparisons = $.tagComparisons;
        this.tags = $.tags;
        this.teches = $.teches;
        this.unknowns = $.unknowns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostNamingConditionConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostNamingConditionConditionArgs $;

        public Builder() {
            $ = new HostNamingConditionConditionArgs();
        }

        public Builder(HostNamingConditionConditionArgs defaults) {
            $ = new HostNamingConditionConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;application_type&#39; instead of &#39;application_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder applicationTypeComparisons(@Nullable Output<List<HostNamingConditionConditionApplicationTypeComparisonArgs>> applicationTypeComparisons) {
            $.applicationTypeComparisons = applicationTypeComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;application_type&#39; instead of &#39;application_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder applicationTypeComparisons(List<HostNamingConditionConditionApplicationTypeComparisonArgs> applicationTypeComparisons) {
            return applicationTypeComparisons(Output.of(applicationTypeComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;application_type&#39; instead of &#39;application_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder applicationTypeComparisons(HostNamingConditionConditionApplicationTypeComparisonArgs... applicationTypeComparisons) {
            return applicationTypeComparisons(List.of(applicationTypeComparisons));
        }

        public Builder applicationTypes(@Nullable Output<List<HostNamingConditionConditionApplicationTypeArgs>> applicationTypes) {
            $.applicationTypes = applicationTypes;
            return this;
        }

        public Builder applicationTypes(List<HostNamingConditionConditionApplicationTypeArgs> applicationTypes) {
            return applicationTypes(Output.of(applicationTypes));
        }

        public Builder applicationTypes(HostNamingConditionConditionApplicationTypeArgs... applicationTypes) {
            return applicationTypes(List.of(applicationTypes));
        }

        public Builder azureComputeModeComparisons(@Nullable Output<List<HostNamingConditionConditionAzureComputeModeComparisonArgs>> azureComputeModeComparisons) {
            $.azureComputeModeComparisons = azureComputeModeComparisons;
            return this;
        }

        public Builder azureComputeModeComparisons(List<HostNamingConditionConditionAzureComputeModeComparisonArgs> azureComputeModeComparisons) {
            return azureComputeModeComparisons(Output.of(azureComputeModeComparisons));
        }

        public Builder azureComputeModeComparisons(HostNamingConditionConditionAzureComputeModeComparisonArgs... azureComputeModeComparisons) {
            return azureComputeModeComparisons(List.of(azureComputeModeComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;azure_compute_mode&#39; instead of &#39;azure_compute_mode_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility. */
        public Builder azureComputeModes(@Nullable Output<List<HostNamingConditionConditionAzureComputeModeArgs>> azureComputeModes) {
            $.azureComputeModes = azureComputeModes;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;azure_compute_mode&#39; instead of &#39;azure_compute_mode_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility. */
        public Builder azureComputeModes(List<HostNamingConditionConditionAzureComputeModeArgs> azureComputeModes) {
            return azureComputeModes(Output.of(azureComputeModes));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;azure_compute_mode&#39; instead of &#39;azure_compute_mode_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility. */
        public Builder azureComputeModes(HostNamingConditionConditionAzureComputeModeArgs... azureComputeModes) {
            return azureComputeModes(List.of(azureComputeModes));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;azure_sku&#39; instead of &#39;azure_sku_comparision&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility. */
        public Builder azureSkuComparisions(@Nullable Output<List<HostNamingConditionConditionAzureSkuComparisionArgs>> azureSkuComparisions) {
            $.azureSkuComparisions = azureSkuComparisions;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;azure_sku&#39; instead of &#39;azure_sku_comparision&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility. */
        public Builder azureSkuComparisions(List<HostNamingConditionConditionAzureSkuComparisionArgs> azureSkuComparisions) {
            return azureSkuComparisions(Output.of(azureSkuComparisions));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;azure_sku&#39; instead of &#39;azure_sku_comparision&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility. */
        public Builder azureSkuComparisions(HostNamingConditionConditionAzureSkuComparisionArgs... azureSkuComparisions) {
            return azureSkuComparisions(List.of(azureSkuComparisions));
        }

        public Builder azureSkus(@Nullable Output<List<HostNamingConditionConditionAzureSkusArgs>> azureSkus) {
            $.azureSkus = azureSkus;
            return this;
        }

        public Builder azureSkus(List<HostNamingConditionConditionAzureSkusArgs> azureSkus) {
            return azureSkus(Output.of(azureSkus));
        }

        public Builder azureSkus(HostNamingConditionConditionAzureSkusArgs... azureSkus) {
            return azureSkus(List.of(azureSkus));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;comparison&#39; instead of &#39;base_comparison_basic&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility. */
        public Builder baseComparisonBasics(@Nullable Output<List<HostNamingConditionConditionBaseComparisonBasicArgs>> baseComparisonBasics) {
            $.baseComparisonBasics = baseComparisonBasics;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;comparison&#39; instead of &#39;base_comparison_basic&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility. */
        public Builder baseComparisonBasics(List<HostNamingConditionConditionBaseComparisonBasicArgs> baseComparisonBasics) {
            return baseComparisonBasics(Output.of(baseComparisonBasics));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;comparison&#39; instead of &#39;base_comparison_basic&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility. */
        public Builder baseComparisonBasics(HostNamingConditionConditionBaseComparisonBasicArgs... baseComparisonBasics) {
            return baseComparisonBasics(List.of(baseComparisonBasics));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * &#39;base_condition_key&#39; is deprecated. You should use &#39;key&#39;
         * 
         */
        @Deprecated /* 'base_condition_key' is deprecated. You should use 'key' */
        public Builder baseConditionKeys(@Nullable Output<List<HostNamingConditionConditionBaseConditionKeyArgs>> baseConditionKeys) {
            $.baseConditionKeys = baseConditionKeys;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * &#39;base_condition_key&#39; is deprecated. You should use &#39;key&#39;
         * 
         */
        @Deprecated /* 'base_condition_key' is deprecated. You should use 'key' */
        public Builder baseConditionKeys(List<HostNamingConditionConditionBaseConditionKeyArgs> baseConditionKeys) {
            return baseConditionKeys(Output.of(baseConditionKeys));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * &#39;base_condition_key&#39; is deprecated. You should use &#39;key&#39;
         * 
         */
        @Deprecated /* 'base_condition_key' is deprecated. You should use 'key' */
        public Builder baseConditionKeys(HostNamingConditionConditionBaseConditionKeyArgs... baseConditionKeys) {
            return baseConditionKeys(List.of(baseConditionKeys));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;bitness&#39; instead of &#39;bitness_comparision&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility. */
        public Builder bitnessComparisions(@Nullable Output<List<HostNamingConditionConditionBitnessComparisionArgs>> bitnessComparisions) {
            $.bitnessComparisions = bitnessComparisions;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;bitness&#39; instead of &#39;bitness_comparision&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility. */
        public Builder bitnessComparisions(List<HostNamingConditionConditionBitnessComparisionArgs> bitnessComparisions) {
            return bitnessComparisions(Output.of(bitnessComparisions));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;bitness&#39; instead of &#39;bitness_comparision&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility. */
        public Builder bitnessComparisions(HostNamingConditionConditionBitnessComparisionArgs... bitnessComparisions) {
            return bitnessComparisions(List.of(bitnessComparisions));
        }

        public Builder bitnesses(@Nullable Output<List<HostNamingConditionConditionBitnessArgs>> bitnesses) {
            $.bitnesses = bitnesses;
            return this;
        }

        public Builder bitnesses(List<HostNamingConditionConditionBitnessArgs> bitnesses) {
            return bitnesses(Output.of(bitnesses));
        }

        public Builder bitnesses(HostNamingConditionConditionBitnessArgs... bitnesses) {
            return bitnesses(List.of(bitnesses));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;cloud_type&#39; instead of &#39;cloud_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder cloudTypeComparisons(@Nullable Output<List<HostNamingConditionConditionCloudTypeComparisonArgs>> cloudTypeComparisons) {
            $.cloudTypeComparisons = cloudTypeComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;cloud_type&#39; instead of &#39;cloud_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder cloudTypeComparisons(List<HostNamingConditionConditionCloudTypeComparisonArgs> cloudTypeComparisons) {
            return cloudTypeComparisons(Output.of(cloudTypeComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;cloud_type&#39; instead of &#39;cloud_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder cloudTypeComparisons(HostNamingConditionConditionCloudTypeComparisonArgs... cloudTypeComparisons) {
            return cloudTypeComparisons(List.of(cloudTypeComparisons));
        }

        public Builder cloudTypes(@Nullable Output<List<HostNamingConditionConditionCloudTypeArgs>> cloudTypes) {
            $.cloudTypes = cloudTypes;
            return this;
        }

        public Builder cloudTypes(List<HostNamingConditionConditionCloudTypeArgs> cloudTypes) {
            return cloudTypes(Output.of(cloudTypes));
        }

        public Builder cloudTypes(HostNamingConditionConditionCloudTypeArgs... cloudTypes) {
            return cloudTypes(List.of(cloudTypes));
        }

        public Builder comparisons(@Nullable Output<List<HostNamingConditionConditionComparisonArgs>> comparisons) {
            $.comparisons = comparisons;
            return this;
        }

        public Builder comparisons(List<HostNamingConditionConditionComparisonArgs> comparisons) {
            return comparisons(Output.of(comparisons));
        }

        public Builder comparisons(HostNamingConditionConditionComparisonArgs... comparisons) {
            return comparisons(List.of(comparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;custom_application_type&#39; instead of &#39;custom_application_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder customApplicationTypeComparisons(@Nullable Output<List<HostNamingConditionConditionCustomApplicationTypeComparisonArgs>> customApplicationTypeComparisons) {
            $.customApplicationTypeComparisons = customApplicationTypeComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;custom_application_type&#39; instead of &#39;custom_application_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder customApplicationTypeComparisons(List<HostNamingConditionConditionCustomApplicationTypeComparisonArgs> customApplicationTypeComparisons) {
            return customApplicationTypeComparisons(Output.of(customApplicationTypeComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;custom_application_type&#39; instead of &#39;custom_application_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder customApplicationTypeComparisons(HostNamingConditionConditionCustomApplicationTypeComparisonArgs... customApplicationTypeComparisons) {
            return customApplicationTypeComparisons(List.of(customApplicationTypeComparisons));
        }

        public Builder customApplicationTypes(@Nullable Output<List<HostNamingConditionConditionCustomApplicationTypeArgs>> customApplicationTypes) {
            $.customApplicationTypes = customApplicationTypes;
            return this;
        }

        public Builder customApplicationTypes(List<HostNamingConditionConditionCustomApplicationTypeArgs> customApplicationTypes) {
            return customApplicationTypes(Output.of(customApplicationTypes));
        }

        public Builder customApplicationTypes(HostNamingConditionConditionCustomApplicationTypeArgs... customApplicationTypes) {
            return customApplicationTypes(List.of(customApplicationTypes));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * &#39;custom_host_metadata_condition_key&#39; is deprecated. You should use &#39;custom_host_metadata&#39;
         * 
         */
        @Deprecated /* 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata' */
        public Builder customHostMetadataConditionKeys(@Nullable Output<List<HostNamingConditionConditionCustomHostMetadataConditionKeyArgs>> customHostMetadataConditionKeys) {
            $.customHostMetadataConditionKeys = customHostMetadataConditionKeys;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * &#39;custom_host_metadata_condition_key&#39; is deprecated. You should use &#39;custom_host_metadata&#39;
         * 
         */
        @Deprecated /* 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata' */
        public Builder customHostMetadataConditionKeys(List<HostNamingConditionConditionCustomHostMetadataConditionKeyArgs> customHostMetadataConditionKeys) {
            return customHostMetadataConditionKeys(Output.of(customHostMetadataConditionKeys));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * &#39;custom_host_metadata_condition_key&#39; is deprecated. You should use &#39;custom_host_metadata&#39;
         * 
         */
        @Deprecated /* 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata' */
        public Builder customHostMetadataConditionKeys(HostNamingConditionConditionCustomHostMetadataConditionKeyArgs... customHostMetadataConditionKeys) {
            return customHostMetadataConditionKeys(List.of(customHostMetadataConditionKeys));
        }

        public Builder customHostMetadatas(@Nullable Output<List<HostNamingConditionConditionCustomHostMetadataArgs>> customHostMetadatas) {
            $.customHostMetadatas = customHostMetadatas;
            return this;
        }

        public Builder customHostMetadatas(List<HostNamingConditionConditionCustomHostMetadataArgs> customHostMetadatas) {
            return customHostMetadatas(Output.of(customHostMetadatas));
        }

        public Builder customHostMetadatas(HostNamingConditionConditionCustomHostMetadataArgs... customHostMetadatas) {
            return customHostMetadatas(List.of(customHostMetadatas));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * &#39;custom_process_metadata_condition_key&#39; is deprecated. You should use &#39;custom_process_metadata&#39;
         * 
         */
        @Deprecated /* 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata' */
        public Builder customProcessMetadataConditionKeys(@Nullable Output<List<HostNamingConditionConditionCustomProcessMetadataConditionKeyArgs>> customProcessMetadataConditionKeys) {
            $.customProcessMetadataConditionKeys = customProcessMetadataConditionKeys;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * &#39;custom_process_metadata_condition_key&#39; is deprecated. You should use &#39;custom_process_metadata&#39;
         * 
         */
        @Deprecated /* 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata' */
        public Builder customProcessMetadataConditionKeys(List<HostNamingConditionConditionCustomProcessMetadataConditionKeyArgs> customProcessMetadataConditionKeys) {
            return customProcessMetadataConditionKeys(Output.of(customProcessMetadataConditionKeys));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * &#39;custom_process_metadata_condition_key&#39; is deprecated. You should use &#39;custom_process_metadata&#39;
         * 
         */
        @Deprecated /* 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata' */
        public Builder customProcessMetadataConditionKeys(HostNamingConditionConditionCustomProcessMetadataConditionKeyArgs... customProcessMetadataConditionKeys) {
            return customProcessMetadataConditionKeys(List.of(customProcessMetadataConditionKeys));
        }

        public Builder customProcessMetadatas(@Nullable Output<List<HostNamingConditionConditionCustomProcessMetadataArgs>> customProcessMetadatas) {
            $.customProcessMetadatas = customProcessMetadatas;
            return this;
        }

        public Builder customProcessMetadatas(List<HostNamingConditionConditionCustomProcessMetadataArgs> customProcessMetadatas) {
            return customProcessMetadatas(Output.of(customProcessMetadatas));
        }

        public Builder customProcessMetadatas(HostNamingConditionConditionCustomProcessMetadataArgs... customProcessMetadatas) {
            return customProcessMetadatas(List.of(customProcessMetadatas));
        }

        public Builder databaseTopologies(@Nullable Output<List<HostNamingConditionConditionDatabaseTopologyArgs>> databaseTopologies) {
            $.databaseTopologies = databaseTopologies;
            return this;
        }

        public Builder databaseTopologies(List<HostNamingConditionConditionDatabaseTopologyArgs> databaseTopologies) {
            return databaseTopologies(Output.of(databaseTopologies));
        }

        public Builder databaseTopologies(HostNamingConditionConditionDatabaseTopologyArgs... databaseTopologies) {
            return databaseTopologies(List.of(databaseTopologies));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;database_topology&#39; instead of &#39;database_topology_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility. */
        public Builder databaseTopologyComparisons(@Nullable Output<List<HostNamingConditionConditionDatabaseTopologyComparisonArgs>> databaseTopologyComparisons) {
            $.databaseTopologyComparisons = databaseTopologyComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;database_topology&#39; instead of &#39;database_topology_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility. */
        public Builder databaseTopologyComparisons(List<HostNamingConditionConditionDatabaseTopologyComparisonArgs> databaseTopologyComparisons) {
            return databaseTopologyComparisons(Output.of(databaseTopologyComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;database_topology&#39; instead of &#39;database_topology_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility. */
        public Builder databaseTopologyComparisons(HostNamingConditionConditionDatabaseTopologyComparisonArgs... databaseTopologyComparisons) {
            return databaseTopologyComparisons(List.of(databaseTopologyComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;dcrum_decoder&#39; instead of &#39;dcrum_decoder_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility. */
        public Builder dcrumDecoderComparisons(@Nullable Output<List<HostNamingConditionConditionDcrumDecoderComparisonArgs>> dcrumDecoderComparisons) {
            $.dcrumDecoderComparisons = dcrumDecoderComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;dcrum_decoder&#39; instead of &#39;dcrum_decoder_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility. */
        public Builder dcrumDecoderComparisons(List<HostNamingConditionConditionDcrumDecoderComparisonArgs> dcrumDecoderComparisons) {
            return dcrumDecoderComparisons(Output.of(dcrumDecoderComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;dcrum_decoder&#39; instead of &#39;dcrum_decoder_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility. */
        public Builder dcrumDecoderComparisons(HostNamingConditionConditionDcrumDecoderComparisonArgs... dcrumDecoderComparisons) {
            return dcrumDecoderComparisons(List.of(dcrumDecoderComparisons));
        }

        public Builder dcrumDecoders(@Nullable Output<List<HostNamingConditionConditionDcrumDecoderArgs>> dcrumDecoders) {
            $.dcrumDecoders = dcrumDecoders;
            return this;
        }

        public Builder dcrumDecoders(List<HostNamingConditionConditionDcrumDecoderArgs> dcrumDecoders) {
            return dcrumDecoders(Output.of(dcrumDecoders));
        }

        public Builder dcrumDecoders(HostNamingConditionConditionDcrumDecoderArgs... dcrumDecoders) {
            return dcrumDecoders(List.of(dcrumDecoders));
        }

        public Builder entities(@Nullable Output<List<HostNamingConditionConditionEntityArgs>> entities) {
            $.entities = entities;
            return this;
        }

        public Builder entities(List<HostNamingConditionConditionEntityArgs> entities) {
            return entities(Output.of(entities));
        }

        public Builder entities(HostNamingConditionConditionEntityArgs... entities) {
            return entities(List.of(entities));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;entity&#39; instead of &#39;entity_id_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility. */
        public Builder entityIdComparisons(@Nullable Output<List<HostNamingConditionConditionEntityIdComparisonArgs>> entityIdComparisons) {
            $.entityIdComparisons = entityIdComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;entity&#39; instead of &#39;entity_id_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility. */
        public Builder entityIdComparisons(List<HostNamingConditionConditionEntityIdComparisonArgs> entityIdComparisons) {
            return entityIdComparisons(Output.of(entityIdComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;entity&#39; instead of &#39;entity_id_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility. */
        public Builder entityIdComparisons(HostNamingConditionConditionEntityIdComparisonArgs... entityIdComparisons) {
            return entityIdComparisons(List.of(entityIdComparisons));
        }

        public Builder hostTeches(@Nullable Output<List<HostNamingConditionConditionHostTechArgs>> hostTeches) {
            $.hostTeches = hostTeches;
            return this;
        }

        public Builder hostTeches(List<HostNamingConditionConditionHostTechArgs> hostTeches) {
            return hostTeches(Output.of(hostTeches));
        }

        public Builder hostTeches(HostNamingConditionConditionHostTechArgs... hostTeches) {
            return hostTeches(List.of(hostTeches));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
         * 
         */
        @Deprecated /* `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead */
        public Builder hypervisorTypeComparisions(@Nullable Output<List<HostNamingConditionConditionHypervisorTypeComparisionArgs>> hypervisorTypeComparisions) {
            $.hypervisorTypeComparisions = hypervisorTypeComparisions;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
         * 
         */
        @Deprecated /* `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead */
        public Builder hypervisorTypeComparisions(List<HostNamingConditionConditionHypervisorTypeComparisionArgs> hypervisorTypeComparisions) {
            return hypervisorTypeComparisions(Output.of(hypervisorTypeComparisions));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
         * 
         */
        @Deprecated /* `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead */
        public Builder hypervisorTypeComparisions(HostNamingConditionConditionHypervisorTypeComparisionArgs... hypervisorTypeComparisions) {
            return hypervisorTypeComparisions(List.of(hypervisorTypeComparisions));
        }

        public Builder hypervisors(@Nullable Output<List<HostNamingConditionConditionHypervisorArgs>> hypervisors) {
            $.hypervisors = hypervisors;
            return this;
        }

        public Builder hypervisors(List<HostNamingConditionConditionHypervisorArgs> hypervisors) {
            return hypervisors(Output.of(hypervisors));
        }

        public Builder hypervisors(HostNamingConditionConditionHypervisorArgs... hypervisors) {
            return hypervisors(List.of(hypervisors));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;indexed_name&#39; instead of &#39;indexed_name_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility. */
        public Builder indexedNameComparisons(@Nullable Output<List<HostNamingConditionConditionIndexedNameComparisonArgs>> indexedNameComparisons) {
            $.indexedNameComparisons = indexedNameComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;indexed_name&#39; instead of &#39;indexed_name_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility. */
        public Builder indexedNameComparisons(List<HostNamingConditionConditionIndexedNameComparisonArgs> indexedNameComparisons) {
            return indexedNameComparisons(Output.of(indexedNameComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;indexed_name&#39; instead of &#39;indexed_name_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility. */
        public Builder indexedNameComparisons(HostNamingConditionConditionIndexedNameComparisonArgs... indexedNameComparisons) {
            return indexedNameComparisons(List.of(indexedNameComparisons));
        }

        public Builder indexedNames(@Nullable Output<List<HostNamingConditionConditionIndexedNameArgs>> indexedNames) {
            $.indexedNames = indexedNames;
            return this;
        }

        public Builder indexedNames(List<HostNamingConditionConditionIndexedNameArgs> indexedNames) {
            return indexedNames(Output.of(indexedNames));
        }

        public Builder indexedNames(HostNamingConditionConditionIndexedNameArgs... indexedNames) {
            return indexedNames(List.of(indexedNames));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;indexed_string&#39; instead of &#39;indexed_string_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility. */
        public Builder indexedStringComparisons(@Nullable Output<List<HostNamingConditionConditionIndexedStringComparisonArgs>> indexedStringComparisons) {
            $.indexedStringComparisons = indexedStringComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;indexed_string&#39; instead of &#39;indexed_string_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility. */
        public Builder indexedStringComparisons(List<HostNamingConditionConditionIndexedStringComparisonArgs> indexedStringComparisons) {
            return indexedStringComparisons(Output.of(indexedStringComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;indexed_string&#39; instead of &#39;indexed_string_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility. */
        public Builder indexedStringComparisons(HostNamingConditionConditionIndexedStringComparisonArgs... indexedStringComparisons) {
            return indexedStringComparisons(List.of(indexedStringComparisons));
        }

        public Builder indexedStrings(@Nullable Output<List<HostNamingConditionConditionIndexedStringArgs>> indexedStrings) {
            $.indexedStrings = indexedStrings;
            return this;
        }

        public Builder indexedStrings(List<HostNamingConditionConditionIndexedStringArgs> indexedStrings) {
            return indexedStrings(Output.of(indexedStrings));
        }

        public Builder indexedStrings(HostNamingConditionConditionIndexedStringArgs... indexedStrings) {
            return indexedStrings(List.of(indexedStrings));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;indexed_tag&#39; instead of &#39;indexed_tag_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility. */
        public Builder indexedTagComparisons(@Nullable Output<List<HostNamingConditionConditionIndexedTagComparisonArgs>> indexedTagComparisons) {
            $.indexedTagComparisons = indexedTagComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;indexed_tag&#39; instead of &#39;indexed_tag_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility. */
        public Builder indexedTagComparisons(List<HostNamingConditionConditionIndexedTagComparisonArgs> indexedTagComparisons) {
            return indexedTagComparisons(Output.of(indexedTagComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;indexed_tag&#39; instead of &#39;indexed_tag_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility. */
        public Builder indexedTagComparisons(HostNamingConditionConditionIndexedTagComparisonArgs... indexedTagComparisons) {
            return indexedTagComparisons(List.of(indexedTagComparisons));
        }

        public Builder indexedTags(@Nullable Output<List<HostNamingConditionConditionIndexedTagArgs>> indexedTags) {
            $.indexedTags = indexedTags;
            return this;
        }

        public Builder indexedTags(List<HostNamingConditionConditionIndexedTagArgs> indexedTags) {
            return indexedTags(Output.of(indexedTags));
        }

        public Builder indexedTags(HostNamingConditionConditionIndexedTagArgs... indexedTags) {
            return indexedTags(List.of(indexedTags));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;integer&#39; instead of &#39;integer_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility. */
        public Builder integerComparisons(@Nullable Output<List<HostNamingConditionConditionIntegerComparisonArgs>> integerComparisons) {
            $.integerComparisons = integerComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;integer&#39; instead of &#39;integer_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility. */
        public Builder integerComparisons(List<HostNamingConditionConditionIntegerComparisonArgs> integerComparisons) {
            return integerComparisons(Output.of(integerComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;integer&#39; instead of &#39;integer_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility. */
        public Builder integerComparisons(HostNamingConditionConditionIntegerComparisonArgs... integerComparisons) {
            return integerComparisons(List.of(integerComparisons));
        }

        public Builder integers(@Nullable Output<List<HostNamingConditionConditionIntegerArgs>> integers) {
            $.integers = integers;
            return this;
        }

        public Builder integers(List<HostNamingConditionConditionIntegerArgs> integers) {
            return integers(Output.of(integers));
        }

        public Builder integers(HostNamingConditionConditionIntegerArgs... integers) {
            return integers(List.of(integers));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;ipaddress&#39; instead of &#39;ipaddress_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility. */
        public Builder ipaddressComparisons(@Nullable Output<List<HostNamingConditionConditionIpaddressComparisonArgs>> ipaddressComparisons) {
            $.ipaddressComparisons = ipaddressComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;ipaddress&#39; instead of &#39;ipaddress_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility. */
        public Builder ipaddressComparisons(List<HostNamingConditionConditionIpaddressComparisonArgs> ipaddressComparisons) {
            return ipaddressComparisons(Output.of(ipaddressComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;ipaddress&#39; instead of &#39;ipaddress_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility. */
        public Builder ipaddressComparisons(HostNamingConditionConditionIpaddressComparisonArgs... ipaddressComparisons) {
            return ipaddressComparisons(List.of(ipaddressComparisons));
        }

        public Builder ipaddresses(@Nullable Output<List<HostNamingConditionConditionIpaddressArgs>> ipaddresses) {
            $.ipaddresses = ipaddresses;
            return this;
        }

        public Builder ipaddresses(List<HostNamingConditionConditionIpaddressArgs> ipaddresses) {
            return ipaddresses(Output.of(ipaddresses));
        }

        public Builder ipaddresses(HostNamingConditionConditionIpaddressArgs... ipaddresses) {
            return ipaddresses(List.of(ipaddresses));
        }

        public Builder keys(@Nullable Output<List<HostNamingConditionConditionKeyArgs>> keys) {
            $.keys = keys;
            return this;
        }

        public Builder keys(List<HostNamingConditionConditionKeyArgs> keys) {
            return keys(Output.of(keys));
        }

        public Builder keys(HostNamingConditionConditionKeyArgs... keys) {
            return keys(List.of(keys));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;mobile_platform&#39; instead of &#39;mobile_platform_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility. */
        public Builder mobilePlatformComparisons(@Nullable Output<List<HostNamingConditionConditionMobilePlatformComparisonArgs>> mobilePlatformComparisons) {
            $.mobilePlatformComparisons = mobilePlatformComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;mobile_platform&#39; instead of &#39;mobile_platform_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility. */
        public Builder mobilePlatformComparisons(List<HostNamingConditionConditionMobilePlatformComparisonArgs> mobilePlatformComparisons) {
            return mobilePlatformComparisons(Output.of(mobilePlatformComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;mobile_platform&#39; instead of &#39;mobile_platform_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility. */
        public Builder mobilePlatformComparisons(HostNamingConditionConditionMobilePlatformComparisonArgs... mobilePlatformComparisons) {
            return mobilePlatformComparisons(List.of(mobilePlatformComparisons));
        }

        public Builder mobilePlatforms(@Nullable Output<List<HostNamingConditionConditionMobilePlatformArgs>> mobilePlatforms) {
            $.mobilePlatforms = mobilePlatforms;
            return this;
        }

        public Builder mobilePlatforms(List<HostNamingConditionConditionMobilePlatformArgs> mobilePlatforms) {
            return mobilePlatforms(Output.of(mobilePlatforms));
        }

        public Builder mobilePlatforms(HostNamingConditionConditionMobilePlatformArgs... mobilePlatforms) {
            return mobilePlatforms(List.of(mobilePlatforms));
        }

        public Builder osArches(@Nullable Output<List<HostNamingConditionConditionOsArchArgs>> osArches) {
            $.osArches = osArches;
            return this;
        }

        public Builder osArches(List<HostNamingConditionConditionOsArchArgs> osArches) {
            return osArches(Output.of(osArches));
        }

        public Builder osArches(HostNamingConditionConditionOsArchArgs... osArches) {
            return osArches(List.of(osArches));
        }

        public Builder osTypes(@Nullable Output<List<HostNamingConditionConditionOsTypeArgs>> osTypes) {
            $.osTypes = osTypes;
            return this;
        }

        public Builder osTypes(List<HostNamingConditionConditionOsTypeArgs> osTypes) {
            return osTypes(Output.of(osTypes));
        }

        public Builder osTypes(HostNamingConditionConditionOsTypeArgs... osTypes) {
            return osTypes(List.of(osTypes));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;os_arch&#39; instead of &#39;osarchitecture_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility. */
        public Builder osarchitectureComparisons(@Nullable Output<List<HostNamingConditionConditionOsarchitectureComparisonArgs>> osarchitectureComparisons) {
            $.osarchitectureComparisons = osarchitectureComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;os_arch&#39; instead of &#39;osarchitecture_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility. */
        public Builder osarchitectureComparisons(List<HostNamingConditionConditionOsarchitectureComparisonArgs> osarchitectureComparisons) {
            return osarchitectureComparisons(Output.of(osarchitectureComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;os_arch&#39; instead of &#39;osarchitecture_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility. */
        public Builder osarchitectureComparisons(HostNamingConditionConditionOsarchitectureComparisonArgs... osarchitectureComparisons) {
            return osarchitectureComparisons(List.of(osarchitectureComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;os_type&#39; instead of &#39;ostype_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility. */
        public Builder ostypeComparisons(@Nullable Output<List<HostNamingConditionConditionOstypeComparisonArgs>> ostypeComparisons) {
            $.ostypeComparisons = ostypeComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;os_type&#39; instead of &#39;ostype_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility. */
        public Builder ostypeComparisons(List<HostNamingConditionConditionOstypeComparisonArgs> ostypeComparisons) {
            return ostypeComparisons(Output.of(ostypeComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;os_type&#39; instead of &#39;ostype_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility. */
        public Builder ostypeComparisons(HostNamingConditionConditionOstypeComparisonArgs... ostypeComparisons) {
            return ostypeComparisons(List.of(ostypeComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;paas_type&#39; instead of &#39;paas_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder paasTypeComparisons(@Nullable Output<List<HostNamingConditionConditionPaasTypeComparisonArgs>> paasTypeComparisons) {
            $.paasTypeComparisons = paasTypeComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;paas_type&#39; instead of &#39;paas_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder paasTypeComparisons(List<HostNamingConditionConditionPaasTypeComparisonArgs> paasTypeComparisons) {
            return paasTypeComparisons(Output.of(paasTypeComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;paas_type&#39; instead of &#39;paas_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder paasTypeComparisons(HostNamingConditionConditionPaasTypeComparisonArgs... paasTypeComparisons) {
            return paasTypeComparisons(List.of(paasTypeComparisons));
        }

        public Builder paasTypes(@Nullable Output<List<HostNamingConditionConditionPaasTypeArgs>> paasTypes) {
            $.paasTypes = paasTypes;
            return this;
        }

        public Builder paasTypes(List<HostNamingConditionConditionPaasTypeArgs> paasTypes) {
            return paasTypes(Output.of(paasTypes));
        }

        public Builder paasTypes(HostNamingConditionConditionPaasTypeArgs... paasTypes) {
            return paasTypes(List.of(paasTypes));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * &#39;process_metadata_condition_key&#39; is deprecated. You should use &#39;process_metadata&#39;
         * 
         */
        @Deprecated /* 'process_metadata_condition_key' is deprecated. You should use 'process_metadata' */
        public Builder processMetadataConditionKeys(@Nullable Output<List<HostNamingConditionConditionProcessMetadataConditionKeyArgs>> processMetadataConditionKeys) {
            $.processMetadataConditionKeys = processMetadataConditionKeys;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * &#39;process_metadata_condition_key&#39; is deprecated. You should use &#39;process_metadata&#39;
         * 
         */
        @Deprecated /* 'process_metadata_condition_key' is deprecated. You should use 'process_metadata' */
        public Builder processMetadataConditionKeys(List<HostNamingConditionConditionProcessMetadataConditionKeyArgs> processMetadataConditionKeys) {
            return processMetadataConditionKeys(Output.of(processMetadataConditionKeys));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * &#39;process_metadata_condition_key&#39; is deprecated. You should use &#39;process_metadata&#39;
         * 
         */
        @Deprecated /* 'process_metadata_condition_key' is deprecated. You should use 'process_metadata' */
        public Builder processMetadataConditionKeys(HostNamingConditionConditionProcessMetadataConditionKeyArgs... processMetadataConditionKeys) {
            return processMetadataConditionKeys(List.of(processMetadataConditionKeys));
        }

        public Builder processMetadatas(@Nullable Output<List<HostNamingConditionConditionProcessMetadataArgs>> processMetadatas) {
            $.processMetadatas = processMetadatas;
            return this;
        }

        public Builder processMetadatas(List<HostNamingConditionConditionProcessMetadataArgs> processMetadatas) {
            return processMetadatas(Output.of(processMetadatas));
        }

        public Builder processMetadatas(HostNamingConditionConditionProcessMetadataArgs... processMetadatas) {
            return processMetadatas(List.of(processMetadatas));
        }

        public Builder serviceTopologies(@Nullable Output<List<HostNamingConditionConditionServiceTopologyArgs>> serviceTopologies) {
            $.serviceTopologies = serviceTopologies;
            return this;
        }

        public Builder serviceTopologies(List<HostNamingConditionConditionServiceTopologyArgs> serviceTopologies) {
            return serviceTopologies(Output.of(serviceTopologies));
        }

        public Builder serviceTopologies(HostNamingConditionConditionServiceTopologyArgs... serviceTopologies) {
            return serviceTopologies(List.of(serviceTopologies));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;service_topology&#39; instead of &#39;service_topology_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility. */
        public Builder serviceTopologyComparisons(@Nullable Output<List<HostNamingConditionConditionServiceTopologyComparisonArgs>> serviceTopologyComparisons) {
            $.serviceTopologyComparisons = serviceTopologyComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;service_topology&#39; instead of &#39;service_topology_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility. */
        public Builder serviceTopologyComparisons(List<HostNamingConditionConditionServiceTopologyComparisonArgs> serviceTopologyComparisons) {
            return serviceTopologyComparisons(Output.of(serviceTopologyComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;service_topology&#39; instead of &#39;service_topology_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility. */
        public Builder serviceTopologyComparisons(HostNamingConditionConditionServiceTopologyComparisonArgs... serviceTopologyComparisons) {
            return serviceTopologyComparisons(List.of(serviceTopologyComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;service_type&#39; instead of &#39;service_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder serviceTypeComparisons(@Nullable Output<List<HostNamingConditionConditionServiceTypeComparisonArgs>> serviceTypeComparisons) {
            $.serviceTypeComparisons = serviceTypeComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;service_type&#39; instead of &#39;service_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder serviceTypeComparisons(List<HostNamingConditionConditionServiceTypeComparisonArgs> serviceTypeComparisons) {
            return serviceTypeComparisons(Output.of(serviceTypeComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;service_type&#39; instead of &#39;service_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder serviceTypeComparisons(HostNamingConditionConditionServiceTypeComparisonArgs... serviceTypeComparisons) {
            return serviceTypeComparisons(List.of(serviceTypeComparisons));
        }

        public Builder serviceTypes(@Nullable Output<List<HostNamingConditionConditionServiceTypeArgs>> serviceTypes) {
            $.serviceTypes = serviceTypes;
            return this;
        }

        public Builder serviceTypes(List<HostNamingConditionConditionServiceTypeArgs> serviceTypes) {
            return serviceTypes(Output.of(serviceTypes));
        }

        public Builder serviceTypes(HostNamingConditionConditionServiceTypeArgs... serviceTypes) {
            return serviceTypes(List.of(serviceTypes));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;host_tech&#39; instead of &#39;simple_host_tech_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility. */
        public Builder simpleHostTechComparisons(@Nullable Output<List<HostNamingConditionConditionSimpleHostTechComparisonArgs>> simpleHostTechComparisons) {
            $.simpleHostTechComparisons = simpleHostTechComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;host_tech&#39; instead of &#39;simple_host_tech_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility. */
        public Builder simpleHostTechComparisons(List<HostNamingConditionConditionSimpleHostTechComparisonArgs> simpleHostTechComparisons) {
            return simpleHostTechComparisons(Output.of(simpleHostTechComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;host_tech&#39; instead of &#39;simple_host_tech_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility. */
        public Builder simpleHostTechComparisons(HostNamingConditionConditionSimpleHostTechComparisonArgs... simpleHostTechComparisons) {
            return simpleHostTechComparisons(List.of(simpleHostTechComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;tech&#39; instead of &#39;simple_tech_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility. */
        public Builder simpleTechComparisons(@Nullable Output<List<HostNamingConditionConditionSimpleTechComparisonArgs>> simpleTechComparisons) {
            $.simpleTechComparisons = simpleTechComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;tech&#39; instead of &#39;simple_tech_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility. */
        public Builder simpleTechComparisons(List<HostNamingConditionConditionSimpleTechComparisonArgs> simpleTechComparisons) {
            return simpleTechComparisons(Output.of(simpleTechComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;tech&#39; instead of &#39;simple_tech_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility. */
        public Builder simpleTechComparisons(HostNamingConditionConditionSimpleTechComparisonArgs... simpleTechComparisons) {
            return simpleTechComparisons(List.of(simpleTechComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;string&#39; instead of &#39;string_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility. */
        public Builder stringComparisons(@Nullable Output<List<HostNamingConditionConditionStringComparisonArgs>> stringComparisons) {
            $.stringComparisons = stringComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;string&#39; instead of &#39;string_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility. */
        public Builder stringComparisons(List<HostNamingConditionConditionStringComparisonArgs> stringComparisons) {
            return stringComparisons(Output.of(stringComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;string&#39; instead of &#39;string_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility. */
        public Builder stringComparisons(HostNamingConditionConditionStringComparisonArgs... stringComparisons) {
            return stringComparisons(List.of(stringComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * &#39;string_condition_key&#39; is deprecated. You should use &#39;string_key&#39;
         * 
         */
        @Deprecated /* 'string_condition_key' is deprecated. You should use 'string_key' */
        public Builder stringConditionKeys(@Nullable Output<List<HostNamingConditionConditionStringConditionKeyArgs>> stringConditionKeys) {
            $.stringConditionKeys = stringConditionKeys;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * &#39;string_condition_key&#39; is deprecated. You should use &#39;string_key&#39;
         * 
         */
        @Deprecated /* 'string_condition_key' is deprecated. You should use 'string_key' */
        public Builder stringConditionKeys(List<HostNamingConditionConditionStringConditionKeyArgs> stringConditionKeys) {
            return stringConditionKeys(Output.of(stringConditionKeys));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * &#39;string_condition_key&#39; is deprecated. You should use &#39;string_key&#39;
         * 
         */
        @Deprecated /* 'string_condition_key' is deprecated. You should use 'string_key' */
        public Builder stringConditionKeys(HostNamingConditionConditionStringConditionKeyArgs... stringConditionKeys) {
            return stringConditionKeys(List.of(stringConditionKeys));
        }

        public Builder stringKeys(@Nullable Output<List<HostNamingConditionConditionStringKeyArgs>> stringKeys) {
            $.stringKeys = stringKeys;
            return this;
        }

        public Builder stringKeys(List<HostNamingConditionConditionStringKeyArgs> stringKeys) {
            return stringKeys(Output.of(stringKeys));
        }

        public Builder stringKeys(HostNamingConditionConditionStringKeyArgs... stringKeys) {
            return stringKeys(List.of(stringKeys));
        }

        public Builder strings(@Nullable Output<List<HostNamingConditionConditionStringArgs>> strings) {
            $.strings = strings;
            return this;
        }

        public Builder strings(List<HostNamingConditionConditionStringArgs> strings) {
            return strings(Output.of(strings));
        }

        public Builder strings(HostNamingConditionConditionStringArgs... strings) {
            return strings(List.of(strings));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;synthetic_engine&#39; instead of &#39;synthetic_engine_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder syntheticEngineTypeComparisons(@Nullable Output<List<HostNamingConditionConditionSyntheticEngineTypeComparisonArgs>> syntheticEngineTypeComparisons) {
            $.syntheticEngineTypeComparisons = syntheticEngineTypeComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;synthetic_engine&#39; instead of &#39;synthetic_engine_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder syntheticEngineTypeComparisons(List<HostNamingConditionConditionSyntheticEngineTypeComparisonArgs> syntheticEngineTypeComparisons) {
            return syntheticEngineTypeComparisons(Output.of(syntheticEngineTypeComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;synthetic_engine&#39; instead of &#39;synthetic_engine_type_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility. */
        public Builder syntheticEngineTypeComparisons(HostNamingConditionConditionSyntheticEngineTypeComparisonArgs... syntheticEngineTypeComparisons) {
            return syntheticEngineTypeComparisons(List.of(syntheticEngineTypeComparisons));
        }

        public Builder syntheticEngines(@Nullable Output<List<HostNamingConditionConditionSyntheticEngineArgs>> syntheticEngines) {
            $.syntheticEngines = syntheticEngines;
            return this;
        }

        public Builder syntheticEngines(List<HostNamingConditionConditionSyntheticEngineArgs> syntheticEngines) {
            return syntheticEngines(Output.of(syntheticEngines));
        }

        public Builder syntheticEngines(HostNamingConditionConditionSyntheticEngineArgs... syntheticEngines) {
            return syntheticEngines(List.of(syntheticEngines));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;tag&#39; instead of &#39;tag_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility. */
        public Builder tagComparisons(@Nullable Output<List<HostNamingConditionConditionTagComparisonArgs>> tagComparisons) {
            $.tagComparisons = tagComparisons;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;tag&#39; instead of &#39;tag_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility. */
        public Builder tagComparisons(List<HostNamingConditionConditionTagComparisonArgs> tagComparisons) {
            return tagComparisons(Output.of(tagComparisons));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * You should use &#39;tag&#39; instead of &#39;tag_comparison&#39;. This attribute still exists for backwards compatibility.
         * 
         */
        @Deprecated /* You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility. */
        public Builder tagComparisons(HostNamingConditionConditionTagComparisonArgs... tagComparisons) {
            return tagComparisons(List.of(tagComparisons));
        }

        public Builder tags(@Nullable Output<List<HostNamingConditionConditionTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<HostNamingConditionConditionTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(HostNamingConditionConditionTagArgs... tags) {
            return tags(List.of(tags));
        }

        public Builder teches(@Nullable Output<List<HostNamingConditionConditionTechArgs>> teches) {
            $.teches = teches;
            return this;
        }

        public Builder teches(List<HostNamingConditionConditionTechArgs> teches) {
            return teches(Output.of(teches));
        }

        public Builder teches(HostNamingConditionConditionTechArgs... teches) {
            return teches(List.of(teches));
        }

        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public HostNamingConditionConditionArgs build() {
            return $;
        }
    }

}
