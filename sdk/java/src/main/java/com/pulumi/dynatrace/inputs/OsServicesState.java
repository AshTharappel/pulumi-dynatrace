// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.OsServicesDetectionConditionsLinuxArgs;
import com.pulumi.dynatrace.inputs.OsServicesDetectionConditionsWindowsArgs;
import com.pulumi.dynatrace.inputs.OsServicesMetadataArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OsServicesState extends com.pulumi.resources.ResourceArgs {

    public static final OsServicesState Empty = new OsServicesState();

    /**
     * The number of **10-second measurement cycles** before alerting is triggered
     * 
     */
    @Import(name="alertActivationDuration")
    private @Nullable Output<Integer> alertActivationDuration;

    /**
     * @return The number of **10-second measurement cycles** before alerting is triggered
     * 
     */
    public Optional<Output<Integer>> alertActivationDuration() {
        return Optional.ofNullable(this.alertActivationDuration);
    }

    /**
     * Toggle the switch in order to enable or disable alerting for this policy
     * 
     */
    @Import(name="alerting")
    private @Nullable Output<Boolean> alerting;

    /**
     * @return Toggle the switch in order to enable or disable alerting for this policy
     * 
     */
    public Optional<Output<Boolean>> alerting() {
        return Optional.ofNullable(this.alerting);
    }

    /**
     * Detection rules
     * 
     */
    @Import(name="detectionConditionsLinux")
    private @Nullable Output<OsServicesDetectionConditionsLinuxArgs> detectionConditionsLinux;

    /**
     * @return Detection rules
     * 
     */
    public Optional<Output<OsServicesDetectionConditionsLinuxArgs>> detectionConditionsLinux() {
        return Optional.ofNullable(this.detectionConditionsLinux);
    }

    /**
     * Detection rules
     * 
     */
    @Import(name="detectionConditionsWindows")
    private @Nullable Output<OsServicesDetectionConditionsWindowsArgs> detectionConditionsWindows;

    /**
     * @return Detection rules
     * 
     */
    public Optional<Output<OsServicesDetectionConditionsWindowsArgs>> detectionConditionsWindows() {
        return Optional.ofNullable(this.detectionConditionsWindows);
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Set of additional key-value properties to be attached to the triggered event.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<OsServicesMetadataArgs> metadata;

    /**
     * @return Set of additional key-value properties to be attached to the triggered event.
     * 
     */
    public Optional<Output<OsServicesMetadataArgs>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics consume custom metrics (DDUs). Refer to [documentation](https://dt-url.net/vl03xzk) for DDU consumption examples. Each monitored service consumes one custom metric.
     * 
     */
    @Import(name="monitoring")
    private @Nullable Output<Boolean> monitoring;

    /**
     * @return Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics consume custom metrics (DDUs). Refer to [documentation](https://dt-url.net/vl03xzk) for DDU consumption examples. Each monitored service consumes one custom metric.
     * 
     */
    public Optional<Output<Boolean>> monitoring() {
        return Optional.ofNullable(this.monitoring);
    }

    /**
     * Rule name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Rule name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this feature
     * 
     */
    @Import(name="notInstalledAlerting")
    private @Nullable Output<Boolean> notInstalledAlerting;

    /**
     * @return By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this feature
     * 
     */
    public Optional<Output<Boolean>> notInstalledAlerting() {
        return Optional.ofNullable(this.notInstalledAlerting);
    }

    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
     * 
     */
    @Import(name="statusConditionLinux")
    private @Nullable Output<String> statusConditionLinux;

    /**
     * @return This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
     * 
     */
    public Optional<Output<String>> statusConditionLinux() {
        return Optional.ofNullable(this.statusConditionLinux);
    }

    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk). - `$eq(paused)`
     * – Matches services that are in paused state. Available logic operations: - `$not($eq(paused))` – Matches services
     * that are in state different from paused. - `$or($eq(paused),$eq(running))` – Matches services that are either in
     * paused or running state. Use one of the following values as a parameter for this condition: - `running` - `stopped` -
     * `start_pending` - `stop_pending` - `continue_pending` - `pause_pending` - `paused`
     * 
     */
    @Import(name="statusConditionWindows")
    private @Nullable Output<String> statusConditionWindows;

    /**
     * @return This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk). - `$eq(paused)`
     * – Matches services that are in paused state. Available logic operations: - `$not($eq(paused))` – Matches services
     * that are in state different from paused. - `$or($eq(paused),$eq(running))` – Matches services that are either in
     * paused or running state. Use one of the following values as a parameter for this condition: - `running` - `stopped` -
     * `start_pending` - `stop_pending` - `continue_pending` - `pause_pending` - `paused`
     * 
     */
    public Optional<Output<String>> statusConditionWindows() {
        return Optional.ofNullable(this.statusConditionWindows);
    }

    /**
     * Possible Values: `LINUX`, `WINDOWS`
     * 
     */
    @Import(name="system")
    private @Nullable Output<String> system;

    /**
     * @return Possible Values: `LINUX`, `WINDOWS`
     * 
     */
    public Optional<Output<String>> system() {
        return Optional.ofNullable(this.system);
    }

    private OsServicesState() {}

    private OsServicesState(OsServicesState $) {
        this.alertActivationDuration = $.alertActivationDuration;
        this.alerting = $.alerting;
        this.detectionConditionsLinux = $.detectionConditionsLinux;
        this.detectionConditionsWindows = $.detectionConditionsWindows;
        this.enabled = $.enabled;
        this.metadata = $.metadata;
        this.monitoring = $.monitoring;
        this.name = $.name;
        this.notInstalledAlerting = $.notInstalledAlerting;
        this.scope = $.scope;
        this.statusConditionLinux = $.statusConditionLinux;
        this.statusConditionWindows = $.statusConditionWindows;
        this.system = $.system;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OsServicesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OsServicesState $;

        public Builder() {
            $ = new OsServicesState();
        }

        public Builder(OsServicesState defaults) {
            $ = new OsServicesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alertActivationDuration The number of **10-second measurement cycles** before alerting is triggered
         * 
         * @return builder
         * 
         */
        public Builder alertActivationDuration(@Nullable Output<Integer> alertActivationDuration) {
            $.alertActivationDuration = alertActivationDuration;
            return this;
        }

        /**
         * @param alertActivationDuration The number of **10-second measurement cycles** before alerting is triggered
         * 
         * @return builder
         * 
         */
        public Builder alertActivationDuration(Integer alertActivationDuration) {
            return alertActivationDuration(Output.of(alertActivationDuration));
        }

        /**
         * @param alerting Toggle the switch in order to enable or disable alerting for this policy
         * 
         * @return builder
         * 
         */
        public Builder alerting(@Nullable Output<Boolean> alerting) {
            $.alerting = alerting;
            return this;
        }

        /**
         * @param alerting Toggle the switch in order to enable or disable alerting for this policy
         * 
         * @return builder
         * 
         */
        public Builder alerting(Boolean alerting) {
            return alerting(Output.of(alerting));
        }

        /**
         * @param detectionConditionsLinux Detection rules
         * 
         * @return builder
         * 
         */
        public Builder detectionConditionsLinux(@Nullable Output<OsServicesDetectionConditionsLinuxArgs> detectionConditionsLinux) {
            $.detectionConditionsLinux = detectionConditionsLinux;
            return this;
        }

        /**
         * @param detectionConditionsLinux Detection rules
         * 
         * @return builder
         * 
         */
        public Builder detectionConditionsLinux(OsServicesDetectionConditionsLinuxArgs detectionConditionsLinux) {
            return detectionConditionsLinux(Output.of(detectionConditionsLinux));
        }

        /**
         * @param detectionConditionsWindows Detection rules
         * 
         * @return builder
         * 
         */
        public Builder detectionConditionsWindows(@Nullable Output<OsServicesDetectionConditionsWindowsArgs> detectionConditionsWindows) {
            $.detectionConditionsWindows = detectionConditionsWindows;
            return this;
        }

        /**
         * @param detectionConditionsWindows Detection rules
         * 
         * @return builder
         * 
         */
        public Builder detectionConditionsWindows(OsServicesDetectionConditionsWindowsArgs detectionConditionsWindows) {
            return detectionConditionsWindows(Output.of(detectionConditionsWindows));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param metadata Set of additional key-value properties to be attached to the triggered event.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<OsServicesMetadataArgs> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Set of additional key-value properties to be attached to the triggered event.
         * 
         * @return builder
         * 
         */
        public Builder metadata(OsServicesMetadataArgs metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param monitoring Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics consume custom metrics (DDUs). Refer to [documentation](https://dt-url.net/vl03xzk) for DDU consumption examples. Each monitored service consumes one custom metric.
         * 
         * @return builder
         * 
         */
        public Builder monitoring(@Nullable Output<Boolean> monitoring) {
            $.monitoring = monitoring;
            return this;
        }

        /**
         * @param monitoring Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics consume custom metrics (DDUs). Refer to [documentation](https://dt-url.net/vl03xzk) for DDU consumption examples. Each monitored service consumes one custom metric.
         * 
         * @return builder
         * 
         */
        public Builder monitoring(Boolean monitoring) {
            return monitoring(Output.of(monitoring));
        }

        /**
         * @param name Rule name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Rule name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notInstalledAlerting By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this feature
         * 
         * @return builder
         * 
         */
        public Builder notInstalledAlerting(@Nullable Output<Boolean> notInstalledAlerting) {
            $.notInstalledAlerting = notInstalledAlerting;
            return this;
        }

        /**
         * @param notInstalledAlerting By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this feature
         * 
         * @return builder
         * 
         */
        public Builder notInstalledAlerting(Boolean notInstalledAlerting) {
            return notInstalledAlerting(Output.of(notInstalledAlerting));
        }

        /**
         * @param scope The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param statusConditionLinux This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
         * 
         * @return builder
         * 
         */
        public Builder statusConditionLinux(@Nullable Output<String> statusConditionLinux) {
            $.statusConditionLinux = statusConditionLinux;
            return this;
        }

        /**
         * @param statusConditionLinux This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
         * 
         * @return builder
         * 
         */
        public Builder statusConditionLinux(String statusConditionLinux) {
            return statusConditionLinux(Output.of(statusConditionLinux));
        }

        /**
         * @param statusConditionWindows This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk). - `$eq(paused)`
         * – Matches services that are in paused state. Available logic operations: - `$not($eq(paused))` – Matches services
         * that are in state different from paused. - `$or($eq(paused),$eq(running))` – Matches services that are either in
         * paused or running state. Use one of the following values as a parameter for this condition: - `running` - `stopped` -
         * `start_pending` - `stop_pending` - `continue_pending` - `pause_pending` - `paused`
         * 
         * @return builder
         * 
         */
        public Builder statusConditionWindows(@Nullable Output<String> statusConditionWindows) {
            $.statusConditionWindows = statusConditionWindows;
            return this;
        }

        /**
         * @param statusConditionWindows This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk). - `$eq(paused)`
         * – Matches services that are in paused state. Available logic operations: - `$not($eq(paused))` – Matches services
         * that are in state different from paused. - `$or($eq(paused),$eq(running))` – Matches services that are either in
         * paused or running state. Use one of the following values as a parameter for this condition: - `running` - `stopped` -
         * `start_pending` - `stop_pending` - `continue_pending` - `pause_pending` - `paused`
         * 
         * @return builder
         * 
         */
        public Builder statusConditionWindows(String statusConditionWindows) {
            return statusConditionWindows(Output.of(statusConditionWindows));
        }

        /**
         * @param system Possible Values: `LINUX`, `WINDOWS`
         * 
         * @return builder
         * 
         */
        public Builder system(@Nullable Output<String> system) {
            $.system = system;
            return this;
        }

        /**
         * @param system Possible Values: `LINUX`, `WINDOWS`
         * 
         * @return builder
         * 
         */
        public Builder system(String system) {
            return system(Output.of(system));
        }

        public OsServicesState build() {
            return $;
        }
    }

}
