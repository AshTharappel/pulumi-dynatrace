// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.LogEventsEventTemplateArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class LogEventsArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogEventsArgs Empty = new LogEventsArgs();

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Event template
     * 
     */
    @Import(name="eventTemplate", required=true)
    private Output<LogEventsEventTemplateArgs> eventTemplate;

    /**
     * @return Event template
     * 
     */
    public Output<LogEventsEventTemplateArgs> eventTemplate() {
        return this.eventTemplate;
    }

    /**
     * Log query
     * 
     */
    @Import(name="query", required=true)
    private Output<String> query;

    /**
     * @return Log query
     * 
     */
    public Output<String> query() {
        return this.query;
    }

    /**
     * The textual summary of the log event entry
     * 
     */
    @Import(name="summary", required=true)
    private Output<String> summary;

    /**
     * @return The textual summary of the log event entry
     * 
     */
    public Output<String> summary() {
        return this.summary;
    }

    private LogEventsArgs() {}

    private LogEventsArgs(LogEventsArgs $) {
        this.enabled = $.enabled;
        this.eventTemplate = $.eventTemplate;
        this.query = $.query;
        this.summary = $.summary;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogEventsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogEventsArgs $;

        public Builder() {
            $ = new LogEventsArgs();
        }

        public Builder(LogEventsArgs defaults) {
            $ = new LogEventsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param eventTemplate Event template
         * 
         * @return builder
         * 
         */
        public Builder eventTemplate(Output<LogEventsEventTemplateArgs> eventTemplate) {
            $.eventTemplate = eventTemplate;
            return this;
        }

        /**
         * @param eventTemplate Event template
         * 
         * @return builder
         * 
         */
        public Builder eventTemplate(LogEventsEventTemplateArgs eventTemplate) {
            return eventTemplate(Output.of(eventTemplate));
        }

        /**
         * @param query Log query
         * 
         * @return builder
         * 
         */
        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query Log query
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param summary The textual summary of the log event entry
         * 
         * @return builder
         * 
         */
        public Builder summary(Output<String> summary) {
            $.summary = summary;
            return this;
        }

        /**
         * @param summary The textual summary of the log event entry
         * 
         * @return builder
         * 
         */
        public Builder summary(String summary) {
            return summary(Output.of(summary));
        }

        public LogEventsArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.eventTemplate = Objects.requireNonNull($.eventTemplate, "expected parameter 'eventTemplate' to be non-null");
            $.query = Objects.requireNonNull($.query, "expected parameter 'query' to be non-null");
            $.summary = Objects.requireNonNull($.summary, "expected parameter 'summary' to be non-null");
            return $;
        }
    }

}
