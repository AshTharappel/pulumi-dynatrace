// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.AlertingProfileEventTypeFilterArgs;
import com.pulumi.dynatrace.inputs.AlertingProfileMetadataArgs;
import com.pulumi.dynatrace.inputs.AlertingProfileRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertingProfileState extends com.pulumi.resources.ResourceArgs {

    public static final AlertingProfileState Empty = new AlertingProfileState();

    /**
     * The name of the alerting profile, displayed in the UI
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The name of the alerting profile, displayed in the UI
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
     * 
     */
    @Import(name="eventTypeFilters")
    private @Nullable Output<List<AlertingProfileEventTypeFilterArgs>> eventTypeFilters;

    /**
     * @return The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
     * 
     */
    public Optional<Output<List<AlertingProfileEventTypeFilterArgs>>> eventTypeFilters() {
        return Optional.ofNullable(this.eventTypeFilters);
    }

    /**
     * `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
     * 
     * @deprecated
     * `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
     * 
     */
    @Deprecated /* `metadata` exists for backwards compatibility but shouldn't get specified anymore */
    @Import(name="metadata")
    private @Nullable Output<AlertingProfileMetadataArgs> metadata;

    /**
     * @return `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
     * 
     * @deprecated
     * `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
     * 
     */
    @Deprecated /* `metadata` exists for backwards compatibility but shouldn't get specified anymore */
    public Optional<Output<AlertingProfileMetadataArgs>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The ID of the management zone to which the alerting profile applies
     * 
     */
    @Import(name="mzId")
    private @Nullable Output<String> mzId;

    /**
     * @return The ID of the management zone to which the alerting profile applies
     * 
     */
    public Optional<Output<String>> mzId() {
        return Optional.ofNullable(this.mzId);
    }

    /**
     * A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<AlertingProfileRuleArgs>> rules;

    /**
     * @return A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
     * 
     */
    public Optional<Output<List<AlertingProfileRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    private AlertingProfileState() {}

    private AlertingProfileState(AlertingProfileState $) {
        this.displayName = $.displayName;
        this.eventTypeFilters = $.eventTypeFilters;
        this.metadata = $.metadata;
        this.mzId = $.mzId;
        this.rules = $.rules;
        this.unknowns = $.unknowns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertingProfileState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertingProfileState $;

        public Builder() {
            $ = new AlertingProfileState();
        }

        public Builder(AlertingProfileState defaults) {
            $ = new AlertingProfileState(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName The name of the alerting profile, displayed in the UI
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of the alerting profile, displayed in the UI
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param eventTypeFilters The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
         * 
         * @return builder
         * 
         */
        public Builder eventTypeFilters(@Nullable Output<List<AlertingProfileEventTypeFilterArgs>> eventTypeFilters) {
            $.eventTypeFilters = eventTypeFilters;
            return this;
        }

        /**
         * @param eventTypeFilters The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
         * 
         * @return builder
         * 
         */
        public Builder eventTypeFilters(List<AlertingProfileEventTypeFilterArgs> eventTypeFilters) {
            return eventTypeFilters(Output.of(eventTypeFilters));
        }

        /**
         * @param eventTypeFilters The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
         * 
         * @return builder
         * 
         */
        public Builder eventTypeFilters(AlertingProfileEventTypeFilterArgs... eventTypeFilters) {
            return eventTypeFilters(List.of(eventTypeFilters));
        }

        /**
         * @param metadata `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
         * 
         * @return builder
         * 
         * @deprecated
         * `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
         * 
         */
        @Deprecated /* `metadata` exists for backwards compatibility but shouldn't get specified anymore */
        public Builder metadata(@Nullable Output<AlertingProfileMetadataArgs> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
         * 
         * @return builder
         * 
         * @deprecated
         * `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
         * 
         */
        @Deprecated /* `metadata` exists for backwards compatibility but shouldn't get specified anymore */
        public Builder metadata(AlertingProfileMetadataArgs metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param mzId The ID of the management zone to which the alerting profile applies
         * 
         * @return builder
         * 
         */
        public Builder mzId(@Nullable Output<String> mzId) {
            $.mzId = mzId;
            return this;
        }

        /**
         * @param mzId The ID of the management zone to which the alerting profile applies
         * 
         * @return builder
         * 
         */
        public Builder mzId(String mzId) {
            return mzId(Output.of(mzId));
        }

        /**
         * @param rules A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<AlertingProfileRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
         * 
         * @return builder
         * 
         */
        public Builder rules(List<AlertingProfileRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
         * 
         * @return builder
         * 
         */
        public Builder rules(AlertingProfileRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public AlertingProfileState build() {
            return $;
        }
    }

}
