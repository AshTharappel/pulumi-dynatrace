// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiTokenArgs Empty = new ApiTokenArgs();

    /**
     * Token creation date in ISO 8601 format (yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;)
     * 
     */
    @Import(name="creationDate")
    private @Nullable Output<String> creationDate;

    /**
     * @return Token creation date in ISO 8601 format (yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;)
     * 
     */
    public Optional<Output<String>> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }

    /**
     * The token is enabled (true) or disabled (false), default disabled (false).
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return The token is enabled (true) or disabled (false), default disabled (false).
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The expiration date of the token.
     * 
     */
    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    /**
     * @return The expiration date of the token.
     * 
     */
    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * Token last used date in ISO 8601 format (yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;)
     * 
     */
    @Import(name="lastUsedDate")
    private @Nullable Output<String> lastUsedDate;

    /**
     * @return Token last used date in ISO 8601 format (yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;)
     * 
     */
    public Optional<Output<String>> lastUsedDate() {
        return Optional.ofNullable(this.lastUsedDate);
    }

    /**
     * Token last used IP address.
     * 
     */
    @Import(name="lastUsedIpAddress")
    private @Nullable Output<String> lastUsedIpAddress;

    /**
     * @return Token last used IP address.
     * 
     */
    public Optional<Output<String>> lastUsedIpAddress() {
        return Optional.ofNullable(this.lastUsedIpAddress);
    }

    /**
     * Token last modified date in ISO 8601 format (yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;).
     * 
     */
    @Import(name="modifiedDate")
    private @Nullable Output<String> modifiedDate;

    /**
     * @return Token last modified date in ISO 8601 format (yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;).
     * 
     */
    public Optional<Output<String>> modifiedDate() {
        return Optional.ofNullable(this.modifiedDate);
    }

    /**
     * The name of the token.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the token.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The owner of the token
     * 
     */
    @Import(name="owner")
    private @Nullable Output<String> owner;

    /**
     * @return The owner of the token
     * 
     */
    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * The token is a personal access token (true) or an API token (false).
     * 
     */
    @Import(name="personalAccessToken")
    private @Nullable Output<Boolean> personalAccessToken;

    /**
     * @return The token is a personal access token (true) or an API token (false).
     * 
     */
    public Optional<Output<Boolean>> personalAccessToken() {
        return Optional.ofNullable(this.personalAccessToken);
    }

    /**
     * A list of the scopes to be assigned to the token.
     * 
     */
    @Import(name="scopes", required=true)
    private Output<List<String>> scopes;

    /**
     * @return A list of the scopes to be assigned to the token.
     * 
     */
    public Output<List<String>> scopes() {
        return this.scopes;
    }

    private ApiTokenArgs() {}

    private ApiTokenArgs(ApiTokenArgs $) {
        this.creationDate = $.creationDate;
        this.enabled = $.enabled;
        this.expirationDate = $.expirationDate;
        this.lastUsedDate = $.lastUsedDate;
        this.lastUsedIpAddress = $.lastUsedIpAddress;
        this.modifiedDate = $.modifiedDate;
        this.name = $.name;
        this.owner = $.owner;
        this.personalAccessToken = $.personalAccessToken;
        this.scopes = $.scopes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiTokenArgs $;

        public Builder() {
            $ = new ApiTokenArgs();
        }

        public Builder(ApiTokenArgs defaults) {
            $ = new ApiTokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param creationDate Token creation date in ISO 8601 format (yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;)
         * 
         * @return builder
         * 
         */
        public Builder creationDate(@Nullable Output<String> creationDate) {
            $.creationDate = creationDate;
            return this;
        }

        /**
         * @param creationDate Token creation date in ISO 8601 format (yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;)
         * 
         * @return builder
         * 
         */
        public Builder creationDate(String creationDate) {
            return creationDate(Output.of(creationDate));
        }

        /**
         * @param enabled The token is enabled (true) or disabled (false), default disabled (false).
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled The token is enabled (true) or disabled (false), default disabled (false).
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param expirationDate The expiration date of the token.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate The expiration date of the token.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param lastUsedDate Token last used date in ISO 8601 format (yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;)
         * 
         * @return builder
         * 
         */
        public Builder lastUsedDate(@Nullable Output<String> lastUsedDate) {
            $.lastUsedDate = lastUsedDate;
            return this;
        }

        /**
         * @param lastUsedDate Token last used date in ISO 8601 format (yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;)
         * 
         * @return builder
         * 
         */
        public Builder lastUsedDate(String lastUsedDate) {
            return lastUsedDate(Output.of(lastUsedDate));
        }

        /**
         * @param lastUsedIpAddress Token last used IP address.
         * 
         * @return builder
         * 
         */
        public Builder lastUsedIpAddress(@Nullable Output<String> lastUsedIpAddress) {
            $.lastUsedIpAddress = lastUsedIpAddress;
            return this;
        }

        /**
         * @param lastUsedIpAddress Token last used IP address.
         * 
         * @return builder
         * 
         */
        public Builder lastUsedIpAddress(String lastUsedIpAddress) {
            return lastUsedIpAddress(Output.of(lastUsedIpAddress));
        }

        /**
         * @param modifiedDate Token last modified date in ISO 8601 format (yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;).
         * 
         * @return builder
         * 
         */
        public Builder modifiedDate(@Nullable Output<String> modifiedDate) {
            $.modifiedDate = modifiedDate;
            return this;
        }

        /**
         * @param modifiedDate Token last modified date in ISO 8601 format (yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;).
         * 
         * @return builder
         * 
         */
        public Builder modifiedDate(String modifiedDate) {
            return modifiedDate(Output.of(modifiedDate));
        }

        /**
         * @param name The name of the token.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the token.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param owner The owner of the token
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner The owner of the token
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param personalAccessToken The token is a personal access token (true) or an API token (false).
         * 
         * @return builder
         * 
         */
        public Builder personalAccessToken(@Nullable Output<Boolean> personalAccessToken) {
            $.personalAccessToken = personalAccessToken;
            return this;
        }

        /**
         * @param personalAccessToken The token is a personal access token (true) or an API token (false).
         * 
         * @return builder
         * 
         */
        public Builder personalAccessToken(Boolean personalAccessToken) {
            return personalAccessToken(Output.of(personalAccessToken));
        }

        /**
         * @param scopes A list of the scopes to be assigned to the token.
         * 
         * @return builder
         * 
         */
        public Builder scopes(Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes A list of the scopes to be assigned to the token.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes A list of the scopes to be assigned to the token.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        public ApiTokenArgs build() {
            $.scopes = Objects.requireNonNull($.scopes, "expected parameter 'scopes' to be non-null");
            return $;
        }
    }

}
