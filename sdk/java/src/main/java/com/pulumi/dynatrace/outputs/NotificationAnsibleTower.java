// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NotificationAnsibleTower {
    /**
     * @return Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     * 
     */
    private Boolean acceptAnyCertificate;
    /**
     * @return The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    private Boolean active;
    /**
     * @return The ID of the associated alerting profile
     * 
     */
    private String alertingProfile;
    /**
     * @return The custom message of the notification.   This message will be displayed in the extra variables **Message** field of your job template.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     * 
     */
    private String customMessage;
    /**
     * @return The ID of the target Ansible Tower job template
     * 
     */
    private Integer jobTemplateId;
    /**
     * @return The URL of the target Ansible Tower job template
     * 
     */
    private String jobTemplateUrl;
    /**
     * @return The name of the notification configuration
     * 
     */
    private String name;
    /**
     * @return The password for the Ansible Tower account
     * 
     */
    private @Nullable String password;
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    private @Nullable String unknowns;
    /**
     * @return The username of the Ansible Tower account
     * 
     */
    private String username;

    private NotificationAnsibleTower() {}
    /**
     * @return Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     * 
     */
    public Boolean acceptAnyCertificate() {
        return this.acceptAnyCertificate;
    }
    /**
     * @return The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    public Boolean active() {
        return this.active;
    }
    /**
     * @return The ID of the associated alerting profile
     * 
     */
    public String alertingProfile() {
        return this.alertingProfile;
    }
    /**
     * @return The custom message of the notification.   This message will be displayed in the extra variables **Message** field of your job template.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     * 
     */
    public String customMessage() {
        return this.customMessage;
    }
    /**
     * @return The ID of the target Ansible Tower job template
     * 
     */
    public Integer jobTemplateId() {
        return this.jobTemplateId;
    }
    /**
     * @return The URL of the target Ansible Tower job template
     * 
     */
    public String jobTemplateUrl() {
        return this.jobTemplateUrl;
    }
    /**
     * @return The name of the notification configuration
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The password for the Ansible Tower account
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<String> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }
    /**
     * @return The username of the Ansible Tower account
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotificationAnsibleTower defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean acceptAnyCertificate;
        private Boolean active;
        private String alertingProfile;
        private String customMessage;
        private Integer jobTemplateId;
        private String jobTemplateUrl;
        private String name;
        private @Nullable String password;
        private @Nullable String unknowns;
        private String username;
        public Builder() {}
        public Builder(NotificationAnsibleTower defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptAnyCertificate = defaults.acceptAnyCertificate;
    	      this.active = defaults.active;
    	      this.alertingProfile = defaults.alertingProfile;
    	      this.customMessage = defaults.customMessage;
    	      this.jobTemplateId = defaults.jobTemplateId;
    	      this.jobTemplateUrl = defaults.jobTemplateUrl;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
    	      this.unknowns = defaults.unknowns;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder acceptAnyCertificate(Boolean acceptAnyCertificate) {
            this.acceptAnyCertificate = Objects.requireNonNull(acceptAnyCertificate);
            return this;
        }
        @CustomType.Setter
        public Builder active(Boolean active) {
            this.active = Objects.requireNonNull(active);
            return this;
        }
        @CustomType.Setter
        public Builder alertingProfile(String alertingProfile) {
            this.alertingProfile = Objects.requireNonNull(alertingProfile);
            return this;
        }
        @CustomType.Setter
        public Builder customMessage(String customMessage) {
            this.customMessage = Objects.requireNonNull(customMessage);
            return this;
        }
        @CustomType.Setter
        public Builder jobTemplateId(Integer jobTemplateId) {
            this.jobTemplateId = Objects.requireNonNull(jobTemplateId);
            return this;
        }
        @CustomType.Setter
        public Builder jobTemplateUrl(String jobTemplateUrl) {
            this.jobTemplateUrl = Objects.requireNonNull(jobTemplateUrl);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder unknowns(@Nullable String unknowns) {
            this.unknowns = unknowns;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public NotificationAnsibleTower build() {
            final var o = new NotificationAnsibleTower();
            o.acceptAnyCertificate = acceptAnyCertificate;
            o.active = active;
            o.alertingProfile = alertingProfile;
            o.customMessage = customMessage;
            o.jobTemplateId = jobTemplateId;
            o.jobTemplateUrl = jobTemplateUrl;
            o.name = name;
            o.password = password;
            o.unknowns = unknowns;
            o.username = username;
            return o;
        }
    }
}
