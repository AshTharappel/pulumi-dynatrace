// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DiskAnomalyRulesDiskNameFilterArgs;
import com.pulumi.dynatrace.inputs.DiskAnomalyRulesSampleLimitArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskAnomalyRulesArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskAnomalyRulesArgs Empty = new DiskAnomalyRulesArgs();

    /**
     * Only apply to disks whose name matches
     * 
     */
    @Import(name="diskNameFilter", required=true)
    private Output<DiskAnomalyRulesDiskNameFilterArgs> diskNameFilter;

    /**
     * @return Only apply to disks whose name matches
     * 
     */
    public Output<DiskAnomalyRulesDiskNameFilterArgs> diskNameFilter() {
        return this.diskNameFilter;
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
     * 
     */
    @Import(name="hostGroupId")
    private @Nullable Output<String> hostGroupId;

    /**
     * @return The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
     * 
     */
    public Optional<Output<String>> hostGroupId() {
        return Optional.ofNullable(this.hostGroupId);
    }

    /**
     * Possible Values: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING`, `WRITE_TIME_EXCEEDING`
     * 
     */
    @Import(name="metric", required=true)
    private Output<String> metric;

    /**
     * @return Possible Values: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING`, `WRITE_TIME_EXCEEDING`
     * 
     */
    public Output<String> metric() {
        return this.metric;
    }

    /**
     * Name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Only alert if the threshold was violated in at least *n* of the last *m* samples
     * 
     */
    @Import(name="sampleLimit", required=true)
    private Output<DiskAnomalyRulesSampleLimitArgs> sampleLimit;

    /**
     * @return Only alert if the threshold was violated in at least *n* of the last *m* samples
     * 
     */
    public Output<DiskAnomalyRulesSampleLimitArgs> sampleLimit() {
        return this.sampleLimit;
    }

    /**
     * Only apply to hosts that have the following tags
     * 
     */
    @Import(name="tagFilters")
    private @Nullable Output<List<String>> tagFilters;

    /**
     * @return Only apply to hosts that have the following tags
     * 
     */
    public Optional<Output<List<String>>> tagFilters() {
        return Optional.ofNullable(this.tagFilters);
    }

    /**
     * Alert if higher than
     * 
     */
    @Import(name="thresholdMilliseconds")
    private @Nullable Output<Double> thresholdMilliseconds;

    /**
     * @return Alert if higher than
     * 
     */
    public Optional<Output<Double>> thresholdMilliseconds() {
        return Optional.ofNullable(this.thresholdMilliseconds);
    }

    /**
     * Alert if lower than
     * 
     */
    @Import(name="thresholdPercent")
    private @Nullable Output<Double> thresholdPercent;

    /**
     * @return Alert if lower than
     * 
     */
    public Optional<Output<Double>> thresholdPercent() {
        return Optional.ofNullable(this.thresholdPercent);
    }

    private DiskAnomalyRulesArgs() {}

    private DiskAnomalyRulesArgs(DiskAnomalyRulesArgs $) {
        this.diskNameFilter = $.diskNameFilter;
        this.enabled = $.enabled;
        this.hostGroupId = $.hostGroupId;
        this.metric = $.metric;
        this.name = $.name;
        this.sampleLimit = $.sampleLimit;
        this.tagFilters = $.tagFilters;
        this.thresholdMilliseconds = $.thresholdMilliseconds;
        this.thresholdPercent = $.thresholdPercent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskAnomalyRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskAnomalyRulesArgs $;

        public Builder() {
            $ = new DiskAnomalyRulesArgs();
        }

        public Builder(DiskAnomalyRulesArgs defaults) {
            $ = new DiskAnomalyRulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskNameFilter Only apply to disks whose name matches
         * 
         * @return builder
         * 
         */
        public Builder diskNameFilter(Output<DiskAnomalyRulesDiskNameFilterArgs> diskNameFilter) {
            $.diskNameFilter = diskNameFilter;
            return this;
        }

        /**
         * @param diskNameFilter Only apply to disks whose name matches
         * 
         * @return builder
         * 
         */
        public Builder diskNameFilter(DiskAnomalyRulesDiskNameFilterArgs diskNameFilter) {
            return diskNameFilter(Output.of(diskNameFilter));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param hostGroupId The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
         * 
         * @return builder
         * 
         */
        public Builder hostGroupId(@Nullable Output<String> hostGroupId) {
            $.hostGroupId = hostGroupId;
            return this;
        }

        /**
         * @param hostGroupId The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
         * 
         * @return builder
         * 
         */
        public Builder hostGroupId(String hostGroupId) {
            return hostGroupId(Output.of(hostGroupId));
        }

        /**
         * @param metric Possible Values: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING`, `WRITE_TIME_EXCEEDING`
         * 
         * @return builder
         * 
         */
        public Builder metric(Output<String> metric) {
            $.metric = metric;
            return this;
        }

        /**
         * @param metric Possible Values: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING`, `WRITE_TIME_EXCEEDING`
         * 
         * @return builder
         * 
         */
        public Builder metric(String metric) {
            return metric(Output.of(metric));
        }

        /**
         * @param name Name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param sampleLimit Only alert if the threshold was violated in at least *n* of the last *m* samples
         * 
         * @return builder
         * 
         */
        public Builder sampleLimit(Output<DiskAnomalyRulesSampleLimitArgs> sampleLimit) {
            $.sampleLimit = sampleLimit;
            return this;
        }

        /**
         * @param sampleLimit Only alert if the threshold was violated in at least *n* of the last *m* samples
         * 
         * @return builder
         * 
         */
        public Builder sampleLimit(DiskAnomalyRulesSampleLimitArgs sampleLimit) {
            return sampleLimit(Output.of(sampleLimit));
        }

        /**
         * @param tagFilters Only apply to hosts that have the following tags
         * 
         * @return builder
         * 
         */
        public Builder tagFilters(@Nullable Output<List<String>> tagFilters) {
            $.tagFilters = tagFilters;
            return this;
        }

        /**
         * @param tagFilters Only apply to hosts that have the following tags
         * 
         * @return builder
         * 
         */
        public Builder tagFilters(List<String> tagFilters) {
            return tagFilters(Output.of(tagFilters));
        }

        /**
         * @param tagFilters Only apply to hosts that have the following tags
         * 
         * @return builder
         * 
         */
        public Builder tagFilters(String... tagFilters) {
            return tagFilters(List.of(tagFilters));
        }

        /**
         * @param thresholdMilliseconds Alert if higher than
         * 
         * @return builder
         * 
         */
        public Builder thresholdMilliseconds(@Nullable Output<Double> thresholdMilliseconds) {
            $.thresholdMilliseconds = thresholdMilliseconds;
            return this;
        }

        /**
         * @param thresholdMilliseconds Alert if higher than
         * 
         * @return builder
         * 
         */
        public Builder thresholdMilliseconds(Double thresholdMilliseconds) {
            return thresholdMilliseconds(Output.of(thresholdMilliseconds));
        }

        /**
         * @param thresholdPercent Alert if lower than
         * 
         * @return builder
         * 
         */
        public Builder thresholdPercent(@Nullable Output<Double> thresholdPercent) {
            $.thresholdPercent = thresholdPercent;
            return this;
        }

        /**
         * @param thresholdPercent Alert if lower than
         * 
         * @return builder
         * 
         */
        public Builder thresholdPercent(Double thresholdPercent) {
            return thresholdPercent(Output.of(thresholdPercent));
        }

        public DiskAnomalyRulesArgs build() {
            $.diskNameFilter = Objects.requireNonNull($.diskNameFilter, "expected parameter 'diskNameFilter' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.metric = Objects.requireNonNull($.metric, "expected parameter 'metric' to be non-null");
            $.sampleLimit = Objects.requireNonNull($.sampleLimit, "expected parameter 'sampleLimit' to be non-null");
            return $;
        }
    }

}
