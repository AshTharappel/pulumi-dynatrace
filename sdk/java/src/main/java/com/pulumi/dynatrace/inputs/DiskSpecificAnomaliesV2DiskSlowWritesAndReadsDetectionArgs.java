// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholdsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionArgs Empty = new DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionArgs();

    /**
     * no documentation available
     * 
     */
    @Import(name="customThresholds")
    private @Nullable Output<DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholdsArgs> customThresholds;

    /**
     * @return no documentation available
     * 
     */
    public Optional<Output<DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholdsArgs>> customThresholds() {
        return Optional.ofNullable(this.customThresholds);
    }

    /**
     * Detection mode for slow running disks
     * 
     */
    @Import(name="detectionMode")
    private @Nullable Output<String> detectionMode;

    /**
     * @return Detection mode for slow running disks
     * 
     */
    public Optional<Output<String>> detectionMode() {
        return Optional.ofNullable(this.detectionMode);
    }

    /**
     * Detect slow-running disks
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Detect slow-running disks
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    private DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionArgs() {}

    private DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionArgs(DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionArgs $) {
        this.customThresholds = $.customThresholds;
        this.detectionMode = $.detectionMode;
        this.enabled = $.enabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionArgs $;

        public Builder() {
            $ = new DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionArgs();
        }

        public Builder(DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionArgs defaults) {
            $ = new DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customThresholds no documentation available
         * 
         * @return builder
         * 
         */
        public Builder customThresholds(@Nullable Output<DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholdsArgs> customThresholds) {
            $.customThresholds = customThresholds;
            return this;
        }

        /**
         * @param customThresholds no documentation available
         * 
         * @return builder
         * 
         */
        public Builder customThresholds(DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholdsArgs customThresholds) {
            return customThresholds(Output.of(customThresholds));
        }

        /**
         * @param detectionMode Detection mode for slow running disks
         * 
         * @return builder
         * 
         */
        public Builder detectionMode(@Nullable Output<String> detectionMode) {
            $.detectionMode = detectionMode;
            return this;
        }

        /**
         * @param detectionMode Detection mode for slow running disks
         * 
         * @return builder
         * 
         */
        public Builder detectionMode(String detectionMode) {
            return detectionMode(Output.of(detectionMode));
        }

        /**
         * @param enabled Detect slow-running disks
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Detect slow-running disks
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
