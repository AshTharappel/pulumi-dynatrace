// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.DatabaseAnomaliesV2Args;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.DatabaseAnomaliesV2State;
import com.pulumi.dynatrace.outputs.DatabaseAnomaliesV2DatabaseConnections;
import com.pulumi.dynatrace.outputs.DatabaseAnomaliesV2FailureRate;
import com.pulumi.dynatrace.outputs.DatabaseAnomaliesV2LoadDrops;
import com.pulumi.dynatrace.outputs.DatabaseAnomaliesV2LoadSpikes;
import com.pulumi.dynatrace.outputs.DatabaseAnomaliesV2ResponseTime;
import java.lang.String;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/databaseAnomaliesV2:DatabaseAnomaliesV2")
public class DatabaseAnomaliesV2 extends com.pulumi.resources.CustomResource {
    /**
     * Alert if the number of failed database connects within the specified time exceeds the specified absolute threshold:
     * 
     */
    @Export(name="databaseConnections", refs={DatabaseAnomaliesV2DatabaseConnections.class}, tree="[0]")
    private Output<DatabaseAnomaliesV2DatabaseConnections> databaseConnections;

    /**
     * @return Alert if the number of failed database connects within the specified time exceeds the specified absolute threshold:
     * 
     */
    public Output<DatabaseAnomaliesV2DatabaseConnections> databaseConnections() {
        return this.databaseConnections;
    }
    /**
     * Failure rate
     * 
     */
    @Export(name="failureRate", refs={DatabaseAnomaliesV2FailureRate.class}, tree="[0]")
    private Output<DatabaseAnomaliesV2FailureRate> failureRate;

    /**
     * @return Failure rate
     * 
     */
    public Output<DatabaseAnomaliesV2FailureRate> failureRate() {
        return this.failureRate;
    }
    /**
     * Alert if the observed load is lower than the expected load by a specified margin for a specified amount of time.
     * 
     */
    @Export(name="loadDrops", refs={DatabaseAnomaliesV2LoadDrops.class}, tree="[0]")
    private Output<DatabaseAnomaliesV2LoadDrops> loadDrops;

    /**
     * @return Alert if the observed load is lower than the expected load by a specified margin for a specified amount of time.
     * 
     */
    public Output<DatabaseAnomaliesV2LoadDrops> loadDrops() {
        return this.loadDrops;
    }
    /**
     * Alert if the observed load exceeds the expected load by a specified margin for a specified amount of time.
     * 
     */
    @Export(name="loadSpikes", refs={DatabaseAnomaliesV2LoadSpikes.class}, tree="[0]")
    private Output<DatabaseAnomaliesV2LoadSpikes> loadSpikes;

    /**
     * @return Alert if the observed load exceeds the expected load by a specified margin for a specified amount of time.
     * 
     */
    public Output<DatabaseAnomaliesV2LoadSpikes> loadSpikes() {
        return this.loadSpikes;
    }
    /**
     * Response time
     * 
     */
    @Export(name="responseTime", refs={DatabaseAnomaliesV2ResponseTime.class}, tree="[0]")
    private Output<DatabaseAnomaliesV2ResponseTime> responseTime;

    /**
     * @return Response time
     * 
     */
    public Output<DatabaseAnomaliesV2ResponseTime> responseTime() {
        return this.responseTime;
    }
    /**
     * The scope for the database anomaly detection
     * 
     */
    @Export(name="scope", refs={String.class}, tree="[0]")
    private Output<String> scope;

    /**
     * @return The scope for the database anomaly detection
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DatabaseAnomaliesV2(String name) {
        this(name, DatabaseAnomaliesV2Args.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DatabaseAnomaliesV2(String name, DatabaseAnomaliesV2Args args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DatabaseAnomaliesV2(String name, DatabaseAnomaliesV2Args args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/databaseAnomaliesV2:DatabaseAnomaliesV2", name, args == null ? DatabaseAnomaliesV2Args.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DatabaseAnomaliesV2(String name, Output<String> id, @Nullable DatabaseAnomaliesV2State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/databaseAnomaliesV2:DatabaseAnomaliesV2", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DatabaseAnomaliesV2 get(String name, Output<String> id, @Nullable DatabaseAnomaliesV2State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DatabaseAnomaliesV2(name, id, state, options);
    }
}
