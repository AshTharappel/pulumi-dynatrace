// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.UserGroupPermissionsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserGroupArgs Empty = new UserGroupArgs();

    /**
     * If `true`, then the group has the access account rights
     * 
     */
    @Import(name="accessAccount")
    private @Nullable Output<Boolean> accessAccount;

    /**
     * @return If `true`, then the group has the access account rights
     * 
     */
    public Optional<Output<Boolean>> accessAccount() {
        return Optional.ofNullable(this.accessAccount);
    }

    /**
     * If `true`, then the group has the cluster administrator rights
     * 
     */
    @Import(name="clusterAdmin")
    private @Nullable Output<Boolean> clusterAdmin;

    /**
     * @return If `true`, then the group has the cluster administrator rights
     * 
     */
    public Optional<Output<Boolean>> clusterAdmin() {
        return Optional.ofNullable(this.clusterAdmin);
    }

    /**
     * LDAP group names
     * 
     */
    @Import(name="ldapGroups")
    private @Nullable Output<List<String>> ldapGroups;

    /**
     * @return LDAP group names
     * 
     */
    public Optional<Output<List<String>>> ldapGroups() {
        return Optional.ofNullable(this.ldapGroups);
    }

    /**
     * If `true`, then the group has the manage account rights
     * 
     */
    @Import(name="manageAccount")
    private @Nullable Output<Boolean> manageAccount;

    /**
     * @return If `true`, then the group has the manage account rights
     * 
     */
    public Optional<Output<Boolean>> manageAccount() {
        return Optional.ofNullable(this.manageAccount);
    }

    /**
     * The name of the user group
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the user group
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Permissions for environments
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<UserGroupPermissionsArgs> permissions;

    /**
     * @return Permissions for environments
     * 
     */
    public Optional<Output<UserGroupPermissionsArgs>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * SSO group names. If defined it&#39;s used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
     * 
     */
    @Import(name="ssoGroups")
    private @Nullable Output<List<String>> ssoGroups;

    /**
     * @return SSO group names. If defined it&#39;s used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
     * 
     */
    public Optional<Output<List<String>>> ssoGroups() {
        return Optional.ofNullable(this.ssoGroups);
    }

    private UserGroupArgs() {}

    private UserGroupArgs(UserGroupArgs $) {
        this.accessAccount = $.accessAccount;
        this.clusterAdmin = $.clusterAdmin;
        this.ldapGroups = $.ldapGroups;
        this.manageAccount = $.manageAccount;
        this.name = $.name;
        this.permissions = $.permissions;
        this.ssoGroups = $.ssoGroups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserGroupArgs $;

        public Builder() {
            $ = new UserGroupArgs();
        }

        public Builder(UserGroupArgs defaults) {
            $ = new UserGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessAccount If `true`, then the group has the access account rights
         * 
         * @return builder
         * 
         */
        public Builder accessAccount(@Nullable Output<Boolean> accessAccount) {
            $.accessAccount = accessAccount;
            return this;
        }

        /**
         * @param accessAccount If `true`, then the group has the access account rights
         * 
         * @return builder
         * 
         */
        public Builder accessAccount(Boolean accessAccount) {
            return accessAccount(Output.of(accessAccount));
        }

        /**
         * @param clusterAdmin If `true`, then the group has the cluster administrator rights
         * 
         * @return builder
         * 
         */
        public Builder clusterAdmin(@Nullable Output<Boolean> clusterAdmin) {
            $.clusterAdmin = clusterAdmin;
            return this;
        }

        /**
         * @param clusterAdmin If `true`, then the group has the cluster administrator rights
         * 
         * @return builder
         * 
         */
        public Builder clusterAdmin(Boolean clusterAdmin) {
            return clusterAdmin(Output.of(clusterAdmin));
        }

        /**
         * @param ldapGroups LDAP group names
         * 
         * @return builder
         * 
         */
        public Builder ldapGroups(@Nullable Output<List<String>> ldapGroups) {
            $.ldapGroups = ldapGroups;
            return this;
        }

        /**
         * @param ldapGroups LDAP group names
         * 
         * @return builder
         * 
         */
        public Builder ldapGroups(List<String> ldapGroups) {
            return ldapGroups(Output.of(ldapGroups));
        }

        /**
         * @param ldapGroups LDAP group names
         * 
         * @return builder
         * 
         */
        public Builder ldapGroups(String... ldapGroups) {
            return ldapGroups(List.of(ldapGroups));
        }

        /**
         * @param manageAccount If `true`, then the group has the manage account rights
         * 
         * @return builder
         * 
         */
        public Builder manageAccount(@Nullable Output<Boolean> manageAccount) {
            $.manageAccount = manageAccount;
            return this;
        }

        /**
         * @param manageAccount If `true`, then the group has the manage account rights
         * 
         * @return builder
         * 
         */
        public Builder manageAccount(Boolean manageAccount) {
            return manageAccount(Output.of(manageAccount));
        }

        /**
         * @param name The name of the user group
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the user group
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param permissions Permissions for environments
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<UserGroupPermissionsArgs> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions Permissions for environments
         * 
         * @return builder
         * 
         */
        public Builder permissions(UserGroupPermissionsArgs permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param ssoGroups SSO group names. If defined it&#39;s used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
         * 
         * @return builder
         * 
         */
        public Builder ssoGroups(@Nullable Output<List<String>> ssoGroups) {
            $.ssoGroups = ssoGroups;
            return this;
        }

        /**
         * @param ssoGroups SSO group names. If defined it&#39;s used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
         * 
         * @return builder
         * 
         */
        public Builder ssoGroups(List<String> ssoGroups) {
            return ssoGroups(Output.of(ssoGroups));
        }

        /**
         * @param ssoGroups SSO group names. If defined it&#39;s used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
         * 
         * @return builder
         * 
         */
        public Builder ssoGroups(String... ssoGroups) {
            return ssoGroups(List.of(ssoGroups));
        }

        public UserGroupArgs build() {
            return $;
        }
    }

}
