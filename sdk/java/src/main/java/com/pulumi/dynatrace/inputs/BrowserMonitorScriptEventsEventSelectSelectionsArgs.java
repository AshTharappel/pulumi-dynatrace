// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptEventsEventSelectSelectionsOptionArgs;
import java.util.List;
import java.util.Objects;


public final class BrowserMonitorScriptEventsEventSelectSelectionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final BrowserMonitorScriptEventsEventSelectSelectionsArgs Empty = new BrowserMonitorScriptEventsEventSelectSelectionsArgs();

    @Import(name="options", required=true)
    private Output<List<BrowserMonitorScriptEventsEventSelectSelectionsOptionArgs>> options;

    public Output<List<BrowserMonitorScriptEventsEventSelectSelectionsOptionArgs>> options() {
        return this.options;
    }

    private BrowserMonitorScriptEventsEventSelectSelectionsArgs() {}

    private BrowserMonitorScriptEventsEventSelectSelectionsArgs(BrowserMonitorScriptEventsEventSelectSelectionsArgs $) {
        this.options = $.options;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrowserMonitorScriptEventsEventSelectSelectionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrowserMonitorScriptEventsEventSelectSelectionsArgs $;

        public Builder() {
            $ = new BrowserMonitorScriptEventsEventSelectSelectionsArgs();
        }

        public Builder(BrowserMonitorScriptEventsEventSelectSelectionsArgs defaults) {
            $ = new BrowserMonitorScriptEventsEventSelectSelectionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder options(Output<List<BrowserMonitorScriptEventsEventSelectSelectionsOptionArgs>> options) {
            $.options = options;
            return this;
        }

        public Builder options(List<BrowserMonitorScriptEventsEventSelectSelectionsOptionArgs> options) {
            return options(Output.of(options));
        }

        public Builder options(BrowserMonitorScriptEventsEventSelectSelectionsOptionArgs... options) {
            return options(List.of(options));
        }

        public BrowserMonitorScriptEventsEventSelectSelectionsArgs build() {
            $.options = Objects.requireNonNull($.options, "expected parameter 'options' to be non-null");
            return $;
        }
    }

}
