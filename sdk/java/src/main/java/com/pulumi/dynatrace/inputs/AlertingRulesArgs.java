// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.AlertingRulesRuleArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertingRulesArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertingRulesArgs Empty = new AlertingRulesArgs();

    /**
     * A conditions for the metric usage
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<AlertingRulesRuleArgs>> rules;

    /**
     * @return A conditions for the metric usage
     * 
     */
    public Optional<Output<List<AlertingRulesRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    private AlertingRulesArgs() {}

    private AlertingRulesArgs(AlertingRulesArgs $) {
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertingRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertingRulesArgs $;

        public Builder() {
            $ = new AlertingRulesArgs();
        }

        public Builder(AlertingRulesArgs defaults) {
            $ = new AlertingRulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param rules A conditions for the metric usage
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<AlertingRulesRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules A conditions for the metric usage
         * 
         * @return builder
         * 
         */
        public Builder rules(List<AlertingRulesRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules A conditions for the metric usage
         * 
         * @return builder
         * 
         */
        public Builder rules(AlertingRulesRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public AlertingRulesArgs build() {
            return $;
        }
    }

}
