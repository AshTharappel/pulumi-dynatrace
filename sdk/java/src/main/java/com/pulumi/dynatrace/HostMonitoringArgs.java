// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class HostMonitoringArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostMonitoringArgs Empty = new HostMonitoringArgs();

    /**
     * An auto-injection disabled with [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and cannot be changed from the Dynatrace web UI.
     * 
     */
    @Import(name="autoInjection", required=true)
    private Output<Boolean> autoInjection;

    /**
     * @return An auto-injection disabled with [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and cannot be changed from the Dynatrace web UI.
     * 
     */
    public Output<Boolean> autoInjection() {
        return this.autoInjection;
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Dynatrace uses full-stack monitoring by default, to monitor every aspect of your environment, including all processes, services, and applications detected on your hosts.
     * 
     */
    @Import(name="fullStack", required=true)
    private Output<Boolean> fullStack;

    /**
     * @return Dynatrace uses full-stack monitoring by default, to monitor every aspect of your environment, including all processes, services, and applications detected on your hosts.
     * 
     */
    public Output<Boolean> fullStack() {
        return this.fullStack;
    }

    /**
     * The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
     * 
     */
    @Import(name="hostId", required=true)
    private Output<String> hostId;

    /**
     * @return The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
     * 
     */
    public Output<String> hostId() {
        return this.hostId;
    }

    private HostMonitoringArgs() {}

    private HostMonitoringArgs(HostMonitoringArgs $) {
        this.autoInjection = $.autoInjection;
        this.enabled = $.enabled;
        this.fullStack = $.fullStack;
        this.hostId = $.hostId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostMonitoringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostMonitoringArgs $;

        public Builder() {
            $ = new HostMonitoringArgs();
        }

        public Builder(HostMonitoringArgs defaults) {
            $ = new HostMonitoringArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoInjection An auto-injection disabled with [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and cannot be changed from the Dynatrace web UI.
         * 
         * @return builder
         * 
         */
        public Builder autoInjection(Output<Boolean> autoInjection) {
            $.autoInjection = autoInjection;
            return this;
        }

        /**
         * @param autoInjection An auto-injection disabled with [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and cannot be changed from the Dynatrace web UI.
         * 
         * @return builder
         * 
         */
        public Builder autoInjection(Boolean autoInjection) {
            return autoInjection(Output.of(autoInjection));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param fullStack Dynatrace uses full-stack monitoring by default, to monitor every aspect of your environment, including all processes, services, and applications detected on your hosts.
         * 
         * @return builder
         * 
         */
        public Builder fullStack(Output<Boolean> fullStack) {
            $.fullStack = fullStack;
            return this;
        }

        /**
         * @param fullStack Dynatrace uses full-stack monitoring by default, to monitor every aspect of your environment, including all processes, services, and applications detected on your hosts.
         * 
         * @return builder
         * 
         */
        public Builder fullStack(Boolean fullStack) {
            return fullStack(Output.of(fullStack));
        }

        /**
         * @param hostId The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
         * 
         * @return builder
         * 
         */
        public Builder hostId(Output<String> hostId) {
            $.hostId = hostId;
            return this;
        }

        /**
         * @param hostId The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
         * 
         * @return builder
         * 
         */
        public Builder hostId(String hostId) {
            return hostId(Output.of(hostId));
        }

        public HostMonitoringArgs build() {
            $.autoInjection = Objects.requireNonNull($.autoInjection, "expected parameter 'autoInjection' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.fullStack = Objects.requireNonNull($.fullStack, "expected parameter 'fullStack' to be non-null");
            $.hostId = Objects.requireNonNull($.hostId, "expected parameter 'hostId' to be non-null");
            return $;
        }
    }

}
