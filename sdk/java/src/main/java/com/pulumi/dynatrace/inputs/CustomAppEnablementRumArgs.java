// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;


public final class CustomAppEnablementRumArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomAppEnablementRumArgs Empty = new CustomAppEnablementRumArgs();

    /**
     * (Field has overlap with `dynatrace.MobileApplication`) Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
     * 
     */
    @Import(name="costAndTrafficControl", required=true)
    private Output<Integer> costAndTrafficControl;

    /**
     * @return (Field has overlap with `dynatrace.MobileApplication`) Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
     * 
     */
    public Output<Integer> costAndTrafficControl() {
        return this.costAndTrafficControl;
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    private CustomAppEnablementRumArgs() {}

    private CustomAppEnablementRumArgs(CustomAppEnablementRumArgs $) {
        this.costAndTrafficControl = $.costAndTrafficControl;
        this.enabled = $.enabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomAppEnablementRumArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomAppEnablementRumArgs $;

        public Builder() {
            $ = new CustomAppEnablementRumArgs();
        }

        public Builder(CustomAppEnablementRumArgs defaults) {
            $ = new CustomAppEnablementRumArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param costAndTrafficControl (Field has overlap with `dynatrace.MobileApplication`) Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
         * 
         * @return builder
         * 
         */
        public Builder costAndTrafficControl(Output<Integer> costAndTrafficControl) {
            $.costAndTrafficControl = costAndTrafficControl;
            return this;
        }

        /**
         * @param costAndTrafficControl (Field has overlap with `dynatrace.MobileApplication`) Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
         * 
         * @return builder
         * 
         */
        public Builder costAndTrafficControl(Integer costAndTrafficControl) {
            return costAndTrafficControl(Output.of(costAndTrafficControl));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public CustomAppEnablementRumArgs build() {
            $.costAndTrafficControl = Objects.requireNonNull($.costAndTrafficControl, "expected parameter 'costAndTrafficControl' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
