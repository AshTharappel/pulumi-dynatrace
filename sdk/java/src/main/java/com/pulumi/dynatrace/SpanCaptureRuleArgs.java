// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.SpanCaptureRuleMatchesArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SpanCaptureRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SpanCaptureRuleArgs Empty = new SpanCaptureRuleArgs();

    /**
     * Whether to create an entry point or not
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return Whether to create an entry point or not
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * Matching strategies for the Span
     * 
     */
    @Import(name="matches", required=true)
    private Output<SpanCaptureRuleMatchesArgs> matches;

    /**
     * @return Matching strategies for the Span
     * 
     */
    public Output<SpanCaptureRuleMatchesArgs> matches() {
        return this.matches;
    }

    /**
     * The name of the rule
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the rule
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private SpanCaptureRuleArgs() {}

    private SpanCaptureRuleArgs(SpanCaptureRuleArgs $) {
        this.action = $.action;
        this.matches = $.matches;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpanCaptureRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpanCaptureRuleArgs $;

        public Builder() {
            $ = new SpanCaptureRuleArgs();
        }

        public Builder(SpanCaptureRuleArgs defaults) {
            $ = new SpanCaptureRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Whether to create an entry point or not
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Whether to create an entry point or not
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param matches Matching strategies for the Span
         * 
         * @return builder
         * 
         */
        public Builder matches(Output<SpanCaptureRuleMatchesArgs> matches) {
            $.matches = matches;
            return this;
        }

        /**
         * @param matches Matching strategies for the Span
         * 
         * @return builder
         * 
         */
        public Builder matches(SpanCaptureRuleMatchesArgs matches) {
            return matches(Output.of(matches));
        }

        /**
         * @param name The name of the rule
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the rule
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public SpanCaptureRuleArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.matches = Objects.requireNonNull($.matches, "expected parameter 'matches' to be non-null");
            return $;
        }
    }

}
