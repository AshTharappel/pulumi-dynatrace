// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dynatrace.outputs.DashboardDashboardMetadataDynamicFilters;
import com.pulumi.dynatrace.outputs.DashboardDashboardMetadataFilter;
import com.pulumi.dynatrace.outputs.DashboardDashboardMetadataSharingDetails;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardDashboardMetadata {
    /**
     * @return The tile uses consistent colors when rendering its content
     * 
     */
    private @Nullable Boolean consistentColors;
    /**
     * @return Dashboard filter configuration of a dashboard
     * 
     */
    private @Nullable DashboardDashboardMetadataDynamicFilters dynamicFilters;
    /**
     * @return Global filter Settings for the Dashboard
     * 
     */
    private @Nullable DashboardDashboardMetadataFilter filter;
    /**
     * @return the name of the dashboard
     * 
     */
    private String name;
    /**
     * @return the owner of the dashboard
     * 
     */
    private String owner;
    /**
     * @return the dashboard is shared (`true`) or private (`false`)
     * 
     */
    private @Nullable Boolean shared;
    /**
     * @return represents sharing configuration of a dashboard
     * 
     */
    private @Nullable DashboardDashboardMetadataSharingDetails sharingDetails;
    /**
     * @return a set of tags assigned to the dashboard
     * 
     */
    private @Nullable List<String> tags;
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    private @Nullable String unknowns;
    /**
     * @return a set of all possible global dashboard filters that can be applied to dashboard
     * 
     */
    private @Nullable List<String> validFilterKeys;

    private DashboardDashboardMetadata() {}
    /**
     * @return The tile uses consistent colors when rendering its content
     * 
     */
    public Optional<Boolean> consistentColors() {
        return Optional.ofNullable(this.consistentColors);
    }
    /**
     * @return Dashboard filter configuration of a dashboard
     * 
     */
    public Optional<DashboardDashboardMetadataDynamicFilters> dynamicFilters() {
        return Optional.ofNullable(this.dynamicFilters);
    }
    /**
     * @return Global filter Settings for the Dashboard
     * 
     */
    public Optional<DashboardDashboardMetadataFilter> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return the name of the dashboard
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return the owner of the dashboard
     * 
     */
    public String owner() {
        return this.owner;
    }
    /**
     * @return the dashboard is shared (`true`) or private (`false`)
     * 
     */
    public Optional<Boolean> shared() {
        return Optional.ofNullable(this.shared);
    }
    /**
     * @return represents sharing configuration of a dashboard
     * 
     */
    public Optional<DashboardDashboardMetadataSharingDetails> sharingDetails() {
        return Optional.ofNullable(this.sharingDetails);
    }
    /**
     * @return a set of tags assigned to the dashboard
     * 
     */
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<String> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }
    /**
     * @return a set of all possible global dashboard filters that can be applied to dashboard
     * 
     */
    public List<String> validFilterKeys() {
        return this.validFilterKeys == null ? List.of() : this.validFilterKeys;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardDashboardMetadata defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean consistentColors;
        private @Nullable DashboardDashboardMetadataDynamicFilters dynamicFilters;
        private @Nullable DashboardDashboardMetadataFilter filter;
        private String name;
        private String owner;
        private @Nullable Boolean shared;
        private @Nullable DashboardDashboardMetadataSharingDetails sharingDetails;
        private @Nullable List<String> tags;
        private @Nullable String unknowns;
        private @Nullable List<String> validFilterKeys;
        public Builder() {}
        public Builder(DashboardDashboardMetadata defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.consistentColors = defaults.consistentColors;
    	      this.dynamicFilters = defaults.dynamicFilters;
    	      this.filter = defaults.filter;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.shared = defaults.shared;
    	      this.sharingDetails = defaults.sharingDetails;
    	      this.tags = defaults.tags;
    	      this.unknowns = defaults.unknowns;
    	      this.validFilterKeys = defaults.validFilterKeys;
        }

        @CustomType.Setter
        public Builder consistentColors(@Nullable Boolean consistentColors) {
            this.consistentColors = consistentColors;
            return this;
        }
        @CustomType.Setter
        public Builder dynamicFilters(@Nullable DashboardDashboardMetadataDynamicFilters dynamicFilters) {
            this.dynamicFilters = dynamicFilters;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable DashboardDashboardMetadataFilter filter) {
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            this.owner = Objects.requireNonNull(owner);
            return this;
        }
        @CustomType.Setter
        public Builder shared(@Nullable Boolean shared) {
            this.shared = shared;
            return this;
        }
        @CustomType.Setter
        public Builder sharingDetails(@Nullable DashboardDashboardMetadataSharingDetails sharingDetails) {
            this.sharingDetails = sharingDetails;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder unknowns(@Nullable String unknowns) {
            this.unknowns = unknowns;
            return this;
        }
        @CustomType.Setter
        public Builder validFilterKeys(@Nullable List<String> validFilterKeys) {
            this.validFilterKeys = validFilterKeys;
            return this;
        }
        public Builder validFilterKeys(String... validFilterKeys) {
            return validFilterKeys(List.of(validFilterKeys));
        }
        public DashboardDashboardMetadata build() {
            final var o = new DashboardDashboardMetadata();
            o.consistentColors = consistentColors;
            o.dynamicFilters = dynamicFilters;
            o.filter = filter;
            o.name = name;
            o.owner = owner;
            o.shared = shared;
            o.sharingDetails = sharingDetails;
            o.tags = tags;
            o.unknowns = unknowns;
            o.validFilterKeys = validFilterKeys;
            return o;
        }
    }
}
