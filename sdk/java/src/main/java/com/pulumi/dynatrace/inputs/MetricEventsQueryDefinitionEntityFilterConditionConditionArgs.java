// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class MetricEventsQueryDefinitionEntityFilterConditionConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricEventsQueryDefinitionEntityFilterConditionConditionArgs Empty = new MetricEventsQueryDefinitionEntityFilterConditionConditionArgs();

    @Import(name="operator", required=true)
    private Output<String> operator;

    public Output<String> operator() {
        return this.operator;
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    @Import(name="value", required=true)
    private Output<String> value;

    public Output<String> value() {
        return this.value;
    }

    private MetricEventsQueryDefinitionEntityFilterConditionConditionArgs() {}

    private MetricEventsQueryDefinitionEntityFilterConditionConditionArgs(MetricEventsQueryDefinitionEntityFilterConditionConditionArgs $) {
        this.operator = $.operator;
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricEventsQueryDefinitionEntityFilterConditionConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricEventsQueryDefinitionEntityFilterConditionConditionArgs $;

        public Builder() {
            $ = new MetricEventsQueryDefinitionEntityFilterConditionConditionArgs();
        }

        public Builder(MetricEventsQueryDefinitionEntityFilterConditionConditionArgs defaults) {
            $ = new MetricEventsQueryDefinitionEntityFilterConditionConditionArgs(Objects.requireNonNull(defaults));
        }

        public Builder operator(Output<String> operator) {
            $.operator = operator;
            return this;
        }

        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        public Builder value(String value) {
            return value(Output.of(value));
        }

        public MetricEventsQueryDefinitionEntityFilterConditionConditionArgs build() {
            $.operator = Objects.requireNonNull($.operator, "expected parameter 'operator' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
