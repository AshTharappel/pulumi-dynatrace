// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GenericRelationshipsSourcesSourceMappingRulesMappingRule {
    private String destinationProperty;
    private String destinationTransformation;
    private String sourceProperty;
    private String sourceTransformation;

    private GenericRelationshipsSourcesSourceMappingRulesMappingRule() {}
    public String destinationProperty() {
        return this.destinationProperty;
    }
    public String destinationTransformation() {
        return this.destinationTransformation;
    }
    public String sourceProperty() {
        return this.sourceProperty;
    }
    public String sourceTransformation() {
        return this.sourceTransformation;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GenericRelationshipsSourcesSourceMappingRulesMappingRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String destinationProperty;
        private String destinationTransformation;
        private String sourceProperty;
        private String sourceTransformation;
        public Builder() {}
        public Builder(GenericRelationshipsSourcesSourceMappingRulesMappingRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationProperty = defaults.destinationProperty;
    	      this.destinationTransformation = defaults.destinationTransformation;
    	      this.sourceProperty = defaults.sourceProperty;
    	      this.sourceTransformation = defaults.sourceTransformation;
        }

        @CustomType.Setter
        public Builder destinationProperty(String destinationProperty) {
            this.destinationProperty = Objects.requireNonNull(destinationProperty);
            return this;
        }
        @CustomType.Setter
        public Builder destinationTransformation(String destinationTransformation) {
            this.destinationTransformation = Objects.requireNonNull(destinationTransformation);
            return this;
        }
        @CustomType.Setter
        public Builder sourceProperty(String sourceProperty) {
            this.sourceProperty = Objects.requireNonNull(sourceProperty);
            return this;
        }
        @CustomType.Setter
        public Builder sourceTransformation(String sourceTransformation) {
            this.sourceTransformation = Objects.requireNonNull(sourceTransformation);
            return this;
        }
        public GenericRelationshipsSourcesSourceMappingRulesMappingRule build() {
            final var o = new GenericRelationshipsSourcesSourceMappingRulesMappingRule();
            o.destinationProperty = destinationProperty;
            o.destinationTransformation = destinationTransformation;
            o.sourceProperty = sourceProperty;
            o.sourceTransformation = sourceTransformation;
            return o;
        }
    }
}
