// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardTileBoundsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardTileBoundsArgs Empty = new DashboardTileBoundsArgs();

    @Import(name="height", required=true)
    private Output<Integer> height;

    public Output<Integer> height() {
        return this.height;
    }

    @Import(name="left", required=true)
    private Output<Integer> left;

    public Output<Integer> left() {
        return this.left;
    }

    @Import(name="top", required=true)
    private Output<Integer> top;

    public Output<Integer> top() {
        return this.top;
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    @Import(name="width", required=true)
    private Output<Integer> width;

    public Output<Integer> width() {
        return this.width;
    }

    private DashboardTileBoundsArgs() {}

    private DashboardTileBoundsArgs(DashboardTileBoundsArgs $) {
        this.height = $.height;
        this.left = $.left;
        this.top = $.top;
        this.unknowns = $.unknowns;
        this.width = $.width;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardTileBoundsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardTileBoundsArgs $;

        public Builder() {
            $ = new DashboardTileBoundsArgs();
        }

        public Builder(DashboardTileBoundsArgs defaults) {
            $ = new DashboardTileBoundsArgs(Objects.requireNonNull(defaults));
        }

        public Builder height(Output<Integer> height) {
            $.height = height;
            return this;
        }

        public Builder height(Integer height) {
            return height(Output.of(height));
        }

        public Builder left(Output<Integer> left) {
            $.left = left;
            return this;
        }

        public Builder left(Integer left) {
            return left(Output.of(left));
        }

        public Builder top(Output<Integer> top) {
            $.top = top;
            return this;
        }

        public Builder top(Integer top) {
            return top(Output.of(top));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public Builder width(Output<Integer> width) {
            $.width = width;
            return this;
        }

        public Builder width(Integer width) {
            return width(Output.of(width));
        }

        public DashboardTileBoundsArgs build() {
            $.height = Objects.requireNonNull($.height, "expected parameter 'height' to be non-null");
            $.left = Objects.requireNonNull($.left, "expected parameter 'left' to be non-null");
            $.top = Objects.requireNonNull($.top, "expected parameter 'top' to be non-null");
            $.width = Objects.requireNonNull($.width, "expected parameter 'width' to be non-null");
            return $;
        }
    }

}
