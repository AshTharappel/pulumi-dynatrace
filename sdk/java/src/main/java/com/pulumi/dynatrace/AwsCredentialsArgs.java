// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.AwsCredentialsAuthenticationDataArgs;
import com.pulumi.dynatrace.inputs.AwsCredentialsSupportingServicesToMonitorArgs;
import com.pulumi.dynatrace.inputs.AwsCredentialsTagsToMonitorArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AwsCredentialsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AwsCredentialsArgs Empty = new AwsCredentialsArgs();

    /**
     * credentials for the AWS authentication
     * 
     */
    @Import(name="authenticationData", required=true)
    private Output<AwsCredentialsAuthenticationDataArgs> authenticationData;

    /**
     * @return credentials for the AWS authentication
     * 
     */
    public Output<AwsCredentialsAuthenticationDataArgs> authenticationData() {
        return this.authenticationData;
    }

    /**
     * The name of the credentials
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The name of the credentials
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The type of the AWS partition
     * 
     */
    @Import(name="partitionType", required=true)
    private Output<String> partitionType;

    /**
     * @return The type of the AWS partition
     * 
     */
    public Output<String> partitionType() {
        return this.partitionType;
    }

    /**
     * If enabled (`true`) the attribute `supporting_services` will not get synchronized with Dynatrace. You will be able to
     * manage them via WebUI without interference by Terraform.
     * 
     */
    @Import(name="supportingServicesManagedInDynatrace")
    private @Nullable Output<Boolean> supportingServicesManagedInDynatrace;

    /**
     * @return If enabled (`true`) the attribute `supporting_services` will not get synchronized with Dynatrace. You will be able to
     * manage them via WebUI without interference by Terraform.
     * 
     */
    public Optional<Output<Boolean>> supportingServicesManagedInDynatrace() {
        return Optional.ofNullable(this.supportingServicesManagedInDynatrace);
    }

    /**
     * supporting services to be monitored
     * 
     */
    @Import(name="supportingServicesToMonitors")
    private @Nullable Output<List<AwsCredentialsSupportingServicesToMonitorArgs>> supportingServicesToMonitors;

    /**
     * @return supporting services to be monitored
     * 
     */
    public Optional<Output<List<AwsCredentialsSupportingServicesToMonitorArgs>>> supportingServicesToMonitors() {
        return Optional.ofNullable(this.supportingServicesToMonitors);
    }

    /**
     * Monitor only resources which have specified AWS tags (`true`) or all resources (`false`)
     * 
     */
    @Import(name="taggedOnly", required=true)
    private Output<Boolean> taggedOnly;

    /**
     * @return Monitor only resources which have specified AWS tags (`true`) or all resources (`false`)
     * 
     */
    public Output<Boolean> taggedOnly() {
        return this.taggedOnly;
    }

    /**
     * AWS tags to be monitored. You can specify up to 10 tags. Only applicable when the **tagged_only** parameter is set to `true`
     * 
     */
    @Import(name="tagsToMonitors")
    private @Nullable Output<List<AwsCredentialsTagsToMonitorArgs>> tagsToMonitors;

    /**
     * @return AWS tags to be monitored. You can specify up to 10 tags. Only applicable when the **tagged_only** parameter is set to `true`
     * 
     */
    public Optional<Output<List<AwsCredentialsTagsToMonitorArgs>>> tagsToMonitors() {
        return Optional.ofNullable(this.tagsToMonitors);
    }

    /**
     * Any attributes that aren&#39;t yet supported by this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return Any attributes that aren&#39;t yet supported by this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    private AwsCredentialsArgs() {}

    private AwsCredentialsArgs(AwsCredentialsArgs $) {
        this.authenticationData = $.authenticationData;
        this.label = $.label;
        this.partitionType = $.partitionType;
        this.supportingServicesManagedInDynatrace = $.supportingServicesManagedInDynatrace;
        this.supportingServicesToMonitors = $.supportingServicesToMonitors;
        this.taggedOnly = $.taggedOnly;
        this.tagsToMonitors = $.tagsToMonitors;
        this.unknowns = $.unknowns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AwsCredentialsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AwsCredentialsArgs $;

        public Builder() {
            $ = new AwsCredentialsArgs();
        }

        public Builder(AwsCredentialsArgs defaults) {
            $ = new AwsCredentialsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationData credentials for the AWS authentication
         * 
         * @return builder
         * 
         */
        public Builder authenticationData(Output<AwsCredentialsAuthenticationDataArgs> authenticationData) {
            $.authenticationData = authenticationData;
            return this;
        }

        /**
         * @param authenticationData credentials for the AWS authentication
         * 
         * @return builder
         * 
         */
        public Builder authenticationData(AwsCredentialsAuthenticationDataArgs authenticationData) {
            return authenticationData(Output.of(authenticationData));
        }

        /**
         * @param label The name of the credentials
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The name of the credentials
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param partitionType The type of the AWS partition
         * 
         * @return builder
         * 
         */
        public Builder partitionType(Output<String> partitionType) {
            $.partitionType = partitionType;
            return this;
        }

        /**
         * @param partitionType The type of the AWS partition
         * 
         * @return builder
         * 
         */
        public Builder partitionType(String partitionType) {
            return partitionType(Output.of(partitionType));
        }

        /**
         * @param supportingServicesManagedInDynatrace If enabled (`true`) the attribute `supporting_services` will not get synchronized with Dynatrace. You will be able to
         * manage them via WebUI without interference by Terraform.
         * 
         * @return builder
         * 
         */
        public Builder supportingServicesManagedInDynatrace(@Nullable Output<Boolean> supportingServicesManagedInDynatrace) {
            $.supportingServicesManagedInDynatrace = supportingServicesManagedInDynatrace;
            return this;
        }

        /**
         * @param supportingServicesManagedInDynatrace If enabled (`true`) the attribute `supporting_services` will not get synchronized with Dynatrace. You will be able to
         * manage them via WebUI without interference by Terraform.
         * 
         * @return builder
         * 
         */
        public Builder supportingServicesManagedInDynatrace(Boolean supportingServicesManagedInDynatrace) {
            return supportingServicesManagedInDynatrace(Output.of(supportingServicesManagedInDynatrace));
        }

        /**
         * @param supportingServicesToMonitors supporting services to be monitored
         * 
         * @return builder
         * 
         */
        public Builder supportingServicesToMonitors(@Nullable Output<List<AwsCredentialsSupportingServicesToMonitorArgs>> supportingServicesToMonitors) {
            $.supportingServicesToMonitors = supportingServicesToMonitors;
            return this;
        }

        /**
         * @param supportingServicesToMonitors supporting services to be monitored
         * 
         * @return builder
         * 
         */
        public Builder supportingServicesToMonitors(List<AwsCredentialsSupportingServicesToMonitorArgs> supportingServicesToMonitors) {
            return supportingServicesToMonitors(Output.of(supportingServicesToMonitors));
        }

        /**
         * @param supportingServicesToMonitors supporting services to be monitored
         * 
         * @return builder
         * 
         */
        public Builder supportingServicesToMonitors(AwsCredentialsSupportingServicesToMonitorArgs... supportingServicesToMonitors) {
            return supportingServicesToMonitors(List.of(supportingServicesToMonitors));
        }

        /**
         * @param taggedOnly Monitor only resources which have specified AWS tags (`true`) or all resources (`false`)
         * 
         * @return builder
         * 
         */
        public Builder taggedOnly(Output<Boolean> taggedOnly) {
            $.taggedOnly = taggedOnly;
            return this;
        }

        /**
         * @param taggedOnly Monitor only resources which have specified AWS tags (`true`) or all resources (`false`)
         * 
         * @return builder
         * 
         */
        public Builder taggedOnly(Boolean taggedOnly) {
            return taggedOnly(Output.of(taggedOnly));
        }

        /**
         * @param tagsToMonitors AWS tags to be monitored. You can specify up to 10 tags. Only applicable when the **tagged_only** parameter is set to `true`
         * 
         * @return builder
         * 
         */
        public Builder tagsToMonitors(@Nullable Output<List<AwsCredentialsTagsToMonitorArgs>> tagsToMonitors) {
            $.tagsToMonitors = tagsToMonitors;
            return this;
        }

        /**
         * @param tagsToMonitors AWS tags to be monitored. You can specify up to 10 tags. Only applicable when the **tagged_only** parameter is set to `true`
         * 
         * @return builder
         * 
         */
        public Builder tagsToMonitors(List<AwsCredentialsTagsToMonitorArgs> tagsToMonitors) {
            return tagsToMonitors(Output.of(tagsToMonitors));
        }

        /**
         * @param tagsToMonitors AWS tags to be monitored. You can specify up to 10 tags. Only applicable when the **tagged_only** parameter is set to `true`
         * 
         * @return builder
         * 
         */
        public Builder tagsToMonitors(AwsCredentialsTagsToMonitorArgs... tagsToMonitors) {
            return tagsToMonitors(List.of(tagsToMonitors));
        }

        /**
         * @param unknowns Any attributes that aren&#39;t yet supported by this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns Any attributes that aren&#39;t yet supported by this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public AwsCredentialsArgs build() {
            $.authenticationData = Objects.requireNonNull($.authenticationData, "expected parameter 'authenticationData' to be non-null");
            $.partitionType = Objects.requireNonNull($.partitionType, "expected parameter 'partitionType' to be non-null");
            $.taggedOnly = Objects.requireNonNull($.taggedOnly, "expected parameter 'taggedOnly' to be non-null");
            return $;
        }
    }

}
