// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.MaintenanceWindowScheduleRecurrenceArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MaintenanceWindowScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final MaintenanceWindowScheduleArgs Empty = new MaintenanceWindowScheduleArgs();

    /**
     * The end date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
     * 
     */
    @Import(name="end", required=true)
    private Output<String> end;

    /**
     * @return The end date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
     * 
     */
    public Output<String> end() {
        return this.end;
    }

    /**
     * The recurrence of the maintenance window
     * 
     */
    @Import(name="recurrence")
    private @Nullable Output<MaintenanceWindowScheduleRecurrenceArgs> recurrence;

    /**
     * @return The recurrence of the maintenance window
     * 
     */
    public Optional<Output<MaintenanceWindowScheduleRecurrenceArgs>> recurrence() {
        return Optional.ofNullable(this.recurrence);
    }

    /**
     * The type of the schedule recurrence. Possible values are `DAILY`, `MONTHLY`, `ONCE` and `WEEKLY`
     * 
     */
    @Import(name="recurrenceType", required=true)
    private Output<String> recurrenceType;

    /**
     * @return The type of the schedule recurrence. Possible values are `DAILY`, `MONTHLY`, `ONCE` and `WEEKLY`
     * 
     */
    public Output<String> recurrenceType() {
        return this.recurrenceType;
    }

    /**
     * The start date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
     * 
     */
    @Import(name="start", required=true)
    private Output<String> start;

    /**
     * @return The start date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
     * 
     */
    public Output<String> start() {
        return this.start;
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    /**
     * The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private MaintenanceWindowScheduleArgs() {}

    private MaintenanceWindowScheduleArgs(MaintenanceWindowScheduleArgs $) {
        this.end = $.end;
        this.recurrence = $.recurrence;
        this.recurrenceType = $.recurrenceType;
        this.start = $.start;
        this.unknowns = $.unknowns;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MaintenanceWindowScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MaintenanceWindowScheduleArgs $;

        public Builder() {
            $ = new MaintenanceWindowScheduleArgs();
        }

        public Builder(MaintenanceWindowScheduleArgs defaults) {
            $ = new MaintenanceWindowScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param end The end date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
         * 
         * @return builder
         * 
         */
        public Builder end(Output<String> end) {
            $.end = end;
            return this;
        }

        /**
         * @param end The end date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
         * 
         * @return builder
         * 
         */
        public Builder end(String end) {
            return end(Output.of(end));
        }

        /**
         * @param recurrence The recurrence of the maintenance window
         * 
         * @return builder
         * 
         */
        public Builder recurrence(@Nullable Output<MaintenanceWindowScheduleRecurrenceArgs> recurrence) {
            $.recurrence = recurrence;
            return this;
        }

        /**
         * @param recurrence The recurrence of the maintenance window
         * 
         * @return builder
         * 
         */
        public Builder recurrence(MaintenanceWindowScheduleRecurrenceArgs recurrence) {
            return recurrence(Output.of(recurrence));
        }

        /**
         * @param recurrenceType The type of the schedule recurrence. Possible values are `DAILY`, `MONTHLY`, `ONCE` and `WEEKLY`
         * 
         * @return builder
         * 
         */
        public Builder recurrenceType(Output<String> recurrenceType) {
            $.recurrenceType = recurrenceType;
            return this;
        }

        /**
         * @param recurrenceType The type of the schedule recurrence. Possible values are `DAILY`, `MONTHLY`, `ONCE` and `WEEKLY`
         * 
         * @return builder
         * 
         */
        public Builder recurrenceType(String recurrenceType) {
            return recurrenceType(Output.of(recurrenceType));
        }

        /**
         * @param start The start date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
         * 
         * @return builder
         * 
         */
        public Builder start(Output<String> start) {
            $.start = start;
            return this;
        }

        /**
         * @param start The start date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
         * 
         * @return builder
         * 
         */
        public Builder start(String start) {
            return start(Output.of(start));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        /**
         * @param zoneId The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public MaintenanceWindowScheduleArgs build() {
            $.end = Objects.requireNonNull($.end, "expected parameter 'end' to be non-null");
            $.recurrenceType = Objects.requireNonNull($.recurrenceType, "expected parameter 'recurrenceType' to be non-null");
            $.start = Objects.requireNonNull($.start, "expected parameter 'start' to be non-null");
            $.zoneId = Objects.requireNonNull($.zoneId, "expected parameter 'zoneId' to be non-null");
            return $;
        }
    }

}
