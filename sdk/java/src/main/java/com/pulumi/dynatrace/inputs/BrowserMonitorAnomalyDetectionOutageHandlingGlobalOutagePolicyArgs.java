// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;


public final class BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs Empty = new BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs();

    @Import(name="consecutiveRuns", required=true)
    private Output<Integer> consecutiveRuns;

    public Output<Integer> consecutiveRuns() {
        return this.consecutiveRuns;
    }

    private BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs() {}

    private BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs(BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs $) {
        this.consecutiveRuns = $.consecutiveRuns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs $;

        public Builder() {
            $ = new BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs();
        }

        public Builder(BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs defaults) {
            $ = new BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder consecutiveRuns(Output<Integer> consecutiveRuns) {
            $.consecutiveRuns = consecutiveRuns;
            return this;
        }

        public Builder consecutiveRuns(Integer consecutiveRuns) {
            return consecutiveRuns(Output.of(consecutiveRuns));
        }

        public BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs build() {
            $.consecutiveRuns = Objects.requireNonNull($.consecutiveRuns, "expected parameter 'consecutiveRuns' to be non-null");
            return $;
        }
    }

}
