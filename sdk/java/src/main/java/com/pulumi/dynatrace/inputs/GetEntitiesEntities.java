// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.GetEntitiesEntitiesEntity;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetEntitiesEntities extends com.pulumi.resources.InvokeArgs {

    public static final GetEntitiesEntities Empty = new GetEntitiesEntities();

    /**
     * A list of monitored entities.
     * 
     */
    @Import(name="entities")
    private @Nullable List<GetEntitiesEntitiesEntity> entities;

    /**
     * @return A list of monitored entities.
     * 
     */
    public Optional<List<GetEntitiesEntitiesEntity>> entities() {
        return Optional.ofNullable(this.entities);
    }

    private GetEntitiesEntities() {}

    private GetEntitiesEntities(GetEntitiesEntities $) {
        this.entities = $.entities;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEntitiesEntities defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEntitiesEntities $;

        public Builder() {
            $ = new GetEntitiesEntities();
        }

        public Builder(GetEntitiesEntities defaults) {
            $ = new GetEntitiesEntities(Objects.requireNonNull(defaults));
        }

        /**
         * @param entities A list of monitored entities.
         * 
         * @return builder
         * 
         */
        public Builder entities(@Nullable List<GetEntitiesEntitiesEntity> entities) {
            $.entities = entities;
            return this;
        }

        /**
         * @param entities A list of monitored entities.
         * 
         * @return builder
         * 
         */
        public Builder entities(GetEntitiesEntitiesEntity... entities) {
            return entities(List.of(entities));
        }

        public GetEntitiesEntities build() {
            return $;
        }
    }

}
