// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.FailureDetectionParametersBrokenLinksArgs;
import com.pulumi.dynatrace.inputs.FailureDetectionParametersExceptionRulesArgs;
import com.pulumi.dynatrace.inputs.FailureDetectionParametersHttpResponseCodesArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FailureDetectionParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final FailureDetectionParametersArgs Empty = new FailureDetectionParametersArgs();

    /**
     * HTTP 404 response codes are thrown when a web server can&#39;t find a certain page. 404s are classified as broken links on the client side and therefore aren&#39;t considered to be service failures. By enabling this setting, you can have 404s treated as server-side service failures.
     * 
     */
    @Import(name="brokenLinks", required=true)
    private Output<FailureDetectionParametersBrokenLinksArgs> brokenLinks;

    /**
     * @return HTTP 404 response codes are thrown when a web server can&#39;t find a certain page. 404s are classified as broken links on the client side and therefore aren&#39;t considered to be service failures. By enabling this setting, you can have 404s treated as server-side service failures.
     * 
     */
    public Output<FailureDetectionParametersBrokenLinksArgs> brokenLinks() {
        return this.brokenLinks;
    }

    /**
     * Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Customize failure detection for specific exceptions and errors
     * 
     */
    @Import(name="exceptionRules", required=true)
    private Output<FailureDetectionParametersExceptionRulesArgs> exceptionRules;

    /**
     * @return Customize failure detection for specific exceptions and errors
     * 
     */
    public Output<FailureDetectionParametersExceptionRulesArgs> exceptionRules() {
        return this.exceptionRules;
    }

    /**
     * HTTP response codes
     * 
     */
    @Import(name="httpResponseCodes", required=true)
    private Output<FailureDetectionParametersHttpResponseCodesArgs> httpResponseCodes;

    /**
     * @return HTTP response codes
     * 
     */
    public Output<FailureDetectionParametersHttpResponseCodesArgs> httpResponseCodes() {
        return this.httpResponseCodes;
    }

    /**
     * Name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private FailureDetectionParametersArgs() {}

    private FailureDetectionParametersArgs(FailureDetectionParametersArgs $) {
        this.brokenLinks = $.brokenLinks;
        this.description = $.description;
        this.exceptionRules = $.exceptionRules;
        this.httpResponseCodes = $.httpResponseCodes;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FailureDetectionParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FailureDetectionParametersArgs $;

        public Builder() {
            $ = new FailureDetectionParametersArgs();
        }

        public Builder(FailureDetectionParametersArgs defaults) {
            $ = new FailureDetectionParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param brokenLinks HTTP 404 response codes are thrown when a web server can&#39;t find a certain page. 404s are classified as broken links on the client side and therefore aren&#39;t considered to be service failures. By enabling this setting, you can have 404s treated as server-side service failures.
         * 
         * @return builder
         * 
         */
        public Builder brokenLinks(Output<FailureDetectionParametersBrokenLinksArgs> brokenLinks) {
            $.brokenLinks = brokenLinks;
            return this;
        }

        /**
         * @param brokenLinks HTTP 404 response codes are thrown when a web server can&#39;t find a certain page. 404s are classified as broken links on the client side and therefore aren&#39;t considered to be service failures. By enabling this setting, you can have 404s treated as server-side service failures.
         * 
         * @return builder
         * 
         */
        public Builder brokenLinks(FailureDetectionParametersBrokenLinksArgs brokenLinks) {
            return brokenLinks(Output.of(brokenLinks));
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param exceptionRules Customize failure detection for specific exceptions and errors
         * 
         * @return builder
         * 
         */
        public Builder exceptionRules(Output<FailureDetectionParametersExceptionRulesArgs> exceptionRules) {
            $.exceptionRules = exceptionRules;
            return this;
        }

        /**
         * @param exceptionRules Customize failure detection for specific exceptions and errors
         * 
         * @return builder
         * 
         */
        public Builder exceptionRules(FailureDetectionParametersExceptionRulesArgs exceptionRules) {
            return exceptionRules(Output.of(exceptionRules));
        }

        /**
         * @param httpResponseCodes HTTP response codes
         * 
         * @return builder
         * 
         */
        public Builder httpResponseCodes(Output<FailureDetectionParametersHttpResponseCodesArgs> httpResponseCodes) {
            $.httpResponseCodes = httpResponseCodes;
            return this;
        }

        /**
         * @param httpResponseCodes HTTP response codes
         * 
         * @return builder
         * 
         */
        public Builder httpResponseCodes(FailureDetectionParametersHttpResponseCodesArgs httpResponseCodes) {
            return httpResponseCodes(Output.of(httpResponseCodes));
        }

        /**
         * @param name Name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public FailureDetectionParametersArgs build() {
            $.brokenLinks = Objects.requireNonNull($.brokenLinks, "expected parameter 'brokenLinks' to be non-null");
            $.exceptionRules = Objects.requireNonNull($.exceptionRules, "expected parameter 'exceptionRules' to be non-null");
            $.httpResponseCodes = Objects.requireNonNull($.httpResponseCodes, "expected parameter 'httpResponseCodes' to be non-null");
            return $;
        }
    }

}
