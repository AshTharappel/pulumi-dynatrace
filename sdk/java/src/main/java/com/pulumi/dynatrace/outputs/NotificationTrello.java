// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NotificationTrello {
    /**
     * @return The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    private Boolean active;
    /**
     * @return The ID of the associated alerting profile
     * 
     */
    private String alertingProfile;
    /**
     * @return The application key for the Trello account
     * 
     */
    private String applicationKey;
    /**
     * @return The application token for the Trello account
     * 
     */
    private @Nullable String authorizationToken;
    /**
     * @return The Trello board to which the card should be assigned
     * 
     */
    private String boardId;
    /**
     * @return The description of the Trello card.   You can use same placeholders as in card text
     * 
     */
    private String description;
    /**
     * @return The Trello list to which the card should be assigned
     * 
     */
    private String listId;
    /**
     * @return The name of the notification configuration
     * 
     */
    private String name;
    /**
     * @return The Trello list to which the card of the resolved problem should be assigned
     * 
     */
    private String resolvedListId;
    /**
     * @return The text of the generated Trello card.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     * 
     */
    private String text;
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    private @Nullable String unknowns;

    private NotificationTrello() {}
    /**
     * @return The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    public Boolean active() {
        return this.active;
    }
    /**
     * @return The ID of the associated alerting profile
     * 
     */
    public String alertingProfile() {
        return this.alertingProfile;
    }
    /**
     * @return The application key for the Trello account
     * 
     */
    public String applicationKey() {
        return this.applicationKey;
    }
    /**
     * @return The application token for the Trello account
     * 
     */
    public Optional<String> authorizationToken() {
        return Optional.ofNullable(this.authorizationToken);
    }
    /**
     * @return The Trello board to which the card should be assigned
     * 
     */
    public String boardId() {
        return this.boardId;
    }
    /**
     * @return The description of the Trello card.   You can use same placeholders as in card text
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The Trello list to which the card should be assigned
     * 
     */
    public String listId() {
        return this.listId;
    }
    /**
     * @return The name of the notification configuration
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The Trello list to which the card of the resolved problem should be assigned
     * 
     */
    public String resolvedListId() {
        return this.resolvedListId;
    }
    /**
     * @return The text of the generated Trello card.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     * 
     */
    public String text() {
        return this.text;
    }
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<String> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotificationTrello defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean active;
        private String alertingProfile;
        private String applicationKey;
        private @Nullable String authorizationToken;
        private String boardId;
        private String description;
        private String listId;
        private String name;
        private String resolvedListId;
        private String text;
        private @Nullable String unknowns;
        public Builder() {}
        public Builder(NotificationTrello defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.alertingProfile = defaults.alertingProfile;
    	      this.applicationKey = defaults.applicationKey;
    	      this.authorizationToken = defaults.authorizationToken;
    	      this.boardId = defaults.boardId;
    	      this.description = defaults.description;
    	      this.listId = defaults.listId;
    	      this.name = defaults.name;
    	      this.resolvedListId = defaults.resolvedListId;
    	      this.text = defaults.text;
    	      this.unknowns = defaults.unknowns;
        }

        @CustomType.Setter
        public Builder active(Boolean active) {
            this.active = Objects.requireNonNull(active);
            return this;
        }
        @CustomType.Setter
        public Builder alertingProfile(String alertingProfile) {
            this.alertingProfile = Objects.requireNonNull(alertingProfile);
            return this;
        }
        @CustomType.Setter
        public Builder applicationKey(String applicationKey) {
            this.applicationKey = Objects.requireNonNull(applicationKey);
            return this;
        }
        @CustomType.Setter
        public Builder authorizationToken(@Nullable String authorizationToken) {
            this.authorizationToken = authorizationToken;
            return this;
        }
        @CustomType.Setter
        public Builder boardId(String boardId) {
            this.boardId = Objects.requireNonNull(boardId);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder listId(String listId) {
            this.listId = Objects.requireNonNull(listId);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder resolvedListId(String resolvedListId) {
            this.resolvedListId = Objects.requireNonNull(resolvedListId);
            return this;
        }
        @CustomType.Setter
        public Builder text(String text) {
            this.text = Objects.requireNonNull(text);
            return this;
        }
        @CustomType.Setter
        public Builder unknowns(@Nullable String unknowns) {
            this.unknowns = unknowns;
            return this;
        }
        public NotificationTrello build() {
            final var o = new NotificationTrello();
            o.active = active;
            o.alertingProfile = alertingProfile;
            o.applicationKey = applicationKey;
            o.authorizationToken = authorizationToken;
            o.boardId = boardId;
            o.description = description;
            o.listId = listId;
            o.name = name;
            o.resolvedListId = resolvedListId;
            o.text = text;
            o.unknowns = unknowns;
            return o;
        }
    }
}
