// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationEmailArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationEmailArgs Empty = new NotificationEmailArgs();

    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="active", required=true)
    private Output<Boolean> active;

    /**
     * @return The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> active() {
        return this.active;
    }

    /**
     * The ID of the associated alerting profile
     * 
     */
    @Import(name="alertingProfile", required=true)
    private Output<String> alertingProfile;

    /**
     * @return The ID of the associated alerting profile
     * 
     */
    public Output<String> alertingProfile() {
        return this.alertingProfile;
    }

    /**
     * The list of the email BCC-recipients
     * 
     */
    @Import(name="bccReceivers")
    private @Nullable Output<List<String>> bccReceivers;

    /**
     * @return The list of the email BCC-recipients
     * 
     */
    public Optional<Output<List<String>>> bccReceivers() {
        return Optional.ofNullable(this.bccReceivers);
    }

    /**
     * The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     * 
     */
    @Import(name="body", required=true)
    private Output<String> body;

    /**
     * @return The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     * 
     */
    public Output<String> body() {
        return this.body;
    }

    /**
     * The list of the email CC-recipients
     * 
     */
    @Import(name="ccReceivers")
    private @Nullable Output<List<String>> ccReceivers;

    /**
     * @return The list of the email CC-recipients
     * 
     */
    public Optional<Output<List<String>>> ccReceivers() {
        return Optional.ofNullable(this.ccReceivers);
    }

    /**
     * The name of the notification configuration
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the notification configuration
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The list of the email recipients
     * 
     */
    @Import(name="receivers")
    private @Nullable Output<List<String>> receivers;

    /**
     * @return The list of the email recipients
     * 
     */
    public Optional<Output<List<String>>> receivers() {
        return Optional.ofNullable(this.receivers);
    }

    /**
     * The subject of the email notifications
     * 
     */
    @Import(name="subject", required=true)
    private Output<String> subject;

    /**
     * @return The subject of the email notifications
     * 
     */
    public Output<String> subject() {
        return this.subject;
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    private NotificationEmailArgs() {}

    private NotificationEmailArgs(NotificationEmailArgs $) {
        this.active = $.active;
        this.alertingProfile = $.alertingProfile;
        this.bccReceivers = $.bccReceivers;
        this.body = $.body;
        this.ccReceivers = $.ccReceivers;
        this.name = $.name;
        this.receivers = $.receivers;
        this.subject = $.subject;
        this.unknowns = $.unknowns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationEmailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationEmailArgs $;

        public Builder() {
            $ = new NotificationEmailArgs();
        }

        public Builder(NotificationEmailArgs defaults) {
            $ = new NotificationEmailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param active The configuration is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder active(Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active The configuration is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param alertingProfile The ID of the associated alerting profile
         * 
         * @return builder
         * 
         */
        public Builder alertingProfile(Output<String> alertingProfile) {
            $.alertingProfile = alertingProfile;
            return this;
        }

        /**
         * @param alertingProfile The ID of the associated alerting profile
         * 
         * @return builder
         * 
         */
        public Builder alertingProfile(String alertingProfile) {
            return alertingProfile(Output.of(alertingProfile));
        }

        /**
         * @param bccReceivers The list of the email BCC-recipients
         * 
         * @return builder
         * 
         */
        public Builder bccReceivers(@Nullable Output<List<String>> bccReceivers) {
            $.bccReceivers = bccReceivers;
            return this;
        }

        /**
         * @param bccReceivers The list of the email BCC-recipients
         * 
         * @return builder
         * 
         */
        public Builder bccReceivers(List<String> bccReceivers) {
            return bccReceivers(Output.of(bccReceivers));
        }

        /**
         * @param bccReceivers The list of the email BCC-recipients
         * 
         * @return builder
         * 
         */
        public Builder bccReceivers(String... bccReceivers) {
            return bccReceivers(List.of(bccReceivers));
        }

        /**
         * @param body The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
         * 
         * @return builder
         * 
         */
        public Builder body(Output<String> body) {
            $.body = body;
            return this;
        }

        /**
         * @param body The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
         * 
         * @return builder
         * 
         */
        public Builder body(String body) {
            return body(Output.of(body));
        }

        /**
         * @param ccReceivers The list of the email CC-recipients
         * 
         * @return builder
         * 
         */
        public Builder ccReceivers(@Nullable Output<List<String>> ccReceivers) {
            $.ccReceivers = ccReceivers;
            return this;
        }

        /**
         * @param ccReceivers The list of the email CC-recipients
         * 
         * @return builder
         * 
         */
        public Builder ccReceivers(List<String> ccReceivers) {
            return ccReceivers(Output.of(ccReceivers));
        }

        /**
         * @param ccReceivers The list of the email CC-recipients
         * 
         * @return builder
         * 
         */
        public Builder ccReceivers(String... ccReceivers) {
            return ccReceivers(List.of(ccReceivers));
        }

        /**
         * @param name The name of the notification configuration
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the notification configuration
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param receivers The list of the email recipients
         * 
         * @return builder
         * 
         */
        public Builder receivers(@Nullable Output<List<String>> receivers) {
            $.receivers = receivers;
            return this;
        }

        /**
         * @param receivers The list of the email recipients
         * 
         * @return builder
         * 
         */
        public Builder receivers(List<String> receivers) {
            return receivers(Output.of(receivers));
        }

        /**
         * @param receivers The list of the email recipients
         * 
         * @return builder
         * 
         */
        public Builder receivers(String... receivers) {
            return receivers(List.of(receivers));
        }

        /**
         * @param subject The subject of the email notifications
         * 
         * @return builder
         * 
         */
        public Builder subject(Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject The subject of the email notifications
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public NotificationEmailArgs build() {
            $.active = Objects.requireNonNull($.active, "expected parameter 'active' to be non-null");
            $.alertingProfile = Objects.requireNonNull($.alertingProfile, "expected parameter 'alertingProfile' to be non-null");
            $.body = Objects.requireNonNull($.body, "expected parameter 'body' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.subject = Objects.requireNonNull($.subject, "expected parameter 'subject' to be non-null");
            return $;
        }
    }

}
