// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.LogProcessingProcessorDefinitionArgs;
import com.pulumi.dynatrace.inputs.LogProcessingRuleTestingArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class LogProcessingArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogProcessingArgs Empty = new LogProcessingArgs();

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * ## Processor definition Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you
     * will find instructions and application [examples](https://dt-url.net/m24305t).
     * 
     */
    @Import(name="processorDefinition", required=true)
    private Output<LogProcessingProcessorDefinitionArgs> processorDefinition;

    /**
     * @return ## Processor definition Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you
     * will find instructions and application [examples](https://dt-url.net/m24305t).
     * 
     */
    public Output<LogProcessingProcessorDefinitionArgs> processorDefinition() {
        return this.processorDefinition;
    }

    /**
     * Matcher
     * 
     */
    @Import(name="query", required=true)
    private Output<String> query;

    /**
     * @return Matcher
     * 
     */
    public Output<String> query() {
        return this.query;
    }

    /**
     * Rule name
     * 
     */
    @Import(name="ruleName", required=true)
    private Output<String> ruleName;

    /**
     * @return Rule name
     * 
     */
    public Output<String> ruleName() {
        return this.ruleName;
    }

    /**
     * ## Rule testing ### 1. Paste a log / JSON sample
     * 
     */
    @Import(name="ruleTesting", required=true)
    private Output<LogProcessingRuleTestingArgs> ruleTesting;

    /**
     * @return ## Rule testing ### 1. Paste a log / JSON sample
     * 
     */
    public Output<LogProcessingRuleTestingArgs> ruleTesting() {
        return this.ruleTesting;
    }

    private LogProcessingArgs() {}

    private LogProcessingArgs(LogProcessingArgs $) {
        this.enabled = $.enabled;
        this.processorDefinition = $.processorDefinition;
        this.query = $.query;
        this.ruleName = $.ruleName;
        this.ruleTesting = $.ruleTesting;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogProcessingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogProcessingArgs $;

        public Builder() {
            $ = new LogProcessingArgs();
        }

        public Builder(LogProcessingArgs defaults) {
            $ = new LogProcessingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param processorDefinition ## Processor definition Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you
         * will find instructions and application [examples](https://dt-url.net/m24305t).
         * 
         * @return builder
         * 
         */
        public Builder processorDefinition(Output<LogProcessingProcessorDefinitionArgs> processorDefinition) {
            $.processorDefinition = processorDefinition;
            return this;
        }

        /**
         * @param processorDefinition ## Processor definition Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you
         * will find instructions and application [examples](https://dt-url.net/m24305t).
         * 
         * @return builder
         * 
         */
        public Builder processorDefinition(LogProcessingProcessorDefinitionArgs processorDefinition) {
            return processorDefinition(Output.of(processorDefinition));
        }

        /**
         * @param query Matcher
         * 
         * @return builder
         * 
         */
        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query Matcher
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param ruleName Rule name
         * 
         * @return builder
         * 
         */
        public Builder ruleName(Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName Rule name
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param ruleTesting ## Rule testing ### 1. Paste a log / JSON sample
         * 
         * @return builder
         * 
         */
        public Builder ruleTesting(Output<LogProcessingRuleTestingArgs> ruleTesting) {
            $.ruleTesting = ruleTesting;
            return this;
        }

        /**
         * @param ruleTesting ## Rule testing ### 1. Paste a log / JSON sample
         * 
         * @return builder
         * 
         */
        public Builder ruleTesting(LogProcessingRuleTestingArgs ruleTesting) {
            return ruleTesting(Output.of(ruleTesting));
        }

        public LogProcessingArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.processorDefinition = Objects.requireNonNull($.processorDefinition, "expected parameter 'processorDefinition' to be non-null");
            $.query = Objects.requireNonNull($.query, "expected parameter 'query' to be non-null");
            $.ruleName = Objects.requireNonNull($.ruleName, "expected parameter 'ruleName' to be non-null");
            $.ruleTesting = Objects.requireNonNull($.ruleTesting, "expected parameter 'ruleTesting' to be non-null");
            return $;
        }
    }

}
