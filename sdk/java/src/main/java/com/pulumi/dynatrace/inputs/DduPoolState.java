// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DduPoolEventsArgs;
import com.pulumi.dynatrace.inputs.DduPoolLogMonitoringArgs;
import com.pulumi.dynatrace.inputs.DduPoolMetricsArgs;
import com.pulumi.dynatrace.inputs.DduPoolServerlessArgs;
import com.pulumi.dynatrace.inputs.DduPoolTracesArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DduPoolState extends com.pulumi.resources.ResourceArgs {

    public static final DduPoolState Empty = new DduPoolState();

    /**
     * DDU pool settings for Events
     * 
     */
    @Import(name="events")
    private @Nullable Output<DduPoolEventsArgs> events;

    /**
     * @return DDU pool settings for Events
     * 
     */
    public Optional<Output<DduPoolEventsArgs>> events() {
        return Optional.ofNullable(this.events);
    }

    /**
     * DDU pool settings for Log Monitoring
     * 
     */
    @Import(name="logMonitoring")
    private @Nullable Output<DduPoolLogMonitoringArgs> logMonitoring;

    /**
     * @return DDU pool settings for Log Monitoring
     * 
     */
    public Optional<Output<DduPoolLogMonitoringArgs>> logMonitoring() {
        return Optional.ofNullable(this.logMonitoring);
    }

    /**
     * DDU pool settings for Metrics
     * 
     */
    @Import(name="metrics")
    private @Nullable Output<DduPoolMetricsArgs> metrics;

    /**
     * @return DDU pool settings for Metrics
     * 
     */
    public Optional<Output<DduPoolMetricsArgs>> metrics() {
        return Optional.ofNullable(this.metrics);
    }

    /**
     * DDU pool settings for Serverless
     * 
     */
    @Import(name="serverless")
    private @Nullable Output<DduPoolServerlessArgs> serverless;

    /**
     * @return DDU pool settings for Serverless
     * 
     */
    public Optional<Output<DduPoolServerlessArgs>> serverless() {
        return Optional.ofNullable(this.serverless);
    }

    /**
     * DDU pool settings for Traces
     * 
     */
    @Import(name="traces")
    private @Nullable Output<DduPoolTracesArgs> traces;

    /**
     * @return DDU pool settings for Traces
     * 
     */
    public Optional<Output<DduPoolTracesArgs>> traces() {
        return Optional.ofNullable(this.traces);
    }

    private DduPoolState() {}

    private DduPoolState(DduPoolState $) {
        this.events = $.events;
        this.logMonitoring = $.logMonitoring;
        this.metrics = $.metrics;
        this.serverless = $.serverless;
        this.traces = $.traces;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DduPoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DduPoolState $;

        public Builder() {
            $ = new DduPoolState();
        }

        public Builder(DduPoolState defaults) {
            $ = new DduPoolState(Objects.requireNonNull(defaults));
        }

        /**
         * @param events DDU pool settings for Events
         * 
         * @return builder
         * 
         */
        public Builder events(@Nullable Output<DduPoolEventsArgs> events) {
            $.events = events;
            return this;
        }

        /**
         * @param events DDU pool settings for Events
         * 
         * @return builder
         * 
         */
        public Builder events(DduPoolEventsArgs events) {
            return events(Output.of(events));
        }

        /**
         * @param logMonitoring DDU pool settings for Log Monitoring
         * 
         * @return builder
         * 
         */
        public Builder logMonitoring(@Nullable Output<DduPoolLogMonitoringArgs> logMonitoring) {
            $.logMonitoring = logMonitoring;
            return this;
        }

        /**
         * @param logMonitoring DDU pool settings for Log Monitoring
         * 
         * @return builder
         * 
         */
        public Builder logMonitoring(DduPoolLogMonitoringArgs logMonitoring) {
            return logMonitoring(Output.of(logMonitoring));
        }

        /**
         * @param metrics DDU pool settings for Metrics
         * 
         * @return builder
         * 
         */
        public Builder metrics(@Nullable Output<DduPoolMetricsArgs> metrics) {
            $.metrics = metrics;
            return this;
        }

        /**
         * @param metrics DDU pool settings for Metrics
         * 
         * @return builder
         * 
         */
        public Builder metrics(DduPoolMetricsArgs metrics) {
            return metrics(Output.of(metrics));
        }

        /**
         * @param serverless DDU pool settings for Serverless
         * 
         * @return builder
         * 
         */
        public Builder serverless(@Nullable Output<DduPoolServerlessArgs> serverless) {
            $.serverless = serverless;
            return this;
        }

        /**
         * @param serverless DDU pool settings for Serverless
         * 
         * @return builder
         * 
         */
        public Builder serverless(DduPoolServerlessArgs serverless) {
            return serverless(Output.of(serverless));
        }

        /**
         * @param traces DDU pool settings for Traces
         * 
         * @return builder
         * 
         */
        public Builder traces(@Nullable Output<DduPoolTracesArgs> traces) {
            $.traces = traces;
            return this;
        }

        /**
         * @param traces DDU pool settings for Traces
         * 
         * @return builder
         * 
         */
        public Builder traces(DduPoolTracesArgs traces) {
            return traces(Output.of(traces));
        }

        public DduPoolState build() {
            return $;
        }
    }

}
