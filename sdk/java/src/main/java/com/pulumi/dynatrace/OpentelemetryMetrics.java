// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.OpentelemetryMetricsArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.OpentelemetryMetricsState;
import com.pulumi.dynatrace.outputs.OpentelemetryMetricsAdditionalAttributes;
import com.pulumi.dynatrace.outputs.OpentelemetryMetricsToDropAttributes;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/opentelemetryMetrics:OpentelemetryMetrics")
public class OpentelemetryMetrics extends com.pulumi.resources.CustomResource {
    /**
     * When enabled, the attributes defined in the list below will be added as dimensions to ingested OTLP metrics if they are
     * present in the OpenTelemetry resource or in the instrumentation scope. **Notes:** * Modifying this setting (renaming,
     * disabling or removing attributes) will cause the metric to change. This may have an impact on existing dashboards,
     * events and alerts that make use of these dimensions. In this case, they will need to be updated manually. * Dynatrace
     * does not recommend changing/removing the attributes starting with &#34;dt.&#34;. Dynatrace leverages these attributes to [Enrich
     * metrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).
     * 
     */
    @Export(name="additionalAttributes", refs={OpentelemetryMetricsAdditionalAttributes.class}, tree="[0]")
    private Output</* @Nullable */ OpentelemetryMetricsAdditionalAttributes> additionalAttributes;

    /**
     * @return When enabled, the attributes defined in the list below will be added as dimensions to ingested OTLP metrics if they are
     * present in the OpenTelemetry resource or in the instrumentation scope. **Notes:** * Modifying this setting (renaming,
     * disabling or removing attributes) will cause the metric to change. This may have an impact on existing dashboards,
     * events and alerts that make use of these dimensions. In this case, they will need to be updated manually. * Dynatrace
     * does not recommend changing/removing the attributes starting with &#34;dt.&#34;. Dynatrace leverages these attributes to [Enrich
     * metrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).
     * 
     */
    public Output<Optional<OpentelemetryMetricsAdditionalAttributes>> additionalAttributes() {
        return Codegen.optional(this.additionalAttributes);
    }
    /**
     * Add the resource and scope attributes configured below as dimensions
     * 
     */
    @Export(name="additionalAttributesToDimensionEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> additionalAttributesToDimensionEnabled;

    /**
     * @return Add the resource and scope attributes configured below as dimensions
     * 
     */
    public Output<Boolean> additionalAttributesToDimensionEnabled() {
        return this.additionalAttributesToDimensionEnabled;
    }
    /**
     * When enabled, the Meter name (also referred to as InstrumentationScope or InstrumentationLibrary in OpenTelemetry SDKs) and version will be added as dimensions (`otel.scope.name` and `otel.scope.version`) to ingested OTLP metrics.
     * 
     */
    @Export(name="meterNameToDimensionEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> meterNameToDimensionEnabled;

    /**
     * @return When enabled, the Meter name (also referred to as InstrumentationScope or InstrumentationLibrary in OpenTelemetry SDKs) and version will be added as dimensions (`otel.scope.name` and `otel.scope.version`) to ingested OTLP metrics.
     * 
     */
    public Output<Boolean> meterNameToDimensionEnabled() {
        return this.meterNameToDimensionEnabled;
    }
    /**
     * The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
     * 
     */
    @Export(name="scope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scope;

    /**
     * @return The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
     * 
     */
    public Output<Optional<String>> scope() {
        return Codegen.optional(this.scope);
    }
    /**
     * The attributes defined in the list below will be dropped from all ingested OTLP metrics. Upon ingest, the *Allow list:
     * resource and scope attributes* above is applied first. Then, the *Deny list: all attributes* below is applied. The deny
     * list therefore applies to all attributes from all sources (data points, scope and resource). **Notes:** * Modifying this
     * setting (adding, renaming, disabling or removing attributes) will cause the metric to change. This may have an impact on
     * existing dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated
     * manually. * Dynatrace does not recommend including attributes starting with &#34;dt.&#34; to the deny list. Dynatrace leverages
     * these attributes to [Enrich
     * metrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).
     * 
     */
    @Export(name="toDropAttributes", refs={OpentelemetryMetricsToDropAttributes.class}, tree="[0]")
    private Output</* @Nullable */ OpentelemetryMetricsToDropAttributes> toDropAttributes;

    /**
     * @return The attributes defined in the list below will be dropped from all ingested OTLP metrics. Upon ingest, the *Allow list:
     * resource and scope attributes* above is applied first. Then, the *Deny list: all attributes* below is applied. The deny
     * list therefore applies to all attributes from all sources (data points, scope and resource). **Notes:** * Modifying this
     * setting (adding, renaming, disabling or removing attributes) will cause the metric to change. This may have an impact on
     * existing dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated
     * manually. * Dynatrace does not recommend including attributes starting with &#34;dt.&#34; to the deny list. Dynatrace leverages
     * these attributes to [Enrich
     * metrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).
     * 
     */
    public Output<Optional<OpentelemetryMetricsToDropAttributes>> toDropAttributes() {
        return Codegen.optional(this.toDropAttributes);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public OpentelemetryMetrics(String name) {
        this(name, OpentelemetryMetricsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public OpentelemetryMetrics(String name, OpentelemetryMetricsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public OpentelemetryMetrics(String name, OpentelemetryMetricsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/opentelemetryMetrics:OpentelemetryMetrics", name, args == null ? OpentelemetryMetricsArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private OpentelemetryMetrics(String name, Output<String> id, @Nullable OpentelemetryMetricsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/opentelemetryMetrics:OpentelemetryMetrics", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static OpentelemetryMetrics get(String name, Output<String> id, @Nullable OpentelemetryMetricsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new OpentelemetryMetrics(name, id, state, options);
    }
}
