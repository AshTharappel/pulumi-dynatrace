// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DashboardTileFilterConfigChartConfigSeriesDimensionArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardTileFilterConfigChartConfigSeriesArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardTileFilterConfigChartConfigSeriesArgs Empty = new DashboardTileFilterConfigChartConfigSeriesArgs();

    @Import(name="aggregation", required=true)
    private Output<String> aggregation;

    public Output<String> aggregation() {
        return this.aggregation;
    }

    @Import(name="aggregationRate")
    private @Nullable Output<String> aggregationRate;

    public Optional<Output<String>> aggregationRate() {
        return Optional.ofNullable(this.aggregationRate);
    }

    @Import(name="dimensions")
    private @Nullable Output<List<DashboardTileFilterConfigChartConfigSeriesDimensionArgs>> dimensions;

    public Optional<Output<List<DashboardTileFilterConfigChartConfigSeriesDimensionArgs>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    @Import(name="entityType", required=true)
    private Output<String> entityType;

    public Output<String> entityType() {
        return this.entityType;
    }

    @Import(name="metric", required=true)
    private Output<String> metric;

    public Output<String> metric() {
        return this.metric;
    }

    @Import(name="percentile")
    private @Nullable Output<Integer> percentile;

    public Optional<Output<Integer>> percentile() {
        return Optional.ofNullable(this.percentile);
    }

    @Import(name="sortAscending")
    private @Nullable Output<Boolean> sortAscending;

    public Optional<Output<Boolean>> sortAscending() {
        return Optional.ofNullable(this.sortAscending);
    }

    @Import(name="sortColumn")
    private @Nullable Output<Boolean> sortColumn;

    public Optional<Output<Boolean>> sortColumn() {
        return Optional.ofNullable(this.sortColumn);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    private DashboardTileFilterConfigChartConfigSeriesArgs() {}

    private DashboardTileFilterConfigChartConfigSeriesArgs(DashboardTileFilterConfigChartConfigSeriesArgs $) {
        this.aggregation = $.aggregation;
        this.aggregationRate = $.aggregationRate;
        this.dimensions = $.dimensions;
        this.entityType = $.entityType;
        this.metric = $.metric;
        this.percentile = $.percentile;
        this.sortAscending = $.sortAscending;
        this.sortColumn = $.sortColumn;
        this.type = $.type;
        this.unknowns = $.unknowns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardTileFilterConfigChartConfigSeriesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardTileFilterConfigChartConfigSeriesArgs $;

        public Builder() {
            $ = new DashboardTileFilterConfigChartConfigSeriesArgs();
        }

        public Builder(DashboardTileFilterConfigChartConfigSeriesArgs defaults) {
            $ = new DashboardTileFilterConfigChartConfigSeriesArgs(Objects.requireNonNull(defaults));
        }

        public Builder aggregation(Output<String> aggregation) {
            $.aggregation = aggregation;
            return this;
        }

        public Builder aggregation(String aggregation) {
            return aggregation(Output.of(aggregation));
        }

        public Builder aggregationRate(@Nullable Output<String> aggregationRate) {
            $.aggregationRate = aggregationRate;
            return this;
        }

        public Builder aggregationRate(String aggregationRate) {
            return aggregationRate(Output.of(aggregationRate));
        }

        public Builder dimensions(@Nullable Output<List<DashboardTileFilterConfigChartConfigSeriesDimensionArgs>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        public Builder dimensions(List<DashboardTileFilterConfigChartConfigSeriesDimensionArgs> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        public Builder dimensions(DashboardTileFilterConfigChartConfigSeriesDimensionArgs... dimensions) {
            return dimensions(List.of(dimensions));
        }

        public Builder entityType(Output<String> entityType) {
            $.entityType = entityType;
            return this;
        }

        public Builder entityType(String entityType) {
            return entityType(Output.of(entityType));
        }

        public Builder metric(Output<String> metric) {
            $.metric = metric;
            return this;
        }

        public Builder metric(String metric) {
            return metric(Output.of(metric));
        }

        public Builder percentile(@Nullable Output<Integer> percentile) {
            $.percentile = percentile;
            return this;
        }

        public Builder percentile(Integer percentile) {
            return percentile(Output.of(percentile));
        }

        public Builder sortAscending(@Nullable Output<Boolean> sortAscending) {
            $.sortAscending = sortAscending;
            return this;
        }

        public Builder sortAscending(Boolean sortAscending) {
            return sortAscending(Output.of(sortAscending));
        }

        public Builder sortColumn(@Nullable Output<Boolean> sortColumn) {
            $.sortColumn = sortColumn;
            return this;
        }

        public Builder sortColumn(Boolean sortColumn) {
            return sortColumn(Output.of(sortColumn));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public DashboardTileFilterConfigChartConfigSeriesArgs build() {
            $.aggregation = Objects.requireNonNull($.aggregation, "expected parameter 'aggregation' to be non-null");
            $.entityType = Objects.requireNonNull($.entityType, "expected parameter 'entityType' to be non-null");
            $.metric = Objects.requireNonNull($.metric, "expected parameter 'metric' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
