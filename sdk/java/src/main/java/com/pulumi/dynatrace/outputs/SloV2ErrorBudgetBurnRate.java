// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SloV2ErrorBudgetBurnRate {
    /**
     * @return Burn rate visualization enabled
     * 
     */
    private Boolean burnRateVisualizationEnabled;
    /**
     * @return The threshold defines when a burn rate is marked as fast-burning (high-emergency). Burn rates lower than this threshold (and greater than 1) are highlighted as slow-burn (low-emergency).
     * 
     */
    private @Nullable Double fastBurnThreshold;

    private SloV2ErrorBudgetBurnRate() {}
    /**
     * @return Burn rate visualization enabled
     * 
     */
    public Boolean burnRateVisualizationEnabled() {
        return this.burnRateVisualizationEnabled;
    }
    /**
     * @return The threshold defines when a burn rate is marked as fast-burning (high-emergency). Burn rates lower than this threshold (and greater than 1) are highlighted as slow-burn (low-emergency).
     * 
     */
    public Optional<Double> fastBurnThreshold() {
        return Optional.ofNullable(this.fastBurnThreshold);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SloV2ErrorBudgetBurnRate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean burnRateVisualizationEnabled;
        private @Nullable Double fastBurnThreshold;
        public Builder() {}
        public Builder(SloV2ErrorBudgetBurnRate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.burnRateVisualizationEnabled = defaults.burnRateVisualizationEnabled;
    	      this.fastBurnThreshold = defaults.fastBurnThreshold;
        }

        @CustomType.Setter
        public Builder burnRateVisualizationEnabled(Boolean burnRateVisualizationEnabled) {
            this.burnRateVisualizationEnabled = Objects.requireNonNull(burnRateVisualizationEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder fastBurnThreshold(@Nullable Double fastBurnThreshold) {
            this.fastBurnThreshold = fastBurnThreshold;
            return this;
        }
        public SloV2ErrorBudgetBurnRate build() {
            final var o = new SloV2ErrorBudgetBurnRate();
            o.burnRateVisualizationEnabled = burnRateVisualizationEnabled;
            o.fastBurnThreshold = fastBurnThreshold;
            return o;
        }
    }
}
