// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TokenSettingsState extends com.pulumi.resources.ResourceArgs {

    public static final TokenSettingsState Empty = new TokenSettingsState();

    /**
     * Check out this [blog post](http://www.dynatrace.com/blog/further-increased-security-of-your-api-tokens-by-automating-token-protection/) to find out more about the new Dynatrace API token format.
     * 
     */
    @Import(name="newTokenFormat")
    private @Nullable Output<Boolean> newTokenFormat;

    /**
     * @return Check out this [blog post](http://www.dynatrace.com/blog/further-increased-security-of-your-api-tokens-by-automating-token-protection/) to find out more about the new Dynatrace API token format.
     * 
     */
    public Optional<Output<Boolean>> newTokenFormat() {
        return Optional.ofNullable(this.newTokenFormat);
    }

    /**
     * Allow users of this environment to generate personal access tokens based on user permissions.
     * Note that existing personal access tokens will become unusable while this setting is disabled.
     * 
     */
    @Import(name="personalTokens")
    private @Nullable Output<Boolean> personalTokens;

    /**
     * @return Allow users of this environment to generate personal access tokens based on user permissions.
     * Note that existing personal access tokens will become unusable while this setting is disabled.
     * 
     */
    public Optional<Output<Boolean>> personalTokens() {
        return Optional.ofNullable(this.personalTokens);
    }

    private TokenSettingsState() {}

    private TokenSettingsState(TokenSettingsState $) {
        this.newTokenFormat = $.newTokenFormat;
        this.personalTokens = $.personalTokens;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TokenSettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TokenSettingsState $;

        public Builder() {
            $ = new TokenSettingsState();
        }

        public Builder(TokenSettingsState defaults) {
            $ = new TokenSettingsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param newTokenFormat Check out this [blog post](http://www.dynatrace.com/blog/further-increased-security-of-your-api-tokens-by-automating-token-protection/) to find out more about the new Dynatrace API token format.
         * 
         * @return builder
         * 
         */
        public Builder newTokenFormat(@Nullable Output<Boolean> newTokenFormat) {
            $.newTokenFormat = newTokenFormat;
            return this;
        }

        /**
         * @param newTokenFormat Check out this [blog post](http://www.dynatrace.com/blog/further-increased-security-of-your-api-tokens-by-automating-token-protection/) to find out more about the new Dynatrace API token format.
         * 
         * @return builder
         * 
         */
        public Builder newTokenFormat(Boolean newTokenFormat) {
            return newTokenFormat(Output.of(newTokenFormat));
        }

        /**
         * @param personalTokens Allow users of this environment to generate personal access tokens based on user permissions.
         * Note that existing personal access tokens will become unusable while this setting is disabled.
         * 
         * @return builder
         * 
         */
        public Builder personalTokens(@Nullable Output<Boolean> personalTokens) {
            $.personalTokens = personalTokens;
            return this;
        }

        /**
         * @param personalTokens Allow users of this environment to generate personal access tokens based on user permissions.
         * Note that existing personal access tokens will become unusable while this setting is disabled.
         * 
         * @return builder
         * 
         */
        public Builder personalTokens(Boolean personalTokens) {
            return personalTokens(Output.of(personalTokens));
        }

        public TokenSettingsState build() {
            return $;
        }
    }

}
