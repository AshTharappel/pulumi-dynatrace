// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionApplicationType;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionApplicationTypeComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionAzureComputeMode;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionAzureComputeModeComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionAzureSkuComparision;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionAzureSkus;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionBaseComparisonBasic;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionBaseConditionKey;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionBitness;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionBitnessComparision;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionCloudType;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionCloudTypeComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionCustomApplicationType;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionCustomApplicationTypeComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionCustomHostMetadata;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionCustomHostMetadataConditionKey;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionCustomProcessMetadata;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionCustomProcessMetadataConditionKey;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionDatabaseTopology;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionDatabaseTopologyComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionDcrumDecoder;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionDcrumDecoderComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionEntity;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionEntityIdComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionHostTech;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionHypervisor;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionHypervisorTypeComparision;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionIndexedName;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionIndexedNameComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionIndexedString;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionIndexedStringComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionIndexedTag;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionIndexedTagComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionInteger;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionIntegerComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionIpaddress;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionIpaddressComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionKey;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionMobilePlatform;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionMobilePlatformComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionOsArch;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionOsType;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionOsarchitectureComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionOstypeComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionPaasType;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionPaasTypeComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionProcessMetadata;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionProcessMetadataConditionKey;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionServiceTopology;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionServiceTopologyComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionServiceType;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionServiceTypeComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionSimpleHostTechComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionSimpleTechComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionString;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionStringComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionStringConditionKey;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionStringKey;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionSyntheticEngine;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionSyntheticEngineTypeComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionTag;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionTagComparison;
import com.pulumi.dynatrace.outputs.ServiceNamingConditionConditionTech;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceNamingConditionCondition {
    /**
     * @deprecated
     * You should use &#39;application_type&#39; instead of &#39;application_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionApplicationTypeComparison> applicationTypeComparisons;
    private @Nullable List<ServiceNamingConditionConditionApplicationType> applicationTypes;
    private @Nullable List<ServiceNamingConditionConditionAzureComputeModeComparison> azureComputeModeComparisons;
    /**
     * @deprecated
     * You should use &#39;azure_compute_mode&#39; instead of &#39;azure_compute_mode_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionAzureComputeMode> azureComputeModes;
    /**
     * @deprecated
     * You should use &#39;azure_sku&#39; instead of &#39;azure_sku_comparision&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionAzureSkuComparision> azureSkuComparisions;
    private @Nullable List<ServiceNamingConditionConditionAzureSkus> azureSkus;
    /**
     * @deprecated
     * You should use &#39;comparison&#39; instead of &#39;base_comparison_basic&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionBaseComparisonBasic> baseComparisonBasics;
    /**
     * @deprecated
     * &#39;base_condition_key&#39; is deprecated. You should use &#39;key&#39;
     * 
     */
    @Deprecated /* 'base_condition_key' is deprecated. You should use 'key' */
    private @Nullable List<ServiceNamingConditionConditionBaseConditionKey> baseConditionKeys;
    /**
     * @deprecated
     * You should use &#39;bitness&#39; instead of &#39;bitness_comparision&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionBitnessComparision> bitnessComparisions;
    private @Nullable List<ServiceNamingConditionConditionBitness> bitnesses;
    /**
     * @deprecated
     * You should use &#39;cloud_type&#39; instead of &#39;cloud_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionCloudTypeComparison> cloudTypeComparisons;
    private @Nullable List<ServiceNamingConditionConditionCloudType> cloudTypes;
    private @Nullable List<ServiceNamingConditionConditionComparison> comparisons;
    /**
     * @deprecated
     * You should use &#39;custom_application_type&#39; instead of &#39;custom_application_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionCustomApplicationTypeComparison> customApplicationTypeComparisons;
    private @Nullable List<ServiceNamingConditionConditionCustomApplicationType> customApplicationTypes;
    /**
     * @deprecated
     * &#39;custom_host_metadata_condition_key&#39; is deprecated. You should use &#39;custom_host_metadata&#39;
     * 
     */
    @Deprecated /* 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata' */
    private @Nullable List<ServiceNamingConditionConditionCustomHostMetadataConditionKey> customHostMetadataConditionKeys;
    private @Nullable List<ServiceNamingConditionConditionCustomHostMetadata> customHostMetadatas;
    /**
     * @deprecated
     * &#39;custom_process_metadata_condition_key&#39; is deprecated. You should use &#39;custom_process_metadata&#39;
     * 
     */
    @Deprecated /* 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata' */
    private @Nullable List<ServiceNamingConditionConditionCustomProcessMetadataConditionKey> customProcessMetadataConditionKeys;
    private @Nullable List<ServiceNamingConditionConditionCustomProcessMetadata> customProcessMetadatas;
    private @Nullable List<ServiceNamingConditionConditionDatabaseTopology> databaseTopologies;
    /**
     * @deprecated
     * You should use &#39;database_topology&#39; instead of &#39;database_topology_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionDatabaseTopologyComparison> databaseTopologyComparisons;
    /**
     * @deprecated
     * You should use &#39;dcrum_decoder&#39; instead of &#39;dcrum_decoder_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionDcrumDecoderComparison> dcrumDecoderComparisons;
    private @Nullable List<ServiceNamingConditionConditionDcrumDecoder> dcrumDecoders;
    private @Nullable List<ServiceNamingConditionConditionEntity> entities;
    /**
     * @deprecated
     * You should use &#39;entity&#39; instead of &#39;entity_id_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionEntityIdComparison> entityIdComparisons;
    private @Nullable List<ServiceNamingConditionConditionHostTech> hostTeches;
    /**
     * @deprecated
     * `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     * 
     */
    @Deprecated /* `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead */
    private @Nullable List<ServiceNamingConditionConditionHypervisorTypeComparision> hypervisorTypeComparisions;
    private @Nullable List<ServiceNamingConditionConditionHypervisor> hypervisors;
    /**
     * @deprecated
     * You should use &#39;indexed_name&#39; instead of &#39;indexed_name_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionIndexedNameComparison> indexedNameComparisons;
    private @Nullable List<ServiceNamingConditionConditionIndexedName> indexedNames;
    /**
     * @deprecated
     * You should use &#39;indexed_string&#39; instead of &#39;indexed_string_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionIndexedStringComparison> indexedStringComparisons;
    private @Nullable List<ServiceNamingConditionConditionIndexedString> indexedStrings;
    /**
     * @deprecated
     * You should use &#39;indexed_tag&#39; instead of &#39;indexed_tag_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionIndexedTagComparison> indexedTagComparisons;
    private @Nullable List<ServiceNamingConditionConditionIndexedTag> indexedTags;
    /**
     * @deprecated
     * You should use &#39;integer&#39; instead of &#39;integer_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionIntegerComparison> integerComparisons;
    private @Nullable List<ServiceNamingConditionConditionInteger> integers;
    /**
     * @deprecated
     * You should use &#39;ipaddress&#39; instead of &#39;ipaddress_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionIpaddressComparison> ipaddressComparisons;
    private @Nullable List<ServiceNamingConditionConditionIpaddress> ipaddresses;
    private @Nullable List<ServiceNamingConditionConditionKey> keys;
    /**
     * @deprecated
     * You should use &#39;mobile_platform&#39; instead of &#39;mobile_platform_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionMobilePlatformComparison> mobilePlatformComparisons;
    private @Nullable List<ServiceNamingConditionConditionMobilePlatform> mobilePlatforms;
    private @Nullable List<ServiceNamingConditionConditionOsArch> osArches;
    private @Nullable List<ServiceNamingConditionConditionOsType> osTypes;
    /**
     * @deprecated
     * You should use &#39;os_arch&#39; instead of &#39;osarchitecture_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionOsarchitectureComparison> osarchitectureComparisons;
    /**
     * @deprecated
     * You should use &#39;os_type&#39; instead of &#39;ostype_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionOstypeComparison> ostypeComparisons;
    /**
     * @deprecated
     * You should use &#39;paas_type&#39; instead of &#39;paas_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionPaasTypeComparison> paasTypeComparisons;
    private @Nullable List<ServiceNamingConditionConditionPaasType> paasTypes;
    /**
     * @deprecated
     * &#39;process_metadata_condition_key&#39; is deprecated. You should use &#39;process_metadata&#39;
     * 
     */
    @Deprecated /* 'process_metadata_condition_key' is deprecated. You should use 'process_metadata' */
    private @Nullable List<ServiceNamingConditionConditionProcessMetadataConditionKey> processMetadataConditionKeys;
    private @Nullable List<ServiceNamingConditionConditionProcessMetadata> processMetadatas;
    private @Nullable List<ServiceNamingConditionConditionServiceTopology> serviceTopologies;
    /**
     * @deprecated
     * You should use &#39;service_topology&#39; instead of &#39;service_topology_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionServiceTopologyComparison> serviceTopologyComparisons;
    /**
     * @deprecated
     * You should use &#39;service_type&#39; instead of &#39;service_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionServiceTypeComparison> serviceTypeComparisons;
    private @Nullable List<ServiceNamingConditionConditionServiceType> serviceTypes;
    /**
     * @deprecated
     * You should use &#39;host_tech&#39; instead of &#39;simple_host_tech_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionSimpleHostTechComparison> simpleHostTechComparisons;
    /**
     * @deprecated
     * You should use &#39;tech&#39; instead of &#39;simple_tech_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionSimpleTechComparison> simpleTechComparisons;
    /**
     * @deprecated
     * You should use &#39;string&#39; instead of &#39;string_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionStringComparison> stringComparisons;
    /**
     * @deprecated
     * &#39;string_condition_key&#39; is deprecated. You should use &#39;string_key&#39;
     * 
     */
    @Deprecated /* 'string_condition_key' is deprecated. You should use 'string_key' */
    private @Nullable List<ServiceNamingConditionConditionStringConditionKey> stringConditionKeys;
    private @Nullable List<ServiceNamingConditionConditionStringKey> stringKeys;
    private @Nullable List<ServiceNamingConditionConditionString> strings;
    /**
     * @deprecated
     * You should use &#39;synthetic_engine&#39; instead of &#39;synthetic_engine_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionSyntheticEngineTypeComparison> syntheticEngineTypeComparisons;
    private @Nullable List<ServiceNamingConditionConditionSyntheticEngine> syntheticEngines;
    /**
     * @deprecated
     * You should use &#39;tag&#39; instead of &#39;tag_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<ServiceNamingConditionConditionTagComparison> tagComparisons;
    private @Nullable List<ServiceNamingConditionConditionTag> tags;
    private @Nullable List<ServiceNamingConditionConditionTech> teches;
    private @Nullable String unknowns;

    private ServiceNamingConditionCondition() {}
    /**
     * @deprecated
     * You should use &#39;application_type&#39; instead of &#39;application_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionApplicationTypeComparison> applicationTypeComparisons() {
        return this.applicationTypeComparisons == null ? List.of() : this.applicationTypeComparisons;
    }
    public List<ServiceNamingConditionConditionApplicationType> applicationTypes() {
        return this.applicationTypes == null ? List.of() : this.applicationTypes;
    }
    public List<ServiceNamingConditionConditionAzureComputeModeComparison> azureComputeModeComparisons() {
        return this.azureComputeModeComparisons == null ? List.of() : this.azureComputeModeComparisons;
    }
    /**
     * @deprecated
     * You should use &#39;azure_compute_mode&#39; instead of &#39;azure_compute_mode_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionAzureComputeMode> azureComputeModes() {
        return this.azureComputeModes == null ? List.of() : this.azureComputeModes;
    }
    /**
     * @deprecated
     * You should use &#39;azure_sku&#39; instead of &#39;azure_sku_comparision&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionAzureSkuComparision> azureSkuComparisions() {
        return this.azureSkuComparisions == null ? List.of() : this.azureSkuComparisions;
    }
    public List<ServiceNamingConditionConditionAzureSkus> azureSkus() {
        return this.azureSkus == null ? List.of() : this.azureSkus;
    }
    /**
     * @deprecated
     * You should use &#39;comparison&#39; instead of &#39;base_comparison_basic&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionBaseComparisonBasic> baseComparisonBasics() {
        return this.baseComparisonBasics == null ? List.of() : this.baseComparisonBasics;
    }
    /**
     * @deprecated
     * &#39;base_condition_key&#39; is deprecated. You should use &#39;key&#39;
     * 
     */
    @Deprecated /* 'base_condition_key' is deprecated. You should use 'key' */
    public List<ServiceNamingConditionConditionBaseConditionKey> baseConditionKeys() {
        return this.baseConditionKeys == null ? List.of() : this.baseConditionKeys;
    }
    /**
     * @deprecated
     * You should use &#39;bitness&#39; instead of &#39;bitness_comparision&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionBitnessComparision> bitnessComparisions() {
        return this.bitnessComparisions == null ? List.of() : this.bitnessComparisions;
    }
    public List<ServiceNamingConditionConditionBitness> bitnesses() {
        return this.bitnesses == null ? List.of() : this.bitnesses;
    }
    /**
     * @deprecated
     * You should use &#39;cloud_type&#39; instead of &#39;cloud_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionCloudTypeComparison> cloudTypeComparisons() {
        return this.cloudTypeComparisons == null ? List.of() : this.cloudTypeComparisons;
    }
    public List<ServiceNamingConditionConditionCloudType> cloudTypes() {
        return this.cloudTypes == null ? List.of() : this.cloudTypes;
    }
    public List<ServiceNamingConditionConditionComparison> comparisons() {
        return this.comparisons == null ? List.of() : this.comparisons;
    }
    /**
     * @deprecated
     * You should use &#39;custom_application_type&#39; instead of &#39;custom_application_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionCustomApplicationTypeComparison> customApplicationTypeComparisons() {
        return this.customApplicationTypeComparisons == null ? List.of() : this.customApplicationTypeComparisons;
    }
    public List<ServiceNamingConditionConditionCustomApplicationType> customApplicationTypes() {
        return this.customApplicationTypes == null ? List.of() : this.customApplicationTypes;
    }
    /**
     * @deprecated
     * &#39;custom_host_metadata_condition_key&#39; is deprecated. You should use &#39;custom_host_metadata&#39;
     * 
     */
    @Deprecated /* 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata' */
    public List<ServiceNamingConditionConditionCustomHostMetadataConditionKey> customHostMetadataConditionKeys() {
        return this.customHostMetadataConditionKeys == null ? List.of() : this.customHostMetadataConditionKeys;
    }
    public List<ServiceNamingConditionConditionCustomHostMetadata> customHostMetadatas() {
        return this.customHostMetadatas == null ? List.of() : this.customHostMetadatas;
    }
    /**
     * @deprecated
     * &#39;custom_process_metadata_condition_key&#39; is deprecated. You should use &#39;custom_process_metadata&#39;
     * 
     */
    @Deprecated /* 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata' */
    public List<ServiceNamingConditionConditionCustomProcessMetadataConditionKey> customProcessMetadataConditionKeys() {
        return this.customProcessMetadataConditionKeys == null ? List.of() : this.customProcessMetadataConditionKeys;
    }
    public List<ServiceNamingConditionConditionCustomProcessMetadata> customProcessMetadatas() {
        return this.customProcessMetadatas == null ? List.of() : this.customProcessMetadatas;
    }
    public List<ServiceNamingConditionConditionDatabaseTopology> databaseTopologies() {
        return this.databaseTopologies == null ? List.of() : this.databaseTopologies;
    }
    /**
     * @deprecated
     * You should use &#39;database_topology&#39; instead of &#39;database_topology_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionDatabaseTopologyComparison> databaseTopologyComparisons() {
        return this.databaseTopologyComparisons == null ? List.of() : this.databaseTopologyComparisons;
    }
    /**
     * @deprecated
     * You should use &#39;dcrum_decoder&#39; instead of &#39;dcrum_decoder_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionDcrumDecoderComparison> dcrumDecoderComparisons() {
        return this.dcrumDecoderComparisons == null ? List.of() : this.dcrumDecoderComparisons;
    }
    public List<ServiceNamingConditionConditionDcrumDecoder> dcrumDecoders() {
        return this.dcrumDecoders == null ? List.of() : this.dcrumDecoders;
    }
    public List<ServiceNamingConditionConditionEntity> entities() {
        return this.entities == null ? List.of() : this.entities;
    }
    /**
     * @deprecated
     * You should use &#39;entity&#39; instead of &#39;entity_id_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionEntityIdComparison> entityIdComparisons() {
        return this.entityIdComparisons == null ? List.of() : this.entityIdComparisons;
    }
    public List<ServiceNamingConditionConditionHostTech> hostTeches() {
        return this.hostTeches == null ? List.of() : this.hostTeches;
    }
    /**
     * @deprecated
     * `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     * 
     */
    @Deprecated /* `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead */
    public List<ServiceNamingConditionConditionHypervisorTypeComparision> hypervisorTypeComparisions() {
        return this.hypervisorTypeComparisions == null ? List.of() : this.hypervisorTypeComparisions;
    }
    public List<ServiceNamingConditionConditionHypervisor> hypervisors() {
        return this.hypervisors == null ? List.of() : this.hypervisors;
    }
    /**
     * @deprecated
     * You should use &#39;indexed_name&#39; instead of &#39;indexed_name_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionIndexedNameComparison> indexedNameComparisons() {
        return this.indexedNameComparisons == null ? List.of() : this.indexedNameComparisons;
    }
    public List<ServiceNamingConditionConditionIndexedName> indexedNames() {
        return this.indexedNames == null ? List.of() : this.indexedNames;
    }
    /**
     * @deprecated
     * You should use &#39;indexed_string&#39; instead of &#39;indexed_string_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionIndexedStringComparison> indexedStringComparisons() {
        return this.indexedStringComparisons == null ? List.of() : this.indexedStringComparisons;
    }
    public List<ServiceNamingConditionConditionIndexedString> indexedStrings() {
        return this.indexedStrings == null ? List.of() : this.indexedStrings;
    }
    /**
     * @deprecated
     * You should use &#39;indexed_tag&#39; instead of &#39;indexed_tag_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionIndexedTagComparison> indexedTagComparisons() {
        return this.indexedTagComparisons == null ? List.of() : this.indexedTagComparisons;
    }
    public List<ServiceNamingConditionConditionIndexedTag> indexedTags() {
        return this.indexedTags == null ? List.of() : this.indexedTags;
    }
    /**
     * @deprecated
     * You should use &#39;integer&#39; instead of &#39;integer_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionIntegerComparison> integerComparisons() {
        return this.integerComparisons == null ? List.of() : this.integerComparisons;
    }
    public List<ServiceNamingConditionConditionInteger> integers() {
        return this.integers == null ? List.of() : this.integers;
    }
    /**
     * @deprecated
     * You should use &#39;ipaddress&#39; instead of &#39;ipaddress_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionIpaddressComparison> ipaddressComparisons() {
        return this.ipaddressComparisons == null ? List.of() : this.ipaddressComparisons;
    }
    public List<ServiceNamingConditionConditionIpaddress> ipaddresses() {
        return this.ipaddresses == null ? List.of() : this.ipaddresses;
    }
    public List<ServiceNamingConditionConditionKey> keys() {
        return this.keys == null ? List.of() : this.keys;
    }
    /**
     * @deprecated
     * You should use &#39;mobile_platform&#39; instead of &#39;mobile_platform_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionMobilePlatformComparison> mobilePlatformComparisons() {
        return this.mobilePlatformComparisons == null ? List.of() : this.mobilePlatformComparisons;
    }
    public List<ServiceNamingConditionConditionMobilePlatform> mobilePlatforms() {
        return this.mobilePlatforms == null ? List.of() : this.mobilePlatforms;
    }
    public List<ServiceNamingConditionConditionOsArch> osArches() {
        return this.osArches == null ? List.of() : this.osArches;
    }
    public List<ServiceNamingConditionConditionOsType> osTypes() {
        return this.osTypes == null ? List.of() : this.osTypes;
    }
    /**
     * @deprecated
     * You should use &#39;os_arch&#39; instead of &#39;osarchitecture_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionOsarchitectureComparison> osarchitectureComparisons() {
        return this.osarchitectureComparisons == null ? List.of() : this.osarchitectureComparisons;
    }
    /**
     * @deprecated
     * You should use &#39;os_type&#39; instead of &#39;ostype_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionOstypeComparison> ostypeComparisons() {
        return this.ostypeComparisons == null ? List.of() : this.ostypeComparisons;
    }
    /**
     * @deprecated
     * You should use &#39;paas_type&#39; instead of &#39;paas_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionPaasTypeComparison> paasTypeComparisons() {
        return this.paasTypeComparisons == null ? List.of() : this.paasTypeComparisons;
    }
    public List<ServiceNamingConditionConditionPaasType> paasTypes() {
        return this.paasTypes == null ? List.of() : this.paasTypes;
    }
    /**
     * @deprecated
     * &#39;process_metadata_condition_key&#39; is deprecated. You should use &#39;process_metadata&#39;
     * 
     */
    @Deprecated /* 'process_metadata_condition_key' is deprecated. You should use 'process_metadata' */
    public List<ServiceNamingConditionConditionProcessMetadataConditionKey> processMetadataConditionKeys() {
        return this.processMetadataConditionKeys == null ? List.of() : this.processMetadataConditionKeys;
    }
    public List<ServiceNamingConditionConditionProcessMetadata> processMetadatas() {
        return this.processMetadatas == null ? List.of() : this.processMetadatas;
    }
    public List<ServiceNamingConditionConditionServiceTopology> serviceTopologies() {
        return this.serviceTopologies == null ? List.of() : this.serviceTopologies;
    }
    /**
     * @deprecated
     * You should use &#39;service_topology&#39; instead of &#39;service_topology_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionServiceTopologyComparison> serviceTopologyComparisons() {
        return this.serviceTopologyComparisons == null ? List.of() : this.serviceTopologyComparisons;
    }
    /**
     * @deprecated
     * You should use &#39;service_type&#39; instead of &#39;service_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionServiceTypeComparison> serviceTypeComparisons() {
        return this.serviceTypeComparisons == null ? List.of() : this.serviceTypeComparisons;
    }
    public List<ServiceNamingConditionConditionServiceType> serviceTypes() {
        return this.serviceTypes == null ? List.of() : this.serviceTypes;
    }
    /**
     * @deprecated
     * You should use &#39;host_tech&#39; instead of &#39;simple_host_tech_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionSimpleHostTechComparison> simpleHostTechComparisons() {
        return this.simpleHostTechComparisons == null ? List.of() : this.simpleHostTechComparisons;
    }
    /**
     * @deprecated
     * You should use &#39;tech&#39; instead of &#39;simple_tech_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionSimpleTechComparison> simpleTechComparisons() {
        return this.simpleTechComparisons == null ? List.of() : this.simpleTechComparisons;
    }
    /**
     * @deprecated
     * You should use &#39;string&#39; instead of &#39;string_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionStringComparison> stringComparisons() {
        return this.stringComparisons == null ? List.of() : this.stringComparisons;
    }
    /**
     * @deprecated
     * &#39;string_condition_key&#39; is deprecated. You should use &#39;string_key&#39;
     * 
     */
    @Deprecated /* 'string_condition_key' is deprecated. You should use 'string_key' */
    public List<ServiceNamingConditionConditionStringConditionKey> stringConditionKeys() {
        return this.stringConditionKeys == null ? List.of() : this.stringConditionKeys;
    }
    public List<ServiceNamingConditionConditionStringKey> stringKeys() {
        return this.stringKeys == null ? List.of() : this.stringKeys;
    }
    public List<ServiceNamingConditionConditionString> strings() {
        return this.strings == null ? List.of() : this.strings;
    }
    /**
     * @deprecated
     * You should use &#39;synthetic_engine&#39; instead of &#39;synthetic_engine_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionSyntheticEngineTypeComparison> syntheticEngineTypeComparisons() {
        return this.syntheticEngineTypeComparisons == null ? List.of() : this.syntheticEngineTypeComparisons;
    }
    public List<ServiceNamingConditionConditionSyntheticEngine> syntheticEngines() {
        return this.syntheticEngines == null ? List.of() : this.syntheticEngines;
    }
    /**
     * @deprecated
     * You should use &#39;tag&#39; instead of &#39;tag_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility. */
    public List<ServiceNamingConditionConditionTagComparison> tagComparisons() {
        return this.tagComparisons == null ? List.of() : this.tagComparisons;
    }
    public List<ServiceNamingConditionConditionTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    public List<ServiceNamingConditionConditionTech> teches() {
        return this.teches == null ? List.of() : this.teches;
    }
    public Optional<String> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceNamingConditionCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ServiceNamingConditionConditionApplicationTypeComparison> applicationTypeComparisons;
        private @Nullable List<ServiceNamingConditionConditionApplicationType> applicationTypes;
        private @Nullable List<ServiceNamingConditionConditionAzureComputeModeComparison> azureComputeModeComparisons;
        private @Nullable List<ServiceNamingConditionConditionAzureComputeMode> azureComputeModes;
        private @Nullable List<ServiceNamingConditionConditionAzureSkuComparision> azureSkuComparisions;
        private @Nullable List<ServiceNamingConditionConditionAzureSkus> azureSkus;
        private @Nullable List<ServiceNamingConditionConditionBaseComparisonBasic> baseComparisonBasics;
        private @Nullable List<ServiceNamingConditionConditionBaseConditionKey> baseConditionKeys;
        private @Nullable List<ServiceNamingConditionConditionBitnessComparision> bitnessComparisions;
        private @Nullable List<ServiceNamingConditionConditionBitness> bitnesses;
        private @Nullable List<ServiceNamingConditionConditionCloudTypeComparison> cloudTypeComparisons;
        private @Nullable List<ServiceNamingConditionConditionCloudType> cloudTypes;
        private @Nullable List<ServiceNamingConditionConditionComparison> comparisons;
        private @Nullable List<ServiceNamingConditionConditionCustomApplicationTypeComparison> customApplicationTypeComparisons;
        private @Nullable List<ServiceNamingConditionConditionCustomApplicationType> customApplicationTypes;
        private @Nullable List<ServiceNamingConditionConditionCustomHostMetadataConditionKey> customHostMetadataConditionKeys;
        private @Nullable List<ServiceNamingConditionConditionCustomHostMetadata> customHostMetadatas;
        private @Nullable List<ServiceNamingConditionConditionCustomProcessMetadataConditionKey> customProcessMetadataConditionKeys;
        private @Nullable List<ServiceNamingConditionConditionCustomProcessMetadata> customProcessMetadatas;
        private @Nullable List<ServiceNamingConditionConditionDatabaseTopology> databaseTopologies;
        private @Nullable List<ServiceNamingConditionConditionDatabaseTopologyComparison> databaseTopologyComparisons;
        private @Nullable List<ServiceNamingConditionConditionDcrumDecoderComparison> dcrumDecoderComparisons;
        private @Nullable List<ServiceNamingConditionConditionDcrumDecoder> dcrumDecoders;
        private @Nullable List<ServiceNamingConditionConditionEntity> entities;
        private @Nullable List<ServiceNamingConditionConditionEntityIdComparison> entityIdComparisons;
        private @Nullable List<ServiceNamingConditionConditionHostTech> hostTeches;
        private @Nullable List<ServiceNamingConditionConditionHypervisorTypeComparision> hypervisorTypeComparisions;
        private @Nullable List<ServiceNamingConditionConditionHypervisor> hypervisors;
        private @Nullable List<ServiceNamingConditionConditionIndexedNameComparison> indexedNameComparisons;
        private @Nullable List<ServiceNamingConditionConditionIndexedName> indexedNames;
        private @Nullable List<ServiceNamingConditionConditionIndexedStringComparison> indexedStringComparisons;
        private @Nullable List<ServiceNamingConditionConditionIndexedString> indexedStrings;
        private @Nullable List<ServiceNamingConditionConditionIndexedTagComparison> indexedTagComparisons;
        private @Nullable List<ServiceNamingConditionConditionIndexedTag> indexedTags;
        private @Nullable List<ServiceNamingConditionConditionIntegerComparison> integerComparisons;
        private @Nullable List<ServiceNamingConditionConditionInteger> integers;
        private @Nullable List<ServiceNamingConditionConditionIpaddressComparison> ipaddressComparisons;
        private @Nullable List<ServiceNamingConditionConditionIpaddress> ipaddresses;
        private @Nullable List<ServiceNamingConditionConditionKey> keys;
        private @Nullable List<ServiceNamingConditionConditionMobilePlatformComparison> mobilePlatformComparisons;
        private @Nullable List<ServiceNamingConditionConditionMobilePlatform> mobilePlatforms;
        private @Nullable List<ServiceNamingConditionConditionOsArch> osArches;
        private @Nullable List<ServiceNamingConditionConditionOsType> osTypes;
        private @Nullable List<ServiceNamingConditionConditionOsarchitectureComparison> osarchitectureComparisons;
        private @Nullable List<ServiceNamingConditionConditionOstypeComparison> ostypeComparisons;
        private @Nullable List<ServiceNamingConditionConditionPaasTypeComparison> paasTypeComparisons;
        private @Nullable List<ServiceNamingConditionConditionPaasType> paasTypes;
        private @Nullable List<ServiceNamingConditionConditionProcessMetadataConditionKey> processMetadataConditionKeys;
        private @Nullable List<ServiceNamingConditionConditionProcessMetadata> processMetadatas;
        private @Nullable List<ServiceNamingConditionConditionServiceTopology> serviceTopologies;
        private @Nullable List<ServiceNamingConditionConditionServiceTopologyComparison> serviceTopologyComparisons;
        private @Nullable List<ServiceNamingConditionConditionServiceTypeComparison> serviceTypeComparisons;
        private @Nullable List<ServiceNamingConditionConditionServiceType> serviceTypes;
        private @Nullable List<ServiceNamingConditionConditionSimpleHostTechComparison> simpleHostTechComparisons;
        private @Nullable List<ServiceNamingConditionConditionSimpleTechComparison> simpleTechComparisons;
        private @Nullable List<ServiceNamingConditionConditionStringComparison> stringComparisons;
        private @Nullable List<ServiceNamingConditionConditionStringConditionKey> stringConditionKeys;
        private @Nullable List<ServiceNamingConditionConditionStringKey> stringKeys;
        private @Nullable List<ServiceNamingConditionConditionString> strings;
        private @Nullable List<ServiceNamingConditionConditionSyntheticEngineTypeComparison> syntheticEngineTypeComparisons;
        private @Nullable List<ServiceNamingConditionConditionSyntheticEngine> syntheticEngines;
        private @Nullable List<ServiceNamingConditionConditionTagComparison> tagComparisons;
        private @Nullable List<ServiceNamingConditionConditionTag> tags;
        private @Nullable List<ServiceNamingConditionConditionTech> teches;
        private @Nullable String unknowns;
        public Builder() {}
        public Builder(ServiceNamingConditionCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationTypeComparisons = defaults.applicationTypeComparisons;
    	      this.applicationTypes = defaults.applicationTypes;
    	      this.azureComputeModeComparisons = defaults.azureComputeModeComparisons;
    	      this.azureComputeModes = defaults.azureComputeModes;
    	      this.azureSkuComparisions = defaults.azureSkuComparisions;
    	      this.azureSkus = defaults.azureSkus;
    	      this.baseComparisonBasics = defaults.baseComparisonBasics;
    	      this.baseConditionKeys = defaults.baseConditionKeys;
    	      this.bitnessComparisions = defaults.bitnessComparisions;
    	      this.bitnesses = defaults.bitnesses;
    	      this.cloudTypeComparisons = defaults.cloudTypeComparisons;
    	      this.cloudTypes = defaults.cloudTypes;
    	      this.comparisons = defaults.comparisons;
    	      this.customApplicationTypeComparisons = defaults.customApplicationTypeComparisons;
    	      this.customApplicationTypes = defaults.customApplicationTypes;
    	      this.customHostMetadataConditionKeys = defaults.customHostMetadataConditionKeys;
    	      this.customHostMetadatas = defaults.customHostMetadatas;
    	      this.customProcessMetadataConditionKeys = defaults.customProcessMetadataConditionKeys;
    	      this.customProcessMetadatas = defaults.customProcessMetadatas;
    	      this.databaseTopologies = defaults.databaseTopologies;
    	      this.databaseTopologyComparisons = defaults.databaseTopologyComparisons;
    	      this.dcrumDecoderComparisons = defaults.dcrumDecoderComparisons;
    	      this.dcrumDecoders = defaults.dcrumDecoders;
    	      this.entities = defaults.entities;
    	      this.entityIdComparisons = defaults.entityIdComparisons;
    	      this.hostTeches = defaults.hostTeches;
    	      this.hypervisorTypeComparisions = defaults.hypervisorTypeComparisions;
    	      this.hypervisors = defaults.hypervisors;
    	      this.indexedNameComparisons = defaults.indexedNameComparisons;
    	      this.indexedNames = defaults.indexedNames;
    	      this.indexedStringComparisons = defaults.indexedStringComparisons;
    	      this.indexedStrings = defaults.indexedStrings;
    	      this.indexedTagComparisons = defaults.indexedTagComparisons;
    	      this.indexedTags = defaults.indexedTags;
    	      this.integerComparisons = defaults.integerComparisons;
    	      this.integers = defaults.integers;
    	      this.ipaddressComparisons = defaults.ipaddressComparisons;
    	      this.ipaddresses = defaults.ipaddresses;
    	      this.keys = defaults.keys;
    	      this.mobilePlatformComparisons = defaults.mobilePlatformComparisons;
    	      this.mobilePlatforms = defaults.mobilePlatforms;
    	      this.osArches = defaults.osArches;
    	      this.osTypes = defaults.osTypes;
    	      this.osarchitectureComparisons = defaults.osarchitectureComparisons;
    	      this.ostypeComparisons = defaults.ostypeComparisons;
    	      this.paasTypeComparisons = defaults.paasTypeComparisons;
    	      this.paasTypes = defaults.paasTypes;
    	      this.processMetadataConditionKeys = defaults.processMetadataConditionKeys;
    	      this.processMetadatas = defaults.processMetadatas;
    	      this.serviceTopologies = defaults.serviceTopologies;
    	      this.serviceTopologyComparisons = defaults.serviceTopologyComparisons;
    	      this.serviceTypeComparisons = defaults.serviceTypeComparisons;
    	      this.serviceTypes = defaults.serviceTypes;
    	      this.simpleHostTechComparisons = defaults.simpleHostTechComparisons;
    	      this.simpleTechComparisons = defaults.simpleTechComparisons;
    	      this.stringComparisons = defaults.stringComparisons;
    	      this.stringConditionKeys = defaults.stringConditionKeys;
    	      this.stringKeys = defaults.stringKeys;
    	      this.strings = defaults.strings;
    	      this.syntheticEngineTypeComparisons = defaults.syntheticEngineTypeComparisons;
    	      this.syntheticEngines = defaults.syntheticEngines;
    	      this.tagComparisons = defaults.tagComparisons;
    	      this.tags = defaults.tags;
    	      this.teches = defaults.teches;
    	      this.unknowns = defaults.unknowns;
        }

        @CustomType.Setter
        public Builder applicationTypeComparisons(@Nullable List<ServiceNamingConditionConditionApplicationTypeComparison> applicationTypeComparisons) {
            this.applicationTypeComparisons = applicationTypeComparisons;
            return this;
        }
        public Builder applicationTypeComparisons(ServiceNamingConditionConditionApplicationTypeComparison... applicationTypeComparisons) {
            return applicationTypeComparisons(List.of(applicationTypeComparisons));
        }
        @CustomType.Setter
        public Builder applicationTypes(@Nullable List<ServiceNamingConditionConditionApplicationType> applicationTypes) {
            this.applicationTypes = applicationTypes;
            return this;
        }
        public Builder applicationTypes(ServiceNamingConditionConditionApplicationType... applicationTypes) {
            return applicationTypes(List.of(applicationTypes));
        }
        @CustomType.Setter
        public Builder azureComputeModeComparisons(@Nullable List<ServiceNamingConditionConditionAzureComputeModeComparison> azureComputeModeComparisons) {
            this.azureComputeModeComparisons = azureComputeModeComparisons;
            return this;
        }
        public Builder azureComputeModeComparisons(ServiceNamingConditionConditionAzureComputeModeComparison... azureComputeModeComparisons) {
            return azureComputeModeComparisons(List.of(azureComputeModeComparisons));
        }
        @CustomType.Setter
        public Builder azureComputeModes(@Nullable List<ServiceNamingConditionConditionAzureComputeMode> azureComputeModes) {
            this.azureComputeModes = azureComputeModes;
            return this;
        }
        public Builder azureComputeModes(ServiceNamingConditionConditionAzureComputeMode... azureComputeModes) {
            return azureComputeModes(List.of(azureComputeModes));
        }
        @CustomType.Setter
        public Builder azureSkuComparisions(@Nullable List<ServiceNamingConditionConditionAzureSkuComparision> azureSkuComparisions) {
            this.azureSkuComparisions = azureSkuComparisions;
            return this;
        }
        public Builder azureSkuComparisions(ServiceNamingConditionConditionAzureSkuComparision... azureSkuComparisions) {
            return azureSkuComparisions(List.of(azureSkuComparisions));
        }
        @CustomType.Setter
        public Builder azureSkus(@Nullable List<ServiceNamingConditionConditionAzureSkus> azureSkus) {
            this.azureSkus = azureSkus;
            return this;
        }
        public Builder azureSkus(ServiceNamingConditionConditionAzureSkus... azureSkus) {
            return azureSkus(List.of(azureSkus));
        }
        @CustomType.Setter
        public Builder baseComparisonBasics(@Nullable List<ServiceNamingConditionConditionBaseComparisonBasic> baseComparisonBasics) {
            this.baseComparisonBasics = baseComparisonBasics;
            return this;
        }
        public Builder baseComparisonBasics(ServiceNamingConditionConditionBaseComparisonBasic... baseComparisonBasics) {
            return baseComparisonBasics(List.of(baseComparisonBasics));
        }
        @CustomType.Setter
        public Builder baseConditionKeys(@Nullable List<ServiceNamingConditionConditionBaseConditionKey> baseConditionKeys) {
            this.baseConditionKeys = baseConditionKeys;
            return this;
        }
        public Builder baseConditionKeys(ServiceNamingConditionConditionBaseConditionKey... baseConditionKeys) {
            return baseConditionKeys(List.of(baseConditionKeys));
        }
        @CustomType.Setter
        public Builder bitnessComparisions(@Nullable List<ServiceNamingConditionConditionBitnessComparision> bitnessComparisions) {
            this.bitnessComparisions = bitnessComparisions;
            return this;
        }
        public Builder bitnessComparisions(ServiceNamingConditionConditionBitnessComparision... bitnessComparisions) {
            return bitnessComparisions(List.of(bitnessComparisions));
        }
        @CustomType.Setter
        public Builder bitnesses(@Nullable List<ServiceNamingConditionConditionBitness> bitnesses) {
            this.bitnesses = bitnesses;
            return this;
        }
        public Builder bitnesses(ServiceNamingConditionConditionBitness... bitnesses) {
            return bitnesses(List.of(bitnesses));
        }
        @CustomType.Setter
        public Builder cloudTypeComparisons(@Nullable List<ServiceNamingConditionConditionCloudTypeComparison> cloudTypeComparisons) {
            this.cloudTypeComparisons = cloudTypeComparisons;
            return this;
        }
        public Builder cloudTypeComparisons(ServiceNamingConditionConditionCloudTypeComparison... cloudTypeComparisons) {
            return cloudTypeComparisons(List.of(cloudTypeComparisons));
        }
        @CustomType.Setter
        public Builder cloudTypes(@Nullable List<ServiceNamingConditionConditionCloudType> cloudTypes) {
            this.cloudTypes = cloudTypes;
            return this;
        }
        public Builder cloudTypes(ServiceNamingConditionConditionCloudType... cloudTypes) {
            return cloudTypes(List.of(cloudTypes));
        }
        @CustomType.Setter
        public Builder comparisons(@Nullable List<ServiceNamingConditionConditionComparison> comparisons) {
            this.comparisons = comparisons;
            return this;
        }
        public Builder comparisons(ServiceNamingConditionConditionComparison... comparisons) {
            return comparisons(List.of(comparisons));
        }
        @CustomType.Setter
        public Builder customApplicationTypeComparisons(@Nullable List<ServiceNamingConditionConditionCustomApplicationTypeComparison> customApplicationTypeComparisons) {
            this.customApplicationTypeComparisons = customApplicationTypeComparisons;
            return this;
        }
        public Builder customApplicationTypeComparisons(ServiceNamingConditionConditionCustomApplicationTypeComparison... customApplicationTypeComparisons) {
            return customApplicationTypeComparisons(List.of(customApplicationTypeComparisons));
        }
        @CustomType.Setter
        public Builder customApplicationTypes(@Nullable List<ServiceNamingConditionConditionCustomApplicationType> customApplicationTypes) {
            this.customApplicationTypes = customApplicationTypes;
            return this;
        }
        public Builder customApplicationTypes(ServiceNamingConditionConditionCustomApplicationType... customApplicationTypes) {
            return customApplicationTypes(List.of(customApplicationTypes));
        }
        @CustomType.Setter
        public Builder customHostMetadataConditionKeys(@Nullable List<ServiceNamingConditionConditionCustomHostMetadataConditionKey> customHostMetadataConditionKeys) {
            this.customHostMetadataConditionKeys = customHostMetadataConditionKeys;
            return this;
        }
        public Builder customHostMetadataConditionKeys(ServiceNamingConditionConditionCustomHostMetadataConditionKey... customHostMetadataConditionKeys) {
            return customHostMetadataConditionKeys(List.of(customHostMetadataConditionKeys));
        }
        @CustomType.Setter
        public Builder customHostMetadatas(@Nullable List<ServiceNamingConditionConditionCustomHostMetadata> customHostMetadatas) {
            this.customHostMetadatas = customHostMetadatas;
            return this;
        }
        public Builder customHostMetadatas(ServiceNamingConditionConditionCustomHostMetadata... customHostMetadatas) {
            return customHostMetadatas(List.of(customHostMetadatas));
        }
        @CustomType.Setter
        public Builder customProcessMetadataConditionKeys(@Nullable List<ServiceNamingConditionConditionCustomProcessMetadataConditionKey> customProcessMetadataConditionKeys) {
            this.customProcessMetadataConditionKeys = customProcessMetadataConditionKeys;
            return this;
        }
        public Builder customProcessMetadataConditionKeys(ServiceNamingConditionConditionCustomProcessMetadataConditionKey... customProcessMetadataConditionKeys) {
            return customProcessMetadataConditionKeys(List.of(customProcessMetadataConditionKeys));
        }
        @CustomType.Setter
        public Builder customProcessMetadatas(@Nullable List<ServiceNamingConditionConditionCustomProcessMetadata> customProcessMetadatas) {
            this.customProcessMetadatas = customProcessMetadatas;
            return this;
        }
        public Builder customProcessMetadatas(ServiceNamingConditionConditionCustomProcessMetadata... customProcessMetadatas) {
            return customProcessMetadatas(List.of(customProcessMetadatas));
        }
        @CustomType.Setter
        public Builder databaseTopologies(@Nullable List<ServiceNamingConditionConditionDatabaseTopology> databaseTopologies) {
            this.databaseTopologies = databaseTopologies;
            return this;
        }
        public Builder databaseTopologies(ServiceNamingConditionConditionDatabaseTopology... databaseTopologies) {
            return databaseTopologies(List.of(databaseTopologies));
        }
        @CustomType.Setter
        public Builder databaseTopologyComparisons(@Nullable List<ServiceNamingConditionConditionDatabaseTopologyComparison> databaseTopologyComparisons) {
            this.databaseTopologyComparisons = databaseTopologyComparisons;
            return this;
        }
        public Builder databaseTopologyComparisons(ServiceNamingConditionConditionDatabaseTopologyComparison... databaseTopologyComparisons) {
            return databaseTopologyComparisons(List.of(databaseTopologyComparisons));
        }
        @CustomType.Setter
        public Builder dcrumDecoderComparisons(@Nullable List<ServiceNamingConditionConditionDcrumDecoderComparison> dcrumDecoderComparisons) {
            this.dcrumDecoderComparisons = dcrumDecoderComparisons;
            return this;
        }
        public Builder dcrumDecoderComparisons(ServiceNamingConditionConditionDcrumDecoderComparison... dcrumDecoderComparisons) {
            return dcrumDecoderComparisons(List.of(dcrumDecoderComparisons));
        }
        @CustomType.Setter
        public Builder dcrumDecoders(@Nullable List<ServiceNamingConditionConditionDcrumDecoder> dcrumDecoders) {
            this.dcrumDecoders = dcrumDecoders;
            return this;
        }
        public Builder dcrumDecoders(ServiceNamingConditionConditionDcrumDecoder... dcrumDecoders) {
            return dcrumDecoders(List.of(dcrumDecoders));
        }
        @CustomType.Setter
        public Builder entities(@Nullable List<ServiceNamingConditionConditionEntity> entities) {
            this.entities = entities;
            return this;
        }
        public Builder entities(ServiceNamingConditionConditionEntity... entities) {
            return entities(List.of(entities));
        }
        @CustomType.Setter
        public Builder entityIdComparisons(@Nullable List<ServiceNamingConditionConditionEntityIdComparison> entityIdComparisons) {
            this.entityIdComparisons = entityIdComparisons;
            return this;
        }
        public Builder entityIdComparisons(ServiceNamingConditionConditionEntityIdComparison... entityIdComparisons) {
            return entityIdComparisons(List.of(entityIdComparisons));
        }
        @CustomType.Setter
        public Builder hostTeches(@Nullable List<ServiceNamingConditionConditionHostTech> hostTeches) {
            this.hostTeches = hostTeches;
            return this;
        }
        public Builder hostTeches(ServiceNamingConditionConditionHostTech... hostTeches) {
            return hostTeches(List.of(hostTeches));
        }
        @CustomType.Setter
        public Builder hypervisorTypeComparisions(@Nullable List<ServiceNamingConditionConditionHypervisorTypeComparision> hypervisorTypeComparisions) {
            this.hypervisorTypeComparisions = hypervisorTypeComparisions;
            return this;
        }
        public Builder hypervisorTypeComparisions(ServiceNamingConditionConditionHypervisorTypeComparision... hypervisorTypeComparisions) {
            return hypervisorTypeComparisions(List.of(hypervisorTypeComparisions));
        }
        @CustomType.Setter
        public Builder hypervisors(@Nullable List<ServiceNamingConditionConditionHypervisor> hypervisors) {
            this.hypervisors = hypervisors;
            return this;
        }
        public Builder hypervisors(ServiceNamingConditionConditionHypervisor... hypervisors) {
            return hypervisors(List.of(hypervisors));
        }
        @CustomType.Setter
        public Builder indexedNameComparisons(@Nullable List<ServiceNamingConditionConditionIndexedNameComparison> indexedNameComparisons) {
            this.indexedNameComparisons = indexedNameComparisons;
            return this;
        }
        public Builder indexedNameComparisons(ServiceNamingConditionConditionIndexedNameComparison... indexedNameComparisons) {
            return indexedNameComparisons(List.of(indexedNameComparisons));
        }
        @CustomType.Setter
        public Builder indexedNames(@Nullable List<ServiceNamingConditionConditionIndexedName> indexedNames) {
            this.indexedNames = indexedNames;
            return this;
        }
        public Builder indexedNames(ServiceNamingConditionConditionIndexedName... indexedNames) {
            return indexedNames(List.of(indexedNames));
        }
        @CustomType.Setter
        public Builder indexedStringComparisons(@Nullable List<ServiceNamingConditionConditionIndexedStringComparison> indexedStringComparisons) {
            this.indexedStringComparisons = indexedStringComparisons;
            return this;
        }
        public Builder indexedStringComparisons(ServiceNamingConditionConditionIndexedStringComparison... indexedStringComparisons) {
            return indexedStringComparisons(List.of(indexedStringComparisons));
        }
        @CustomType.Setter
        public Builder indexedStrings(@Nullable List<ServiceNamingConditionConditionIndexedString> indexedStrings) {
            this.indexedStrings = indexedStrings;
            return this;
        }
        public Builder indexedStrings(ServiceNamingConditionConditionIndexedString... indexedStrings) {
            return indexedStrings(List.of(indexedStrings));
        }
        @CustomType.Setter
        public Builder indexedTagComparisons(@Nullable List<ServiceNamingConditionConditionIndexedTagComparison> indexedTagComparisons) {
            this.indexedTagComparisons = indexedTagComparisons;
            return this;
        }
        public Builder indexedTagComparisons(ServiceNamingConditionConditionIndexedTagComparison... indexedTagComparisons) {
            return indexedTagComparisons(List.of(indexedTagComparisons));
        }
        @CustomType.Setter
        public Builder indexedTags(@Nullable List<ServiceNamingConditionConditionIndexedTag> indexedTags) {
            this.indexedTags = indexedTags;
            return this;
        }
        public Builder indexedTags(ServiceNamingConditionConditionIndexedTag... indexedTags) {
            return indexedTags(List.of(indexedTags));
        }
        @CustomType.Setter
        public Builder integerComparisons(@Nullable List<ServiceNamingConditionConditionIntegerComparison> integerComparisons) {
            this.integerComparisons = integerComparisons;
            return this;
        }
        public Builder integerComparisons(ServiceNamingConditionConditionIntegerComparison... integerComparisons) {
            return integerComparisons(List.of(integerComparisons));
        }
        @CustomType.Setter
        public Builder integers(@Nullable List<ServiceNamingConditionConditionInteger> integers) {
            this.integers = integers;
            return this;
        }
        public Builder integers(ServiceNamingConditionConditionInteger... integers) {
            return integers(List.of(integers));
        }
        @CustomType.Setter
        public Builder ipaddressComparisons(@Nullable List<ServiceNamingConditionConditionIpaddressComparison> ipaddressComparisons) {
            this.ipaddressComparisons = ipaddressComparisons;
            return this;
        }
        public Builder ipaddressComparisons(ServiceNamingConditionConditionIpaddressComparison... ipaddressComparisons) {
            return ipaddressComparisons(List.of(ipaddressComparisons));
        }
        @CustomType.Setter
        public Builder ipaddresses(@Nullable List<ServiceNamingConditionConditionIpaddress> ipaddresses) {
            this.ipaddresses = ipaddresses;
            return this;
        }
        public Builder ipaddresses(ServiceNamingConditionConditionIpaddress... ipaddresses) {
            return ipaddresses(List.of(ipaddresses));
        }
        @CustomType.Setter
        public Builder keys(@Nullable List<ServiceNamingConditionConditionKey> keys) {
            this.keys = keys;
            return this;
        }
        public Builder keys(ServiceNamingConditionConditionKey... keys) {
            return keys(List.of(keys));
        }
        @CustomType.Setter
        public Builder mobilePlatformComparisons(@Nullable List<ServiceNamingConditionConditionMobilePlatformComparison> mobilePlatformComparisons) {
            this.mobilePlatformComparisons = mobilePlatformComparisons;
            return this;
        }
        public Builder mobilePlatformComparisons(ServiceNamingConditionConditionMobilePlatformComparison... mobilePlatformComparisons) {
            return mobilePlatformComparisons(List.of(mobilePlatformComparisons));
        }
        @CustomType.Setter
        public Builder mobilePlatforms(@Nullable List<ServiceNamingConditionConditionMobilePlatform> mobilePlatforms) {
            this.mobilePlatforms = mobilePlatforms;
            return this;
        }
        public Builder mobilePlatforms(ServiceNamingConditionConditionMobilePlatform... mobilePlatforms) {
            return mobilePlatforms(List.of(mobilePlatforms));
        }
        @CustomType.Setter
        public Builder osArches(@Nullable List<ServiceNamingConditionConditionOsArch> osArches) {
            this.osArches = osArches;
            return this;
        }
        public Builder osArches(ServiceNamingConditionConditionOsArch... osArches) {
            return osArches(List.of(osArches));
        }
        @CustomType.Setter
        public Builder osTypes(@Nullable List<ServiceNamingConditionConditionOsType> osTypes) {
            this.osTypes = osTypes;
            return this;
        }
        public Builder osTypes(ServiceNamingConditionConditionOsType... osTypes) {
            return osTypes(List.of(osTypes));
        }
        @CustomType.Setter
        public Builder osarchitectureComparisons(@Nullable List<ServiceNamingConditionConditionOsarchitectureComparison> osarchitectureComparisons) {
            this.osarchitectureComparisons = osarchitectureComparisons;
            return this;
        }
        public Builder osarchitectureComparisons(ServiceNamingConditionConditionOsarchitectureComparison... osarchitectureComparisons) {
            return osarchitectureComparisons(List.of(osarchitectureComparisons));
        }
        @CustomType.Setter
        public Builder ostypeComparisons(@Nullable List<ServiceNamingConditionConditionOstypeComparison> ostypeComparisons) {
            this.ostypeComparisons = ostypeComparisons;
            return this;
        }
        public Builder ostypeComparisons(ServiceNamingConditionConditionOstypeComparison... ostypeComparisons) {
            return ostypeComparisons(List.of(ostypeComparisons));
        }
        @CustomType.Setter
        public Builder paasTypeComparisons(@Nullable List<ServiceNamingConditionConditionPaasTypeComparison> paasTypeComparisons) {
            this.paasTypeComparisons = paasTypeComparisons;
            return this;
        }
        public Builder paasTypeComparisons(ServiceNamingConditionConditionPaasTypeComparison... paasTypeComparisons) {
            return paasTypeComparisons(List.of(paasTypeComparisons));
        }
        @CustomType.Setter
        public Builder paasTypes(@Nullable List<ServiceNamingConditionConditionPaasType> paasTypes) {
            this.paasTypes = paasTypes;
            return this;
        }
        public Builder paasTypes(ServiceNamingConditionConditionPaasType... paasTypes) {
            return paasTypes(List.of(paasTypes));
        }
        @CustomType.Setter
        public Builder processMetadataConditionKeys(@Nullable List<ServiceNamingConditionConditionProcessMetadataConditionKey> processMetadataConditionKeys) {
            this.processMetadataConditionKeys = processMetadataConditionKeys;
            return this;
        }
        public Builder processMetadataConditionKeys(ServiceNamingConditionConditionProcessMetadataConditionKey... processMetadataConditionKeys) {
            return processMetadataConditionKeys(List.of(processMetadataConditionKeys));
        }
        @CustomType.Setter
        public Builder processMetadatas(@Nullable List<ServiceNamingConditionConditionProcessMetadata> processMetadatas) {
            this.processMetadatas = processMetadatas;
            return this;
        }
        public Builder processMetadatas(ServiceNamingConditionConditionProcessMetadata... processMetadatas) {
            return processMetadatas(List.of(processMetadatas));
        }
        @CustomType.Setter
        public Builder serviceTopologies(@Nullable List<ServiceNamingConditionConditionServiceTopology> serviceTopologies) {
            this.serviceTopologies = serviceTopologies;
            return this;
        }
        public Builder serviceTopologies(ServiceNamingConditionConditionServiceTopology... serviceTopologies) {
            return serviceTopologies(List.of(serviceTopologies));
        }
        @CustomType.Setter
        public Builder serviceTopologyComparisons(@Nullable List<ServiceNamingConditionConditionServiceTopologyComparison> serviceTopologyComparisons) {
            this.serviceTopologyComparisons = serviceTopologyComparisons;
            return this;
        }
        public Builder serviceTopologyComparisons(ServiceNamingConditionConditionServiceTopologyComparison... serviceTopologyComparisons) {
            return serviceTopologyComparisons(List.of(serviceTopologyComparisons));
        }
        @CustomType.Setter
        public Builder serviceTypeComparisons(@Nullable List<ServiceNamingConditionConditionServiceTypeComparison> serviceTypeComparisons) {
            this.serviceTypeComparisons = serviceTypeComparisons;
            return this;
        }
        public Builder serviceTypeComparisons(ServiceNamingConditionConditionServiceTypeComparison... serviceTypeComparisons) {
            return serviceTypeComparisons(List.of(serviceTypeComparisons));
        }
        @CustomType.Setter
        public Builder serviceTypes(@Nullable List<ServiceNamingConditionConditionServiceType> serviceTypes) {
            this.serviceTypes = serviceTypes;
            return this;
        }
        public Builder serviceTypes(ServiceNamingConditionConditionServiceType... serviceTypes) {
            return serviceTypes(List.of(serviceTypes));
        }
        @CustomType.Setter
        public Builder simpleHostTechComparisons(@Nullable List<ServiceNamingConditionConditionSimpleHostTechComparison> simpleHostTechComparisons) {
            this.simpleHostTechComparisons = simpleHostTechComparisons;
            return this;
        }
        public Builder simpleHostTechComparisons(ServiceNamingConditionConditionSimpleHostTechComparison... simpleHostTechComparisons) {
            return simpleHostTechComparisons(List.of(simpleHostTechComparisons));
        }
        @CustomType.Setter
        public Builder simpleTechComparisons(@Nullable List<ServiceNamingConditionConditionSimpleTechComparison> simpleTechComparisons) {
            this.simpleTechComparisons = simpleTechComparisons;
            return this;
        }
        public Builder simpleTechComparisons(ServiceNamingConditionConditionSimpleTechComparison... simpleTechComparisons) {
            return simpleTechComparisons(List.of(simpleTechComparisons));
        }
        @CustomType.Setter
        public Builder stringComparisons(@Nullable List<ServiceNamingConditionConditionStringComparison> stringComparisons) {
            this.stringComparisons = stringComparisons;
            return this;
        }
        public Builder stringComparisons(ServiceNamingConditionConditionStringComparison... stringComparisons) {
            return stringComparisons(List.of(stringComparisons));
        }
        @CustomType.Setter
        public Builder stringConditionKeys(@Nullable List<ServiceNamingConditionConditionStringConditionKey> stringConditionKeys) {
            this.stringConditionKeys = stringConditionKeys;
            return this;
        }
        public Builder stringConditionKeys(ServiceNamingConditionConditionStringConditionKey... stringConditionKeys) {
            return stringConditionKeys(List.of(stringConditionKeys));
        }
        @CustomType.Setter
        public Builder stringKeys(@Nullable List<ServiceNamingConditionConditionStringKey> stringKeys) {
            this.stringKeys = stringKeys;
            return this;
        }
        public Builder stringKeys(ServiceNamingConditionConditionStringKey... stringKeys) {
            return stringKeys(List.of(stringKeys));
        }
        @CustomType.Setter
        public Builder strings(@Nullable List<ServiceNamingConditionConditionString> strings) {
            this.strings = strings;
            return this;
        }
        public Builder strings(ServiceNamingConditionConditionString... strings) {
            return strings(List.of(strings));
        }
        @CustomType.Setter
        public Builder syntheticEngineTypeComparisons(@Nullable List<ServiceNamingConditionConditionSyntheticEngineTypeComparison> syntheticEngineTypeComparisons) {
            this.syntheticEngineTypeComparisons = syntheticEngineTypeComparisons;
            return this;
        }
        public Builder syntheticEngineTypeComparisons(ServiceNamingConditionConditionSyntheticEngineTypeComparison... syntheticEngineTypeComparisons) {
            return syntheticEngineTypeComparisons(List.of(syntheticEngineTypeComparisons));
        }
        @CustomType.Setter
        public Builder syntheticEngines(@Nullable List<ServiceNamingConditionConditionSyntheticEngine> syntheticEngines) {
            this.syntheticEngines = syntheticEngines;
            return this;
        }
        public Builder syntheticEngines(ServiceNamingConditionConditionSyntheticEngine... syntheticEngines) {
            return syntheticEngines(List.of(syntheticEngines));
        }
        @CustomType.Setter
        public Builder tagComparisons(@Nullable List<ServiceNamingConditionConditionTagComparison> tagComparisons) {
            this.tagComparisons = tagComparisons;
            return this;
        }
        public Builder tagComparisons(ServiceNamingConditionConditionTagComparison... tagComparisons) {
            return tagComparisons(List.of(tagComparisons));
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<ServiceNamingConditionConditionTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(ServiceNamingConditionConditionTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder teches(@Nullable List<ServiceNamingConditionConditionTech> teches) {
            this.teches = teches;
            return this;
        }
        public Builder teches(ServiceNamingConditionConditionTech... teches) {
            return teches(List.of(teches));
        }
        @CustomType.Setter
        public Builder unknowns(@Nullable String unknowns) {
            this.unknowns = unknowns;
            return this;
        }
        public ServiceNamingConditionCondition build() {
            final var o = new ServiceNamingConditionCondition();
            o.applicationTypeComparisons = applicationTypeComparisons;
            o.applicationTypes = applicationTypes;
            o.azureComputeModeComparisons = azureComputeModeComparisons;
            o.azureComputeModes = azureComputeModes;
            o.azureSkuComparisions = azureSkuComparisions;
            o.azureSkus = azureSkus;
            o.baseComparisonBasics = baseComparisonBasics;
            o.baseConditionKeys = baseConditionKeys;
            o.bitnessComparisions = bitnessComparisions;
            o.bitnesses = bitnesses;
            o.cloudTypeComparisons = cloudTypeComparisons;
            o.cloudTypes = cloudTypes;
            o.comparisons = comparisons;
            o.customApplicationTypeComparisons = customApplicationTypeComparisons;
            o.customApplicationTypes = customApplicationTypes;
            o.customHostMetadataConditionKeys = customHostMetadataConditionKeys;
            o.customHostMetadatas = customHostMetadatas;
            o.customProcessMetadataConditionKeys = customProcessMetadataConditionKeys;
            o.customProcessMetadatas = customProcessMetadatas;
            o.databaseTopologies = databaseTopologies;
            o.databaseTopologyComparisons = databaseTopologyComparisons;
            o.dcrumDecoderComparisons = dcrumDecoderComparisons;
            o.dcrumDecoders = dcrumDecoders;
            o.entities = entities;
            o.entityIdComparisons = entityIdComparisons;
            o.hostTeches = hostTeches;
            o.hypervisorTypeComparisions = hypervisorTypeComparisions;
            o.hypervisors = hypervisors;
            o.indexedNameComparisons = indexedNameComparisons;
            o.indexedNames = indexedNames;
            o.indexedStringComparisons = indexedStringComparisons;
            o.indexedStrings = indexedStrings;
            o.indexedTagComparisons = indexedTagComparisons;
            o.indexedTags = indexedTags;
            o.integerComparisons = integerComparisons;
            o.integers = integers;
            o.ipaddressComparisons = ipaddressComparisons;
            o.ipaddresses = ipaddresses;
            o.keys = keys;
            o.mobilePlatformComparisons = mobilePlatformComparisons;
            o.mobilePlatforms = mobilePlatforms;
            o.osArches = osArches;
            o.osTypes = osTypes;
            o.osarchitectureComparisons = osarchitectureComparisons;
            o.ostypeComparisons = ostypeComparisons;
            o.paasTypeComparisons = paasTypeComparisons;
            o.paasTypes = paasTypes;
            o.processMetadataConditionKeys = processMetadataConditionKeys;
            o.processMetadatas = processMetadatas;
            o.serviceTopologies = serviceTopologies;
            o.serviceTopologyComparisons = serviceTopologyComparisons;
            o.serviceTypeComparisons = serviceTypeComparisons;
            o.serviceTypes = serviceTypes;
            o.simpleHostTechComparisons = simpleHostTechComparisons;
            o.simpleTechComparisons = simpleTechComparisons;
            o.stringComparisons = stringComparisons;
            o.stringConditionKeys = stringConditionKeys;
            o.stringKeys = stringKeys;
            o.strings = strings;
            o.syntheticEngineTypeComparisons = syntheticEngineTypeComparisons;
            o.syntheticEngines = syntheticEngines;
            o.tagComparisons = tagComparisons;
            o.tags = tags;
            o.teches = teches;
            o.unknowns = unknowns;
            return o;
        }
    }
}
