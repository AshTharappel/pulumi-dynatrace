// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DiskAnomaliesV2DiskArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskAnomaliesV2State extends com.pulumi.resources.ResourceArgs {

    public static final DiskAnomaliesV2State Empty = new DiskAnomaliesV2State();

    /**
     * Disk
     * 
     */
    @Import(name="disk")
    private @Nullable Output<DiskAnomaliesV2DiskArgs> disk;

    /**
     * @return Disk
     * 
     */
    public Optional<Output<DiskAnomaliesV2DiskArgs>> disk() {
        return Optional.ofNullable(this.disk);
    }

    /**
     * The scope for the disk anomaly detection
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The scope for the disk anomaly detection
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    private DiskAnomaliesV2State() {}

    private DiskAnomaliesV2State(DiskAnomaliesV2State $) {
        this.disk = $.disk;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskAnomaliesV2State defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskAnomaliesV2State $;

        public Builder() {
            $ = new DiskAnomaliesV2State();
        }

        public Builder(DiskAnomaliesV2State defaults) {
            $ = new DiskAnomaliesV2State(Objects.requireNonNull(defaults));
        }

        /**
         * @param disk Disk
         * 
         * @return builder
         * 
         */
        public Builder disk(@Nullable Output<DiskAnomaliesV2DiskArgs> disk) {
            $.disk = disk;
            return this;
        }

        /**
         * @param disk Disk
         * 
         * @return builder
         * 
         */
        public Builder disk(DiskAnomaliesV2DiskArgs disk) {
            return disk(Output.of(disk));
        }

        /**
         * @param scope The scope for the disk anomaly detection
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope for the disk anomaly detection
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public DiskAnomaliesV2State build() {
            return $;
        }
    }

}
