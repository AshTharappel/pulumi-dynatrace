// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.OwnershipTeamsAdditionalInformationArgs;
import com.pulumi.dynatrace.inputs.OwnershipTeamsContactDetailsArgs;
import com.pulumi.dynatrace.inputs.OwnershipTeamsLinksArgs;
import com.pulumi.dynatrace.inputs.OwnershipTeamsResponsibilitiesArgs;
import com.pulumi.dynatrace.inputs.OwnershipTeamsSupplementaryIdentifiersArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OwnershipTeamsState extends com.pulumi.resources.ResourceArgs {

    public static final OwnershipTeamsState Empty = new OwnershipTeamsState();

    /**
     * Define key/value pairs that further describe this team — for example, cost center, solution type, or business unit assignments.
     * 
     */
    @Import(name="additionalInformation")
    private @Nullable Output<OwnershipTeamsAdditionalInformationArgs> additionalInformation;

    /**
     * @return Define key/value pairs that further describe this team — for example, cost center, solution type, or business unit assignments.
     * 
     */
    public Optional<Output<OwnershipTeamsAdditionalInformationArgs>> additionalInformation() {
        return Optional.ofNullable(this.additionalInformation);
    }

    /**
     * Define options for messaging integration or other means of contacting this team.
     * 
     */
    @Import(name="contactDetails")
    private @Nullable Output<OwnershipTeamsContactDetailsArgs> contactDetails;

    /**
     * @return Define options for messaging integration or other means of contacting this team.
     * 
     */
    public Optional<Output<OwnershipTeamsContactDetailsArgs>> contactDetails() {
        return Optional.ofNullable(this.contactDetails);
    }

    /**
     * Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * This field should only be used for the automation purpose when importing team information. Once the external ID is created it can’t be changed.
     * 
     */
    @Import(name="externalId")
    private @Nullable Output<String> externalId;

    /**
     * @return This field should only be used for the automation purpose when importing team information. Once the external ID is created it can’t be changed.
     * 
     */
    public Optional<Output<String>> externalId() {
        return Optional.ofNullable(this.externalId);
    }

    /**
     * The team identifier is used to reference the team from any entity in Dynatrace. This identifier can’t be edited once the team has been created.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return The team identifier is used to reference the team from any entity in Dynatrace. This identifier can’t be edited once the team has been created.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * Include links to online resources where information relevant to this team’s responsibilities can be found.
     * 
     */
    @Import(name="links")
    private @Nullable Output<OwnershipTeamsLinksArgs> links;

    /**
     * @return Include links to online resources where information relevant to this team’s responsibilities can be found.
     * 
     */
    public Optional<Output<OwnershipTeamsLinksArgs>> links() {
        return Optional.ofNullable(this.links);
    }

    /**
     * Team name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Team name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Turn on all responsibility assignments that apply to this team.
     * 
     */
    @Import(name="responsibilities")
    private @Nullable Output<OwnershipTeamsResponsibilitiesArgs> responsibilities;

    /**
     * @return Turn on all responsibility assignments that apply to this team.
     * 
     */
    public Optional<Output<OwnershipTeamsResponsibilitiesArgs>> responsibilities() {
        return Optional.ofNullable(this.responsibilities);
    }

    /**
     * The supplementary team identifiers can be optionally used in addition to the main team identifier to reference this team from any entity in Dynatrace. Up to 3 supplementary identifiers are supported.
     * 
     */
    @Import(name="supplementaryIdentifiers")
    private @Nullable Output<OwnershipTeamsSupplementaryIdentifiersArgs> supplementaryIdentifiers;

    /**
     * @return The supplementary team identifiers can be optionally used in addition to the main team identifier to reference this team from any entity in Dynatrace. Up to 3 supplementary identifiers are supported.
     * 
     */
    public Optional<Output<OwnershipTeamsSupplementaryIdentifiersArgs>> supplementaryIdentifiers() {
        return Optional.ofNullable(this.supplementaryIdentifiers);
    }

    private OwnershipTeamsState() {}

    private OwnershipTeamsState(OwnershipTeamsState $) {
        this.additionalInformation = $.additionalInformation;
        this.contactDetails = $.contactDetails;
        this.description = $.description;
        this.externalId = $.externalId;
        this.identifier = $.identifier;
        this.links = $.links;
        this.name = $.name;
        this.responsibilities = $.responsibilities;
        this.supplementaryIdentifiers = $.supplementaryIdentifiers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OwnershipTeamsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OwnershipTeamsState $;

        public Builder() {
            $ = new OwnershipTeamsState();
        }

        public Builder(OwnershipTeamsState defaults) {
            $ = new OwnershipTeamsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalInformation Define key/value pairs that further describe this team — for example, cost center, solution type, or business unit assignments.
         * 
         * @return builder
         * 
         */
        public Builder additionalInformation(@Nullable Output<OwnershipTeamsAdditionalInformationArgs> additionalInformation) {
            $.additionalInformation = additionalInformation;
            return this;
        }

        /**
         * @param additionalInformation Define key/value pairs that further describe this team — for example, cost center, solution type, or business unit assignments.
         * 
         * @return builder
         * 
         */
        public Builder additionalInformation(OwnershipTeamsAdditionalInformationArgs additionalInformation) {
            return additionalInformation(Output.of(additionalInformation));
        }

        /**
         * @param contactDetails Define options for messaging integration or other means of contacting this team.
         * 
         * @return builder
         * 
         */
        public Builder contactDetails(@Nullable Output<OwnershipTeamsContactDetailsArgs> contactDetails) {
            $.contactDetails = contactDetails;
            return this;
        }

        /**
         * @param contactDetails Define options for messaging integration or other means of contacting this team.
         * 
         * @return builder
         * 
         */
        public Builder contactDetails(OwnershipTeamsContactDetailsArgs contactDetails) {
            return contactDetails(Output.of(contactDetails));
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param externalId This field should only be used for the automation purpose when importing team information. Once the external ID is created it can’t be changed.
         * 
         * @return builder
         * 
         */
        public Builder externalId(@Nullable Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        /**
         * @param externalId This field should only be used for the automation purpose when importing team information. Once the external ID is created it can’t be changed.
         * 
         * @return builder
         * 
         */
        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        /**
         * @param identifier The team identifier is used to reference the team from any entity in Dynatrace. This identifier can’t be edited once the team has been created.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier The team identifier is used to reference the team from any entity in Dynatrace. This identifier can’t be edited once the team has been created.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param links Include links to online resources where information relevant to this team’s responsibilities can be found.
         * 
         * @return builder
         * 
         */
        public Builder links(@Nullable Output<OwnershipTeamsLinksArgs> links) {
            $.links = links;
            return this;
        }

        /**
         * @param links Include links to online resources where information relevant to this team’s responsibilities can be found.
         * 
         * @return builder
         * 
         */
        public Builder links(OwnershipTeamsLinksArgs links) {
            return links(Output.of(links));
        }

        /**
         * @param name Team name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Team name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param responsibilities Turn on all responsibility assignments that apply to this team.
         * 
         * @return builder
         * 
         */
        public Builder responsibilities(@Nullable Output<OwnershipTeamsResponsibilitiesArgs> responsibilities) {
            $.responsibilities = responsibilities;
            return this;
        }

        /**
         * @param responsibilities Turn on all responsibility assignments that apply to this team.
         * 
         * @return builder
         * 
         */
        public Builder responsibilities(OwnershipTeamsResponsibilitiesArgs responsibilities) {
            return responsibilities(Output.of(responsibilities));
        }

        /**
         * @param supplementaryIdentifiers The supplementary team identifiers can be optionally used in addition to the main team identifier to reference this team from any entity in Dynatrace. Up to 3 supplementary identifiers are supported.
         * 
         * @return builder
         * 
         */
        public Builder supplementaryIdentifiers(@Nullable Output<OwnershipTeamsSupplementaryIdentifiersArgs> supplementaryIdentifiers) {
            $.supplementaryIdentifiers = supplementaryIdentifiers;
            return this;
        }

        /**
         * @param supplementaryIdentifiers The supplementary team identifiers can be optionally used in addition to the main team identifier to reference this team from any entity in Dynatrace. Up to 3 supplementary identifiers are supported.
         * 
         * @return builder
         * 
         */
        public Builder supplementaryIdentifiers(OwnershipTeamsSupplementaryIdentifiersArgs supplementaryIdentifiers) {
            return supplementaryIdentifiers(Output.of(supplementaryIdentifiers));
        }

        public OwnershipTeamsState build() {
            return $;
        }
    }

}
