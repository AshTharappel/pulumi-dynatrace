// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptEventsEventClickArgs;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptEventsEventCookieArgs;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptEventsEventJavascriptArgs;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptEventsEventKeystrokesArgs;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptEventsEventNavigateArgs;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptEventsEventSelectArgs;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptEventsEventTapArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BrowserMonitorScriptEventsEventArgs extends com.pulumi.resources.ResourceArgs {

    public static final BrowserMonitorScriptEventsEventArgs Empty = new BrowserMonitorScriptEventsEventArgs();

    @Import(name="click")
    private @Nullable Output<BrowserMonitorScriptEventsEventClickArgs> click;

    public Optional<Output<BrowserMonitorScriptEventsEventClickArgs>> click() {
        return Optional.ofNullable(this.click);
    }

    @Import(name="cookie")
    private @Nullable Output<BrowserMonitorScriptEventsEventCookieArgs> cookie;

    public Optional<Output<BrowserMonitorScriptEventsEventCookieArgs>> cookie() {
        return Optional.ofNullable(this.cookie);
    }

    @Import(name="description", required=true)
    private Output<String> description;

    public Output<String> description() {
        return this.description;
    }

    @Import(name="javascript")
    private @Nullable Output<BrowserMonitorScriptEventsEventJavascriptArgs> javascript;

    public Optional<Output<BrowserMonitorScriptEventsEventJavascriptArgs>> javascript() {
        return Optional.ofNullable(this.javascript);
    }

    @Import(name="keystrokes")
    private @Nullable Output<BrowserMonitorScriptEventsEventKeystrokesArgs> keystrokes;

    public Optional<Output<BrowserMonitorScriptEventsEventKeystrokesArgs>> keystrokes() {
        return Optional.ofNullable(this.keystrokes);
    }

    @Import(name="navigate")
    private @Nullable Output<BrowserMonitorScriptEventsEventNavigateArgs> navigate;

    public Optional<Output<BrowserMonitorScriptEventsEventNavigateArgs>> navigate() {
        return Optional.ofNullable(this.navigate);
    }

    @Import(name="select")
    private @Nullable Output<BrowserMonitorScriptEventsEventSelectArgs> select;

    public Optional<Output<BrowserMonitorScriptEventsEventSelectArgs>> select() {
        return Optional.ofNullable(this.select);
    }

    @Import(name="tap")
    private @Nullable Output<BrowserMonitorScriptEventsEventTapArgs> tap;

    public Optional<Output<BrowserMonitorScriptEventsEventTapArgs>> tap() {
        return Optional.ofNullable(this.tap);
    }

    private BrowserMonitorScriptEventsEventArgs() {}

    private BrowserMonitorScriptEventsEventArgs(BrowserMonitorScriptEventsEventArgs $) {
        this.click = $.click;
        this.cookie = $.cookie;
        this.description = $.description;
        this.javascript = $.javascript;
        this.keystrokes = $.keystrokes;
        this.navigate = $.navigate;
        this.select = $.select;
        this.tap = $.tap;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrowserMonitorScriptEventsEventArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrowserMonitorScriptEventsEventArgs $;

        public Builder() {
            $ = new BrowserMonitorScriptEventsEventArgs();
        }

        public Builder(BrowserMonitorScriptEventsEventArgs defaults) {
            $ = new BrowserMonitorScriptEventsEventArgs(Objects.requireNonNull(defaults));
        }

        public Builder click(@Nullable Output<BrowserMonitorScriptEventsEventClickArgs> click) {
            $.click = click;
            return this;
        }

        public Builder click(BrowserMonitorScriptEventsEventClickArgs click) {
            return click(Output.of(click));
        }

        public Builder cookie(@Nullable Output<BrowserMonitorScriptEventsEventCookieArgs> cookie) {
            $.cookie = cookie;
            return this;
        }

        public Builder cookie(BrowserMonitorScriptEventsEventCookieArgs cookie) {
            return cookie(Output.of(cookie));
        }

        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder javascript(@Nullable Output<BrowserMonitorScriptEventsEventJavascriptArgs> javascript) {
            $.javascript = javascript;
            return this;
        }

        public Builder javascript(BrowserMonitorScriptEventsEventJavascriptArgs javascript) {
            return javascript(Output.of(javascript));
        }

        public Builder keystrokes(@Nullable Output<BrowserMonitorScriptEventsEventKeystrokesArgs> keystrokes) {
            $.keystrokes = keystrokes;
            return this;
        }

        public Builder keystrokes(BrowserMonitorScriptEventsEventKeystrokesArgs keystrokes) {
            return keystrokes(Output.of(keystrokes));
        }

        public Builder navigate(@Nullable Output<BrowserMonitorScriptEventsEventNavigateArgs> navigate) {
            $.navigate = navigate;
            return this;
        }

        public Builder navigate(BrowserMonitorScriptEventsEventNavigateArgs navigate) {
            return navigate(Output.of(navigate));
        }

        public Builder select(@Nullable Output<BrowserMonitorScriptEventsEventSelectArgs> select) {
            $.select = select;
            return this;
        }

        public Builder select(BrowserMonitorScriptEventsEventSelectArgs select) {
            return select(Output.of(select));
        }

        public Builder tap(@Nullable Output<BrowserMonitorScriptEventsEventTapArgs> tap) {
            $.tap = tap;
            return this;
        }

        public Builder tap(BrowserMonitorScriptEventsEventTapArgs tap) {
            return tap(Output.of(tap));
        }

        public BrowserMonitorScriptEventsEventArgs build() {
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            return $;
        }
    }

}
