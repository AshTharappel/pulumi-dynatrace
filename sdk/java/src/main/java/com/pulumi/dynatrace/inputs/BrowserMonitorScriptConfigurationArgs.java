// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptConfigurationBandwidthArgs;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptConfigurationCookiesArgs;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptConfigurationDeviceArgs;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptConfigurationHeadersArgs;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptConfigurationIgnoredErrorCodesArgs;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptConfigurationJavascriptSetttingsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BrowserMonitorScriptConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final BrowserMonitorScriptConfigurationArgs Empty = new BrowserMonitorScriptConfigurationArgs();

    @Import(name="bandwidth")
    private @Nullable Output<BrowserMonitorScriptConfigurationBandwidthArgs> bandwidth;

    public Optional<Output<BrowserMonitorScriptConfigurationBandwidthArgs>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    @Import(name="blocks")
    private @Nullable Output<List<String>> blocks;

    public Optional<Output<List<String>>> blocks() {
        return Optional.ofNullable(this.blocks);
    }

    @Import(name="bypassCsp")
    private @Nullable Output<Boolean> bypassCsp;

    public Optional<Output<Boolean>> bypassCsp() {
        return Optional.ofNullable(this.bypassCsp);
    }

    @Import(name="cookies")
    private @Nullable Output<BrowserMonitorScriptConfigurationCookiesArgs> cookies;

    public Optional<Output<BrowserMonitorScriptConfigurationCookiesArgs>> cookies() {
        return Optional.ofNullable(this.cookies);
    }

    @Import(name="device")
    private @Nullable Output<BrowserMonitorScriptConfigurationDeviceArgs> device;

    public Optional<Output<BrowserMonitorScriptConfigurationDeviceArgs>> device() {
        return Optional.ofNullable(this.device);
    }

    @Import(name="disableWebSecurity")
    private @Nullable Output<Boolean> disableWebSecurity;

    public Optional<Output<Boolean>> disableWebSecurity() {
        return Optional.ofNullable(this.disableWebSecurity);
    }

    @Import(name="headers")
    private @Nullable Output<BrowserMonitorScriptConfigurationHeadersArgs> headers;

    public Optional<Output<BrowserMonitorScriptConfigurationHeadersArgs>> headers() {
        return Optional.ofNullable(this.headers);
    }

    @Import(name="ignoredErrorCodes")
    private @Nullable Output<BrowserMonitorScriptConfigurationIgnoredErrorCodesArgs> ignoredErrorCodes;

    public Optional<Output<BrowserMonitorScriptConfigurationIgnoredErrorCodesArgs>> ignoredErrorCodes() {
        return Optional.ofNullable(this.ignoredErrorCodes);
    }

    @Import(name="javascriptSetttings")
    private @Nullable Output<BrowserMonitorScriptConfigurationJavascriptSetttingsArgs> javascriptSetttings;

    public Optional<Output<BrowserMonitorScriptConfigurationJavascriptSetttingsArgs>> javascriptSetttings() {
        return Optional.ofNullable(this.javascriptSetttings);
    }

    @Import(name="monitorFrames")
    private @Nullable Output<Boolean> monitorFrames;

    public Optional<Output<Boolean>> monitorFrames() {
        return Optional.ofNullable(this.monitorFrames);
    }

    @Import(name="userAgent")
    private @Nullable Output<String> userAgent;

    public Optional<Output<String>> userAgent() {
        return Optional.ofNullable(this.userAgent);
    }

    private BrowserMonitorScriptConfigurationArgs() {}

    private BrowserMonitorScriptConfigurationArgs(BrowserMonitorScriptConfigurationArgs $) {
        this.bandwidth = $.bandwidth;
        this.blocks = $.blocks;
        this.bypassCsp = $.bypassCsp;
        this.cookies = $.cookies;
        this.device = $.device;
        this.disableWebSecurity = $.disableWebSecurity;
        this.headers = $.headers;
        this.ignoredErrorCodes = $.ignoredErrorCodes;
        this.javascriptSetttings = $.javascriptSetttings;
        this.monitorFrames = $.monitorFrames;
        this.userAgent = $.userAgent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrowserMonitorScriptConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrowserMonitorScriptConfigurationArgs $;

        public Builder() {
            $ = new BrowserMonitorScriptConfigurationArgs();
        }

        public Builder(BrowserMonitorScriptConfigurationArgs defaults) {
            $ = new BrowserMonitorScriptConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder bandwidth(@Nullable Output<BrowserMonitorScriptConfigurationBandwidthArgs> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        public Builder bandwidth(BrowserMonitorScriptConfigurationBandwidthArgs bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        public Builder blocks(@Nullable Output<List<String>> blocks) {
            $.blocks = blocks;
            return this;
        }

        public Builder blocks(List<String> blocks) {
            return blocks(Output.of(blocks));
        }

        public Builder blocks(String... blocks) {
            return blocks(List.of(blocks));
        }

        public Builder bypassCsp(@Nullable Output<Boolean> bypassCsp) {
            $.bypassCsp = bypassCsp;
            return this;
        }

        public Builder bypassCsp(Boolean bypassCsp) {
            return bypassCsp(Output.of(bypassCsp));
        }

        public Builder cookies(@Nullable Output<BrowserMonitorScriptConfigurationCookiesArgs> cookies) {
            $.cookies = cookies;
            return this;
        }

        public Builder cookies(BrowserMonitorScriptConfigurationCookiesArgs cookies) {
            return cookies(Output.of(cookies));
        }

        public Builder device(@Nullable Output<BrowserMonitorScriptConfigurationDeviceArgs> device) {
            $.device = device;
            return this;
        }

        public Builder device(BrowserMonitorScriptConfigurationDeviceArgs device) {
            return device(Output.of(device));
        }

        public Builder disableWebSecurity(@Nullable Output<Boolean> disableWebSecurity) {
            $.disableWebSecurity = disableWebSecurity;
            return this;
        }

        public Builder disableWebSecurity(Boolean disableWebSecurity) {
            return disableWebSecurity(Output.of(disableWebSecurity));
        }

        public Builder headers(@Nullable Output<BrowserMonitorScriptConfigurationHeadersArgs> headers) {
            $.headers = headers;
            return this;
        }

        public Builder headers(BrowserMonitorScriptConfigurationHeadersArgs headers) {
            return headers(Output.of(headers));
        }

        public Builder ignoredErrorCodes(@Nullable Output<BrowserMonitorScriptConfigurationIgnoredErrorCodesArgs> ignoredErrorCodes) {
            $.ignoredErrorCodes = ignoredErrorCodes;
            return this;
        }

        public Builder ignoredErrorCodes(BrowserMonitorScriptConfigurationIgnoredErrorCodesArgs ignoredErrorCodes) {
            return ignoredErrorCodes(Output.of(ignoredErrorCodes));
        }

        public Builder javascriptSetttings(@Nullable Output<BrowserMonitorScriptConfigurationJavascriptSetttingsArgs> javascriptSetttings) {
            $.javascriptSetttings = javascriptSetttings;
            return this;
        }

        public Builder javascriptSetttings(BrowserMonitorScriptConfigurationJavascriptSetttingsArgs javascriptSetttings) {
            return javascriptSetttings(Output.of(javascriptSetttings));
        }

        public Builder monitorFrames(@Nullable Output<Boolean> monitorFrames) {
            $.monitorFrames = monitorFrames;
            return this;
        }

        public Builder monitorFrames(Boolean monitorFrames) {
            return monitorFrames(Output.of(monitorFrames));
        }

        public Builder userAgent(@Nullable Output<String> userAgent) {
            $.userAgent = userAgent;
            return this;
        }

        public Builder userAgent(String userAgent) {
            return userAgent(Output.of(userAgent));
        }

        public BrowserMonitorScriptConfigurationArgs build() {
            return $;
        }
    }

}
