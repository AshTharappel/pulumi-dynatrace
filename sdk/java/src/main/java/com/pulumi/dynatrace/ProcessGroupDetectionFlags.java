// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.ProcessGroupDetectionFlagsArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.ProcessGroupDetectionFlagsState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/processGroupDetectionFlags:ProcessGroupDetectionFlags")
public class ProcessGroupDetectionFlags extends com.pulumi.resources.CustomResource {
    /**
     * In older versions, Node.js applications were distinguished based on their directory name, omitting the script name. Changing this setting may change the general handling of Node.js process groups. Leave unchanged if in doubt.
     * 
     */
    @Export(name="addNodeJsScriptName", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> addNodeJsScriptName;

    /**
     * @return In older versions, Node.js applications were distinguished based on their directory name, omitting the script name. Changing this setting may change the general handling of Node.js process groups. Leave unchanged if in doubt.
     * 
     */
    public Output<Boolean> addNodeJsScriptName() {
        return this.addNodeJsScriptName;
    }
    /**
     * Enabling this flag will detect separate Cassandra process groups based on the configured Cassandra cluster name.
     * 
     */
    @Export(name="autoDetectCassandraClusters", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> autoDetectCassandraClusters;

    /**
     * @return Enabling this flag will detect separate Cassandra process groups based on the configured Cassandra cluster name.
     * 
     */
    public Output<Boolean> autoDetectCassandraClusters() {
        return this.autoDetectCassandraClusters;
    }
    /**
     * Enabling this flag will detect Spring Boot process groups based on command line and applications&#39; configuration files.
     * 
     */
    @Export(name="autoDetectSpringBoot", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> autoDetectSpringBoot;

    /**
     * @return Enabling this flag will detect Spring Boot process groups based on command line and applications&#39; configuration files.
     * 
     */
    public Output<Boolean> autoDetectSpringBoot() {
        return this.autoDetectSpringBoot;
    }
    /**
     * Enabling this flag will detect separate TIBCO BusinessWorks process groups per engine property file.
     * 
     */
    @Export(name="autoDetectTibcoContainerEditionEngines", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> autoDetectTibcoContainerEditionEngines;

    /**
     * @return Enabling this flag will detect separate TIBCO BusinessWorks process groups per engine property file.
     * 
     */
    public Output<Boolean> autoDetectTibcoContainerEditionEngines() {
        return this.autoDetectTibcoContainerEditionEngines;
    }
    /**
     * Enabling this flag will detect separate TIBCO BusinessWorks process groups per engine property file.
     * 
     */
    @Export(name="autoDetectTibcoEngines", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> autoDetectTibcoEngines;

    /**
     * @return Enabling this flag will detect separate TIBCO BusinessWorks process groups per engine property file.
     * 
     */
    public Output<Boolean> autoDetectTibcoEngines() {
        return this.autoDetectTibcoEngines;
    }
    /**
     * Enabling this flag will detect webMethods Integration Server including specific properties like install root and product name.
     * 
     */
    @Export(name="autoDetectWebMethodsIntegrationServer", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> autoDetectWebMethodsIntegrationServer;

    /**
     * @return Enabling this flag will detect webMethods Integration Server including specific properties like install root and product name.
     * 
     */
    public Output<Boolean> autoDetectWebMethodsIntegrationServer() {
        return this.autoDetectWebMethodsIntegrationServer;
    }
    /**
     * Enabling this flag will detect separate WebSphere Liberty process groups based on java command line.
     * 
     */
    @Export(name="autoDetectWebSphereLibertyApplication", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> autoDetectWebSphereLibertyApplication;

    /**
     * @return Enabling this flag will detect separate WebSphere Liberty process groups based on java command line.
     * 
     */
    public Output<Boolean> autoDetectWebSphereLibertyApplication() {
        return this.autoDetectWebSphereLibertyApplication;
    }
    /**
     * Enable to group and separately analyze the processes of each IBM MQ Queue manager instance. Each process group receives a unique name based on the queue manager instance name.
     * 
     */
    @Export(name="groupIbmmqbyInstanceName", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> groupIbmmqbyInstanceName;

    /**
     * @return Enable to group and separately analyze the processes of each IBM MQ Queue manager instance. Each process group receives a unique name based on the queue manager instance name.
     * 
     */
    public Output<Boolean> groupIbmmqbyInstanceName() {
        return this.groupIbmmqbyInstanceName;
    }
    /**
     * Enabling this flag will detect the JBoss server name from the system property jboss.server.name=\n\n, only if -D[Server:\n\n] is not set.
     * 
     */
    @Export(name="identifyJbossServerBySystemProperty", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> identifyJbossServerBySystemProperty;

    /**
     * @return Enabling this flag will detect the JBoss server name from the system property jboss.server.name=\n\n, only if -D[Server:\n\n] is not set.
     * 
     */
    public Output<Boolean> identifyJbossServerBySystemProperty() {
        return this.identifyJbossServerBySystemProperty;
    }
    /**
     * To determine the unique identity of each detected process, and to generate a unique name for each detected process, Dynatrace evaluates the name of the directory that each process binary is contained within. For application containers like Tomcat and JBoss, Dynatrace evaluates important directories like CATALINA*HOME and JBOSS*HOME for this information. In some automated deployment scenarios such directory names are updated automatically with new version numbers, build numbers, dates, or GUIDs. Enable this setting to ensure that automated directory name changes don&#39;t result in Dynatrace registering pre-existing processes as new processes.
     * 
     */
    @Export(name="ignoreUniqueIdentifiers", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> ignoreUniqueIdentifiers;

    /**
     * @return To determine the unique identity of each detected process, and to generate a unique name for each detected process, Dynatrace evaluates the name of the directory that each process binary is contained within. For application containers like Tomcat and JBoss, Dynatrace evaluates important directories like CATALINA*HOME and JBOSS*HOME for this information. In some automated deployment scenarios such directory names are updated automatically with new version numbers, build numbers, dates, or GUIDs. Enable this setting to ensure that automated directory name changes don&#39;t result in Dynatrace registering pre-existing processes as new processes.
     * 
     */
    public Output<Boolean> ignoreUniqueIdentifiers() {
        return this.ignoreUniqueIdentifiers;
    }
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     * 
     */
    @Export(name="scope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scope;

    /**
     * @return The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     * 
     */
    public Output<Optional<String>> scope() {
        return Codegen.optional(this.scope);
    }
    /**
     * Enable to monitor CPU and memory usage of short lived processes, otherwise being lost by traditional monitoring. Disabling this flag blocks passing data to cluster only, it does not stop data collection and has no effect on performance.
     * 
     */
    @Export(name="shortLivedProcessesMonitoring", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> shortLivedProcessesMonitoring;

    /**
     * @return Enable to monitor CPU and memory usage of short lived processes, otherwise being lost by traditional monitoring. Disabling this flag blocks passing data to cluster only, it does not stop data collection and has no effect on performance.
     * 
     */
    public Output<Boolean> shortLivedProcessesMonitoring() {
        return this.shortLivedProcessesMonitoring;
    }
    /**
     * Enable to group and separately analyze the processes of each Oracle DB. Each process group receives a unique name based on the Oracle DB SID.
     * 
     */
    @Export(name="splitOracleDatabasePg", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> splitOracleDatabasePg;

    /**
     * @return Enable to group and separately analyze the processes of each Oracle DB. Each process group receives a unique name based on the Oracle DB SID.
     * 
     */
    public Output<Boolean> splitOracleDatabasePg() {
        return this.splitOracleDatabasePg;
    }
    /**
     * Enable to group and separately analyze the processes of each Oracle Listener. Each process group receives a unique name based on the Oracle Listener name.
     * 
     */
    @Export(name="splitOracleListenerPg", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> splitOracleListenerPg;

    /**
     * @return Enable to group and separately analyze the processes of each Oracle Listener. Each process group receives a unique name based on the Oracle Listener name.
     * 
     */
    public Output<Boolean> splitOracleListenerPg() {
        return this.splitOracleListenerPg;
    }
    /**
     * By default, Tomcat clusters are identified and named based on the CATALINA*HOME directory name. This setting results in the use of the CATALINA*BASE directory name to identify multiple Tomcat nodes within each Tomcat cluster. If this setting is not enabled, each CATALINA*HOME+CATALINA*BASE combination will be considered a separate Tomcat cluster. In other words, Tomcat clusters can&#39;t have multiple nodes on a single host.
     * 
     */
    @Export(name="useCatalinaBase", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> useCatalinaBase;

    /**
     * @return By default, Tomcat clusters are identified and named based on the CATALINA*HOME directory name. This setting results in the use of the CATALINA*BASE directory name to identify multiple Tomcat nodes within each Tomcat cluster. If this setting is not enabled, each CATALINA*HOME+CATALINA*BASE combination will be considered a separate Tomcat cluster. In other words, Tomcat clusters can&#39;t have multiple nodes on a single host.
     * 
     */
    public Output<Boolean> useCatalinaBase() {
        return this.useCatalinaBase;
    }
    /**
     * By default, Dynatrace uses image names as identifiers for individual process groups, with one process-group instance per host. Normally Docker container names can&#39;t serve as stable identifiers of process group instances because they are variable and auto-generated. You can however manually assign proper container names to their Docker instances. Such manually-assigned container names can serve as reliable process-group instance identifiers. This flag instructs Dynatrace to use Docker-provided names to distinguish between multiple instances of the same image. If this flag is not applied and you run multiple containers of the same image on the same host, the resulting processes will be consolidated into a single process view. Use this flag with caution!
     * 
     */
    @Export(name="useDockerContainerName", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> useDockerContainerName;

    /**
     * @return By default, Dynatrace uses image names as identifiers for individual process groups, with one process-group instance per host. Normally Docker container names can&#39;t serve as stable identifiers of process group instances because they are variable and auto-generated. You can however manually assign proper container names to their Docker instances. Such manually-assigned container names can serve as reliable process-group instance identifiers. This flag instructs Dynatrace to use Docker-provided names to distinguish between multiple instances of the same image. If this flag is not applied and you run multiple containers of the same image on the same host, the resulting processes will be consolidated into a single process view. Use this flag with caution!
     * 
     */
    public Output<Boolean> useDockerContainerName() {
        return this.useDockerContainerName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProcessGroupDetectionFlags(String name) {
        this(name, ProcessGroupDetectionFlagsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProcessGroupDetectionFlags(String name, ProcessGroupDetectionFlagsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProcessGroupDetectionFlags(String name, ProcessGroupDetectionFlagsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/processGroupDetectionFlags:ProcessGroupDetectionFlags", name, args == null ? ProcessGroupDetectionFlagsArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ProcessGroupDetectionFlags(String name, Output<String> id, @Nullable ProcessGroupDetectionFlagsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/processGroupDetectionFlags:ProcessGroupDetectionFlags", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProcessGroupDetectionFlags get(String name, Output<String> id, @Nullable ProcessGroupDetectionFlagsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProcessGroupDetectionFlags(name, id, state, options);
    }
}
