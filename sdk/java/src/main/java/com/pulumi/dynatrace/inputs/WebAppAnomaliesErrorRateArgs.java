// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.WebAppAnomaliesErrorRateErrorRateAutoArgs;
import com.pulumi.dynatrace.inputs.WebAppAnomaliesErrorRateErrorRateFixedArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebAppAnomaliesErrorRateArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebAppAnomaliesErrorRateArgs Empty = new WebAppAnomaliesErrorRateArgs();

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Alert if the percentage of failing user actions increases by **both** the absolute and relative thresholds:
     * 
     */
    @Import(name="errorRateAuto")
    private @Nullable Output<WebAppAnomaliesErrorRateErrorRateAutoArgs> errorRateAuto;

    /**
     * @return Alert if the percentage of failing user actions increases by **both** the absolute and relative thresholds:
     * 
     */
    public Optional<Output<WebAppAnomaliesErrorRateErrorRateAutoArgs>> errorRateAuto() {
        return Optional.ofNullable(this.errorRateAuto);
    }

    /**
     * Possible Values: `Auto`, `Fixed`
     * 
     */
    @Import(name="errorRateDetectionMode")
    private @Nullable Output<String> errorRateDetectionMode;

    /**
     * @return Possible Values: `Auto`, `Fixed`
     * 
     */
    public Optional<Output<String>> errorRateDetectionMode() {
        return Optional.ofNullable(this.errorRateDetectionMode);
    }

    /**
     * no documentation available
     * 
     */
    @Import(name="errorRateFixed")
    private @Nullable Output<WebAppAnomaliesErrorRateErrorRateFixedArgs> errorRateFixed;

    /**
     * @return no documentation available
     * 
     */
    public Optional<Output<WebAppAnomaliesErrorRateErrorRateFixedArgs>> errorRateFixed() {
        return Optional.ofNullable(this.errorRateFixed);
    }

    private WebAppAnomaliesErrorRateArgs() {}

    private WebAppAnomaliesErrorRateArgs(WebAppAnomaliesErrorRateArgs $) {
        this.enabled = $.enabled;
        this.errorRateAuto = $.errorRateAuto;
        this.errorRateDetectionMode = $.errorRateDetectionMode;
        this.errorRateFixed = $.errorRateFixed;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebAppAnomaliesErrorRateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebAppAnomaliesErrorRateArgs $;

        public Builder() {
            $ = new WebAppAnomaliesErrorRateArgs();
        }

        public Builder(WebAppAnomaliesErrorRateArgs defaults) {
            $ = new WebAppAnomaliesErrorRateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param errorRateAuto Alert if the percentage of failing user actions increases by **both** the absolute and relative thresholds:
         * 
         * @return builder
         * 
         */
        public Builder errorRateAuto(@Nullable Output<WebAppAnomaliesErrorRateErrorRateAutoArgs> errorRateAuto) {
            $.errorRateAuto = errorRateAuto;
            return this;
        }

        /**
         * @param errorRateAuto Alert if the percentage of failing user actions increases by **both** the absolute and relative thresholds:
         * 
         * @return builder
         * 
         */
        public Builder errorRateAuto(WebAppAnomaliesErrorRateErrorRateAutoArgs errorRateAuto) {
            return errorRateAuto(Output.of(errorRateAuto));
        }

        /**
         * @param errorRateDetectionMode Possible Values: `Auto`, `Fixed`
         * 
         * @return builder
         * 
         */
        public Builder errorRateDetectionMode(@Nullable Output<String> errorRateDetectionMode) {
            $.errorRateDetectionMode = errorRateDetectionMode;
            return this;
        }

        /**
         * @param errorRateDetectionMode Possible Values: `Auto`, `Fixed`
         * 
         * @return builder
         * 
         */
        public Builder errorRateDetectionMode(String errorRateDetectionMode) {
            return errorRateDetectionMode(Output.of(errorRateDetectionMode));
        }

        /**
         * @param errorRateFixed no documentation available
         * 
         * @return builder
         * 
         */
        public Builder errorRateFixed(@Nullable Output<WebAppAnomaliesErrorRateErrorRateFixedArgs> errorRateFixed) {
            $.errorRateFixed = errorRateFixed;
            return this;
        }

        /**
         * @param errorRateFixed no documentation available
         * 
         * @return builder
         * 
         */
        public Builder errorRateFixed(WebAppAnomaliesErrorRateErrorRateFixedArgs errorRateFixed) {
            return errorRateFixed(Output.of(errorRateFixed));
        }

        public WebAppAnomaliesErrorRateArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
