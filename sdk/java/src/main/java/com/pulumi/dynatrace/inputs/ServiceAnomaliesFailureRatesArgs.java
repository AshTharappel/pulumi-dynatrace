// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.ServiceAnomaliesFailureRatesAutoArgs;
import com.pulumi.dynatrace.inputs.ServiceAnomaliesFailureRatesThresholdsArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceAnomaliesFailureRatesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceAnomaliesFailureRatesArgs Empty = new ServiceAnomaliesFailureRatesArgs();

    /**
     * Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
     * 
     */
    @Import(name="auto")
    private @Nullable Output<ServiceAnomaliesFailureRatesAutoArgs> auto;

    /**
     * @return Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
     * 
     */
    public Optional<Output<ServiceAnomaliesFailureRatesAutoArgs>> auto() {
        return Optional.ofNullable(this.auto);
    }

    /**
     * Fixed thresholds for failure rate increase detection
     * 
     */
    @Import(name="thresholds")
    private @Nullable Output<ServiceAnomaliesFailureRatesThresholdsArgs> thresholds;

    /**
     * @return Fixed thresholds for failure rate increase detection
     * 
     */
    public Optional<Output<ServiceAnomaliesFailureRatesThresholdsArgs>> thresholds() {
        return Optional.ofNullable(this.thresholds);
    }

    private ServiceAnomaliesFailureRatesArgs() {}

    private ServiceAnomaliesFailureRatesArgs(ServiceAnomaliesFailureRatesArgs $) {
        this.auto = $.auto;
        this.thresholds = $.thresholds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceAnomaliesFailureRatesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceAnomaliesFailureRatesArgs $;

        public Builder() {
            $ = new ServiceAnomaliesFailureRatesArgs();
        }

        public Builder(ServiceAnomaliesFailureRatesArgs defaults) {
            $ = new ServiceAnomaliesFailureRatesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auto Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
         * 
         * @return builder
         * 
         */
        public Builder auto(@Nullable Output<ServiceAnomaliesFailureRatesAutoArgs> auto) {
            $.auto = auto;
            return this;
        }

        /**
         * @param auto Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
         * 
         * @return builder
         * 
         */
        public Builder auto(ServiceAnomaliesFailureRatesAutoArgs auto) {
            return auto(Output.of(auto));
        }

        /**
         * @param thresholds Fixed thresholds for failure rate increase detection
         * 
         * @return builder
         * 
         */
        public Builder thresholds(@Nullable Output<ServiceAnomaliesFailureRatesThresholdsArgs> thresholds) {
            $.thresholds = thresholds;
            return this;
        }

        /**
         * @param thresholds Fixed thresholds for failure rate increase detection
         * 
         * @return builder
         * 
         */
        public Builder thresholds(ServiceAnomaliesFailureRatesThresholdsArgs thresholds) {
            return thresholds(Output.of(thresholds));
        }

        public ServiceAnomaliesFailureRatesArgs build() {
            return $;
        }
    }

}
