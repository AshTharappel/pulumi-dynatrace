// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DatabaseAnomaliesDbConnectFailuresArgs;
import com.pulumi.dynatrace.inputs.DatabaseAnomaliesFailureRateArgs;
import com.pulumi.dynatrace.inputs.DatabaseAnomaliesLoadArgs;
import com.pulumi.dynatrace.inputs.DatabaseAnomaliesResponseTimeArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseAnomaliesState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseAnomaliesState Empty = new DatabaseAnomaliesState();

    /**
     * Parameters of the failed database connections detection.  The alert is triggered when failed connections number exceeds **connectionFailsCount** during any **timePeriodMinutes** minutes period
     * 
     */
    @Import(name="dbConnectFailures")
    private @Nullable Output<DatabaseAnomaliesDbConnectFailuresArgs> dbConnectFailures;

    /**
     * @return Parameters of the failed database connections detection.  The alert is triggered when failed connections number exceeds **connectionFailsCount** during any **timePeriodMinutes** minutes period
     * 
     */
    public Optional<Output<DatabaseAnomaliesDbConnectFailuresArgs>> dbConnectFailures() {
        return Optional.ofNullable(this.dbConnectFailures);
    }

    /**
     * Configuration of failure rate increase detection
     * 
     */
    @Import(name="failureRate")
    private @Nullable Output<DatabaseAnomaliesFailureRateArgs> failureRate;

    /**
     * @return Configuration of failure rate increase detection
     * 
     */
    public Optional<Output<DatabaseAnomaliesFailureRateArgs>> failureRate() {
        return Optional.ofNullable(this.failureRate);
    }

    /**
     * Configuration for anomalies regarding load drops and spikes
     * 
     */
    @Import(name="load")
    private @Nullable Output<DatabaseAnomaliesLoadArgs> load;

    /**
     * @return Configuration for anomalies regarding load drops and spikes
     * 
     */
    public Optional<Output<DatabaseAnomaliesLoadArgs>> load() {
        return Optional.ofNullable(this.load);
    }

    /**
     * Configuration of response time degradation detection
     * 
     */
    @Import(name="responseTime")
    private @Nullable Output<DatabaseAnomaliesResponseTimeArgs> responseTime;

    /**
     * @return Configuration of response time degradation detection
     * 
     */
    public Optional<Output<DatabaseAnomaliesResponseTimeArgs>> responseTime() {
        return Optional.ofNullable(this.responseTime);
    }

    private DatabaseAnomaliesState() {}

    private DatabaseAnomaliesState(DatabaseAnomaliesState $) {
        this.dbConnectFailures = $.dbConnectFailures;
        this.failureRate = $.failureRate;
        this.load = $.load;
        this.responseTime = $.responseTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseAnomaliesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseAnomaliesState $;

        public Builder() {
            $ = new DatabaseAnomaliesState();
        }

        public Builder(DatabaseAnomaliesState defaults) {
            $ = new DatabaseAnomaliesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dbConnectFailures Parameters of the failed database connections detection.  The alert is triggered when failed connections number exceeds **connectionFailsCount** during any **timePeriodMinutes** minutes period
         * 
         * @return builder
         * 
         */
        public Builder dbConnectFailures(@Nullable Output<DatabaseAnomaliesDbConnectFailuresArgs> dbConnectFailures) {
            $.dbConnectFailures = dbConnectFailures;
            return this;
        }

        /**
         * @param dbConnectFailures Parameters of the failed database connections detection.  The alert is triggered when failed connections number exceeds **connectionFailsCount** during any **timePeriodMinutes** minutes period
         * 
         * @return builder
         * 
         */
        public Builder dbConnectFailures(DatabaseAnomaliesDbConnectFailuresArgs dbConnectFailures) {
            return dbConnectFailures(Output.of(dbConnectFailures));
        }

        /**
         * @param failureRate Configuration of failure rate increase detection
         * 
         * @return builder
         * 
         */
        public Builder failureRate(@Nullable Output<DatabaseAnomaliesFailureRateArgs> failureRate) {
            $.failureRate = failureRate;
            return this;
        }

        /**
         * @param failureRate Configuration of failure rate increase detection
         * 
         * @return builder
         * 
         */
        public Builder failureRate(DatabaseAnomaliesFailureRateArgs failureRate) {
            return failureRate(Output.of(failureRate));
        }

        /**
         * @param load Configuration for anomalies regarding load drops and spikes
         * 
         * @return builder
         * 
         */
        public Builder load(@Nullable Output<DatabaseAnomaliesLoadArgs> load) {
            $.load = load;
            return this;
        }

        /**
         * @param load Configuration for anomalies regarding load drops and spikes
         * 
         * @return builder
         * 
         */
        public Builder load(DatabaseAnomaliesLoadArgs load) {
            return load(Output.of(load));
        }

        /**
         * @param responseTime Configuration of response time degradation detection
         * 
         * @return builder
         * 
         */
        public Builder responseTime(@Nullable Output<DatabaseAnomaliesResponseTimeArgs> responseTime) {
            $.responseTime = responseTime;
            return this;
        }

        /**
         * @param responseTime Configuration of response time degradation detection
         * 
         * @return builder
         * 
         */
        public Builder responseTime(DatabaseAnomaliesResponseTimeArgs responseTime) {
            return responseTime(Output.of(responseTime));
        }

        public DatabaseAnomaliesState build() {
            return $;
        }
    }

}
