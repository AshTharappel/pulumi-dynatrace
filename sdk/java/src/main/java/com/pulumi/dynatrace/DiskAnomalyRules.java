// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.DiskAnomalyRulesArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.DiskAnomalyRulesState;
import com.pulumi.dynatrace.outputs.DiskAnomalyRulesDiskNameFilter;
import com.pulumi.dynatrace.outputs.DiskAnomalyRulesSampleLimit;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/diskAnomalyRules:DiskAnomalyRules")
public class DiskAnomalyRules extends com.pulumi.resources.CustomResource {
    /**
     * Only apply to disks whose name matches
     * 
     */
    @Export(name="diskNameFilter", refs={DiskAnomalyRulesDiskNameFilter.class}, tree="[0]")
    private Output<DiskAnomalyRulesDiskNameFilter> diskNameFilter;

    /**
     * @return Only apply to disks whose name matches
     * 
     */
    public Output<DiskAnomalyRulesDiskNameFilter> diskNameFilter() {
        return this.diskNameFilter;
    }
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
     * 
     */
    @Export(name="hostGroupId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hostGroupId;

    /**
     * @return The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
     * 
     */
    public Output<Optional<String>> hostGroupId() {
        return Codegen.optional(this.hostGroupId);
    }
    /**
     * Possible Values: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING`, `WRITE_TIME_EXCEEDING`
     * 
     */
    @Export(name="metric", refs={String.class}, tree="[0]")
    private Output<String> metric;

    /**
     * @return Possible Values: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING`, `WRITE_TIME_EXCEEDING`
     * 
     */
    public Output<String> metric() {
        return this.metric;
    }
    /**
     * Name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Only alert if the threshold was violated in at least *n* of the last *m* samples
     * 
     */
    @Export(name="sampleLimit", refs={DiskAnomalyRulesSampleLimit.class}, tree="[0]")
    private Output<DiskAnomalyRulesSampleLimit> sampleLimit;

    /**
     * @return Only alert if the threshold was violated in at least *n* of the last *m* samples
     * 
     */
    public Output<DiskAnomalyRulesSampleLimit> sampleLimit() {
        return this.sampleLimit;
    }
    /**
     * Only apply to hosts that have the following tags
     * 
     */
    @Export(name="tagFilters", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tagFilters;

    /**
     * @return Only apply to hosts that have the following tags
     * 
     */
    public Output<Optional<List<String>>> tagFilters() {
        return Codegen.optional(this.tagFilters);
    }
    /**
     * Alert if higher than
     * 
     */
    @Export(name="thresholdMilliseconds", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> thresholdMilliseconds;

    /**
     * @return Alert if higher than
     * 
     */
    public Output<Optional<Double>> thresholdMilliseconds() {
        return Codegen.optional(this.thresholdMilliseconds);
    }
    /**
     * Alert if lower than
     * 
     */
    @Export(name="thresholdPercent", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> thresholdPercent;

    /**
     * @return Alert if lower than
     * 
     */
    public Output<Optional<Double>> thresholdPercent() {
        return Codegen.optional(this.thresholdPercent);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DiskAnomalyRules(String name) {
        this(name, DiskAnomalyRulesArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DiskAnomalyRules(String name, DiskAnomalyRulesArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DiskAnomalyRules(String name, DiskAnomalyRulesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/diskAnomalyRules:DiskAnomalyRules", name, args == null ? DiskAnomalyRulesArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DiskAnomalyRules(String name, Output<String> id, @Nullable DiskAnomalyRulesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/diskAnomalyRules:DiskAnomalyRules", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DiskAnomalyRules get(String name, Output<String> id, @Nullable DiskAnomalyRulesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DiskAnomalyRules(name, id, state, options);
    }
}
