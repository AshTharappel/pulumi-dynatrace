// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.HttpMonitorScriptRequestArgs;
import java.util.List;
import java.util.Objects;


public final class HttpMonitorScriptArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpMonitorScriptArgs Empty = new HttpMonitorScriptArgs();

    /**
     * A HTTP request to be performed by the monitor.
     * 
     */
    @Import(name="requests", required=true)
    private Output<List<HttpMonitorScriptRequestArgs>> requests;

    /**
     * @return A HTTP request to be performed by the monitor.
     * 
     */
    public Output<List<HttpMonitorScriptRequestArgs>> requests() {
        return this.requests;
    }

    private HttpMonitorScriptArgs() {}

    private HttpMonitorScriptArgs(HttpMonitorScriptArgs $) {
        this.requests = $.requests;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpMonitorScriptArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpMonitorScriptArgs $;

        public Builder() {
            $ = new HttpMonitorScriptArgs();
        }

        public Builder(HttpMonitorScriptArgs defaults) {
            $ = new HttpMonitorScriptArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param requests A HTTP request to be performed by the monitor.
         * 
         * @return builder
         * 
         */
        public Builder requests(Output<List<HttpMonitorScriptRequestArgs>> requests) {
            $.requests = requests;
            return this;
        }

        /**
         * @param requests A HTTP request to be performed by the monitor.
         * 
         * @return builder
         * 
         */
        public Builder requests(List<HttpMonitorScriptRequestArgs> requests) {
            return requests(Output.of(requests));
        }

        /**
         * @param requests A HTTP request to be performed by the monitor.
         * 
         * @return builder
         * 
         */
        public Builder requests(HttpMonitorScriptRequestArgs... requests) {
            return requests(List.of(requests));
        }

        public HttpMonitorScriptArgs build() {
            $.requests = Objects.requireNonNull($.requests, "expected parameter 'requests' to be non-null");
            return $;
        }
    }

}
