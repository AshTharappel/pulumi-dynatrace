// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomUnitsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomUnitsArgs Empty = new CustomUnitsArgs();

    /**
     * Unit description should provide additional information about the new unit
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Unit description should provide additional information about the new unit
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Unit name has to be unique and is used as identifier.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Unit name has to be unique and is used as identifier.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unit plural name represent the plural form of the unit name.
     * 
     */
    @Import(name="pluralName", required=true)
    private Output<String> pluralName;

    /**
     * @return Unit plural name represent the plural form of the unit name.
     * 
     */
    public Output<String> pluralName() {
        return this.pluralName;
    }

    /**
     * Unit symbol has to be unique.
     * 
     */
    @Import(name="symbol", required=true)
    private Output<String> symbol;

    /**
     * @return Unit symbol has to be unique.
     * 
     */
    public Output<String> symbol() {
        return this.symbol;
    }

    private CustomUnitsArgs() {}

    private CustomUnitsArgs(CustomUnitsArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.pluralName = $.pluralName;
        this.symbol = $.symbol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomUnitsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomUnitsArgs $;

        public Builder() {
            $ = new CustomUnitsArgs();
        }

        public Builder(CustomUnitsArgs defaults) {
            $ = new CustomUnitsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Unit description should provide additional information about the new unit
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Unit description should provide additional information about the new unit
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Unit name has to be unique and is used as identifier.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Unit name has to be unique and is used as identifier.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pluralName Unit plural name represent the plural form of the unit name.
         * 
         * @return builder
         * 
         */
        public Builder pluralName(Output<String> pluralName) {
            $.pluralName = pluralName;
            return this;
        }

        /**
         * @param pluralName Unit plural name represent the plural form of the unit name.
         * 
         * @return builder
         * 
         */
        public Builder pluralName(String pluralName) {
            return pluralName(Output.of(pluralName));
        }

        /**
         * @param symbol Unit symbol has to be unique.
         * 
         * @return builder
         * 
         */
        public Builder symbol(Output<String> symbol) {
            $.symbol = symbol;
            return this;
        }

        /**
         * @param symbol Unit symbol has to be unique.
         * 
         * @return builder
         * 
         */
        public Builder symbol(String symbol) {
            return symbol(Output.of(symbol));
        }

        public CustomUnitsArgs build() {
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.pluralName = Objects.requireNonNull($.pluralName, "expected parameter 'pluralName' to be non-null");
            $.symbol = Objects.requireNonNull($.symbol, "expected parameter 'symbol' to be non-null");
            return $;
        }
    }

}
