// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dynatrace.outputs.CustomServiceRuleClass;
import com.pulumi.dynatrace.outputs.CustomServiceRuleFile;
import com.pulumi.dynatrace.outputs.CustomServiceRuleMethod;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CustomServiceRule {
    /**
     * @return Additional annotations filter of the rule. Only classes where all listed annotations are available in the class itself or any of its superclasses are instrumented. Not applicable to PHP
     * 
     */
    private @Nullable List<String> annotations;
    /**
     * @return The fully qualified class or interface to instrument (or a substring if matching to a string). Required for Java and .NET custom services. Not applicable to PHP
     * 
     */
    private @Nullable CustomServiceRuleClass class_;
    /**
     * @return Rule enabled/disabled
     * 
     */
    private Boolean enabled;
    /**
     * @return The PHP file containing the class or methods to instrument. Required for PHP custom service. Not applicable to Java and .NET
     * 
     */
    private @Nullable CustomServiceRuleFile file;
    /**
     * @return methods to instrument
     * 
     */
    private List<CustomServiceRuleMethod> methods;
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    private @Nullable String unknowns;

    private CustomServiceRule() {}
    /**
     * @return Additional annotations filter of the rule. Only classes where all listed annotations are available in the class itself or any of its superclasses are instrumented. Not applicable to PHP
     * 
     */
    public List<String> annotations() {
        return this.annotations == null ? List.of() : this.annotations;
    }
    /**
     * @return The fully qualified class or interface to instrument (or a substring if matching to a string). Required for Java and .NET custom services. Not applicable to PHP
     * 
     */
    public Optional<CustomServiceRuleClass> class_() {
        return Optional.ofNullable(this.class_);
    }
    /**
     * @return Rule enabled/disabled
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The PHP file containing the class or methods to instrument. Required for PHP custom service. Not applicable to Java and .NET
     * 
     */
    public Optional<CustomServiceRuleFile> file() {
        return Optional.ofNullable(this.file);
    }
    /**
     * @return methods to instrument
     * 
     */
    public List<CustomServiceRuleMethod> methods() {
        return this.methods;
    }
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<String> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomServiceRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> annotations;
        private @Nullable CustomServiceRuleClass class_;
        private Boolean enabled;
        private @Nullable CustomServiceRuleFile file;
        private List<CustomServiceRuleMethod> methods;
        private @Nullable String unknowns;
        public Builder() {}
        public Builder(CustomServiceRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.class_ = defaults.class_;
    	      this.enabled = defaults.enabled;
    	      this.file = defaults.file;
    	      this.methods = defaults.methods;
    	      this.unknowns = defaults.unknowns;
        }

        @CustomType.Setter
        public Builder annotations(@Nullable List<String> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(String... annotations) {
            return annotations(List.of(annotations));
        }
        @CustomType.Setter("class")
        public Builder class_(@Nullable CustomServiceRuleClass class_) {
            this.class_ = class_;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        @CustomType.Setter
        public Builder file(@Nullable CustomServiceRuleFile file) {
            this.file = file;
            return this;
        }
        @CustomType.Setter
        public Builder methods(List<CustomServiceRuleMethod> methods) {
            this.methods = Objects.requireNonNull(methods);
            return this;
        }
        public Builder methods(CustomServiceRuleMethod... methods) {
            return methods(List.of(methods));
        }
        @CustomType.Setter
        public Builder unknowns(@Nullable String unknowns) {
            this.unknowns = unknowns;
            return this;
        }
        public CustomServiceRule build() {
            final var o = new CustomServiceRule();
            o.annotations = annotations;
            o.class_ = class_;
            o.enabled = enabled;
            o.file = file;
            o.methods = methods;
            o.unknowns = unknowns;
            return o;
        }
    }
}
