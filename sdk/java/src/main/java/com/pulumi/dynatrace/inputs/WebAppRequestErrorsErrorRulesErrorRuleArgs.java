// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.WebAppRequestErrorsErrorRulesErrorRuleCaptureSettingsArgs;
import com.pulumi.dynatrace.inputs.WebAppRequestErrorsErrorRulesErrorRuleFilterSettingsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebAppRequestErrorsErrorRulesErrorRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebAppRequestErrorsErrorRulesErrorRuleArgs Empty = new WebAppRequestErrorsErrorRulesErrorRuleArgs();

    @Import(name="captureSettings", required=true)
    private Output<WebAppRequestErrorsErrorRulesErrorRuleCaptureSettingsArgs> captureSettings;

    public Output<WebAppRequestErrorsErrorRulesErrorRuleCaptureSettingsArgs> captureSettings() {
        return this.captureSettings;
    }

    @Import(name="considerCspViolations", required=true)
    private Output<Boolean> considerCspViolations;

    public Output<Boolean> considerCspViolations() {
        return this.considerCspViolations;
    }

    @Import(name="considerFailedImages", required=true)
    private Output<Boolean> considerFailedImages;

    public Output<Boolean> considerFailedImages() {
        return this.considerFailedImages;
    }

    @Import(name="errorCodes")
    private @Nullable Output<String> errorCodes;

    public Optional<Output<String>> errorCodes() {
        return Optional.ofNullable(this.errorCodes);
    }

    @Import(name="filterSettings", required=true)
    private Output<WebAppRequestErrorsErrorRulesErrorRuleFilterSettingsArgs> filterSettings;

    public Output<WebAppRequestErrorsErrorRulesErrorRuleFilterSettingsArgs> filterSettings() {
        return this.filterSettings;
    }

    private WebAppRequestErrorsErrorRulesErrorRuleArgs() {}

    private WebAppRequestErrorsErrorRulesErrorRuleArgs(WebAppRequestErrorsErrorRulesErrorRuleArgs $) {
        this.captureSettings = $.captureSettings;
        this.considerCspViolations = $.considerCspViolations;
        this.considerFailedImages = $.considerFailedImages;
        this.errorCodes = $.errorCodes;
        this.filterSettings = $.filterSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebAppRequestErrorsErrorRulesErrorRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebAppRequestErrorsErrorRulesErrorRuleArgs $;

        public Builder() {
            $ = new WebAppRequestErrorsErrorRulesErrorRuleArgs();
        }

        public Builder(WebAppRequestErrorsErrorRulesErrorRuleArgs defaults) {
            $ = new WebAppRequestErrorsErrorRulesErrorRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder captureSettings(Output<WebAppRequestErrorsErrorRulesErrorRuleCaptureSettingsArgs> captureSettings) {
            $.captureSettings = captureSettings;
            return this;
        }

        public Builder captureSettings(WebAppRequestErrorsErrorRulesErrorRuleCaptureSettingsArgs captureSettings) {
            return captureSettings(Output.of(captureSettings));
        }

        public Builder considerCspViolations(Output<Boolean> considerCspViolations) {
            $.considerCspViolations = considerCspViolations;
            return this;
        }

        public Builder considerCspViolations(Boolean considerCspViolations) {
            return considerCspViolations(Output.of(considerCspViolations));
        }

        public Builder considerFailedImages(Output<Boolean> considerFailedImages) {
            $.considerFailedImages = considerFailedImages;
            return this;
        }

        public Builder considerFailedImages(Boolean considerFailedImages) {
            return considerFailedImages(Output.of(considerFailedImages));
        }

        public Builder errorCodes(@Nullable Output<String> errorCodes) {
            $.errorCodes = errorCodes;
            return this;
        }

        public Builder errorCodes(String errorCodes) {
            return errorCodes(Output.of(errorCodes));
        }

        public Builder filterSettings(Output<WebAppRequestErrorsErrorRulesErrorRuleFilterSettingsArgs> filterSettings) {
            $.filterSettings = filterSettings;
            return this;
        }

        public Builder filterSettings(WebAppRequestErrorsErrorRulesErrorRuleFilterSettingsArgs filterSettings) {
            return filterSettings(Output.of(filterSettings));
        }

        public WebAppRequestErrorsErrorRulesErrorRuleArgs build() {
            $.captureSettings = Objects.requireNonNull($.captureSettings, "expected parameter 'captureSettings' to be non-null");
            $.considerCspViolations = Objects.requireNonNull($.considerCspViolations, "expected parameter 'considerCspViolations' to be non-null");
            $.considerFailedImages = Objects.requireNonNull($.considerFailedImages, "expected parameter 'considerFailedImages' to be non-null");
            $.filterSettings = Objects.requireNonNull($.filterSettings, "expected parameter 'filterSettings' to be non-null");
            return $;
        }
    }

}
