// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.AlertingArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.AlertingState;
import com.pulumi.dynatrace.outputs.AlertingFilters;
import com.pulumi.dynatrace.outputs.AlertingRules;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/alerting:Alerting")
public class Alerting extends com.pulumi.resources.CustomResource {
    /**
     * The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
     * 
     */
    @Export(name="filters", type=AlertingFilters.class, parameters={})
    private Output</* @Nullable */ AlertingFilters> filters;

    /**
     * @return The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
     * 
     */
    public Output<Optional<AlertingFilters>> filters() {
        return Codegen.optional(this.filters);
    }
    /**
     * The ID of the management zone to which the alerting profile applies
     * 
     */
    @Export(name="managementZone", type=String.class, parameters={})
    private Output</* @Nullable */ String> managementZone;

    /**
     * @return The ID of the management zone to which the alerting profile applies
     * 
     */
    public Output<Optional<String>> managementZone() {
        return Codegen.optional(this.managementZone);
    }
    /**
     * The name of the alerting profile, displayed in the UI
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the alerting profile, displayed in the UI
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
     * 
     */
    @Export(name="rules", type=AlertingRules.class, parameters={})
    private Output</* @Nullable */ AlertingRules> rules;

    /**
     * @return A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
     * 
     */
    public Output<Optional<AlertingRules>> rules() {
        return Codegen.optional(this.rules);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Alerting(String name) {
        this(name, AlertingArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Alerting(String name, @Nullable AlertingArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Alerting(String name, @Nullable AlertingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/alerting:Alerting", name, args == null ? AlertingArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Alerting(String name, Output<String> id, @Nullable AlertingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/alerting:Alerting", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Alerting get(String name, Output<String> id, @Nullable AlertingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Alerting(name, id, state, options);
    }
}
