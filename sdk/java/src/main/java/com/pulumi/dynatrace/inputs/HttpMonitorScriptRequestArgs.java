// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.HttpMonitorScriptRequestAuthenticationArgs;
import com.pulumi.dynatrace.inputs.HttpMonitorScriptRequestConfigurationArgs;
import com.pulumi.dynatrace.inputs.HttpMonitorScriptRequestValidationArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HttpMonitorScriptRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpMonitorScriptRequestArgs Empty = new HttpMonitorScriptRequestArgs();

    @Import(name="authentication")
    private @Nullable Output<HttpMonitorScriptRequestAuthenticationArgs> authentication;

    public Optional<Output<HttpMonitorScriptRequestAuthenticationArgs>> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    @Import(name="body")
    private @Nullable Output<String> body;

    public Optional<Output<String>> body() {
        return Optional.ofNullable(this.body);
    }

    @Import(name="configuration")
    private @Nullable Output<HttpMonitorScriptRequestConfigurationArgs> configuration;

    public Optional<Output<HttpMonitorScriptRequestConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="method", required=true)
    private Output<String> method;

    public Output<String> method() {
        return this.method;
    }

    @Import(name="postProcessing")
    private @Nullable Output<String> postProcessing;

    public Optional<Output<String>> postProcessing() {
        return Optional.ofNullable(this.postProcessing);
    }

    @Import(name="preProcessing")
    private @Nullable Output<String> preProcessing;

    public Optional<Output<String>> preProcessing() {
        return Optional.ofNullable(this.preProcessing);
    }

    @Import(name="url", required=true)
    private Output<String> url;

    public Output<String> url() {
        return this.url;
    }

    @Import(name="validation")
    private @Nullable Output<HttpMonitorScriptRequestValidationArgs> validation;

    public Optional<Output<HttpMonitorScriptRequestValidationArgs>> validation() {
        return Optional.ofNullable(this.validation);
    }

    private HttpMonitorScriptRequestArgs() {}

    private HttpMonitorScriptRequestArgs(HttpMonitorScriptRequestArgs $) {
        this.authentication = $.authentication;
        this.body = $.body;
        this.configuration = $.configuration;
        this.description = $.description;
        this.method = $.method;
        this.postProcessing = $.postProcessing;
        this.preProcessing = $.preProcessing;
        this.url = $.url;
        this.validation = $.validation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpMonitorScriptRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpMonitorScriptRequestArgs $;

        public Builder() {
            $ = new HttpMonitorScriptRequestArgs();
        }

        public Builder(HttpMonitorScriptRequestArgs defaults) {
            $ = new HttpMonitorScriptRequestArgs(Objects.requireNonNull(defaults));
        }

        public Builder authentication(@Nullable Output<HttpMonitorScriptRequestAuthenticationArgs> authentication) {
            $.authentication = authentication;
            return this;
        }

        public Builder authentication(HttpMonitorScriptRequestAuthenticationArgs authentication) {
            return authentication(Output.of(authentication));
        }

        public Builder body(@Nullable Output<String> body) {
            $.body = body;
            return this;
        }

        public Builder body(String body) {
            return body(Output.of(body));
        }

        public Builder configuration(@Nullable Output<HttpMonitorScriptRequestConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        public Builder configuration(HttpMonitorScriptRequestConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder method(Output<String> method) {
            $.method = method;
            return this;
        }

        public Builder method(String method) {
            return method(Output.of(method));
        }

        public Builder postProcessing(@Nullable Output<String> postProcessing) {
            $.postProcessing = postProcessing;
            return this;
        }

        public Builder postProcessing(String postProcessing) {
            return postProcessing(Output.of(postProcessing));
        }

        public Builder preProcessing(@Nullable Output<String> preProcessing) {
            $.preProcessing = preProcessing;
            return this;
        }

        public Builder preProcessing(String preProcessing) {
            return preProcessing(Output.of(preProcessing));
        }

        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        public Builder url(String url) {
            return url(Output.of(url));
        }

        public Builder validation(@Nullable Output<HttpMonitorScriptRequestValidationArgs> validation) {
            $.validation = validation;
            return this;
        }

        public Builder validation(HttpMonitorScriptRequestValidationArgs validation) {
            return validation(Output.of(validation));
        }

        public HttpMonitorScriptRequestArgs build() {
            $.method = Objects.requireNonNull($.method, "expected parameter 'method' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
