// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomAnomaliesStrategyAutoArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomAnomaliesStrategyAutoArgs Empty = new CustomAnomaliesStrategyAutoArgs();

    @Import(name="alertCondition", required=true)
    private Output<String> alertCondition;

    public Output<String> alertCondition() {
        return this.alertCondition;
    }

    @Import(name="alertingOnMissingData")
    private @Nullable Output<Boolean> alertingOnMissingData;

    public Optional<Output<Boolean>> alertingOnMissingData() {
        return Optional.ofNullable(this.alertingOnMissingData);
    }

    @Import(name="dealertingSamples", required=true)
    private Output<Integer> dealertingSamples;

    public Output<Integer> dealertingSamples() {
        return this.dealertingSamples;
    }

    @Import(name="samples", required=true)
    private Output<Integer> samples;

    public Output<Integer> samples() {
        return this.samples;
    }

    @Import(name="signalFluctuations", required=true)
    private Output<Double> signalFluctuations;

    public Output<Double> signalFluctuations() {
        return this.signalFluctuations;
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    @Import(name="violatingSamples", required=true)
    private Output<Integer> violatingSamples;

    public Output<Integer> violatingSamples() {
        return this.violatingSamples;
    }

    private CustomAnomaliesStrategyAutoArgs() {}

    private CustomAnomaliesStrategyAutoArgs(CustomAnomaliesStrategyAutoArgs $) {
        this.alertCondition = $.alertCondition;
        this.alertingOnMissingData = $.alertingOnMissingData;
        this.dealertingSamples = $.dealertingSamples;
        this.samples = $.samples;
        this.signalFluctuations = $.signalFluctuations;
        this.unknowns = $.unknowns;
        this.violatingSamples = $.violatingSamples;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomAnomaliesStrategyAutoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomAnomaliesStrategyAutoArgs $;

        public Builder() {
            $ = new CustomAnomaliesStrategyAutoArgs();
        }

        public Builder(CustomAnomaliesStrategyAutoArgs defaults) {
            $ = new CustomAnomaliesStrategyAutoArgs(Objects.requireNonNull(defaults));
        }

        public Builder alertCondition(Output<String> alertCondition) {
            $.alertCondition = alertCondition;
            return this;
        }

        public Builder alertCondition(String alertCondition) {
            return alertCondition(Output.of(alertCondition));
        }

        public Builder alertingOnMissingData(@Nullable Output<Boolean> alertingOnMissingData) {
            $.alertingOnMissingData = alertingOnMissingData;
            return this;
        }

        public Builder alertingOnMissingData(Boolean alertingOnMissingData) {
            return alertingOnMissingData(Output.of(alertingOnMissingData));
        }

        public Builder dealertingSamples(Output<Integer> dealertingSamples) {
            $.dealertingSamples = dealertingSamples;
            return this;
        }

        public Builder dealertingSamples(Integer dealertingSamples) {
            return dealertingSamples(Output.of(dealertingSamples));
        }

        public Builder samples(Output<Integer> samples) {
            $.samples = samples;
            return this;
        }

        public Builder samples(Integer samples) {
            return samples(Output.of(samples));
        }

        public Builder signalFluctuations(Output<Double> signalFluctuations) {
            $.signalFluctuations = signalFluctuations;
            return this;
        }

        public Builder signalFluctuations(Double signalFluctuations) {
            return signalFluctuations(Output.of(signalFluctuations));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public Builder violatingSamples(Output<Integer> violatingSamples) {
            $.violatingSamples = violatingSamples;
            return this;
        }

        public Builder violatingSamples(Integer violatingSamples) {
            return violatingSamples(Output.of(violatingSamples));
        }

        public CustomAnomaliesStrategyAutoArgs build() {
            $.alertCondition = Objects.requireNonNull($.alertCondition, "expected parameter 'alertCondition' to be non-null");
            $.dealertingSamples = Objects.requireNonNull($.dealertingSamples, "expected parameter 'dealertingSamples' to be non-null");
            $.samples = Objects.requireNonNull($.samples, "expected parameter 'samples' to be non-null");
            $.signalFluctuations = Objects.requireNonNull($.signalFluctuations, "expected parameter 'signalFluctuations' to be non-null");
            $.violatingSamples = Objects.requireNonNull($.violatingSamples, "expected parameter 'violatingSamples' to be non-null");
            return $;
        }
    }

}
