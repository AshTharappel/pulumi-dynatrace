// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RumIpLocationsArgs extends com.pulumi.resources.ResourceArgs {

    public static final RumIpLocationsArgs Empty = new RumIpLocationsArgs();

    /**
     * The city name of the location.
     * 
     */
    @Import(name="city")
    private @Nullable Output<String> city;

    /**
     * @return The city name of the location.
     * 
     */
    public Optional<Output<String>> city() {
        return Optional.ofNullable(this.city);
    }

    /**
     * The country code of the location.
     * 
     */
    @Import(name="countryCode", required=true)
    private Output<String> countryCode;

    /**
     * @return The country code of the location.
     * 
     */
    public Output<String> countryCode() {
        return this.countryCode;
    }

    /**
     * Single IP or IP range start address
     * 
     */
    @Import(name="ip", required=true)
    private Output<String> ip;

    /**
     * @return Single IP or IP range start address
     * 
     */
    public Output<String> ip() {
        return this.ip;
    }

    /**
     * IP range end
     * 
     */
    @Import(name="ipTo")
    private @Nullable Output<String> ipTo;

    /**
     * @return IP range end
     * 
     */
    public Optional<Output<String>> ipTo() {
        return Optional.ofNullable(this.ipTo);
    }

    /**
     * Latitude
     * 
     */
    @Import(name="latitude")
    private @Nullable Output<Double> latitude;

    /**
     * @return Latitude
     * 
     */
    public Optional<Output<Double>> latitude() {
        return Optional.ofNullable(this.latitude);
    }

    /**
     * Longitude
     * 
     */
    @Import(name="longitude")
    private @Nullable Output<Double> longitude;

    /**
     * @return Longitude
     * 
     */
    public Optional<Output<Double>> longitude() {
        return Optional.ofNullable(this.longitude);
    }

    /**
     * The region code of the location. For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca)
     * use ISO 3166-2 state codes without `US-` or `CA-` prefix. For the rest of the world use [FIPS 10-4
     * codes](https://dt-url.net/fipscodes) without country prefix.
     * 
     */
    @Import(name="regionCode")
    private @Nullable Output<String> regionCode;

    /**
     * @return The region code of the location. For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca)
     * use ISO 3166-2 state codes without `US-` or `CA-` prefix. For the rest of the world use [FIPS 10-4
     * codes](https://dt-url.net/fipscodes) without country prefix.
     * 
     */
    public Optional<Output<String>> regionCode() {
        return Optional.ofNullable(this.regionCode);
    }

    private RumIpLocationsArgs() {}

    private RumIpLocationsArgs(RumIpLocationsArgs $) {
        this.city = $.city;
        this.countryCode = $.countryCode;
        this.ip = $.ip;
        this.ipTo = $.ipTo;
        this.latitude = $.latitude;
        this.longitude = $.longitude;
        this.regionCode = $.regionCode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RumIpLocationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RumIpLocationsArgs $;

        public Builder() {
            $ = new RumIpLocationsArgs();
        }

        public Builder(RumIpLocationsArgs defaults) {
            $ = new RumIpLocationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param city The city name of the location.
         * 
         * @return builder
         * 
         */
        public Builder city(@Nullable Output<String> city) {
            $.city = city;
            return this;
        }

        /**
         * @param city The city name of the location.
         * 
         * @return builder
         * 
         */
        public Builder city(String city) {
            return city(Output.of(city));
        }

        /**
         * @param countryCode The country code of the location.
         * 
         * @return builder
         * 
         */
        public Builder countryCode(Output<String> countryCode) {
            $.countryCode = countryCode;
            return this;
        }

        /**
         * @param countryCode The country code of the location.
         * 
         * @return builder
         * 
         */
        public Builder countryCode(String countryCode) {
            return countryCode(Output.of(countryCode));
        }

        /**
         * @param ip Single IP or IP range start address
         * 
         * @return builder
         * 
         */
        public Builder ip(Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip Single IP or IP range start address
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param ipTo IP range end
         * 
         * @return builder
         * 
         */
        public Builder ipTo(@Nullable Output<String> ipTo) {
            $.ipTo = ipTo;
            return this;
        }

        /**
         * @param ipTo IP range end
         * 
         * @return builder
         * 
         */
        public Builder ipTo(String ipTo) {
            return ipTo(Output.of(ipTo));
        }

        /**
         * @param latitude Latitude
         * 
         * @return builder
         * 
         */
        public Builder latitude(@Nullable Output<Double> latitude) {
            $.latitude = latitude;
            return this;
        }

        /**
         * @param latitude Latitude
         * 
         * @return builder
         * 
         */
        public Builder latitude(Double latitude) {
            return latitude(Output.of(latitude));
        }

        /**
         * @param longitude Longitude
         * 
         * @return builder
         * 
         */
        public Builder longitude(@Nullable Output<Double> longitude) {
            $.longitude = longitude;
            return this;
        }

        /**
         * @param longitude Longitude
         * 
         * @return builder
         * 
         */
        public Builder longitude(Double longitude) {
            return longitude(Output.of(longitude));
        }

        /**
         * @param regionCode The region code of the location. For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca)
         * use ISO 3166-2 state codes without `US-` or `CA-` prefix. For the rest of the world use [FIPS 10-4
         * codes](https://dt-url.net/fipscodes) without country prefix.
         * 
         * @return builder
         * 
         */
        public Builder regionCode(@Nullable Output<String> regionCode) {
            $.regionCode = regionCode;
            return this;
        }

        /**
         * @param regionCode The region code of the location. For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca)
         * use ISO 3166-2 state codes without `US-` or `CA-` prefix. For the rest of the world use [FIPS 10-4
         * codes](https://dt-url.net/fipscodes) without country prefix.
         * 
         * @return builder
         * 
         */
        public Builder regionCode(String regionCode) {
            return regionCode(Output.of(regionCode));
        }

        public RumIpLocationsArgs build() {
            $.countryCode = Objects.requireNonNull($.countryCode, "expected parameter 'countryCode' to be non-null");
            $.ip = Objects.requireNonNull($.ip, "expected parameter 'ip' to be non-null");
            return $;
        }
    }

}
