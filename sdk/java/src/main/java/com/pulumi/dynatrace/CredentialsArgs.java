// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.CredentialsCredentialUsageSummaryArgs;
import com.pulumi.dynatrace.inputs.CredentialsExternalArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CredentialsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CredentialsArgs Empty = new CredentialsArgs();

    /**
     * The certificate in the string format.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return The certificate in the string format.
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * The list contains summary data related to the use of credentials
     * 
     * @deprecated
     * `credential_usage_summary` will be removed in future versions. It&#39;s not getting filled anymore, because it&#39;s runtime data
     * 
     */
    @Deprecated /* `credential_usage_summary` will be removed in future versions. It's not getting filled anymore, because it's runtime data */
    @Import(name="credentialUsageSummaries")
    private @Nullable Output<List<CredentialsCredentialUsageSummaryArgs>> credentialUsageSummaries;

    /**
     * @return The list contains summary data related to the use of credentials
     * 
     * @deprecated
     * `credential_usage_summary` will be removed in future versions. It&#39;s not getting filled anymore, because it&#39;s runtime data
     * 
     */
    @Deprecated /* `credential_usage_summary` will be removed in future versions. It's not getting filled anymore, because it's runtime data */
    public Optional<Output<List<CredentialsCredentialUsageSummaryArgs>>> credentialUsageSummaries() {
        return Optional.ofNullable(this.credentialUsageSummaries);
    }

    /**
     * A short description of the credentials set
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A short description of the credentials set
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * External Vault Configuration
     * 
     */
    @Import(name="external")
    private @Nullable Output<CredentialsExternalArgs> external;

    /**
     * @return External Vault Configuration
     * 
     */
    public Optional<Output<CredentialsExternalArgs>> external() {
        return Optional.ofNullable(this.external);
    }

    /**
     * The certificate format. Possible values are `PEM`, `PKCS12` and `UNKNOWN`.
     * 
     */
    @Import(name="format")
    private @Nullable Output<String> format;

    /**
     * @return The certificate format. Possible values are `PEM`, `PKCS12` and `UNKNOWN`.
     * 
     */
    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * The name of the credentials set
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the credentials set
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The credentials set is available to every user (`false`) or to owner only (`true`)
     * 
     */
    @Import(name="ownerAccessOnly")
    private @Nullable Output<Boolean> ownerAccessOnly;

    /**
     * @return The credentials set is available to every user (`false`) or to owner only (`true`)
     * 
     */
    public Optional<Output<Boolean>> ownerAccessOnly() {
        return Optional.ofNullable(this.ownerAccessOnly);
    }

    /**
     * The password of the credential. Note: Terraform treats an empty string for a value as if the attribute was absent. If
     * you want to set an empty password, use the value `--empty--`.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password of the credential. Note: Terraform treats an empty string for a value as if the attribute was absent. If
     * you want to set an empty password, use the value `--empty--`.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * For certificate authentication specifies whether it&#39;s public certificate auth (`true`) or not (`false`).
     * 
     */
    @Import(name="public")
    private @Nullable Output<Boolean> public_;

    /**
     * @return For certificate authentication specifies whether it&#39;s public certificate auth (`true`) or not (`false`).
     * 
     */
    public Optional<Output<Boolean>> public_() {
        return Optional.ofNullable(this.public_);
    }

    /**
     * The scope of the credentials set. Possible values are `ALL`, `EXTENSION` and `SYNTHETIC`
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return The scope of the credentials set. Possible values are `ALL`, `EXTENSION` and `SYNTHETIC`
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    /**
     * Token in the string format. Specifying a token implies `Token Authentication`.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return Token in the string format. Specifying a token implies `Token Authentication`.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * The username of the credentials set.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username of the credentials set.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private CredentialsArgs() {}

    private CredentialsArgs(CredentialsArgs $) {
        this.certificate = $.certificate;
        this.credentialUsageSummaries = $.credentialUsageSummaries;
        this.description = $.description;
        this.external = $.external;
        this.format = $.format;
        this.name = $.name;
        this.ownerAccessOnly = $.ownerAccessOnly;
        this.password = $.password;
        this.public_ = $.public_;
        this.scope = $.scope;
        this.token = $.token;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CredentialsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CredentialsArgs $;

        public Builder() {
            $ = new CredentialsArgs();
        }

        public Builder(CredentialsArgs defaults) {
            $ = new CredentialsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate The certificate in the string format.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate The certificate in the string format.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param credentialUsageSummaries The list contains summary data related to the use of credentials
         * 
         * @return builder
         * 
         * @deprecated
         * `credential_usage_summary` will be removed in future versions. It&#39;s not getting filled anymore, because it&#39;s runtime data
         * 
         */
        @Deprecated /* `credential_usage_summary` will be removed in future versions. It's not getting filled anymore, because it's runtime data */
        public Builder credentialUsageSummaries(@Nullable Output<List<CredentialsCredentialUsageSummaryArgs>> credentialUsageSummaries) {
            $.credentialUsageSummaries = credentialUsageSummaries;
            return this;
        }

        /**
         * @param credentialUsageSummaries The list contains summary data related to the use of credentials
         * 
         * @return builder
         * 
         * @deprecated
         * `credential_usage_summary` will be removed in future versions. It&#39;s not getting filled anymore, because it&#39;s runtime data
         * 
         */
        @Deprecated /* `credential_usage_summary` will be removed in future versions. It's not getting filled anymore, because it's runtime data */
        public Builder credentialUsageSummaries(List<CredentialsCredentialUsageSummaryArgs> credentialUsageSummaries) {
            return credentialUsageSummaries(Output.of(credentialUsageSummaries));
        }

        /**
         * @param credentialUsageSummaries The list contains summary data related to the use of credentials
         * 
         * @return builder
         * 
         * @deprecated
         * `credential_usage_summary` will be removed in future versions. It&#39;s not getting filled anymore, because it&#39;s runtime data
         * 
         */
        @Deprecated /* `credential_usage_summary` will be removed in future versions. It's not getting filled anymore, because it's runtime data */
        public Builder credentialUsageSummaries(CredentialsCredentialUsageSummaryArgs... credentialUsageSummaries) {
            return credentialUsageSummaries(List.of(credentialUsageSummaries));
        }

        /**
         * @param description A short description of the credentials set
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A short description of the credentials set
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param external External Vault Configuration
         * 
         * @return builder
         * 
         */
        public Builder external(@Nullable Output<CredentialsExternalArgs> external) {
            $.external = external;
            return this;
        }

        /**
         * @param external External Vault Configuration
         * 
         * @return builder
         * 
         */
        public Builder external(CredentialsExternalArgs external) {
            return external(Output.of(external));
        }

        /**
         * @param format The certificate format. Possible values are `PEM`, `PKCS12` and `UNKNOWN`.
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format The certificate format. Possible values are `PEM`, `PKCS12` and `UNKNOWN`.
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param name The name of the credentials set
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the credentials set
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ownerAccessOnly The credentials set is available to every user (`false`) or to owner only (`true`)
         * 
         * @return builder
         * 
         */
        public Builder ownerAccessOnly(@Nullable Output<Boolean> ownerAccessOnly) {
            $.ownerAccessOnly = ownerAccessOnly;
            return this;
        }

        /**
         * @param ownerAccessOnly The credentials set is available to every user (`false`) or to owner only (`true`)
         * 
         * @return builder
         * 
         */
        public Builder ownerAccessOnly(Boolean ownerAccessOnly) {
            return ownerAccessOnly(Output.of(ownerAccessOnly));
        }

        /**
         * @param password The password of the credential. Note: Terraform treats an empty string for a value as if the attribute was absent. If
         * you want to set an empty password, use the value `--empty--`.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password of the credential. Note: Terraform treats an empty string for a value as if the attribute was absent. If
         * you want to set an empty password, use the value `--empty--`.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param public_ For certificate authentication specifies whether it&#39;s public certificate auth (`true`) or not (`false`).
         * 
         * @return builder
         * 
         */
        public Builder public_(@Nullable Output<Boolean> public_) {
            $.public_ = public_;
            return this;
        }

        /**
         * @param public_ For certificate authentication specifies whether it&#39;s public certificate auth (`true`) or not (`false`).
         * 
         * @return builder
         * 
         */
        public Builder public_(Boolean public_) {
            return public_(Output.of(public_));
        }

        /**
         * @param scope The scope of the credentials set. Possible values are `ALL`, `EXTENSION` and `SYNTHETIC`
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope of the credentials set. Possible values are `ALL`, `EXTENSION` and `SYNTHETIC`
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param token Token in the string format. Specifying a token implies `Token Authentication`.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token Token in the string format. Specifying a token implies `Token Authentication`.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param username The username of the credentials set.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username of the credentials set.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public CredentialsArgs build() {
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            return $;
        }
    }

}
