// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dynatrace.outputs.HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholds;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class HostAnomaliesV2HostHighMemoryDetectionCustomThresholds {
    private HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholds eventThresholds;
    private Integer pageFaultsPerSecondNonWindows;
    private Integer pageFaultsPerSecondWindows;
    private Integer usedMemoryPercentageNonWindows;
    private Integer usedMemoryPercentageWindows;

    private HostAnomaliesV2HostHighMemoryDetectionCustomThresholds() {}
    public HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholds eventThresholds() {
        return this.eventThresholds;
    }
    public Integer pageFaultsPerSecondNonWindows() {
        return this.pageFaultsPerSecondNonWindows;
    }
    public Integer pageFaultsPerSecondWindows() {
        return this.pageFaultsPerSecondWindows;
    }
    public Integer usedMemoryPercentageNonWindows() {
        return this.usedMemoryPercentageNonWindows;
    }
    public Integer usedMemoryPercentageWindows() {
        return this.usedMemoryPercentageWindows;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HostAnomaliesV2HostHighMemoryDetectionCustomThresholds defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholds eventThresholds;
        private Integer pageFaultsPerSecondNonWindows;
        private Integer pageFaultsPerSecondWindows;
        private Integer usedMemoryPercentageNonWindows;
        private Integer usedMemoryPercentageWindows;
        public Builder() {}
        public Builder(HostAnomaliesV2HostHighMemoryDetectionCustomThresholds defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eventThresholds = defaults.eventThresholds;
    	      this.pageFaultsPerSecondNonWindows = defaults.pageFaultsPerSecondNonWindows;
    	      this.pageFaultsPerSecondWindows = defaults.pageFaultsPerSecondWindows;
    	      this.usedMemoryPercentageNonWindows = defaults.usedMemoryPercentageNonWindows;
    	      this.usedMemoryPercentageWindows = defaults.usedMemoryPercentageWindows;
        }

        @CustomType.Setter
        public Builder eventThresholds(HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholds eventThresholds) {
            this.eventThresholds = Objects.requireNonNull(eventThresholds);
            return this;
        }
        @CustomType.Setter
        public Builder pageFaultsPerSecondNonWindows(Integer pageFaultsPerSecondNonWindows) {
            this.pageFaultsPerSecondNonWindows = Objects.requireNonNull(pageFaultsPerSecondNonWindows);
            return this;
        }
        @CustomType.Setter
        public Builder pageFaultsPerSecondWindows(Integer pageFaultsPerSecondWindows) {
            this.pageFaultsPerSecondWindows = Objects.requireNonNull(pageFaultsPerSecondWindows);
            return this;
        }
        @CustomType.Setter
        public Builder usedMemoryPercentageNonWindows(Integer usedMemoryPercentageNonWindows) {
            this.usedMemoryPercentageNonWindows = Objects.requireNonNull(usedMemoryPercentageNonWindows);
            return this;
        }
        @CustomType.Setter
        public Builder usedMemoryPercentageWindows(Integer usedMemoryPercentageWindows) {
            this.usedMemoryPercentageWindows = Objects.requireNonNull(usedMemoryPercentageWindows);
            return this;
        }
        public HostAnomaliesV2HostHighMemoryDetectionCustomThresholds build() {
            final var o = new HostAnomaliesV2HostHighMemoryDetectionCustomThresholds();
            o.eventThresholds = eventThresholds;
            o.pageFaultsPerSecondNonWindows = pageFaultsPerSecondNonWindows;
            o.pageFaultsPerSecondWindows = pageFaultsPerSecondWindows;
            o.usedMemoryPercentageNonWindows = usedMemoryPercentageNonWindows;
            o.usedMemoryPercentageWindows = usedMemoryPercentageWindows;
            return o;
        }
    }
}
