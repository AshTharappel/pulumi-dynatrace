// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OsServicesDetectionConditionsWindowsDetectionConditionsWindowArgs extends com.pulumi.resources.ResourceArgs {

    public static final OsServicesDetectionConditionsWindowsDetectionConditionsWindowArgs Empty = new OsServicesDetectionConditionsWindowsDetectionConditionsWindowArgs();

    @Import(name="condition")
    private @Nullable Output<String> condition;

    public Optional<Output<String>> condition() {
        return Optional.ofNullable(this.condition);
    }

    @Import(name="property", required=true)
    private Output<String> property;

    public Output<String> property() {
        return this.property;
    }

    @Import(name="startupCondition")
    private @Nullable Output<String> startupCondition;

    public Optional<Output<String>> startupCondition() {
        return Optional.ofNullable(this.startupCondition);
    }

    private OsServicesDetectionConditionsWindowsDetectionConditionsWindowArgs() {}

    private OsServicesDetectionConditionsWindowsDetectionConditionsWindowArgs(OsServicesDetectionConditionsWindowsDetectionConditionsWindowArgs $) {
        this.condition = $.condition;
        this.property = $.property;
        this.startupCondition = $.startupCondition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OsServicesDetectionConditionsWindowsDetectionConditionsWindowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OsServicesDetectionConditionsWindowsDetectionConditionsWindowArgs $;

        public Builder() {
            $ = new OsServicesDetectionConditionsWindowsDetectionConditionsWindowArgs();
        }

        public Builder(OsServicesDetectionConditionsWindowsDetectionConditionsWindowArgs defaults) {
            $ = new OsServicesDetectionConditionsWindowsDetectionConditionsWindowArgs(Objects.requireNonNull(defaults));
        }

        public Builder condition(@Nullable Output<String> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        public Builder property(Output<String> property) {
            $.property = property;
            return this;
        }

        public Builder property(String property) {
            return property(Output.of(property));
        }

        public Builder startupCondition(@Nullable Output<String> startupCondition) {
            $.startupCondition = startupCondition;
            return this;
        }

        public Builder startupCondition(String startupCondition) {
            return startupCondition(Output.of(startupCondition));
        }

        public OsServicesDetectionConditionsWindowsDetectionConditionsWindowArgs build() {
            $.property = Objects.requireNonNull($.property, "expected parameter 'property' to be non-null");
            return $;
        }
    }

}
