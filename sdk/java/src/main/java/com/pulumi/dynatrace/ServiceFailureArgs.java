// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.ServiceFailureExceptionRulesArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceFailureArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceFailureArgs Empty = new ServiceFailureArgs();

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Customize failure detection for specific exceptions and errors
     * 
     */
    @Import(name="exceptionRules")
    private @Nullable Output<ServiceFailureExceptionRulesArgs> exceptionRules;

    /**
     * @return Customize failure detection for specific exceptions and errors
     * 
     */
    public Optional<Output<ServiceFailureExceptionRulesArgs>> exceptionRules() {
        return Optional.ofNullable(this.exceptionRules);
    }

    /**
     * The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
     * 
     */
    @Import(name="serviceId", required=true)
    private Output<String> serviceId;

    /**
     * @return The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
     * 
     */
    public Output<String> serviceId() {
        return this.serviceId;
    }

    private ServiceFailureArgs() {}

    private ServiceFailureArgs(ServiceFailureArgs $) {
        this.enabled = $.enabled;
        this.exceptionRules = $.exceptionRules;
        this.serviceId = $.serviceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceFailureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceFailureArgs $;

        public Builder() {
            $ = new ServiceFailureArgs();
        }

        public Builder(ServiceFailureArgs defaults) {
            $ = new ServiceFailureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param exceptionRules Customize failure detection for specific exceptions and errors
         * 
         * @return builder
         * 
         */
        public Builder exceptionRules(@Nullable Output<ServiceFailureExceptionRulesArgs> exceptionRules) {
            $.exceptionRules = exceptionRules;
            return this;
        }

        /**
         * @param exceptionRules Customize failure detection for specific exceptions and errors
         * 
         * @return builder
         * 
         */
        public Builder exceptionRules(ServiceFailureExceptionRulesArgs exceptionRules) {
            return exceptionRules(Output.of(exceptionRules));
        }

        /**
         * @param serviceId The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
         * 
         * @return builder
         * 
         */
        public Builder serviceId(Output<String> serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        /**
         * @param serviceId The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
         * 
         * @return builder
         * 
         */
        public Builder serviceId(String serviceId) {
            return serviceId(Output.of(serviceId));
        }

        public ServiceFailureArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.serviceId = Objects.requireNonNull($.serviceId, "expected parameter 'serviceId' to be non-null");
            return $;
        }
    }

}
