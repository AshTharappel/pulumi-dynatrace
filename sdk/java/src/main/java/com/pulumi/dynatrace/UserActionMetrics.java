// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.UserActionMetricsArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.UserActionMetricsState;
import com.pulumi.dynatrace.outputs.UserActionMetricsFilters;
import com.pulumi.dynatrace.outputs.UserActionMetricsValue;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/userActionMetrics:UserActionMetrics")
public class UserActionMetrics extends com.pulumi.resources.CustomResource {
    /**
     * Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data point that is of interest to your business. Dimensions are parameters like &#34;application&#34;, &#34;type&#34;, &#34;name&#34;. For example, using &#34;type&#34; as a dimension allows you to split chart data based on the user action type.
     * 
     */
    @Export(name="dimensions", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> dimensions;

    /**
     * @return Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data point that is of interest to your business. Dimensions are parameters like &#34;application&#34;, &#34;type&#34;, &#34;name&#34;. For example, using &#34;type&#34; as a dimension allows you to split chart data based on the user action type.
     * 
     */
    public Output<Optional<List<String>>> dimensions() {
        return Codegen.optional(this.dimensions);
    }
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * Defines the filters for the user action. Filters apply at the moment of extracting the data and only sessions that satisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters in the metric data explorer. For example, using &#34;type equals Xhr&#34; will give you only data from xhr actions, while forcing the rest of user actions of different types to be ignored.
     * 
     */
    @Export(name="filters", refs={UserActionMetricsFilters.class}, tree="[0]")
    private Output</* @Nullable */ UserActionMetricsFilters> filters;

    /**
     * @return Defines the filters for the user action. Filters apply at the moment of extracting the data and only sessions that satisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters in the metric data explorer. For example, using &#34;type equals Xhr&#34; will give you only data from xhr actions, while forcing the rest of user actions of different types to be ignored.
     * 
     */
    public Output<Optional<UserActionMetricsFilters>> filters() {
        return Codegen.optional(this.filters);
    }
    /**
     * Metric key
     * 
     */
    @Export(name="metricKey", refs={String.class}, tree="[0]")
    private Output<String> metricKey;

    /**
     * @return Metric key
     * 
     */
    public Output<String> metricKey() {
        return this.metricKey;
    }
    /**
     * Defines the type of value to be extracted from the user action. When using **user action counter**, the number of user actions is counted (similar to count(*) when using USQL). When using **user action field value**, the value of a user action field is extracted.
     * 
     */
    @Export(name="value", refs={UserActionMetricsValue.class}, tree="[0]")
    private Output<UserActionMetricsValue> value;

    /**
     * @return Defines the type of value to be extracted from the user action. When using **user action counter**, the number of user actions is counted (similar to count(*) when using USQL). When using **user action field value**, the value of a user action field is extracted.
     * 
     */
    public Output<UserActionMetricsValue> value() {
        return this.value;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public UserActionMetrics(String name) {
        this(name, UserActionMetricsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public UserActionMetrics(String name, UserActionMetricsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public UserActionMetrics(String name, UserActionMetricsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/userActionMetrics:UserActionMetrics", name, args == null ? UserActionMetricsArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private UserActionMetrics(String name, Output<String> id, @Nullable UserActionMetricsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/userActionMetrics:UserActionMetrics", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static UserActionMetrics get(String name, Output<String> id, @Nullable UserActionMetricsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new UserActionMetrics(name, id, state, options);
    }
}
