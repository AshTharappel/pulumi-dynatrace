// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;


public final class ActivegateTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final ActivegateTokenArgs Empty = new ActivegateTokenArgs();

    /**
     * Manually enforce ActiveGate token authentication
     * 
     */
    @Import(name="authTokenEnforcementManuallyEnabled", required=true)
    private Output<Boolean> authTokenEnforcementManuallyEnabled;

    /**
     * @return Manually enforce ActiveGate token authentication
     * 
     */
    public Output<Boolean> authTokenEnforcementManuallyEnabled() {
        return this.authTokenEnforcementManuallyEnabled;
    }

    /**
     * Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your environment and notifications are defined ([see notification settings](https://www.terraform.io/ui/settings/builtin:problem.notifications))
     * 
     */
    @Import(name="expiringTokenNotificationsEnabled", required=true)
    private Output<Boolean> expiringTokenNotificationsEnabled;

    /**
     * @return Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your environment and notifications are defined ([see notification settings](https://www.terraform.io/ui/settings/builtin:problem.notifications))
     * 
     */
    public Output<Boolean> expiringTokenNotificationsEnabled() {
        return this.expiringTokenNotificationsEnabled;
    }

    private ActivegateTokenArgs() {}

    private ActivegateTokenArgs(ActivegateTokenArgs $) {
        this.authTokenEnforcementManuallyEnabled = $.authTokenEnforcementManuallyEnabled;
        this.expiringTokenNotificationsEnabled = $.expiringTokenNotificationsEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActivegateTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActivegateTokenArgs $;

        public Builder() {
            $ = new ActivegateTokenArgs();
        }

        public Builder(ActivegateTokenArgs defaults) {
            $ = new ActivegateTokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authTokenEnforcementManuallyEnabled Manually enforce ActiveGate token authentication
         * 
         * @return builder
         * 
         */
        public Builder authTokenEnforcementManuallyEnabled(Output<Boolean> authTokenEnforcementManuallyEnabled) {
            $.authTokenEnforcementManuallyEnabled = authTokenEnforcementManuallyEnabled;
            return this;
        }

        /**
         * @param authTokenEnforcementManuallyEnabled Manually enforce ActiveGate token authentication
         * 
         * @return builder
         * 
         */
        public Builder authTokenEnforcementManuallyEnabled(Boolean authTokenEnforcementManuallyEnabled) {
            return authTokenEnforcementManuallyEnabled(Output.of(authTokenEnforcementManuallyEnabled));
        }

        /**
         * @param expiringTokenNotificationsEnabled Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your environment and notifications are defined ([see notification settings](https://www.terraform.io/ui/settings/builtin:problem.notifications))
         * 
         * @return builder
         * 
         */
        public Builder expiringTokenNotificationsEnabled(Output<Boolean> expiringTokenNotificationsEnabled) {
            $.expiringTokenNotificationsEnabled = expiringTokenNotificationsEnabled;
            return this;
        }

        /**
         * @param expiringTokenNotificationsEnabled Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your environment and notifications are defined ([see notification settings](https://www.terraform.io/ui/settings/builtin:problem.notifications))
         * 
         * @return builder
         * 
         */
        public Builder expiringTokenNotificationsEnabled(Boolean expiringTokenNotificationsEnabled) {
            return expiringTokenNotificationsEnabled(Output.of(expiringTokenNotificationsEnabled));
        }

        public ActivegateTokenArgs build() {
            $.authTokenEnforcementManuallyEnabled = Objects.requireNonNull($.authTokenEnforcementManuallyEnabled, "expected parameter 'authTokenEnforcementManuallyEnabled' to be non-null");
            $.expiringTokenNotificationsEnabled = Objects.requireNonNull($.expiringTokenNotificationsEnabled, "expected parameter 'expiringTokenNotificationsEnabled' to be non-null");
            return $;
        }
    }

}
