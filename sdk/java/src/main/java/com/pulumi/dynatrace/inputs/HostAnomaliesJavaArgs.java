// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.HostAnomaliesJavaOutOfMemoryArgs;
import com.pulumi.dynatrace.inputs.HostAnomaliesJavaOutOfThreadsArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HostAnomaliesJavaArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostAnomaliesJavaArgs Empty = new HostAnomaliesJavaArgs();

    /**
     * Configuration of Java out of memory problems detection
     * 
     */
    @Import(name="outOfMemory")
    private @Nullable Output<HostAnomaliesJavaOutOfMemoryArgs> outOfMemory;

    /**
     * @return Configuration of Java out of memory problems detection
     * 
     */
    public Optional<Output<HostAnomaliesJavaOutOfMemoryArgs>> outOfMemory() {
        return Optional.ofNullable(this.outOfMemory);
    }

    /**
     * Configuration of Java out of threads problems detection
     * 
     */
    @Import(name="outOfThreads")
    private @Nullable Output<HostAnomaliesJavaOutOfThreadsArgs> outOfThreads;

    /**
     * @return Configuration of Java out of threads problems detection
     * 
     */
    public Optional<Output<HostAnomaliesJavaOutOfThreadsArgs>> outOfThreads() {
        return Optional.ofNullable(this.outOfThreads);
    }

    private HostAnomaliesJavaArgs() {}

    private HostAnomaliesJavaArgs(HostAnomaliesJavaArgs $) {
        this.outOfMemory = $.outOfMemory;
        this.outOfThreads = $.outOfThreads;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostAnomaliesJavaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostAnomaliesJavaArgs $;

        public Builder() {
            $ = new HostAnomaliesJavaArgs();
        }

        public Builder(HostAnomaliesJavaArgs defaults) {
            $ = new HostAnomaliesJavaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param outOfMemory Configuration of Java out of memory problems detection
         * 
         * @return builder
         * 
         */
        public Builder outOfMemory(@Nullable Output<HostAnomaliesJavaOutOfMemoryArgs> outOfMemory) {
            $.outOfMemory = outOfMemory;
            return this;
        }

        /**
         * @param outOfMemory Configuration of Java out of memory problems detection
         * 
         * @return builder
         * 
         */
        public Builder outOfMemory(HostAnomaliesJavaOutOfMemoryArgs outOfMemory) {
            return outOfMemory(Output.of(outOfMemory));
        }

        /**
         * @param outOfThreads Configuration of Java out of threads problems detection
         * 
         * @return builder
         * 
         */
        public Builder outOfThreads(@Nullable Output<HostAnomaliesJavaOutOfThreadsArgs> outOfThreads) {
            $.outOfThreads = outOfThreads;
            return this;
        }

        /**
         * @param outOfThreads Configuration of Java out of threads problems detection
         * 
         * @return builder
         * 
         */
        public Builder outOfThreads(HostAnomaliesJavaOutOfThreadsArgs outOfThreads) {
            return outOfThreads(Output.of(outOfThreads));
        }

        public HostAnomaliesJavaArgs build() {
            return $;
        }
    }

}
