// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BrowserMonitorOutageState extends com.pulumi.resources.ResourceArgs {

    public static final BrowserMonitorOutageState Empty = new BrowserMonitorOutageState();

    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Alert if all locations are unable to access my web application
     * 
     */
    @Import(name="globalConsecutiveOutageCountThreshold")
    private @Nullable Output<Integer> globalConsecutiveOutageCountThreshold;

    /**
     * @return (Field has overlap with `dynatrace.BrowserMonitor`) Alert if all locations are unable to access my web application
     * 
     */
    public Optional<Output<Integer>> globalConsecutiveOutageCountThreshold() {
        return Optional.ofNullable(this.globalConsecutiveOutageCountThreshold);
    }

    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
     * 
     */
    @Import(name="globalOutages")
    private @Nullable Output<Boolean> globalOutages;

    /**
     * @return (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
     * 
     */
    public Optional<Output<Boolean>> globalOutages() {
        return Optional.ofNullable(this.globalOutages);
    }

    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) are unable to access my web application
     * 
     */
    @Import(name="localConsecutiveOutageCountThreshold")
    private @Nullable Output<Integer> localConsecutiveOutageCountThreshold;

    /**
     * @return (Field has overlap with `dynatrace.BrowserMonitor`) are unable to access my web application
     * 
     */
    public Optional<Output<Integer>> localConsecutiveOutageCountThreshold() {
        return Optional.ofNullable(this.localConsecutiveOutageCountThreshold);
    }

    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Alert if at least
     * 
     */
    @Import(name="localLocationOutageCountThreshold")
    private @Nullable Output<Integer> localLocationOutageCountThreshold;

    /**
     * @return (Field has overlap with `dynatrace.BrowserMonitor`) Alert if at least
     * 
     */
    public Optional<Output<Integer>> localLocationOutageCountThreshold() {
        return Optional.ofNullable(this.localLocationOutageCountThreshold);
    }

    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
     * 
     */
    @Import(name="localOutages")
    private @Nullable Output<Boolean> localOutages;

    /**
     * @return (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
     * 
     */
    public Optional<Output<Boolean>> localOutages() {
        return Optional.ofNullable(this.localOutages);
    }

    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
     * Requires ActiveGate version 1.207+ for private locations.
     * 
     */
    @Import(name="retryOnError")
    private @Nullable Output<Boolean> retryOnError;

    /**
     * @return (Field has overlap with `dynatrace.BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
     * Requires ActiveGate version 1.207+ for private locations.
     * 
     */
    public Optional<Output<Boolean>> retryOnError() {
        return Optional.ofNullable(this.retryOnError);
    }

    /**
     * The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    private BrowserMonitorOutageState() {}

    private BrowserMonitorOutageState(BrowserMonitorOutageState $) {
        this.globalConsecutiveOutageCountThreshold = $.globalConsecutiveOutageCountThreshold;
        this.globalOutages = $.globalOutages;
        this.localConsecutiveOutageCountThreshold = $.localConsecutiveOutageCountThreshold;
        this.localLocationOutageCountThreshold = $.localLocationOutageCountThreshold;
        this.localOutages = $.localOutages;
        this.retryOnError = $.retryOnError;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrowserMonitorOutageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrowserMonitorOutageState $;

        public Builder() {
            $ = new BrowserMonitorOutageState();
        }

        public Builder(BrowserMonitorOutageState defaults) {
            $ = new BrowserMonitorOutageState(Objects.requireNonNull(defaults));
        }

        /**
         * @param globalConsecutiveOutageCountThreshold (Field has overlap with `dynatrace.BrowserMonitor`) Alert if all locations are unable to access my web application
         * 
         * @return builder
         * 
         */
        public Builder globalConsecutiveOutageCountThreshold(@Nullable Output<Integer> globalConsecutiveOutageCountThreshold) {
            $.globalConsecutiveOutageCountThreshold = globalConsecutiveOutageCountThreshold;
            return this;
        }

        /**
         * @param globalConsecutiveOutageCountThreshold (Field has overlap with `dynatrace.BrowserMonitor`) Alert if all locations are unable to access my web application
         * 
         * @return builder
         * 
         */
        public Builder globalConsecutiveOutageCountThreshold(Integer globalConsecutiveOutageCountThreshold) {
            return globalConsecutiveOutageCountThreshold(Output.of(globalConsecutiveOutageCountThreshold));
        }

        /**
         * @param globalOutages (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
         * 
         * @return builder
         * 
         */
        public Builder globalOutages(@Nullable Output<Boolean> globalOutages) {
            $.globalOutages = globalOutages;
            return this;
        }

        /**
         * @param globalOutages (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
         * 
         * @return builder
         * 
         */
        public Builder globalOutages(Boolean globalOutages) {
            return globalOutages(Output.of(globalOutages));
        }

        /**
         * @param localConsecutiveOutageCountThreshold (Field has overlap with `dynatrace.BrowserMonitor`) are unable to access my web application
         * 
         * @return builder
         * 
         */
        public Builder localConsecutiveOutageCountThreshold(@Nullable Output<Integer> localConsecutiveOutageCountThreshold) {
            $.localConsecutiveOutageCountThreshold = localConsecutiveOutageCountThreshold;
            return this;
        }

        /**
         * @param localConsecutiveOutageCountThreshold (Field has overlap with `dynatrace.BrowserMonitor`) are unable to access my web application
         * 
         * @return builder
         * 
         */
        public Builder localConsecutiveOutageCountThreshold(Integer localConsecutiveOutageCountThreshold) {
            return localConsecutiveOutageCountThreshold(Output.of(localConsecutiveOutageCountThreshold));
        }

        /**
         * @param localLocationOutageCountThreshold (Field has overlap with `dynatrace.BrowserMonitor`) Alert if at least
         * 
         * @return builder
         * 
         */
        public Builder localLocationOutageCountThreshold(@Nullable Output<Integer> localLocationOutageCountThreshold) {
            $.localLocationOutageCountThreshold = localLocationOutageCountThreshold;
            return this;
        }

        /**
         * @param localLocationOutageCountThreshold (Field has overlap with `dynatrace.BrowserMonitor`) Alert if at least
         * 
         * @return builder
         * 
         */
        public Builder localLocationOutageCountThreshold(Integer localLocationOutageCountThreshold) {
            return localLocationOutageCountThreshold(Output.of(localLocationOutageCountThreshold));
        }

        /**
         * @param localOutages (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
         * 
         * @return builder
         * 
         */
        public Builder localOutages(@Nullable Output<Boolean> localOutages) {
            $.localOutages = localOutages;
            return this;
        }

        /**
         * @param localOutages (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
         * 
         * @return builder
         * 
         */
        public Builder localOutages(Boolean localOutages) {
            return localOutages(Output.of(localOutages));
        }

        /**
         * @param retryOnError (Field has overlap with `dynatrace.BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
         * Requires ActiveGate version 1.207+ for private locations.
         * 
         * @return builder
         * 
         */
        public Builder retryOnError(@Nullable Output<Boolean> retryOnError) {
            $.retryOnError = retryOnError;
            return this;
        }

        /**
         * @param retryOnError (Field has overlap with `dynatrace.BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
         * Requires ActiveGate version 1.207+ for private locations.
         * 
         * @return builder
         * 
         */
        public Builder retryOnError(Boolean retryOnError) {
            return retryOnError(Output.of(retryOnError));
        }

        /**
         * @param scope The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public BrowserMonitorOutageState build() {
            return $;
        }
    }

}
