// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.ProcessMonitoringRuleConditionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProcessMonitoringRuleState extends com.pulumi.resources.ResourceArgs {

    public static final ProcessMonitoringRuleState Empty = new ProcessMonitoringRuleState();

    /**
     * Condition
     * 
     */
    @Import(name="condition")
    private @Nullable Output<ProcessMonitoringRuleConditionArgs> condition;

    /**
     * @return Condition
     * 
     */
    public Optional<Output<ProcessMonitoringRuleConditionArgs>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope
     * 
     */
    @Import(name="hostGroupId")
    private @Nullable Output<String> hostGroupId;

    /**
     * @return The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope
     * 
     */
    public Optional<Output<String>> hostGroupId() {
        return Optional.ofNullable(this.hostGroupId);
    }

    /**
     * Possible Values: `MONITORING_ON`, `MONITORING_OFF`
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Possible Values: `MONITORING_ON`, `MONITORING_OFF`
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    private ProcessMonitoringRuleState() {}

    private ProcessMonitoringRuleState(ProcessMonitoringRuleState $) {
        this.condition = $.condition;
        this.enabled = $.enabled;
        this.hostGroupId = $.hostGroupId;
        this.mode = $.mode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProcessMonitoringRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProcessMonitoringRuleState $;

        public Builder() {
            $ = new ProcessMonitoringRuleState();
        }

        public Builder(ProcessMonitoringRuleState defaults) {
            $ = new ProcessMonitoringRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param condition Condition
         * 
         * @return builder
         * 
         */
        public Builder condition(@Nullable Output<ProcessMonitoringRuleConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition Condition
         * 
         * @return builder
         * 
         */
        public Builder condition(ProcessMonitoringRuleConditionArgs condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param hostGroupId The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope
         * 
         * @return builder
         * 
         */
        public Builder hostGroupId(@Nullable Output<String> hostGroupId) {
            $.hostGroupId = hostGroupId;
            return this;
        }

        /**
         * @param hostGroupId The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope
         * 
         * @return builder
         * 
         */
        public Builder hostGroupId(String hostGroupId) {
            return hostGroupId(Output.of(hostGroupId));
        }

        /**
         * @param mode Possible Values: `MONITORING_ON`, `MONITORING_OFF`
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Possible Values: `MONITORING_ON`, `MONITORING_OFF`
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        public ProcessMonitoringRuleState build() {
            return $;
        }
    }

}
