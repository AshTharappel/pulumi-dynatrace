// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.ServiceExternalWebRequestIdContributorsApplicationIdArgs;
import com.pulumi.dynatrace.inputs.ServiceExternalWebRequestIdContributorsContextRootArgs;
import com.pulumi.dynatrace.inputs.ServiceExternalWebRequestIdContributorsPublicDomainNameArgs;
import java.lang.Boolean;
import java.util.Objects;


public final class ServiceExternalWebRequestIdContributorsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceExternalWebRequestIdContributorsArgs Empty = new ServiceExternalWebRequestIdContributorsArgs();

    /**
     * Application identifier
     * 
     */
    @Import(name="applicationId", required=true)
    private Output<ServiceExternalWebRequestIdContributorsApplicationIdArgs> applicationId;

    /**
     * @return Application identifier
     * 
     */
    public Output<ServiceExternalWebRequestIdContributorsApplicationIdArgs> applicationId() {
        return this.applicationId;
    }

    /**
     * URL context root
     * 
     */
    @Import(name="contextRoot", required=true)
    private Output<ServiceExternalWebRequestIdContributorsContextRootArgs> contextRoot;

    /**
     * @return URL context root
     * 
     */
    public Output<ServiceExternalWebRequestIdContributorsContextRootArgs> contextRoot() {
        return this.contextRoot;
    }

    /**
     * Let the Port contribute to the Service Id
     * 
     */
    @Import(name="portForServiceId", required=true)
    private Output<Boolean> portForServiceId;

    /**
     * @return Let the Port contribute to the Service Id
     * 
     */
    public Output<Boolean> portForServiceId() {
        return this.portForServiceId;
    }

    /**
     * Public domain name
     * 
     */
    @Import(name="publicDomainName", required=true)
    private Output<ServiceExternalWebRequestIdContributorsPublicDomainNameArgs> publicDomainName;

    /**
     * @return Public domain name
     * 
     */
    public Output<ServiceExternalWebRequestIdContributorsPublicDomainNameArgs> publicDomainName() {
        return this.publicDomainName;
    }

    private ServiceExternalWebRequestIdContributorsArgs() {}

    private ServiceExternalWebRequestIdContributorsArgs(ServiceExternalWebRequestIdContributorsArgs $) {
        this.applicationId = $.applicationId;
        this.contextRoot = $.contextRoot;
        this.portForServiceId = $.portForServiceId;
        this.publicDomainName = $.publicDomainName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceExternalWebRequestIdContributorsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceExternalWebRequestIdContributorsArgs $;

        public Builder() {
            $ = new ServiceExternalWebRequestIdContributorsArgs();
        }

        public Builder(ServiceExternalWebRequestIdContributorsArgs defaults) {
            $ = new ServiceExternalWebRequestIdContributorsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId Application identifier
         * 
         * @return builder
         * 
         */
        public Builder applicationId(Output<ServiceExternalWebRequestIdContributorsApplicationIdArgs> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId Application identifier
         * 
         * @return builder
         * 
         */
        public Builder applicationId(ServiceExternalWebRequestIdContributorsApplicationIdArgs applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param contextRoot URL context root
         * 
         * @return builder
         * 
         */
        public Builder contextRoot(Output<ServiceExternalWebRequestIdContributorsContextRootArgs> contextRoot) {
            $.contextRoot = contextRoot;
            return this;
        }

        /**
         * @param contextRoot URL context root
         * 
         * @return builder
         * 
         */
        public Builder contextRoot(ServiceExternalWebRequestIdContributorsContextRootArgs contextRoot) {
            return contextRoot(Output.of(contextRoot));
        }

        /**
         * @param portForServiceId Let the Port contribute to the Service Id
         * 
         * @return builder
         * 
         */
        public Builder portForServiceId(Output<Boolean> portForServiceId) {
            $.portForServiceId = portForServiceId;
            return this;
        }

        /**
         * @param portForServiceId Let the Port contribute to the Service Id
         * 
         * @return builder
         * 
         */
        public Builder portForServiceId(Boolean portForServiceId) {
            return portForServiceId(Output.of(portForServiceId));
        }

        /**
         * @param publicDomainName Public domain name
         * 
         * @return builder
         * 
         */
        public Builder publicDomainName(Output<ServiceExternalWebRequestIdContributorsPublicDomainNameArgs> publicDomainName) {
            $.publicDomainName = publicDomainName;
            return this;
        }

        /**
         * @param publicDomainName Public domain name
         * 
         * @return builder
         * 
         */
        public Builder publicDomainName(ServiceExternalWebRequestIdContributorsPublicDomainNameArgs publicDomainName) {
            return publicDomainName(Output.of(publicDomainName));
        }

        public ServiceExternalWebRequestIdContributorsArgs build() {
            $.applicationId = Objects.requireNonNull($.applicationId, "expected parameter 'applicationId' to be non-null");
            $.contextRoot = Objects.requireNonNull($.contextRoot, "expected parameter 'contextRoot' to be non-null");
            $.portForServiceId = Objects.requireNonNull($.portForServiceId, "expected parameter 'portForServiceId' to be non-null");
            $.publicDomainName = Objects.requireNonNull($.publicDomainName, "expected parameter 'publicDomainName' to be non-null");
            return $;
        }
    }

}
