// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GenericTypesRulesRuleSourcesSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final GenericTypesRulesRuleSourcesSourceArgs Empty = new GenericTypesRulesRuleSourcesSourceArgs();

    @Import(name="condition")
    private @Nullable Output<String> condition;

    public Optional<Output<String>> condition() {
        return Optional.ofNullable(this.condition);
    }

    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    public Output<String> sourceType() {
        return this.sourceType;
    }

    private GenericTypesRulesRuleSourcesSourceArgs() {}

    private GenericTypesRulesRuleSourcesSourceArgs(GenericTypesRulesRuleSourcesSourceArgs $) {
        this.condition = $.condition;
        this.sourceType = $.sourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GenericTypesRulesRuleSourcesSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GenericTypesRulesRuleSourcesSourceArgs $;

        public Builder() {
            $ = new GenericTypesRulesRuleSourcesSourceArgs();
        }

        public Builder(GenericTypesRulesRuleSourcesSourceArgs defaults) {
            $ = new GenericTypesRulesRuleSourcesSourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder condition(@Nullable Output<String> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        public GenericTypesRulesRuleSourcesSourceArgs build() {
            $.sourceType = Objects.requireNonNull($.sourceType, "expected parameter 'sourceType' to be non-null");
            return $;
        }
    }

}
