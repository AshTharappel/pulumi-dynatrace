// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricEventsModelPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricEventsModelPropertiesArgs Empty = new MetricEventsModelPropertiesArgs();

    /**
     * The alert condition of the model properties
     * 
     */
    @Import(name="alertCondition", required=true)
    private Output<String> alertCondition;

    /**
     * @return The alert condition of the model properties
     * 
     */
    public Output<String> alertCondition() {
        return this.alertCondition;
    }

    /**
     * The ability to set an alert on missing data in a metric. When enabled, missing data samples will contribute as violating samples defined in advanced model properties. We recommend to not alert on missing data for sparse timeseries as this leads to alert spam.
     * 
     */
    @Import(name="alertOnNoData", required=true)
    private Output<Boolean> alertOnNoData;

    /**
     * @return The ability to set an alert on missing data in a metric. When enabled, missing data samples will contribute as violating samples defined in advanced model properties. We recommend to not alert on missing data for sparse timeseries as this leads to alert spam.
     * 
     */
    public Output<Boolean> alertOnNoData() {
        return this.alertOnNoData;
    }

    /**
     * The number of one-minute samples within the evaluation window that must go back to normal to close the event.
     * 
     */
    @Import(name="dealertingSamples", required=true)
    private Output<Integer> dealertingSamples;

    /**
     * @return The number of one-minute samples within the evaluation window that must go back to normal to close the event.
     * 
     */
    public Output<Integer> dealertingSamples() {
        return this.dealertingSamples;
    }

    /**
     * The number of one-minute samples that form the sliding evaluation window.
     * 
     */
    @Import(name="samples", required=true)
    private Output<Integer> samples;

    /**
     * @return The number of one-minute samples that form the sliding evaluation window.
     * 
     */
    public Output<Integer> samples() {
        return this.samples;
    }

    /**
     * Controls how many times the signal fluctuation is added to the baseline to produce the actual threshold for alerting
     * 
     */
    @Import(name="signalFluctuation")
    private @Nullable Output<Double> signalFluctuation;

    /**
     * @return Controls how many times the signal fluctuation is added to the baseline to produce the actual threshold for alerting
     * 
     */
    public Optional<Output<Double>> signalFluctuation() {
        return Optional.ofNullable(this.signalFluctuation);
    }

    /**
     * Raise an event if this value is violated
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<Double> threshold;

    /**
     * @return Raise an event if this value is violated
     * 
     */
    public Optional<Output<Double>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    /**
     * Controls the width of the confidence band and larger values lead to a less sensitive model
     * 
     */
    @Import(name="tolerance")
    private @Nullable Output<Double> tolerance;

    /**
     * @return Controls the width of the confidence band and larger values lead to a less sensitive model
     * 
     */
    public Optional<Output<Double>> tolerance() {
        return Optional.ofNullable(this.tolerance);
    }

    /**
     * Metric-key-based query definitions only support static thresholds.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Metric-key-based query definitions only support static thresholds.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The number of one-minute samples within the evaluation window that must violate to trigger an event.
     * 
     */
    @Import(name="violatingSamples", required=true)
    private Output<Integer> violatingSamples;

    /**
     * @return The number of one-minute samples within the evaluation window that must violate to trigger an event.
     * 
     */
    public Output<Integer> violatingSamples() {
        return this.violatingSamples;
    }

    private MetricEventsModelPropertiesArgs() {}

    private MetricEventsModelPropertiesArgs(MetricEventsModelPropertiesArgs $) {
        this.alertCondition = $.alertCondition;
        this.alertOnNoData = $.alertOnNoData;
        this.dealertingSamples = $.dealertingSamples;
        this.samples = $.samples;
        this.signalFluctuation = $.signalFluctuation;
        this.threshold = $.threshold;
        this.tolerance = $.tolerance;
        this.type = $.type;
        this.violatingSamples = $.violatingSamples;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricEventsModelPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricEventsModelPropertiesArgs $;

        public Builder() {
            $ = new MetricEventsModelPropertiesArgs();
        }

        public Builder(MetricEventsModelPropertiesArgs defaults) {
            $ = new MetricEventsModelPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alertCondition The alert condition of the model properties
         * 
         * @return builder
         * 
         */
        public Builder alertCondition(Output<String> alertCondition) {
            $.alertCondition = alertCondition;
            return this;
        }

        /**
         * @param alertCondition The alert condition of the model properties
         * 
         * @return builder
         * 
         */
        public Builder alertCondition(String alertCondition) {
            return alertCondition(Output.of(alertCondition));
        }

        /**
         * @param alertOnNoData The ability to set an alert on missing data in a metric. When enabled, missing data samples will contribute as violating samples defined in advanced model properties. We recommend to not alert on missing data for sparse timeseries as this leads to alert spam.
         * 
         * @return builder
         * 
         */
        public Builder alertOnNoData(Output<Boolean> alertOnNoData) {
            $.alertOnNoData = alertOnNoData;
            return this;
        }

        /**
         * @param alertOnNoData The ability to set an alert on missing data in a metric. When enabled, missing data samples will contribute as violating samples defined in advanced model properties. We recommend to not alert on missing data for sparse timeseries as this leads to alert spam.
         * 
         * @return builder
         * 
         */
        public Builder alertOnNoData(Boolean alertOnNoData) {
            return alertOnNoData(Output.of(alertOnNoData));
        }

        /**
         * @param dealertingSamples The number of one-minute samples within the evaluation window that must go back to normal to close the event.
         * 
         * @return builder
         * 
         */
        public Builder dealertingSamples(Output<Integer> dealertingSamples) {
            $.dealertingSamples = dealertingSamples;
            return this;
        }

        /**
         * @param dealertingSamples The number of one-minute samples within the evaluation window that must go back to normal to close the event.
         * 
         * @return builder
         * 
         */
        public Builder dealertingSamples(Integer dealertingSamples) {
            return dealertingSamples(Output.of(dealertingSamples));
        }

        /**
         * @param samples The number of one-minute samples that form the sliding evaluation window.
         * 
         * @return builder
         * 
         */
        public Builder samples(Output<Integer> samples) {
            $.samples = samples;
            return this;
        }

        /**
         * @param samples The number of one-minute samples that form the sliding evaluation window.
         * 
         * @return builder
         * 
         */
        public Builder samples(Integer samples) {
            return samples(Output.of(samples));
        }

        /**
         * @param signalFluctuation Controls how many times the signal fluctuation is added to the baseline to produce the actual threshold for alerting
         * 
         * @return builder
         * 
         */
        public Builder signalFluctuation(@Nullable Output<Double> signalFluctuation) {
            $.signalFluctuation = signalFluctuation;
            return this;
        }

        /**
         * @param signalFluctuation Controls how many times the signal fluctuation is added to the baseline to produce the actual threshold for alerting
         * 
         * @return builder
         * 
         */
        public Builder signalFluctuation(Double signalFluctuation) {
            return signalFluctuation(Output.of(signalFluctuation));
        }

        /**
         * @param threshold Raise an event if this value is violated
         * 
         * @return builder
         * 
         */
        public Builder threshold(@Nullable Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold Raise an event if this value is violated
         * 
         * @return builder
         * 
         */
        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        /**
         * @param tolerance Controls the width of the confidence band and larger values lead to a less sensitive model
         * 
         * @return builder
         * 
         */
        public Builder tolerance(@Nullable Output<Double> tolerance) {
            $.tolerance = tolerance;
            return this;
        }

        /**
         * @param tolerance Controls the width of the confidence band and larger values lead to a less sensitive model
         * 
         * @return builder
         * 
         */
        public Builder tolerance(Double tolerance) {
            return tolerance(Output.of(tolerance));
        }

        /**
         * @param type Metric-key-based query definitions only support static thresholds.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Metric-key-based query definitions only support static thresholds.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param violatingSamples The number of one-minute samples within the evaluation window that must violate to trigger an event.
         * 
         * @return builder
         * 
         */
        public Builder violatingSamples(Output<Integer> violatingSamples) {
            $.violatingSamples = violatingSamples;
            return this;
        }

        /**
         * @param violatingSamples The number of one-minute samples within the evaluation window that must violate to trigger an event.
         * 
         * @return builder
         * 
         */
        public Builder violatingSamples(Integer violatingSamples) {
            return violatingSamples(Output.of(violatingSamples));
        }

        public MetricEventsModelPropertiesArgs build() {
            $.alertCondition = Objects.requireNonNull($.alertCondition, "expected parameter 'alertCondition' to be non-null");
            $.alertOnNoData = Objects.requireNonNull($.alertOnNoData, "expected parameter 'alertOnNoData' to be non-null");
            $.dealertingSamples = Objects.requireNonNull($.dealertingSamples, "expected parameter 'dealertingSamples' to be non-null");
            $.samples = Objects.requireNonNull($.samples, "expected parameter 'samples' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.violatingSamples = Objects.requireNonNull($.violatingSamples, "expected parameter 'violatingSamples' to be non-null");
            return $;
        }
    }

}
