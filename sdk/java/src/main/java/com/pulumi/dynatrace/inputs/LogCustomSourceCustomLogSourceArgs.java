// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class LogCustomSourceCustomLogSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogCustomSourceCustomLogSourceArgs Empty = new LogCustomSourceCustomLogSourceArgs();

    /**
     * Possible Values: `LOG_PATH_PATTERN`, `WINDOWS_EVENT_LOG`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Possible Values: `LOG_PATH_PATTERN`, `WINDOWS_EVENT_LOG`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * It might be either an absolute path to log(s) with optional wildcards or Windows Event Log name.
     * 
     */
    @Import(name="values", required=true)
    private Output<List<String>> values;

    /**
     * @return It might be either an absolute path to log(s) with optional wildcards or Windows Event Log name.
     * 
     */
    public Output<List<String>> values() {
        return this.values;
    }

    private LogCustomSourceCustomLogSourceArgs() {}

    private LogCustomSourceCustomLogSourceArgs(LogCustomSourceCustomLogSourceArgs $) {
        this.type = $.type;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogCustomSourceCustomLogSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogCustomSourceCustomLogSourceArgs $;

        public Builder() {
            $ = new LogCustomSourceCustomLogSourceArgs();
        }

        public Builder(LogCustomSourceCustomLogSourceArgs defaults) {
            $ = new LogCustomSourceCustomLogSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param type Possible Values: `LOG_PATH_PATTERN`, `WINDOWS_EVENT_LOG`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Possible Values: `LOG_PATH_PATTERN`, `WINDOWS_EVENT_LOG`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param values It might be either an absolute path to log(s) with optional wildcards or Windows Event Log name.
         * 
         * @return builder
         * 
         */
        public Builder values(Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values It might be either an absolute path to log(s) with optional wildcards or Windows Event Log name.
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values It might be either an absolute path to log(s) with optional wildcards or Windows Event Log name.
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public LogCustomSourceCustomLogSourceArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.values = Objects.requireNonNull($.values, "expected parameter 'values' to be non-null");
            return $;
        }
    }

}
