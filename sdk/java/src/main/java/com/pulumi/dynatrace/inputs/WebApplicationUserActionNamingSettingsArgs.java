// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.WebApplicationUserActionNamingSettingsCustomActionNamingRulesArgs;
import com.pulumi.dynatrace.inputs.WebApplicationUserActionNamingSettingsLoadActionNamingRulesArgs;
import com.pulumi.dynatrace.inputs.WebApplicationUserActionNamingSettingsPlaceholdersArgs;
import com.pulumi.dynatrace.inputs.WebApplicationUserActionNamingSettingsXhrActionNamingRulesArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebApplicationUserActionNamingSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebApplicationUserActionNamingSettingsArgs Empty = new WebApplicationUserActionNamingSettingsArgs();

    /**
     * User action naming rules for custom actions
     * 
     */
    @Import(name="customActionNamingRules")
    private @Nullable Output<WebApplicationUserActionNamingSettingsCustomActionNamingRulesArgs> customActionNamingRules;

    /**
     * @return User action naming rules for custom actions
     * 
     */
    public Optional<Output<WebApplicationUserActionNamingSettingsCustomActionNamingRulesArgs>> customActionNamingRules() {
        return Optional.ofNullable(this.customActionNamingRules);
    }

    /**
     * Case insensitive naming
     * 
     */
    @Import(name="ignoreCase")
    private @Nullable Output<Boolean> ignoreCase;

    /**
     * @return Case insensitive naming
     * 
     */
    public Optional<Output<Boolean>> ignoreCase() {
        return Optional.ofNullable(this.ignoreCase);
    }

    /**
     * User action naming rules for loading actions
     * 
     */
    @Import(name="loadActionNamingRules")
    private @Nullable Output<WebApplicationUserActionNamingSettingsLoadActionNamingRulesArgs> loadActionNamingRules;

    /**
     * @return User action naming rules for loading actions
     * 
     */
    public Optional<Output<WebApplicationUserActionNamingSettingsLoadActionNamingRulesArgs>> loadActionNamingRules() {
        return Optional.ofNullable(this.loadActionNamingRules);
    }

    /**
     * User action placeholders
     * 
     */
    @Import(name="placeholders")
    private @Nullable Output<WebApplicationUserActionNamingSettingsPlaceholdersArgs> placeholders;

    /**
     * @return User action placeholders
     * 
     */
    public Optional<Output<WebApplicationUserActionNamingSettingsPlaceholdersArgs>> placeholders() {
        return Optional.ofNullable(this.placeholders);
    }

    /**
     * User action naming rules for custom actions
     * 
     */
    @Import(name="queryParameterCleanups")
    private @Nullable Output<List<String>> queryParameterCleanups;

    /**
     * @return User action naming rules for custom actions
     * 
     */
    public Optional<Output<List<String>>> queryParameterCleanups() {
        return Optional.ofNullable(this.queryParameterCleanups);
    }

    /**
     * Deactivate this setting if different domains should not result in separate user actions
     * 
     */
    @Import(name="splitUserActionsByDomain")
    private @Nullable Output<Boolean> splitUserActionsByDomain;

    /**
     * @return Deactivate this setting if different domains should not result in separate user actions
     * 
     */
    public Optional<Output<Boolean>> splitUserActionsByDomain() {
        return Optional.ofNullable(this.splitUserActionsByDomain);
    }

    /**
     * First load action found under an XHR action should be used when true. Else the deepest one under the xhr action is used
     * 
     */
    @Import(name="useFirstDetectedLoadAction")
    private @Nullable Output<Boolean> useFirstDetectedLoadAction;

    /**
     * @return First load action found under an XHR action should be used when true. Else the deepest one under the xhr action is used
     * 
     */
    public Optional<Output<Boolean>> useFirstDetectedLoadAction() {
        return Optional.ofNullable(this.useFirstDetectedLoadAction);
    }

    /**
     * User action naming rules for XHR actions
     * 
     */
    @Import(name="xhrActionNamingRules")
    private @Nullable Output<WebApplicationUserActionNamingSettingsXhrActionNamingRulesArgs> xhrActionNamingRules;

    /**
     * @return User action naming rules for XHR actions
     * 
     */
    public Optional<Output<WebApplicationUserActionNamingSettingsXhrActionNamingRulesArgs>> xhrActionNamingRules() {
        return Optional.ofNullable(this.xhrActionNamingRules);
    }

    private WebApplicationUserActionNamingSettingsArgs() {}

    private WebApplicationUserActionNamingSettingsArgs(WebApplicationUserActionNamingSettingsArgs $) {
        this.customActionNamingRules = $.customActionNamingRules;
        this.ignoreCase = $.ignoreCase;
        this.loadActionNamingRules = $.loadActionNamingRules;
        this.placeholders = $.placeholders;
        this.queryParameterCleanups = $.queryParameterCleanups;
        this.splitUserActionsByDomain = $.splitUserActionsByDomain;
        this.useFirstDetectedLoadAction = $.useFirstDetectedLoadAction;
        this.xhrActionNamingRules = $.xhrActionNamingRules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebApplicationUserActionNamingSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebApplicationUserActionNamingSettingsArgs $;

        public Builder() {
            $ = new WebApplicationUserActionNamingSettingsArgs();
        }

        public Builder(WebApplicationUserActionNamingSettingsArgs defaults) {
            $ = new WebApplicationUserActionNamingSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customActionNamingRules User action naming rules for custom actions
         * 
         * @return builder
         * 
         */
        public Builder customActionNamingRules(@Nullable Output<WebApplicationUserActionNamingSettingsCustomActionNamingRulesArgs> customActionNamingRules) {
            $.customActionNamingRules = customActionNamingRules;
            return this;
        }

        /**
         * @param customActionNamingRules User action naming rules for custom actions
         * 
         * @return builder
         * 
         */
        public Builder customActionNamingRules(WebApplicationUserActionNamingSettingsCustomActionNamingRulesArgs customActionNamingRules) {
            return customActionNamingRules(Output.of(customActionNamingRules));
        }

        /**
         * @param ignoreCase Case insensitive naming
         * 
         * @return builder
         * 
         */
        public Builder ignoreCase(@Nullable Output<Boolean> ignoreCase) {
            $.ignoreCase = ignoreCase;
            return this;
        }

        /**
         * @param ignoreCase Case insensitive naming
         * 
         * @return builder
         * 
         */
        public Builder ignoreCase(Boolean ignoreCase) {
            return ignoreCase(Output.of(ignoreCase));
        }

        /**
         * @param loadActionNamingRules User action naming rules for loading actions
         * 
         * @return builder
         * 
         */
        public Builder loadActionNamingRules(@Nullable Output<WebApplicationUserActionNamingSettingsLoadActionNamingRulesArgs> loadActionNamingRules) {
            $.loadActionNamingRules = loadActionNamingRules;
            return this;
        }

        /**
         * @param loadActionNamingRules User action naming rules for loading actions
         * 
         * @return builder
         * 
         */
        public Builder loadActionNamingRules(WebApplicationUserActionNamingSettingsLoadActionNamingRulesArgs loadActionNamingRules) {
            return loadActionNamingRules(Output.of(loadActionNamingRules));
        }

        /**
         * @param placeholders User action placeholders
         * 
         * @return builder
         * 
         */
        public Builder placeholders(@Nullable Output<WebApplicationUserActionNamingSettingsPlaceholdersArgs> placeholders) {
            $.placeholders = placeholders;
            return this;
        }

        /**
         * @param placeholders User action placeholders
         * 
         * @return builder
         * 
         */
        public Builder placeholders(WebApplicationUserActionNamingSettingsPlaceholdersArgs placeholders) {
            return placeholders(Output.of(placeholders));
        }

        /**
         * @param queryParameterCleanups User action naming rules for custom actions
         * 
         * @return builder
         * 
         */
        public Builder queryParameterCleanups(@Nullable Output<List<String>> queryParameterCleanups) {
            $.queryParameterCleanups = queryParameterCleanups;
            return this;
        }

        /**
         * @param queryParameterCleanups User action naming rules for custom actions
         * 
         * @return builder
         * 
         */
        public Builder queryParameterCleanups(List<String> queryParameterCleanups) {
            return queryParameterCleanups(Output.of(queryParameterCleanups));
        }

        /**
         * @param queryParameterCleanups User action naming rules for custom actions
         * 
         * @return builder
         * 
         */
        public Builder queryParameterCleanups(String... queryParameterCleanups) {
            return queryParameterCleanups(List.of(queryParameterCleanups));
        }

        /**
         * @param splitUserActionsByDomain Deactivate this setting if different domains should not result in separate user actions
         * 
         * @return builder
         * 
         */
        public Builder splitUserActionsByDomain(@Nullable Output<Boolean> splitUserActionsByDomain) {
            $.splitUserActionsByDomain = splitUserActionsByDomain;
            return this;
        }

        /**
         * @param splitUserActionsByDomain Deactivate this setting if different domains should not result in separate user actions
         * 
         * @return builder
         * 
         */
        public Builder splitUserActionsByDomain(Boolean splitUserActionsByDomain) {
            return splitUserActionsByDomain(Output.of(splitUserActionsByDomain));
        }

        /**
         * @param useFirstDetectedLoadAction First load action found under an XHR action should be used when true. Else the deepest one under the xhr action is used
         * 
         * @return builder
         * 
         */
        public Builder useFirstDetectedLoadAction(@Nullable Output<Boolean> useFirstDetectedLoadAction) {
            $.useFirstDetectedLoadAction = useFirstDetectedLoadAction;
            return this;
        }

        /**
         * @param useFirstDetectedLoadAction First load action found under an XHR action should be used when true. Else the deepest one under the xhr action is used
         * 
         * @return builder
         * 
         */
        public Builder useFirstDetectedLoadAction(Boolean useFirstDetectedLoadAction) {
            return useFirstDetectedLoadAction(Output.of(useFirstDetectedLoadAction));
        }

        /**
         * @param xhrActionNamingRules User action naming rules for XHR actions
         * 
         * @return builder
         * 
         */
        public Builder xhrActionNamingRules(@Nullable Output<WebApplicationUserActionNamingSettingsXhrActionNamingRulesArgs> xhrActionNamingRules) {
            $.xhrActionNamingRules = xhrActionNamingRules;
            return this;
        }

        /**
         * @param xhrActionNamingRules User action naming rules for XHR actions
         * 
         * @return builder
         * 
         */
        public Builder xhrActionNamingRules(WebApplicationUserActionNamingSettingsXhrActionNamingRulesArgs xhrActionNamingRules) {
            return xhrActionNamingRules(Output.of(xhrActionNamingRules));
        }

        public WebApplicationUserActionNamingSettingsArgs build() {
            return $;
        }
    }

}
