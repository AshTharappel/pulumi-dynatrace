// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.AlertingProfileArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.AlertingProfileState;
import com.pulumi.dynatrace.outputs.AlertingProfileEventTypeFilter;
import com.pulumi.dynatrace.outputs.AlertingProfileMetadata;
import com.pulumi.dynatrace.outputs.AlertingProfileRule;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/alertingProfile:AlertingProfile")
public class AlertingProfile extends com.pulumi.resources.CustomResource {
    /**
     * The name of the alerting profile, displayed in the UI
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The name of the alerting profile, displayed in the UI
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
     * 
     */
    @Export(name="eventTypeFilters", refs={List.class,AlertingProfileEventTypeFilter.class}, tree="[0,1]")
    private Output</* @Nullable */ List<AlertingProfileEventTypeFilter>> eventTypeFilters;

    /**
     * @return The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
     * 
     */
    public Output<Optional<List<AlertingProfileEventTypeFilter>>> eventTypeFilters() {
        return Codegen.optional(this.eventTypeFilters);
    }
    /**
     * `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
     * 
     * @deprecated
     * `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
     * 
     */
    @Deprecated /* `metadata` exists for backwards compatibility but shouldn't get specified anymore */
    @Export(name="metadata", refs={AlertingProfileMetadata.class}, tree="[0]")
    private Output</* @Nullable */ AlertingProfileMetadata> metadata;

    /**
     * @return `metadata` exists for backwards compatibility but shouldn&#39;t get specified anymore
     * 
     */
    public Output<Optional<AlertingProfileMetadata>> metadata() {
        return Codegen.optional(this.metadata);
    }
    /**
     * The ID of the management zone to which the alerting profile applies
     * 
     */
    @Export(name="mzId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mzId;

    /**
     * @return The ID of the management zone to which the alerting profile applies
     * 
     */
    public Output<Optional<String>> mzId() {
        return Codegen.optional(this.mzId);
    }
    /**
     * A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
     * 
     */
    @Export(name="rules", refs={List.class,AlertingProfileRule.class}, tree="[0,1]")
    private Output</* @Nullable */ List<AlertingProfileRule>> rules;

    /**
     * @return A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
     * 
     */
    public Output<Optional<List<AlertingProfileRule>>> rules() {
        return Codegen.optional(this.rules);
    }
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Export(name="unknowns", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Output<Optional<String>> unknowns() {
        return Codegen.optional(this.unknowns);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AlertingProfile(String name) {
        this(name, AlertingProfileArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AlertingProfile(String name, AlertingProfileArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AlertingProfile(String name, AlertingProfileArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/alertingProfile:AlertingProfile", name, args == null ? AlertingProfileArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private AlertingProfile(String name, Output<String> id, @Nullable AlertingProfileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/alertingProfile:AlertingProfile", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AlertingProfile get(String name, Output<String> id, @Nullable AlertingProfileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AlertingProfile(name, id, state, options);
    }
}
