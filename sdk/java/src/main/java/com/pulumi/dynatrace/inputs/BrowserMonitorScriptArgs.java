// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptConfigurationArgs;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptEventsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BrowserMonitorScriptArgs extends com.pulumi.resources.ResourceArgs {

    public static final BrowserMonitorScriptArgs Empty = new BrowserMonitorScriptArgs();

    /**
     * The setup of the monitor
     * 
     */
    @Import(name="configuration")
    private @Nullable Output<BrowserMonitorScriptConfigurationArgs> configuration;

    /**
     * @return The setup of the monitor
     * 
     */
    public Optional<Output<BrowserMonitorScriptConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * Steps of the clickpath—the first step must always be of the `navigate` type
     * 
     */
    @Import(name="events")
    private @Nullable Output<BrowserMonitorScriptEventsArgs> events;

    /**
     * @return Steps of the clickpath—the first step must always be of the `navigate` type
     * 
     */
    public Optional<Output<BrowserMonitorScriptEventsArgs>> events() {
        return Optional.ofNullable(this.events);
    }

    /**
     * The type of monitor. Possible values are `clickpath` for clickpath monitors and `availability` for single-URL browser monitors. These monitors are only allowed to have one event of the `navigate` type
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of monitor. Possible values are `clickpath` for clickpath monitors and `availability` for single-URL browser monitors. These monitors are only allowed to have one event of the `navigate` type
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private BrowserMonitorScriptArgs() {}

    private BrowserMonitorScriptArgs(BrowserMonitorScriptArgs $) {
        this.configuration = $.configuration;
        this.events = $.events;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrowserMonitorScriptArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrowserMonitorScriptArgs $;

        public Builder() {
            $ = new BrowserMonitorScriptArgs();
        }

        public Builder(BrowserMonitorScriptArgs defaults) {
            $ = new BrowserMonitorScriptArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configuration The setup of the monitor
         * 
         * @return builder
         * 
         */
        public Builder configuration(@Nullable Output<BrowserMonitorScriptConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration The setup of the monitor
         * 
         * @return builder
         * 
         */
        public Builder configuration(BrowserMonitorScriptConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param events Steps of the clickpath—the first step must always be of the `navigate` type
         * 
         * @return builder
         * 
         */
        public Builder events(@Nullable Output<BrowserMonitorScriptEventsArgs> events) {
            $.events = events;
            return this;
        }

        /**
         * @param events Steps of the clickpath—the first step must always be of the `navigate` type
         * 
         * @return builder
         * 
         */
        public Builder events(BrowserMonitorScriptEventsArgs events) {
            return events(Output.of(events));
        }

        /**
         * @param type The type of monitor. Possible values are `clickpath` for clickpath monitors and `availability` for single-URL browser monitors. These monitors are only allowed to have one event of the `navigate` type
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of monitor. Possible values are `clickpath` for clickpath monitors and `availability` for single-URL browser monitors. These monitors are only allowed to have one event of the `navigate` type
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public BrowserMonitorScriptArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
