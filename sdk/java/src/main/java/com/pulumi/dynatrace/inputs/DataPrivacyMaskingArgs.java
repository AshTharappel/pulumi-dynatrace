// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataPrivacyMaskingArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataPrivacyMaskingArgs Empty = new DataPrivacyMaskingArgs();

    @Import(name="ipAddressMasking")
    private @Nullable Output<String> ipAddressMasking;

    public Optional<Output<String>> ipAddressMasking() {
        return Optional.ofNullable(this.ipAddressMasking);
    }

    /**
     * Dynatrace captures the IP addresses of your end-users to determine the regions from which they access your application. To learn more, visit [Mask IPs and GPS coordinates](https://dt-url.net/mask-end-users-ip-addresses).. Dynatrace also captures GPS data from mobile apps that provide their users with the option of sharing geolocation data. On the server side, Dynatrace captures IP addresses to enable detailed troubleshooting for Dynatrace service calls.
     * 
     */
    @Import(name="ipAddressMaskingEnabled", required=true)
    private Output<Boolean> ipAddressMaskingEnabled;

    /**
     * @return Dynatrace captures the IP addresses of your end-users to determine the regions from which they access your application. To learn more, visit [Mask IPs and GPS coordinates](https://dt-url.net/mask-end-users-ip-addresses).. Dynatrace also captures GPS data from mobile apps that provide their users with the option of sharing geolocation data. On the server side, Dynatrace captures IP addresses to enable detailed troubleshooting for Dynatrace service calls.
     * 
     */
    public Output<Boolean> ipAddressMaskingEnabled() {
        return this.ipAddressMaskingEnabled;
    }

    @Import(name="personalDataUriMaskingEnabled", required=true)
    private Output<Boolean> personalDataUriMaskingEnabled;

    public Output<Boolean> personalDataUriMaskingEnabled() {
        return this.personalDataUriMaskingEnabled;
    }

    @Import(name="userActionMaskingEnabled", required=true)
    private Output<Boolean> userActionMaskingEnabled;

    public Output<Boolean> userActionMaskingEnabled() {
        return this.userActionMaskingEnabled;
    }

    private DataPrivacyMaskingArgs() {}

    private DataPrivacyMaskingArgs(DataPrivacyMaskingArgs $) {
        this.ipAddressMasking = $.ipAddressMasking;
        this.ipAddressMaskingEnabled = $.ipAddressMaskingEnabled;
        this.personalDataUriMaskingEnabled = $.personalDataUriMaskingEnabled;
        this.userActionMaskingEnabled = $.userActionMaskingEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataPrivacyMaskingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataPrivacyMaskingArgs $;

        public Builder() {
            $ = new DataPrivacyMaskingArgs();
        }

        public Builder(DataPrivacyMaskingArgs defaults) {
            $ = new DataPrivacyMaskingArgs(Objects.requireNonNull(defaults));
        }

        public Builder ipAddressMasking(@Nullable Output<String> ipAddressMasking) {
            $.ipAddressMasking = ipAddressMasking;
            return this;
        }

        public Builder ipAddressMasking(String ipAddressMasking) {
            return ipAddressMasking(Output.of(ipAddressMasking));
        }

        /**
         * @param ipAddressMaskingEnabled Dynatrace captures the IP addresses of your end-users to determine the regions from which they access your application. To learn more, visit [Mask IPs and GPS coordinates](https://dt-url.net/mask-end-users-ip-addresses).. Dynatrace also captures GPS data from mobile apps that provide their users with the option of sharing geolocation data. On the server side, Dynatrace captures IP addresses to enable detailed troubleshooting for Dynatrace service calls.
         * 
         * @return builder
         * 
         */
        public Builder ipAddressMaskingEnabled(Output<Boolean> ipAddressMaskingEnabled) {
            $.ipAddressMaskingEnabled = ipAddressMaskingEnabled;
            return this;
        }

        /**
         * @param ipAddressMaskingEnabled Dynatrace captures the IP addresses of your end-users to determine the regions from which they access your application. To learn more, visit [Mask IPs and GPS coordinates](https://dt-url.net/mask-end-users-ip-addresses).. Dynatrace also captures GPS data from mobile apps that provide their users with the option of sharing geolocation data. On the server side, Dynatrace captures IP addresses to enable detailed troubleshooting for Dynatrace service calls.
         * 
         * @return builder
         * 
         */
        public Builder ipAddressMaskingEnabled(Boolean ipAddressMaskingEnabled) {
            return ipAddressMaskingEnabled(Output.of(ipAddressMaskingEnabled));
        }

        public Builder personalDataUriMaskingEnabled(Output<Boolean> personalDataUriMaskingEnabled) {
            $.personalDataUriMaskingEnabled = personalDataUriMaskingEnabled;
            return this;
        }

        public Builder personalDataUriMaskingEnabled(Boolean personalDataUriMaskingEnabled) {
            return personalDataUriMaskingEnabled(Output.of(personalDataUriMaskingEnabled));
        }

        public Builder userActionMaskingEnabled(Output<Boolean> userActionMaskingEnabled) {
            $.userActionMaskingEnabled = userActionMaskingEnabled;
            return this;
        }

        public Builder userActionMaskingEnabled(Boolean userActionMaskingEnabled) {
            return userActionMaskingEnabled(Output.of(userActionMaskingEnabled));
        }

        public DataPrivacyMaskingArgs build() {
            $.ipAddressMaskingEnabled = Objects.requireNonNull($.ipAddressMaskingEnabled, "expected parameter 'ipAddressMaskingEnabled' to be non-null");
            $.personalDataUriMaskingEnabled = Objects.requireNonNull($.personalDataUriMaskingEnabled, "expected parameter 'personalDataUriMaskingEnabled' to be non-null");
            $.userActionMaskingEnabled = Objects.requireNonNull($.userActionMaskingEnabled, "expected parameter 'userActionMaskingEnabled' to be non-null");
            return $;
        }
    }

}
