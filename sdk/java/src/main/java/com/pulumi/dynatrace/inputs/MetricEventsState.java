// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.MetricEventsEventTemplateArgs;
import com.pulumi.dynatrace.inputs.MetricEventsModelPropertiesArgs;
import com.pulumi.dynatrace.inputs.MetricEventsQueryDefinitionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricEventsState extends com.pulumi.resources.ResourceArgs {

    public static final MetricEventsState Empty = new MetricEventsState();

    /**
     * Enabled toggle of metric event entry
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enabled toggle of metric event entry
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Controls the preferred entity type used for triggered events.
     * 
     */
    @Import(name="eventEntityDimensionKey")
    private @Nullable Output<String> eventEntityDimensionKey;

    /**
     * @return Controls the preferred entity type used for triggered events.
     * 
     */
    public Optional<Output<String>> eventEntityDimensionKey() {
        return Optional.ofNullable(this.eventEntityDimensionKey);
    }

    /**
     * The event template of the metric event entry
     * 
     */
    @Import(name="eventTemplate")
    private @Nullable Output<MetricEventsEventTemplateArgs> eventTemplate;

    /**
     * @return The event template of the metric event entry
     * 
     */
    public Optional<Output<MetricEventsEventTemplateArgs>> eventTemplate() {
        return Optional.ofNullable(this.eventTemplate);
    }

    /**
     * The legacy id of the metric event entry
     * 
     */
    @Import(name="legacyId")
    private @Nullable Output<String> legacyId;

    /**
     * @return The legacy id of the metric event entry
     * 
     */
    public Optional<Output<String>> legacyId() {
        return Optional.ofNullable(this.legacyId);
    }

    /**
     * The model properties of the metric event entry
     * 
     */
    @Import(name="modelProperties")
    private @Nullable Output<MetricEventsModelPropertiesArgs> modelProperties;

    /**
     * @return The model properties of the metric event entry
     * 
     */
    public Optional<Output<MetricEventsModelPropertiesArgs>> modelProperties() {
        return Optional.ofNullable(this.modelProperties);
    }

    /**
     * The query definition of the metric event entry
     * 
     */
    @Import(name="queryDefinition")
    private @Nullable Output<MetricEventsQueryDefinitionArgs> queryDefinition;

    /**
     * @return The query definition of the metric event entry
     * 
     */
    public Optional<Output<MetricEventsQueryDefinitionArgs>> queryDefinition() {
        return Optional.ofNullable(this.queryDefinition);
    }

    /**
     * The textual summary of the metric event entry
     * 
     */
    @Import(name="summary")
    private @Nullable Output<String> summary;

    /**
     * @return The textual summary of the metric event entry
     * 
     */
    public Optional<Output<String>> summary() {
        return Optional.ofNullable(this.summary);
    }

    private MetricEventsState() {}

    private MetricEventsState(MetricEventsState $) {
        this.enabled = $.enabled;
        this.eventEntityDimensionKey = $.eventEntityDimensionKey;
        this.eventTemplate = $.eventTemplate;
        this.legacyId = $.legacyId;
        this.modelProperties = $.modelProperties;
        this.queryDefinition = $.queryDefinition;
        this.summary = $.summary;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricEventsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricEventsState $;

        public Builder() {
            $ = new MetricEventsState();
        }

        public Builder(MetricEventsState defaults) {
            $ = new MetricEventsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Enabled toggle of metric event entry
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enabled toggle of metric event entry
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param eventEntityDimensionKey Controls the preferred entity type used for triggered events.
         * 
         * @return builder
         * 
         */
        public Builder eventEntityDimensionKey(@Nullable Output<String> eventEntityDimensionKey) {
            $.eventEntityDimensionKey = eventEntityDimensionKey;
            return this;
        }

        /**
         * @param eventEntityDimensionKey Controls the preferred entity type used for triggered events.
         * 
         * @return builder
         * 
         */
        public Builder eventEntityDimensionKey(String eventEntityDimensionKey) {
            return eventEntityDimensionKey(Output.of(eventEntityDimensionKey));
        }

        /**
         * @param eventTemplate The event template of the metric event entry
         * 
         * @return builder
         * 
         */
        public Builder eventTemplate(@Nullable Output<MetricEventsEventTemplateArgs> eventTemplate) {
            $.eventTemplate = eventTemplate;
            return this;
        }

        /**
         * @param eventTemplate The event template of the metric event entry
         * 
         * @return builder
         * 
         */
        public Builder eventTemplate(MetricEventsEventTemplateArgs eventTemplate) {
            return eventTemplate(Output.of(eventTemplate));
        }

        /**
         * @param legacyId The legacy id of the metric event entry
         * 
         * @return builder
         * 
         */
        public Builder legacyId(@Nullable Output<String> legacyId) {
            $.legacyId = legacyId;
            return this;
        }

        /**
         * @param legacyId The legacy id of the metric event entry
         * 
         * @return builder
         * 
         */
        public Builder legacyId(String legacyId) {
            return legacyId(Output.of(legacyId));
        }

        /**
         * @param modelProperties The model properties of the metric event entry
         * 
         * @return builder
         * 
         */
        public Builder modelProperties(@Nullable Output<MetricEventsModelPropertiesArgs> modelProperties) {
            $.modelProperties = modelProperties;
            return this;
        }

        /**
         * @param modelProperties The model properties of the metric event entry
         * 
         * @return builder
         * 
         */
        public Builder modelProperties(MetricEventsModelPropertiesArgs modelProperties) {
            return modelProperties(Output.of(modelProperties));
        }

        /**
         * @param queryDefinition The query definition of the metric event entry
         * 
         * @return builder
         * 
         */
        public Builder queryDefinition(@Nullable Output<MetricEventsQueryDefinitionArgs> queryDefinition) {
            $.queryDefinition = queryDefinition;
            return this;
        }

        /**
         * @param queryDefinition The query definition of the metric event entry
         * 
         * @return builder
         * 
         */
        public Builder queryDefinition(MetricEventsQueryDefinitionArgs queryDefinition) {
            return queryDefinition(Output.of(queryDefinition));
        }

        /**
         * @param summary The textual summary of the metric event entry
         * 
         * @return builder
         * 
         */
        public Builder summary(@Nullable Output<String> summary) {
            $.summary = summary;
            return this;
        }

        /**
         * @param summary The textual summary of the metric event entry
         * 
         * @return builder
         * 
         */
        public Builder summary(String summary) {
            return summary(Output.of(summary));
        }

        public MetricEventsState build() {
            return $;
        }
    }

}
