// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.LogEventsEventTemplateArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogEventsState extends com.pulumi.resources.ResourceArgs {

    public static final LogEventsState Empty = new LogEventsState();

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Event template
     * 
     */
    @Import(name="eventTemplate")
    private @Nullable Output<LogEventsEventTemplateArgs> eventTemplate;

    /**
     * @return Event template
     * 
     */
    public Optional<Output<LogEventsEventTemplateArgs>> eventTemplate() {
        return Optional.ofNullable(this.eventTemplate);
    }

    /**
     * Log query
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return Log query
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * The textual summary of the log event entry
     * 
     */
    @Import(name="summary")
    private @Nullable Output<String> summary;

    /**
     * @return The textual summary of the log event entry
     * 
     */
    public Optional<Output<String>> summary() {
        return Optional.ofNullable(this.summary);
    }

    private LogEventsState() {}

    private LogEventsState(LogEventsState $) {
        this.enabled = $.enabled;
        this.eventTemplate = $.eventTemplate;
        this.query = $.query;
        this.summary = $.summary;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogEventsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogEventsState $;

        public Builder() {
            $ = new LogEventsState();
        }

        public Builder(LogEventsState defaults) {
            $ = new LogEventsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param eventTemplate Event template
         * 
         * @return builder
         * 
         */
        public Builder eventTemplate(@Nullable Output<LogEventsEventTemplateArgs> eventTemplate) {
            $.eventTemplate = eventTemplate;
            return this;
        }

        /**
         * @param eventTemplate Event template
         * 
         * @return builder
         * 
         */
        public Builder eventTemplate(LogEventsEventTemplateArgs eventTemplate) {
            return eventTemplate(Output.of(eventTemplate));
        }

        /**
         * @param query Log query
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query Log query
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param summary The textual summary of the log event entry
         * 
         * @return builder
         * 
         */
        public Builder summary(@Nullable Output<String> summary) {
            $.summary = summary;
            return this;
        }

        /**
         * @param summary The textual summary of the log event entry
         * 
         * @return builder
         * 
         */
        public Builder summary(String summary) {
            return summary(Output.of(summary));
        }

        public LogEventsState build() {
            return $;
        }
    }

}
