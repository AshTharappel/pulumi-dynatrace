// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DiskOptionsExclusionsExclusion {
    private @Nullable String filesystem;
    private @Nullable String mountpoint;
    private String os;

    private DiskOptionsExclusionsExclusion() {}
    public Optional<String> filesystem() {
        return Optional.ofNullable(this.filesystem);
    }
    public Optional<String> mountpoint() {
        return Optional.ofNullable(this.mountpoint);
    }
    public String os() {
        return this.os;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DiskOptionsExclusionsExclusion defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String filesystem;
        private @Nullable String mountpoint;
        private String os;
        public Builder() {}
        public Builder(DiskOptionsExclusionsExclusion defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filesystem = defaults.filesystem;
    	      this.mountpoint = defaults.mountpoint;
    	      this.os = defaults.os;
        }

        @CustomType.Setter
        public Builder filesystem(@Nullable String filesystem) {
            this.filesystem = filesystem;
            return this;
        }
        @CustomType.Setter
        public Builder mountpoint(@Nullable String mountpoint) {
            this.mountpoint = mountpoint;
            return this;
        }
        @CustomType.Setter
        public Builder os(String os) {
            this.os = Objects.requireNonNull(os);
            return this;
        }
        public DiskOptionsExclusionsExclusion build() {
            final var o = new DiskOptionsExclusionsExclusion();
            o.filesystem = filesystem;
            o.mountpoint = mountpoint;
            o.os = os;
            return o;
        }
    }
}
