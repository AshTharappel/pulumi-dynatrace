// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceFullWebRequestConditionsConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceFullWebRequestConditionsConditionArgs Empty = new ServiceFullWebRequestConditionsConditionArgs();

    @Import(name="attribute", required=true)
    private Output<String> attribute;

    public Output<String> attribute() {
        return this.attribute;
    }

    @Import(name="compareOperationType", required=true)
    private Output<String> compareOperationType;

    public Output<String> compareOperationType() {
        return this.compareOperationType;
    }

    @Import(name="frameworks")
    private @Nullable Output<List<String>> frameworks;

    public Optional<Output<List<String>>> frameworks() {
        return Optional.ofNullable(this.frameworks);
    }

    @Import(name="ignoreCase")
    private @Nullable Output<Boolean> ignoreCase;

    public Optional<Output<Boolean>> ignoreCase() {
        return Optional.ofNullable(this.ignoreCase);
    }

    @Import(name="intValue")
    private @Nullable Output<Integer> intValue;

    public Optional<Output<Integer>> intValue() {
        return Optional.ofNullable(this.intValue);
    }

    @Import(name="intValues")
    private @Nullable Output<List<Integer>> intValues;

    public Optional<Output<List<Integer>>> intValues() {
        return Optional.ofNullable(this.intValues);
    }

    @Import(name="ipRangeFrom")
    private @Nullable Output<String> ipRangeFrom;

    public Optional<Output<String>> ipRangeFrom() {
        return Optional.ofNullable(this.ipRangeFrom);
    }

    @Import(name="ipRangeTo")
    private @Nullable Output<String> ipRangeTo;

    public Optional<Output<String>> ipRangeTo() {
        return Optional.ofNullable(this.ipRangeTo);
    }

    @Import(name="tagValues")
    private @Nullable Output<List<String>> tagValues;

    public Optional<Output<List<String>>> tagValues() {
        return Optional.ofNullable(this.tagValues);
    }

    @Import(name="textValues")
    private @Nullable Output<List<String>> textValues;

    public Optional<Output<List<String>>> textValues() {
        return Optional.ofNullable(this.textValues);
    }

    private ServiceFullWebRequestConditionsConditionArgs() {}

    private ServiceFullWebRequestConditionsConditionArgs(ServiceFullWebRequestConditionsConditionArgs $) {
        this.attribute = $.attribute;
        this.compareOperationType = $.compareOperationType;
        this.frameworks = $.frameworks;
        this.ignoreCase = $.ignoreCase;
        this.intValue = $.intValue;
        this.intValues = $.intValues;
        this.ipRangeFrom = $.ipRangeFrom;
        this.ipRangeTo = $.ipRangeTo;
        this.tagValues = $.tagValues;
        this.textValues = $.textValues;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceFullWebRequestConditionsConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceFullWebRequestConditionsConditionArgs $;

        public Builder() {
            $ = new ServiceFullWebRequestConditionsConditionArgs();
        }

        public Builder(ServiceFullWebRequestConditionsConditionArgs defaults) {
            $ = new ServiceFullWebRequestConditionsConditionArgs(Objects.requireNonNull(defaults));
        }

        public Builder attribute(Output<String> attribute) {
            $.attribute = attribute;
            return this;
        }

        public Builder attribute(String attribute) {
            return attribute(Output.of(attribute));
        }

        public Builder compareOperationType(Output<String> compareOperationType) {
            $.compareOperationType = compareOperationType;
            return this;
        }

        public Builder compareOperationType(String compareOperationType) {
            return compareOperationType(Output.of(compareOperationType));
        }

        public Builder frameworks(@Nullable Output<List<String>> frameworks) {
            $.frameworks = frameworks;
            return this;
        }

        public Builder frameworks(List<String> frameworks) {
            return frameworks(Output.of(frameworks));
        }

        public Builder frameworks(String... frameworks) {
            return frameworks(List.of(frameworks));
        }

        public Builder ignoreCase(@Nullable Output<Boolean> ignoreCase) {
            $.ignoreCase = ignoreCase;
            return this;
        }

        public Builder ignoreCase(Boolean ignoreCase) {
            return ignoreCase(Output.of(ignoreCase));
        }

        public Builder intValue(@Nullable Output<Integer> intValue) {
            $.intValue = intValue;
            return this;
        }

        public Builder intValue(Integer intValue) {
            return intValue(Output.of(intValue));
        }

        public Builder intValues(@Nullable Output<List<Integer>> intValues) {
            $.intValues = intValues;
            return this;
        }

        public Builder intValues(List<Integer> intValues) {
            return intValues(Output.of(intValues));
        }

        public Builder intValues(Integer... intValues) {
            return intValues(List.of(intValues));
        }

        public Builder ipRangeFrom(@Nullable Output<String> ipRangeFrom) {
            $.ipRangeFrom = ipRangeFrom;
            return this;
        }

        public Builder ipRangeFrom(String ipRangeFrom) {
            return ipRangeFrom(Output.of(ipRangeFrom));
        }

        public Builder ipRangeTo(@Nullable Output<String> ipRangeTo) {
            $.ipRangeTo = ipRangeTo;
            return this;
        }

        public Builder ipRangeTo(String ipRangeTo) {
            return ipRangeTo(Output.of(ipRangeTo));
        }

        public Builder tagValues(@Nullable Output<List<String>> tagValues) {
            $.tagValues = tagValues;
            return this;
        }

        public Builder tagValues(List<String> tagValues) {
            return tagValues(Output.of(tagValues));
        }

        public Builder tagValues(String... tagValues) {
            return tagValues(List.of(tagValues));
        }

        public Builder textValues(@Nullable Output<List<String>> textValues) {
            $.textValues = textValues;
            return this;
        }

        public Builder textValues(List<String> textValues) {
            return textValues(Output.of(textValues));
        }

        public Builder textValues(String... textValues) {
            return textValues(List.of(textValues));
        }

        public ServiceFullWebRequestConditionsConditionArgs build() {
            $.attribute = Objects.requireNonNull($.attribute, "expected parameter 'attribute' to be non-null");
            $.compareOperationType = Objects.requireNonNull($.compareOperationType, "expected parameter 'compareOperationType' to be non-null");
            return $;
        }
    }

}
