// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptEventsEventTapValidateValidationArgs;
import java.util.List;
import java.util.Objects;


public final class BrowserMonitorScriptEventsEventTapValidateArgs extends com.pulumi.resources.ResourceArgs {

    public static final BrowserMonitorScriptEventsEventTapValidateArgs Empty = new BrowserMonitorScriptEventsEventTapValidateArgs();

    @Import(name="validations", required=true)
    private Output<List<BrowserMonitorScriptEventsEventTapValidateValidationArgs>> validations;

    public Output<List<BrowserMonitorScriptEventsEventTapValidateValidationArgs>> validations() {
        return this.validations;
    }

    private BrowserMonitorScriptEventsEventTapValidateArgs() {}

    private BrowserMonitorScriptEventsEventTapValidateArgs(BrowserMonitorScriptEventsEventTapValidateArgs $) {
        this.validations = $.validations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrowserMonitorScriptEventsEventTapValidateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrowserMonitorScriptEventsEventTapValidateArgs $;

        public Builder() {
            $ = new BrowserMonitorScriptEventsEventTapValidateArgs();
        }

        public Builder(BrowserMonitorScriptEventsEventTapValidateArgs defaults) {
            $ = new BrowserMonitorScriptEventsEventTapValidateArgs(Objects.requireNonNull(defaults));
        }

        public Builder validations(Output<List<BrowserMonitorScriptEventsEventTapValidateValidationArgs>> validations) {
            $.validations = validations;
            return this;
        }

        public Builder validations(List<BrowserMonitorScriptEventsEventTapValidateValidationArgs> validations) {
            return validations(Output.of(validations));
        }

        public Builder validations(BrowserMonitorScriptEventsEventTapValidateValidationArgs... validations) {
            return validations(List.of(validations));
        }

        public BrowserMonitorScriptEventsEventTapValidateArgs build() {
            $.validations = Objects.requireNonNull($.validations, "expected parameter 'validations' to be non-null");
            return $;
        }
    }

}
