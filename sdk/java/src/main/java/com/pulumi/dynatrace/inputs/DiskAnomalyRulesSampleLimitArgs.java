// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;


public final class DiskAnomalyRulesSampleLimitArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskAnomalyRulesSampleLimitArgs Empty = new DiskAnomalyRulesSampleLimitArgs();

    /**
     * .. within the last
     * 
     */
    @Import(name="samples", required=true)
    private Output<Integer> samples;

    /**
     * @return .. within the last
     * 
     */
    public Output<Integer> samples() {
        return this.samples;
    }

    /**
     * Minimum number of violating samples
     * 
     */
    @Import(name="violatingSamples", required=true)
    private Output<Integer> violatingSamples;

    /**
     * @return Minimum number of violating samples
     * 
     */
    public Output<Integer> violatingSamples() {
        return this.violatingSamples;
    }

    private DiskAnomalyRulesSampleLimitArgs() {}

    private DiskAnomalyRulesSampleLimitArgs(DiskAnomalyRulesSampleLimitArgs $) {
        this.samples = $.samples;
        this.violatingSamples = $.violatingSamples;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskAnomalyRulesSampleLimitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskAnomalyRulesSampleLimitArgs $;

        public Builder() {
            $ = new DiskAnomalyRulesSampleLimitArgs();
        }

        public Builder(DiskAnomalyRulesSampleLimitArgs defaults) {
            $ = new DiskAnomalyRulesSampleLimitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param samples .. within the last
         * 
         * @return builder
         * 
         */
        public Builder samples(Output<Integer> samples) {
            $.samples = samples;
            return this;
        }

        /**
         * @param samples .. within the last
         * 
         * @return builder
         * 
         */
        public Builder samples(Integer samples) {
            return samples(Output.of(samples));
        }

        /**
         * @param violatingSamples Minimum number of violating samples
         * 
         * @return builder
         * 
         */
        public Builder violatingSamples(Output<Integer> violatingSamples) {
            $.violatingSamples = violatingSamples;
            return this;
        }

        /**
         * @param violatingSamples Minimum number of violating samples
         * 
         * @return builder
         * 
         */
        public Builder violatingSamples(Integer violatingSamples) {
            return violatingSamples(Output.of(violatingSamples));
        }

        public DiskAnomalyRulesSampleLimitArgs build() {
            $.samples = Objects.requireNonNull($.samples, "expected parameter 'samples' to be non-null");
            $.violatingSamples = Objects.requireNonNull($.violatingSamples, "expected parameter 'violatingSamples' to be non-null");
            return $;
        }
    }

}
