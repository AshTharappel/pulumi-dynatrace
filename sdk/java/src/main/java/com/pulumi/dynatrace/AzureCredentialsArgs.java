// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.AzureCredentialsMonitorOnlyExcludingTagPairArgs;
import com.pulumi.dynatrace.inputs.AzureCredentialsMonitorOnlyTagPairArgs;
import com.pulumi.dynatrace.inputs.AzureCredentialsSupportingServiceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AzureCredentialsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AzureCredentialsArgs Empty = new AzureCredentialsArgs();

    /**
     * The monitoring is enabled (`true`) or disabled (`false`).  If not set on creation, the `true` value is used.  If the field is omitted during an update, the old value remains unaffected
     * 
     */
    @Import(name="active", required=true)
    private Output<Boolean> active;

    /**
     * @return The monitoring is enabled (`true`) or disabled (`false`).  If not set on creation, the `true` value is used.  If the field is omitted during an update, the old value remains unaffected
     * 
     */
    public Output<Boolean> active() {
        return this.active;
    }

    /**
     * The Application ID (also referred to as Client ID)  The combination of Application ID and Directory ID must be unique
     * 
     */
    @Import(name="appId")
    private @Nullable Output<String> appId;

    /**
     * @return The Application ID (also referred to as Client ID)  The combination of Application ID and Directory ID must be unique
     * 
     */
    public Optional<Output<String>> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * The automatic capture of Azure tags is on (`true`) or off (`false`)
     * 
     */
    @Import(name="autoTagging")
    private @Nullable Output<Boolean> autoTagging;

    /**
     * @return The automatic capture of Azure tags is on (`true`) or off (`false`)
     * 
     */
    public Optional<Output<Boolean>> autoTagging() {
        return Optional.ofNullable(this.autoTagging);
    }

    /**
     * The Directory ID (also referred to as Tenant ID)  The combination of Application ID and Directory ID must be unique
     * 
     */
    @Import(name="directoryId")
    private @Nullable Output<String> directoryId;

    /**
     * @return The Directory ID (also referred to as Tenant ID)  The combination of Application ID and Directory ID must be unique
     * 
     */
    public Optional<Output<String>> directoryId() {
        return Optional.ofNullable(this.directoryId);
    }

    /**
     * The secret key associated with the Application ID.  For security reasons, GET requests return this field as `null`. Submit your key on creation or update of the configuration. If the field is omitted during an update, the old value remains unaffected.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The secret key associated with the Application ID.  For security reasons, GET requests return this field as `null`. Submit your key on creation or update of the configuration. If the field is omitted during an update, the old value remains unaffected.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * The unique name of the Azure credentials configuration.  Allowed characters are letters, numbers, and spaces. Also the special characters `.+-_` are allowed
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The unique name of the Azure credentials configuration.  Allowed characters are letters, numbers, and spaces. Also the special characters `.+-_` are allowed
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * A list of Azure tags to be excluded from monitoring.  You can specify up to 20 tags. A resource tagged with *any* of the specified tags is monitored.  Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`.
     * 
     */
    @Import(name="monitorOnlyExcludingTagPairs")
    private @Nullable Output<List<AzureCredentialsMonitorOnlyExcludingTagPairArgs>> monitorOnlyExcludingTagPairs;

    /**
     * @return A list of Azure tags to be excluded from monitoring.  You can specify up to 20 tags. A resource tagged with *any* of the specified tags is monitored.  Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`.
     * 
     */
    public Optional<Output<List<AzureCredentialsMonitorOnlyExcludingTagPairArgs>>> monitorOnlyExcludingTagPairs() {
        return Optional.ofNullable(this.monitorOnlyExcludingTagPairs);
    }

    /**
     * A list of Azure tags to be monitored.  You can specify up to 20 tags. A resource tagged with *any* of the specified tags is monitored.  Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`
     * 
     */
    @Import(name="monitorOnlyTagPairs")
    private @Nullable Output<List<AzureCredentialsMonitorOnlyTagPairArgs>> monitorOnlyTagPairs;

    /**
     * @return A list of Azure tags to be monitored.  You can specify up to 20 tags. A resource tagged with *any* of the specified tags is monitored.  Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`
     * 
     */
    public Optional<Output<List<AzureCredentialsMonitorOnlyTagPairArgs>>> monitorOnlyTagPairs() {
        return Optional.ofNullable(this.monitorOnlyTagPairs);
    }

    /**
     * Monitor only resources that have specified Azure tags (`true`) or all resources (`false`).
     * 
     */
    @Import(name="monitorOnlyTaggedEntities", required=true)
    private Output<Boolean> monitorOnlyTaggedEntities;

    /**
     * @return Monitor only resources that have specified Azure tags (`true`) or all resources (`false`).
     * 
     */
    public Output<Boolean> monitorOnlyTaggedEntities() {
        return this.monitorOnlyTaggedEntities;
    }

    /**
     * A list of Azure supporting services to be monitored. For each service there&#39;s a sublist of its metrics and the metrics&#39; dimensions that should be monitored. All of these elements (services, metrics, dimensions) must have corresponding static definitions on the server.
     * 
     */
    @Import(name="supportingServices")
    private @Nullable Output<List<AzureCredentialsSupportingServiceArgs>> supportingServices;

    /**
     * @return A list of Azure supporting services to be monitored. For each service there&#39;s a sublist of its metrics and the metrics&#39; dimensions that should be monitored. All of these elements (services, metrics, dimensions) must have corresponding static definitions on the server.
     * 
     */
    public Optional<Output<List<AzureCredentialsSupportingServiceArgs>>> supportingServices() {
        return Optional.ofNullable(this.supportingServices);
    }

    /**
     * If enabled (`true`) the attribute `supporting_services` will not get synchronized with Dynatrace. You will be able to
     * manage them via WebUI without interference by Terraform.
     * 
     */
    @Import(name="supportingServicesManagedInDynatrace")
    private @Nullable Output<Boolean> supportingServicesManagedInDynatrace;

    /**
     * @return If enabled (`true`) the attribute `supporting_services` will not get synchronized with Dynatrace. You will be able to
     * manage them via WebUI without interference by Terraform.
     * 
     */
    public Optional<Output<Boolean>> supportingServicesManagedInDynatrace() {
        return Optional.ofNullable(this.supportingServicesManagedInDynatrace);
    }

    /**
     * Any attributes that aren&#39;t yet supported by this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return Any attributes that aren&#39;t yet supported by this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    private AzureCredentialsArgs() {}

    private AzureCredentialsArgs(AzureCredentialsArgs $) {
        this.active = $.active;
        this.appId = $.appId;
        this.autoTagging = $.autoTagging;
        this.directoryId = $.directoryId;
        this.key = $.key;
        this.label = $.label;
        this.monitorOnlyExcludingTagPairs = $.monitorOnlyExcludingTagPairs;
        this.monitorOnlyTagPairs = $.monitorOnlyTagPairs;
        this.monitorOnlyTaggedEntities = $.monitorOnlyTaggedEntities;
        this.supportingServices = $.supportingServices;
        this.supportingServicesManagedInDynatrace = $.supportingServicesManagedInDynatrace;
        this.unknowns = $.unknowns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureCredentialsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureCredentialsArgs $;

        public Builder() {
            $ = new AzureCredentialsArgs();
        }

        public Builder(AzureCredentialsArgs defaults) {
            $ = new AzureCredentialsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param active The monitoring is enabled (`true`) or disabled (`false`).  If not set on creation, the `true` value is used.  If the field is omitted during an update, the old value remains unaffected
         * 
         * @return builder
         * 
         */
        public Builder active(Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active The monitoring is enabled (`true`) or disabled (`false`).  If not set on creation, the `true` value is used.  If the field is omitted during an update, the old value remains unaffected
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param appId The Application ID (also referred to as Client ID)  The combination of Application ID and Directory ID must be unique
         * 
         * @return builder
         * 
         */
        public Builder appId(@Nullable Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId The Application ID (also referred to as Client ID)  The combination of Application ID and Directory ID must be unique
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param autoTagging The automatic capture of Azure tags is on (`true`) or off (`false`)
         * 
         * @return builder
         * 
         */
        public Builder autoTagging(@Nullable Output<Boolean> autoTagging) {
            $.autoTagging = autoTagging;
            return this;
        }

        /**
         * @param autoTagging The automatic capture of Azure tags is on (`true`) or off (`false`)
         * 
         * @return builder
         * 
         */
        public Builder autoTagging(Boolean autoTagging) {
            return autoTagging(Output.of(autoTagging));
        }

        /**
         * @param directoryId The Directory ID (also referred to as Tenant ID)  The combination of Application ID and Directory ID must be unique
         * 
         * @return builder
         * 
         */
        public Builder directoryId(@Nullable Output<String> directoryId) {
            $.directoryId = directoryId;
            return this;
        }

        /**
         * @param directoryId The Directory ID (also referred to as Tenant ID)  The combination of Application ID and Directory ID must be unique
         * 
         * @return builder
         * 
         */
        public Builder directoryId(String directoryId) {
            return directoryId(Output.of(directoryId));
        }

        /**
         * @param key The secret key associated with the Application ID.  For security reasons, GET requests return this field as `null`. Submit your key on creation or update of the configuration. If the field is omitted during an update, the old value remains unaffected.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The secret key associated with the Application ID.  For security reasons, GET requests return this field as `null`. Submit your key on creation or update of the configuration. If the field is omitted during an update, the old value remains unaffected.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param label The unique name of the Azure credentials configuration.  Allowed characters are letters, numbers, and spaces. Also the special characters `.+-_` are allowed
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The unique name of the Azure credentials configuration.  Allowed characters are letters, numbers, and spaces. Also the special characters `.+-_` are allowed
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param monitorOnlyExcludingTagPairs A list of Azure tags to be excluded from monitoring.  You can specify up to 20 tags. A resource tagged with *any* of the specified tags is monitored.  Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder monitorOnlyExcludingTagPairs(@Nullable Output<List<AzureCredentialsMonitorOnlyExcludingTagPairArgs>> monitorOnlyExcludingTagPairs) {
            $.monitorOnlyExcludingTagPairs = monitorOnlyExcludingTagPairs;
            return this;
        }

        /**
         * @param monitorOnlyExcludingTagPairs A list of Azure tags to be excluded from monitoring.  You can specify up to 20 tags. A resource tagged with *any* of the specified tags is monitored.  Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder monitorOnlyExcludingTagPairs(List<AzureCredentialsMonitorOnlyExcludingTagPairArgs> monitorOnlyExcludingTagPairs) {
            return monitorOnlyExcludingTagPairs(Output.of(monitorOnlyExcludingTagPairs));
        }

        /**
         * @param monitorOnlyExcludingTagPairs A list of Azure tags to be excluded from monitoring.  You can specify up to 20 tags. A resource tagged with *any* of the specified tags is monitored.  Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder monitorOnlyExcludingTagPairs(AzureCredentialsMonitorOnlyExcludingTagPairArgs... monitorOnlyExcludingTagPairs) {
            return monitorOnlyExcludingTagPairs(List.of(monitorOnlyExcludingTagPairs));
        }

        /**
         * @param monitorOnlyTagPairs A list of Azure tags to be monitored.  You can specify up to 20 tags. A resource tagged with *any* of the specified tags is monitored.  Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`
         * 
         * @return builder
         * 
         */
        public Builder monitorOnlyTagPairs(@Nullable Output<List<AzureCredentialsMonitorOnlyTagPairArgs>> monitorOnlyTagPairs) {
            $.monitorOnlyTagPairs = monitorOnlyTagPairs;
            return this;
        }

        /**
         * @param monitorOnlyTagPairs A list of Azure tags to be monitored.  You can specify up to 20 tags. A resource tagged with *any* of the specified tags is monitored.  Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`
         * 
         * @return builder
         * 
         */
        public Builder monitorOnlyTagPairs(List<AzureCredentialsMonitorOnlyTagPairArgs> monitorOnlyTagPairs) {
            return monitorOnlyTagPairs(Output.of(monitorOnlyTagPairs));
        }

        /**
         * @param monitorOnlyTagPairs A list of Azure tags to be monitored.  You can specify up to 20 tags. A resource tagged with *any* of the specified tags is monitored.  Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`
         * 
         * @return builder
         * 
         */
        public Builder monitorOnlyTagPairs(AzureCredentialsMonitorOnlyTagPairArgs... monitorOnlyTagPairs) {
            return monitorOnlyTagPairs(List.of(monitorOnlyTagPairs));
        }

        /**
         * @param monitorOnlyTaggedEntities Monitor only resources that have specified Azure tags (`true`) or all resources (`false`).
         * 
         * @return builder
         * 
         */
        public Builder monitorOnlyTaggedEntities(Output<Boolean> monitorOnlyTaggedEntities) {
            $.monitorOnlyTaggedEntities = monitorOnlyTaggedEntities;
            return this;
        }

        /**
         * @param monitorOnlyTaggedEntities Monitor only resources that have specified Azure tags (`true`) or all resources (`false`).
         * 
         * @return builder
         * 
         */
        public Builder monitorOnlyTaggedEntities(Boolean monitorOnlyTaggedEntities) {
            return monitorOnlyTaggedEntities(Output.of(monitorOnlyTaggedEntities));
        }

        /**
         * @param supportingServices A list of Azure supporting services to be monitored. For each service there&#39;s a sublist of its metrics and the metrics&#39; dimensions that should be monitored. All of these elements (services, metrics, dimensions) must have corresponding static definitions on the server.
         * 
         * @return builder
         * 
         */
        public Builder supportingServices(@Nullable Output<List<AzureCredentialsSupportingServiceArgs>> supportingServices) {
            $.supportingServices = supportingServices;
            return this;
        }

        /**
         * @param supportingServices A list of Azure supporting services to be monitored. For each service there&#39;s a sublist of its metrics and the metrics&#39; dimensions that should be monitored. All of these elements (services, metrics, dimensions) must have corresponding static definitions on the server.
         * 
         * @return builder
         * 
         */
        public Builder supportingServices(List<AzureCredentialsSupportingServiceArgs> supportingServices) {
            return supportingServices(Output.of(supportingServices));
        }

        /**
         * @param supportingServices A list of Azure supporting services to be monitored. For each service there&#39;s a sublist of its metrics and the metrics&#39; dimensions that should be monitored. All of these elements (services, metrics, dimensions) must have corresponding static definitions on the server.
         * 
         * @return builder
         * 
         */
        public Builder supportingServices(AzureCredentialsSupportingServiceArgs... supportingServices) {
            return supportingServices(List.of(supportingServices));
        }

        /**
         * @param supportingServicesManagedInDynatrace If enabled (`true`) the attribute `supporting_services` will not get synchronized with Dynatrace. You will be able to
         * manage them via WebUI without interference by Terraform.
         * 
         * @return builder
         * 
         */
        public Builder supportingServicesManagedInDynatrace(@Nullable Output<Boolean> supportingServicesManagedInDynatrace) {
            $.supportingServicesManagedInDynatrace = supportingServicesManagedInDynatrace;
            return this;
        }

        /**
         * @param supportingServicesManagedInDynatrace If enabled (`true`) the attribute `supporting_services` will not get synchronized with Dynatrace. You will be able to
         * manage them via WebUI without interference by Terraform.
         * 
         * @return builder
         * 
         */
        public Builder supportingServicesManagedInDynatrace(Boolean supportingServicesManagedInDynatrace) {
            return supportingServicesManagedInDynatrace(Output.of(supportingServicesManagedInDynatrace));
        }

        /**
         * @param unknowns Any attributes that aren&#39;t yet supported by this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns Any attributes that aren&#39;t yet supported by this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public AzureCredentialsArgs build() {
            $.active = Objects.requireNonNull($.active, "expected parameter 'active' to be non-null");
            $.monitorOnlyTaggedEntities = Objects.requireNonNull($.monitorOnlyTaggedEntities, "expected parameter 'monitorOnlyTaggedEntities' to be non-null");
            return $;
        }
    }

}
