// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProcessGroupRumState extends com.pulumi.resources.ResourceArgs {

    public static final ProcessGroupRumState Empty = new ProcessGroupRumState();

    /**
     * Allows OneAgent to: * automatically inject the RUM JavaScript tag into each page delivered by this process group *
     * provide the necessary info to correlate RUM data with server-side PurePaths * forward beacons to the cluster * deliver
     * the monitoring code
     * 
     */
    @Import(name="enable")
    private @Nullable Output<Boolean> enable;

    /**
     * @return Allows OneAgent to: * automatically inject the RUM JavaScript tag into each page delivered by this process group *
     * provide the necessary info to correlate RUM data with server-side PurePaths * forward beacons to the cluster * deliver
     * the monitoring code
     * 
     */
    public Optional<Output<Boolean>> enable() {
        return Optional.ofNullable(this.enable);
    }

    /**
     * The scope of this setting - PROCESS_GROUP-XXXXXXXXXXXXXXXX
     * 
     */
    @Import(name="processGroupId")
    private @Nullable Output<String> processGroupId;

    /**
     * @return The scope of this setting - PROCESS_GROUP-XXXXXXXXXXXXXXXX
     * 
     */
    public Optional<Output<String>> processGroupId() {
        return Optional.ofNullable(this.processGroupId);
    }

    private ProcessGroupRumState() {}

    private ProcessGroupRumState(ProcessGroupRumState $) {
        this.enable = $.enable;
        this.processGroupId = $.processGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProcessGroupRumState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProcessGroupRumState $;

        public Builder() {
            $ = new ProcessGroupRumState();
        }

        public Builder(ProcessGroupRumState defaults) {
            $ = new ProcessGroupRumState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enable Allows OneAgent to: * automatically inject the RUM JavaScript tag into each page delivered by this process group *
         * provide the necessary info to correlate RUM data with server-side PurePaths * forward beacons to the cluster * deliver
         * the monitoring code
         * 
         * @return builder
         * 
         */
        public Builder enable(@Nullable Output<Boolean> enable) {
            $.enable = enable;
            return this;
        }

        /**
         * @param enable Allows OneAgent to: * automatically inject the RUM JavaScript tag into each page delivered by this process group *
         * provide the necessary info to correlate RUM data with server-side PurePaths * forward beacons to the cluster * deliver
         * the monitoring code
         * 
         * @return builder
         * 
         */
        public Builder enable(Boolean enable) {
            return enable(Output.of(enable));
        }

        /**
         * @param processGroupId The scope of this setting - PROCESS_GROUP-XXXXXXXXXXXXXXXX
         * 
         * @return builder
         * 
         */
        public Builder processGroupId(@Nullable Output<String> processGroupId) {
            $.processGroupId = processGroupId;
            return this;
        }

        /**
         * @param processGroupId The scope of this setting - PROCESS_GROUP-XXXXXXXXXXXXXXXX
         * 
         * @return builder
         * 
         */
        public Builder processGroupId(String processGroupId) {
            return processGroupId(Output.of(processGroupId));
        }

        public ProcessGroupRumState build() {
            return $;
        }
    }

}
