// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.BusinessEventsProcessingRuleTestingArgs;
import com.pulumi.dynatrace.inputs.BusinessEventsProcessingTransformationFieldsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BusinessEventsProcessingArgs extends com.pulumi.resources.ResourceArgs {

    public static final BusinessEventsProcessingArgs Empty = new BusinessEventsProcessingArgs();

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     * 
     */
    @Import(name="matcher", required=true)
    private Output<String> matcher;

    /**
     * @return [See our documentation](https://dt-url.net/bp234rv)
     * 
     */
    public Output<String> matcher() {
        return this.matcher;
    }

    /**
     * Rule name
     * 
     */
    @Import(name="ruleName", required=true)
    private Output<String> ruleName;

    /**
     * @return Rule name
     * 
     */
    public Output<String> ruleName() {
        return this.ruleName;
    }

    /**
     * ## Rule testing ### 1. Paste an event sample
     * 
     */
    @Import(name="ruleTesting", required=true)
    private Output<BusinessEventsProcessingRuleTestingArgs> ruleTesting;

    /**
     * @return ## Rule testing ### 1. Paste an event sample
     * 
     */
    public Output<BusinessEventsProcessingRuleTestingArgs> ruleTesting() {
        return this.ruleTesting;
    }

    /**
     * [See our documentation](https://dt-url.net/pz030w5)
     * 
     */
    @Import(name="script", required=true)
    private Output<String> script;

    /**
     * @return [See our documentation](https://dt-url.net/pz030w5)
     * 
     */
    public Output<String> script() {
        return this.script;
    }

    /**
     * Transformation fields
     * 
     */
    @Import(name="transformationFields")
    private @Nullable Output<BusinessEventsProcessingTransformationFieldsArgs> transformationFields;

    /**
     * @return Transformation fields
     * 
     */
    public Optional<Output<BusinessEventsProcessingTransformationFieldsArgs>> transformationFields() {
        return Optional.ofNullable(this.transformationFields);
    }

    private BusinessEventsProcessingArgs() {}

    private BusinessEventsProcessingArgs(BusinessEventsProcessingArgs $) {
        this.enabled = $.enabled;
        this.matcher = $.matcher;
        this.ruleName = $.ruleName;
        this.ruleTesting = $.ruleTesting;
        this.script = $.script;
        this.transformationFields = $.transformationFields;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BusinessEventsProcessingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BusinessEventsProcessingArgs $;

        public Builder() {
            $ = new BusinessEventsProcessingArgs();
        }

        public Builder(BusinessEventsProcessingArgs defaults) {
            $ = new BusinessEventsProcessingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param matcher [See our documentation](https://dt-url.net/bp234rv)
         * 
         * @return builder
         * 
         */
        public Builder matcher(Output<String> matcher) {
            $.matcher = matcher;
            return this;
        }

        /**
         * @param matcher [See our documentation](https://dt-url.net/bp234rv)
         * 
         * @return builder
         * 
         */
        public Builder matcher(String matcher) {
            return matcher(Output.of(matcher));
        }

        /**
         * @param ruleName Rule name
         * 
         * @return builder
         * 
         */
        public Builder ruleName(Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName Rule name
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param ruleTesting ## Rule testing ### 1. Paste an event sample
         * 
         * @return builder
         * 
         */
        public Builder ruleTesting(Output<BusinessEventsProcessingRuleTestingArgs> ruleTesting) {
            $.ruleTesting = ruleTesting;
            return this;
        }

        /**
         * @param ruleTesting ## Rule testing ### 1. Paste an event sample
         * 
         * @return builder
         * 
         */
        public Builder ruleTesting(BusinessEventsProcessingRuleTestingArgs ruleTesting) {
            return ruleTesting(Output.of(ruleTesting));
        }

        /**
         * @param script [See our documentation](https://dt-url.net/pz030w5)
         * 
         * @return builder
         * 
         */
        public Builder script(Output<String> script) {
            $.script = script;
            return this;
        }

        /**
         * @param script [See our documentation](https://dt-url.net/pz030w5)
         * 
         * @return builder
         * 
         */
        public Builder script(String script) {
            return script(Output.of(script));
        }

        /**
         * @param transformationFields Transformation fields
         * 
         * @return builder
         * 
         */
        public Builder transformationFields(@Nullable Output<BusinessEventsProcessingTransformationFieldsArgs> transformationFields) {
            $.transformationFields = transformationFields;
            return this;
        }

        /**
         * @param transformationFields Transformation fields
         * 
         * @return builder
         * 
         */
        public Builder transformationFields(BusinessEventsProcessingTransformationFieldsArgs transformationFields) {
            return transformationFields(Output.of(transformationFields));
        }

        public BusinessEventsProcessingArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.matcher = Objects.requireNonNull($.matcher, "expected parameter 'matcher' to be non-null");
            $.ruleName = Objects.requireNonNull($.ruleName, "expected parameter 'ruleName' to be non-null");
            $.ruleTesting = Objects.requireNonNull($.ruleTesting, "expected parameter 'ruleTesting' to be non-null");
            $.script = Objects.requireNonNull($.script, "expected parameter 'script' to be non-null");
            return $;
        }
    }

}
