// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.BusinessEventsOneagentEventArgs;
import com.pulumi.dynatrace.inputs.BusinessEventsOneagentTriggersArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BusinessEventsOneagentArgs extends com.pulumi.resources.ResourceArgs {

    public static final BusinessEventsOneagentArgs Empty = new BusinessEventsOneagentArgs();

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Event meta data
     * 
     */
    @Import(name="event", required=true)
    private Output<BusinessEventsOneagentEventArgs> event;

    /**
     * @return Event meta data
     * 
     */
    public Output<BusinessEventsOneagentEventArgs> event() {
        return this.event;
    }

    /**
     * Rule name
     * 
     */
    @Import(name="ruleName", required=true)
    private Output<String> ruleName;

    /**
     * @return Rule name
     * 
     */
    public Output<String> ruleName() {
        return this.ruleName;
    }

    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Define conditions to trigger business events from incoming web requests. Whenever one condition applies the event gets captured.
     * 
     */
    @Import(name="triggers", required=true)
    private Output<BusinessEventsOneagentTriggersArgs> triggers;

    /**
     * @return Define conditions to trigger business events from incoming web requests. Whenever one condition applies the event gets captured.
     * 
     */
    public Output<BusinessEventsOneagentTriggersArgs> triggers() {
        return this.triggers;
    }

    private BusinessEventsOneagentArgs() {}

    private BusinessEventsOneagentArgs(BusinessEventsOneagentArgs $) {
        this.enabled = $.enabled;
        this.event = $.event;
        this.ruleName = $.ruleName;
        this.scope = $.scope;
        this.triggers = $.triggers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BusinessEventsOneagentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BusinessEventsOneagentArgs $;

        public Builder() {
            $ = new BusinessEventsOneagentArgs();
        }

        public Builder(BusinessEventsOneagentArgs defaults) {
            $ = new BusinessEventsOneagentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param event Event meta data
         * 
         * @return builder
         * 
         */
        public Builder event(Output<BusinessEventsOneagentEventArgs> event) {
            $.event = event;
            return this;
        }

        /**
         * @param event Event meta data
         * 
         * @return builder
         * 
         */
        public Builder event(BusinessEventsOneagentEventArgs event) {
            return event(Output.of(event));
        }

        /**
         * @param ruleName Rule name
         * 
         * @return builder
         * 
         */
        public Builder ruleName(Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName Rule name
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param scope The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param triggers Define conditions to trigger business events from incoming web requests. Whenever one condition applies the event gets captured.
         * 
         * @return builder
         * 
         */
        public Builder triggers(Output<BusinessEventsOneagentTriggersArgs> triggers) {
            $.triggers = triggers;
            return this;
        }

        /**
         * @param triggers Define conditions to trigger business events from incoming web requests. Whenever one condition applies the event gets captured.
         * 
         * @return builder
         * 
         */
        public Builder triggers(BusinessEventsOneagentTriggersArgs triggers) {
            return triggers(Output.of(triggers));
        }

        public BusinessEventsOneagentArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.event = Objects.requireNonNull($.event, "expected parameter 'event' to be non-null");
            $.ruleName = Objects.requireNonNull($.ruleName, "expected parameter 'ruleName' to be non-null");
            $.triggers = Objects.requireNonNull($.triggers, "expected parameter 'triggers' to be non-null");
            return $;
        }
    }

}
