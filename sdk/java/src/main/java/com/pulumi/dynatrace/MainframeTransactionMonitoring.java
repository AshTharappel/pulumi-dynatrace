// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.MainframeTransactionMonitoringArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.MainframeTransactionMonitoringState;
import java.lang.Boolean;
import java.lang.Integer;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/mainframeTransactionMonitoring:MainframeTransactionMonitoring")
public class MainframeTransactionMonitoring extends com.pulumi.resources.CustomResource {
    /**
     * If enabled, CICS regions belonging to the same CICSPlex will be grouped into a single process group. If disabled, a process group will be created for each CICS region.
     * 
     */
    @Export(name="groupCicsRegions", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> groupCicsRegions;

    /**
     * @return If enabled, CICS regions belonging to the same CICSPlex will be grouped into a single process group. If disabled, a process group will be created for each CICS region.
     * 
     */
    public Output<Boolean> groupCicsRegions() {
        return this.groupCicsRegions;
    }
    /**
     * If enabled, IMS regions belonging to the same subsystem will be grouped into a single process group. If disabled, a process group will be created for each IMS region.
     * 
     */
    @Export(name="groupImsRegions", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> groupImsRegions;

    /**
     * @return If enabled, IMS regions belonging to the same subsystem will be grouped into a single process group. If disabled, a process group will be created for each IMS region.
     * 
     */
    public Output<Boolean> groupImsRegions() {
        return this.groupImsRegions;
    }
    /**
     * If enabled, the CICS Transaction Gateway sensor will trace all EXCI requests including those that are using the TCP/IP or SNA protocol.
     * 
     */
    @Export(name="monitorAllCtgProtocols", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> monitorAllCtgProtocols;

    /**
     * @return If enabled, the CICS Transaction Gateway sensor will trace all EXCI requests including those that are using the TCP/IP or SNA protocol.
     * 
     */
    public Output<Boolean> monitorAllCtgProtocols() {
        return this.monitorAllCtgProtocols;
    }
    /**
     * Dynatrace automatically traces incoming web requests when they are called by already-monitored services. Enable this setting to monitor all incoming web requests. We recommend enabling it only over a short period of time.
     * 
     */
    @Export(name="monitorAllIncomingWebRequests", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> monitorAllIncomingWebRequests;

    /**
     * @return Dynatrace automatically traces incoming web requests when they are called by already-monitored services. Enable this setting to monitor all incoming web requests. We recommend enabling it only over a short period of time.
     * 
     */
    public Output<Boolean> monitorAllIncomingWebRequests() {
        return this.monitorAllIncomingWebRequests;
    }
    /**
     * We recommend the default limit of 500 nodes. The value 0 means unlimited number of nodes.
     * 
     */
    @Export(name="nodeLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> nodeLimit;

    /**
     * @return We recommend the default limit of 500 nodes. The value 0 means unlimited number of nodes.
     * 
     */
    public Output<Integer> nodeLimit() {
        return this.nodeLimit;
    }
    /**
     * If enabled, a CICS service will be created for each monitored transaction ID within a process group. If disabled, a CICS service will be created for each monitored CICS region within a process group. We recommend enabling it only when the CICS regions are grouped by their CICSPlex.
     * 
     */
    @Export(name="zosCicsServiceDetectionUsesTransactionId", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> zosCicsServiceDetectionUsesTransactionId;

    /**
     * @return If enabled, a CICS service will be created for each monitored transaction ID within a process group. If disabled, a CICS service will be created for each monitored CICS region within a process group. We recommend enabling it only when the CICS regions are grouped by their CICSPlex.
     * 
     */
    public Output<Boolean> zosCicsServiceDetectionUsesTransactionId() {
        return this.zosCicsServiceDetectionUsesTransactionId;
    }
    /**
     * If enabled, an IMS service will be created for each monitored transaction ID within a process group. If disabled, an IMS service will be created for each monitored IMS region within a process group. We recommend enabling it only when the IMS regions are grouped by their subsystem.
     * 
     */
    @Export(name="zosImsServiceDetectionUsesTransactionId", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> zosImsServiceDetectionUsesTransactionId;

    /**
     * @return If enabled, an IMS service will be created for each monitored transaction ID within a process group. If disabled, an IMS service will be created for each monitored IMS region within a process group. We recommend enabling it only when the IMS regions are grouped by their subsystem.
     * 
     */
    public Output<Boolean> zosImsServiceDetectionUsesTransactionId() {
        return this.zosImsServiceDetectionUsesTransactionId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MainframeTransactionMonitoring(String name) {
        this(name, MainframeTransactionMonitoringArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MainframeTransactionMonitoring(String name, MainframeTransactionMonitoringArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MainframeTransactionMonitoring(String name, MainframeTransactionMonitoringArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/mainframeTransactionMonitoring:MainframeTransactionMonitoring", name, args == null ? MainframeTransactionMonitoringArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private MainframeTransactionMonitoring(String name, Output<String> id, @Nullable MainframeTransactionMonitoringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/mainframeTransactionMonitoring:MainframeTransactionMonitoring", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MainframeTransactionMonitoring get(String name, Output<String> id, @Nullable MainframeTransactionMonitoringState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MainframeTransactionMonitoring(name, id, state, options);
    }
}
