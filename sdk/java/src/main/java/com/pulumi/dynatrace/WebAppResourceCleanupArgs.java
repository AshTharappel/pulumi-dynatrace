// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebAppResourceCleanupArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebAppResourceCleanupArgs Empty = new WebAppResourceCleanupArgs();

    /**
     * For example: *Mask journeyId*
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return For example: *Mask journeyId*
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * For example: `(.*)(journeyId=)-?\d+(.*)`
     * 
     */
    @Import(name="regularExpression", required=true)
    private Output<String> regularExpression;

    /**
     * @return For example: `(.*)(journeyId=)-?\d+(.*)`
     * 
     */
    public Output<String> regularExpression() {
        return this.regularExpression;
    }

    /**
     * For example: `$1$2\*$3`
     * 
     */
    @Import(name="replaceWith", required=true)
    private Output<String> replaceWith;

    /**
     * @return For example: `$1$2\*$3`
     * 
     */
    public Output<String> replaceWith() {
        return this.replaceWith;
    }

    private WebAppResourceCleanupArgs() {}

    private WebAppResourceCleanupArgs(WebAppResourceCleanupArgs $) {
        this.name = $.name;
        this.regularExpression = $.regularExpression;
        this.replaceWith = $.replaceWith;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebAppResourceCleanupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebAppResourceCleanupArgs $;

        public Builder() {
            $ = new WebAppResourceCleanupArgs();
        }

        public Builder(WebAppResourceCleanupArgs defaults) {
            $ = new WebAppResourceCleanupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name For example: *Mask journeyId*
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name For example: *Mask journeyId*
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param regularExpression For example: `(.*)(journeyId=)-?\d+(.*)`
         * 
         * @return builder
         * 
         */
        public Builder regularExpression(Output<String> regularExpression) {
            $.regularExpression = regularExpression;
            return this;
        }

        /**
         * @param regularExpression For example: `(.*)(journeyId=)-?\d+(.*)`
         * 
         * @return builder
         * 
         */
        public Builder regularExpression(String regularExpression) {
            return regularExpression(Output.of(regularExpression));
        }

        /**
         * @param replaceWith For example: `$1$2\*$3`
         * 
         * @return builder
         * 
         */
        public Builder replaceWith(Output<String> replaceWith) {
            $.replaceWith = replaceWith;
            return this;
        }

        /**
         * @param replaceWith For example: `$1$2\*$3`
         * 
         * @return builder
         * 
         */
        public Builder replaceWith(String replaceWith) {
            return replaceWith(Output.of(replaceWith));
        }

        public WebAppResourceCleanupArgs build() {
            $.regularExpression = Objects.requireNonNull($.regularExpression, "expected parameter 'regularExpression' to be non-null");
            $.replaceWith = Objects.requireNonNull($.replaceWith, "expected parameter 'replaceWith' to be non-null");
            return $;
        }
    }

}
