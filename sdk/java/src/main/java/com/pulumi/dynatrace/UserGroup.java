// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.UserGroupArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.UserGroupState;
import com.pulumi.dynatrace.outputs.UserGroupPermissions;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/userGroup:UserGroup")
public class UserGroup extends com.pulumi.resources.CustomResource {
    /**
     * If `true`, then the group has the access account rights
     * 
     */
    @Export(name="accessAccount", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> accessAccount;

    /**
     * @return If `true`, then the group has the access account rights
     * 
     */
    public Output<Optional<Boolean>> accessAccount() {
        return Codegen.optional(this.accessAccount);
    }
    /**
     * If `true`, then the group has the cluster administrator rights
     * 
     */
    @Export(name="clusterAdmin", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> clusterAdmin;

    /**
     * @return If `true`, then the group has the cluster administrator rights
     * 
     */
    public Output<Optional<Boolean>> clusterAdmin() {
        return Codegen.optional(this.clusterAdmin);
    }
    /**
     * LDAP group names
     * 
     */
    @Export(name="ldapGroups", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> ldapGroups;

    /**
     * @return LDAP group names
     * 
     */
    public Output<Optional<List<String>>> ldapGroups() {
        return Codegen.optional(this.ldapGroups);
    }
    /**
     * If `true`, then the group has the manage account rights
     * 
     */
    @Export(name="manageAccount", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> manageAccount;

    /**
     * @return If `true`, then the group has the manage account rights
     * 
     */
    public Output<Optional<Boolean>> manageAccount() {
        return Codegen.optional(this.manageAccount);
    }
    /**
     * The name of the user group
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the user group
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Permissions for environments
     * 
     */
    @Export(name="permissions", type=UserGroupPermissions.class, parameters={})
    private Output</* @Nullable */ UserGroupPermissions> permissions;

    /**
     * @return Permissions for environments
     * 
     */
    public Output<Optional<UserGroupPermissions>> permissions() {
        return Codegen.optional(this.permissions);
    }
    /**
     * SSO group names. If defined it&#39;s used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
     * 
     */
    @Export(name="ssoGroups", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> ssoGroups;

    /**
     * @return SSO group names. If defined it&#39;s used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
     * 
     */
    public Output<Optional<List<String>>> ssoGroups() {
        return Codegen.optional(this.ssoGroups);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public UserGroup(String name) {
        this(name, UserGroupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public UserGroup(String name, @Nullable UserGroupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public UserGroup(String name, @Nullable UserGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/userGroup:UserGroup", name, args == null ? UserGroupArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private UserGroup(String name, Output<String> id, @Nullable UserGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/userGroup:UserGroup", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static UserGroup get(String name, Output<String> id, @Nullable UserGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new UserGroup(name, id, state, options);
    }
}
