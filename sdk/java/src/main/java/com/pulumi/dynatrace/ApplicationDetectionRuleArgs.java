// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.ApplicationDetectionRuleFilterConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationDetectionRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationDetectionRuleArgs Empty = new ApplicationDetectionRuleArgs();

    /**
     * The Dynatrace entity ID of the application, for example APPLICATION-4A3B43
     * 
     */
    @Import(name="applicationIdentifier", required=true)
    private Output<String> applicationIdentifier;

    /**
     * @return The Dynatrace entity ID of the application, for example APPLICATION-4A3B43
     * 
     */
    public Output<String> applicationIdentifier() {
        return this.applicationIdentifier;
    }

    /**
     * The condition of an application detection rule
     * 
     */
    @Import(name="filterConfig", required=true)
    private Output<ApplicationDetectionRuleFilterConfigArgs> filterConfig;

    /**
     * @return The condition of an application detection rule
     * 
     */
    public Output<ApplicationDetectionRuleFilterConfigArgs> filterConfig() {
        return this.filterConfig;
    }

    /**
     * The unique name of the Application detection rule
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique name of the Application detection rule
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The order of the rule in the rules list
     * 
     */
    @Import(name="order")
    private @Nullable Output<String> order;

    /**
     * @return The order of the rule in the rules list
     * 
     */
    public Optional<Output<String>> order() {
        return Optional.ofNullable(this.order);
    }

    private ApplicationDetectionRuleArgs() {}

    private ApplicationDetectionRuleArgs(ApplicationDetectionRuleArgs $) {
        this.applicationIdentifier = $.applicationIdentifier;
        this.filterConfig = $.filterConfig;
        this.name = $.name;
        this.order = $.order;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationDetectionRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationDetectionRuleArgs $;

        public Builder() {
            $ = new ApplicationDetectionRuleArgs();
        }

        public Builder(ApplicationDetectionRuleArgs defaults) {
            $ = new ApplicationDetectionRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationIdentifier The Dynatrace entity ID of the application, for example APPLICATION-4A3B43
         * 
         * @return builder
         * 
         */
        public Builder applicationIdentifier(Output<String> applicationIdentifier) {
            $.applicationIdentifier = applicationIdentifier;
            return this;
        }

        /**
         * @param applicationIdentifier The Dynatrace entity ID of the application, for example APPLICATION-4A3B43
         * 
         * @return builder
         * 
         */
        public Builder applicationIdentifier(String applicationIdentifier) {
            return applicationIdentifier(Output.of(applicationIdentifier));
        }

        /**
         * @param filterConfig The condition of an application detection rule
         * 
         * @return builder
         * 
         */
        public Builder filterConfig(Output<ApplicationDetectionRuleFilterConfigArgs> filterConfig) {
            $.filterConfig = filterConfig;
            return this;
        }

        /**
         * @param filterConfig The condition of an application detection rule
         * 
         * @return builder
         * 
         */
        public Builder filterConfig(ApplicationDetectionRuleFilterConfigArgs filterConfig) {
            return filterConfig(Output.of(filterConfig));
        }

        /**
         * @param name The unique name of the Application detection rule
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique name of the Application detection rule
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param order The order of the rule in the rules list
         * 
         * @return builder
         * 
         */
        public Builder order(@Nullable Output<String> order) {
            $.order = order;
            return this;
        }

        /**
         * @param order The order of the rule in the rules list
         * 
         * @return builder
         * 
         */
        public Builder order(String order) {
            return order(Output.of(order));
        }

        public ApplicationDetectionRuleArgs build() {
            $.applicationIdentifier = Objects.requireNonNull($.applicationIdentifier, "expected parameter 'applicationIdentifier' to be non-null");
            $.filterConfig = Objects.requireNonNull($.filterConfig, "expected parameter 'filterConfig' to be non-null");
            return $;
        }
    }

}
