// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.MaintenanceScheduleDailyRecurrenceArgs;
import com.pulumi.dynatrace.inputs.MaintenanceScheduleMonthlyRecurrenceArgs;
import com.pulumi.dynatrace.inputs.MaintenanceScheduleOnceRecurrenceArgs;
import com.pulumi.dynatrace.inputs.MaintenanceScheduleWeeklyRecurrenceArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MaintenanceScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final MaintenanceScheduleArgs Empty = new MaintenanceScheduleArgs();

    /**
     * The configuration for maintenance windows occuring daily
     * 
     */
    @Import(name="dailyRecurrence")
    private @Nullable Output<MaintenanceScheduleDailyRecurrenceArgs> dailyRecurrence;

    /**
     * @return The configuration for maintenance windows occuring daily
     * 
     */
    public Optional<Output<MaintenanceScheduleDailyRecurrenceArgs>> dailyRecurrence() {
        return Optional.ofNullable(this.dailyRecurrence);
    }

    /**
     * The configuration for maintenance windows occuring monthly
     * 
     */
    @Import(name="monthlyRecurrence")
    private @Nullable Output<MaintenanceScheduleMonthlyRecurrenceArgs> monthlyRecurrence;

    /**
     * @return The configuration for maintenance windows occuring monthly
     * 
     */
    public Optional<Output<MaintenanceScheduleMonthlyRecurrenceArgs>> monthlyRecurrence() {
        return Optional.ofNullable(this.monthlyRecurrence);
    }

    /**
     * The configuration for maintenance windows occuring once
     * 
     */
    @Import(name="onceRecurrence")
    private @Nullable Output<MaintenanceScheduleOnceRecurrenceArgs> onceRecurrence;

    /**
     * @return The configuration for maintenance windows occuring once
     * 
     */
    public Optional<Output<MaintenanceScheduleOnceRecurrenceArgs>> onceRecurrence() {
        return Optional.ofNullable(this.onceRecurrence);
    }

    /**
     * The time window of the maintenance window
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The time window of the maintenance window
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The configuration for maintenance windows occuring weekly
     * 
     */
    @Import(name="weeklyRecurrence")
    private @Nullable Output<MaintenanceScheduleWeeklyRecurrenceArgs> weeklyRecurrence;

    /**
     * @return The configuration for maintenance windows occuring weekly
     * 
     */
    public Optional<Output<MaintenanceScheduleWeeklyRecurrenceArgs>> weeklyRecurrence() {
        return Optional.ofNullable(this.weeklyRecurrence);
    }

    private MaintenanceScheduleArgs() {}

    private MaintenanceScheduleArgs(MaintenanceScheduleArgs $) {
        this.dailyRecurrence = $.dailyRecurrence;
        this.monthlyRecurrence = $.monthlyRecurrence;
        this.onceRecurrence = $.onceRecurrence;
        this.type = $.type;
        this.weeklyRecurrence = $.weeklyRecurrence;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MaintenanceScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MaintenanceScheduleArgs $;

        public Builder() {
            $ = new MaintenanceScheduleArgs();
        }

        public Builder(MaintenanceScheduleArgs defaults) {
            $ = new MaintenanceScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dailyRecurrence The configuration for maintenance windows occuring daily
         * 
         * @return builder
         * 
         */
        public Builder dailyRecurrence(@Nullable Output<MaintenanceScheduleDailyRecurrenceArgs> dailyRecurrence) {
            $.dailyRecurrence = dailyRecurrence;
            return this;
        }

        /**
         * @param dailyRecurrence The configuration for maintenance windows occuring daily
         * 
         * @return builder
         * 
         */
        public Builder dailyRecurrence(MaintenanceScheduleDailyRecurrenceArgs dailyRecurrence) {
            return dailyRecurrence(Output.of(dailyRecurrence));
        }

        /**
         * @param monthlyRecurrence The configuration for maintenance windows occuring monthly
         * 
         * @return builder
         * 
         */
        public Builder monthlyRecurrence(@Nullable Output<MaintenanceScheduleMonthlyRecurrenceArgs> monthlyRecurrence) {
            $.monthlyRecurrence = monthlyRecurrence;
            return this;
        }

        /**
         * @param monthlyRecurrence The configuration for maintenance windows occuring monthly
         * 
         * @return builder
         * 
         */
        public Builder monthlyRecurrence(MaintenanceScheduleMonthlyRecurrenceArgs monthlyRecurrence) {
            return monthlyRecurrence(Output.of(monthlyRecurrence));
        }

        /**
         * @param onceRecurrence The configuration for maintenance windows occuring once
         * 
         * @return builder
         * 
         */
        public Builder onceRecurrence(@Nullable Output<MaintenanceScheduleOnceRecurrenceArgs> onceRecurrence) {
            $.onceRecurrence = onceRecurrence;
            return this;
        }

        /**
         * @param onceRecurrence The configuration for maintenance windows occuring once
         * 
         * @return builder
         * 
         */
        public Builder onceRecurrence(MaintenanceScheduleOnceRecurrenceArgs onceRecurrence) {
            return onceRecurrence(Output.of(onceRecurrence));
        }

        /**
         * @param type The time window of the maintenance window
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The time window of the maintenance window
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param weeklyRecurrence The configuration for maintenance windows occuring weekly
         * 
         * @return builder
         * 
         */
        public Builder weeklyRecurrence(@Nullable Output<MaintenanceScheduleWeeklyRecurrenceArgs> weeklyRecurrence) {
            $.weeklyRecurrence = weeklyRecurrence;
            return this;
        }

        /**
         * @param weeklyRecurrence The configuration for maintenance windows occuring weekly
         * 
         * @return builder
         * 
         */
        public Builder weeklyRecurrence(MaintenanceScheduleWeeklyRecurrenceArgs weeklyRecurrence) {
            return weeklyRecurrence(Output.of(weeklyRecurrence));
        }

        public MaintenanceScheduleArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
