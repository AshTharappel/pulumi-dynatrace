// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.HttpMonitorPerformanceThresholdsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HttpMonitorPerformanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpMonitorPerformanceArgs Empty = new HttpMonitorPerformanceArgs();

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The scope of this setting (HTTP_CHECK)
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return The scope of this setting (HTTP_CHECK)
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    /**
     * Performance thresholds
     * 
     */
    @Import(name="thresholds")
    private @Nullable Output<HttpMonitorPerformanceThresholdsArgs> thresholds;

    /**
     * @return Performance thresholds
     * 
     */
    public Optional<Output<HttpMonitorPerformanceThresholdsArgs>> thresholds() {
        return Optional.ofNullable(this.thresholds);
    }

    private HttpMonitorPerformanceArgs() {}

    private HttpMonitorPerformanceArgs(HttpMonitorPerformanceArgs $) {
        this.enabled = $.enabled;
        this.scope = $.scope;
        this.thresholds = $.thresholds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpMonitorPerformanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpMonitorPerformanceArgs $;

        public Builder() {
            $ = new HttpMonitorPerformanceArgs();
        }

        public Builder(HttpMonitorPerformanceArgs defaults) {
            $ = new HttpMonitorPerformanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param scope The scope of this setting (HTTP_CHECK)
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope of this setting (HTTP_CHECK)
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param thresholds Performance thresholds
         * 
         * @return builder
         * 
         */
        public Builder thresholds(@Nullable Output<HttpMonitorPerformanceThresholdsArgs> thresholds) {
            $.thresholds = thresholds;
            return this;
        }

        /**
         * @param thresholds Performance thresholds
         * 
         * @return builder
         * 
         */
        public Builder thresholds(HttpMonitorPerformanceThresholdsArgs thresholds) {
            return thresholds(Output.of(thresholds));
        }

        public HttpMonitorPerformanceArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            return $;
        }
    }

}
