// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;


public final class TokenSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final TokenSettingsArgs Empty = new TokenSettingsArgs();

    /**
     * Check out this [blog post](http://www.dynatrace.com/blog/further-increased-security-of-your-api-tokens-by-automating-token-protection/) to find out more about the new Dynatrace API token format.
     * 
     */
    @Import(name="newTokenFormat", required=true)
    private Output<Boolean> newTokenFormat;

    /**
     * @return Check out this [blog post](http://www.dynatrace.com/blog/further-increased-security-of-your-api-tokens-by-automating-token-protection/) to find out more about the new Dynatrace API token format.
     * 
     */
    public Output<Boolean> newTokenFormat() {
        return this.newTokenFormat;
    }

    /**
     * Allow users of this environment to generate personal access tokens based on user permissions.
     * Note that existing personal access tokens will become unusable while this setting is disabled.
     * 
     */
    @Import(name="personalTokens", required=true)
    private Output<Boolean> personalTokens;

    /**
     * @return Allow users of this environment to generate personal access tokens based on user permissions.
     * Note that existing personal access tokens will become unusable while this setting is disabled.
     * 
     */
    public Output<Boolean> personalTokens() {
        return this.personalTokens;
    }

    private TokenSettingsArgs() {}

    private TokenSettingsArgs(TokenSettingsArgs $) {
        this.newTokenFormat = $.newTokenFormat;
        this.personalTokens = $.personalTokens;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TokenSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TokenSettingsArgs $;

        public Builder() {
            $ = new TokenSettingsArgs();
        }

        public Builder(TokenSettingsArgs defaults) {
            $ = new TokenSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param newTokenFormat Check out this [blog post](http://www.dynatrace.com/blog/further-increased-security-of-your-api-tokens-by-automating-token-protection/) to find out more about the new Dynatrace API token format.
         * 
         * @return builder
         * 
         */
        public Builder newTokenFormat(Output<Boolean> newTokenFormat) {
            $.newTokenFormat = newTokenFormat;
            return this;
        }

        /**
         * @param newTokenFormat Check out this [blog post](http://www.dynatrace.com/blog/further-increased-security-of-your-api-tokens-by-automating-token-protection/) to find out more about the new Dynatrace API token format.
         * 
         * @return builder
         * 
         */
        public Builder newTokenFormat(Boolean newTokenFormat) {
            return newTokenFormat(Output.of(newTokenFormat));
        }

        /**
         * @param personalTokens Allow users of this environment to generate personal access tokens based on user permissions.
         * Note that existing personal access tokens will become unusable while this setting is disabled.
         * 
         * @return builder
         * 
         */
        public Builder personalTokens(Output<Boolean> personalTokens) {
            $.personalTokens = personalTokens;
            return this;
        }

        /**
         * @param personalTokens Allow users of this environment to generate personal access tokens based on user permissions.
         * Note that existing personal access tokens will become unusable while this setting is disabled.
         * 
         * @return builder
         * 
         */
        public Builder personalTokens(Boolean personalTokens) {
            return personalTokens(Output.of(personalTokens));
        }

        public TokenSettingsArgs build() {
            $.newTokenFormat = Objects.requireNonNull($.newTokenFormat, "expected parameter 'newTokenFormat' to be non-null");
            $.personalTokens = Objects.requireNonNull($.personalTokens, "expected parameter 'personalTokens' to be non-null");
            return $;
        }
    }

}
