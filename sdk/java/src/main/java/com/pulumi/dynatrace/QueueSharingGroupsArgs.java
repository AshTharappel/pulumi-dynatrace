// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QueueSharingGroupsArgs extends com.pulumi.resources.ResourceArgs {

    public static final QueueSharingGroupsArgs Empty = new QueueSharingGroupsArgs();

    /**
     * The name of the queue sharing group
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the queue sharing group
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Queue manager(s) that belong to the queue sharing group
     * 
     */
    @Import(name="queueManagers")
    private @Nullable Output<List<String>> queueManagers;

    /**
     * @return Queue manager(s) that belong to the queue sharing group
     * 
     */
    public Optional<Output<List<String>>> queueManagers() {
        return Optional.ofNullable(this.queueManagers);
    }

    /**
     * Shared queue(s) that belong to the queue sharing group
     * 
     */
    @Import(name="sharedQueues")
    private @Nullable Output<List<String>> sharedQueues;

    /**
     * @return Shared queue(s) that belong to the queue sharing group
     * 
     */
    public Optional<Output<List<String>>> sharedQueues() {
        return Optional.ofNullable(this.sharedQueues);
    }

    private QueueSharingGroupsArgs() {}

    private QueueSharingGroupsArgs(QueueSharingGroupsArgs $) {
        this.name = $.name;
        this.queueManagers = $.queueManagers;
        this.sharedQueues = $.sharedQueues;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QueueSharingGroupsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QueueSharingGroupsArgs $;

        public Builder() {
            $ = new QueueSharingGroupsArgs();
        }

        public Builder(QueueSharingGroupsArgs defaults) {
            $ = new QueueSharingGroupsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name of the queue sharing group
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the queue sharing group
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param queueManagers Queue manager(s) that belong to the queue sharing group
         * 
         * @return builder
         * 
         */
        public Builder queueManagers(@Nullable Output<List<String>> queueManagers) {
            $.queueManagers = queueManagers;
            return this;
        }

        /**
         * @param queueManagers Queue manager(s) that belong to the queue sharing group
         * 
         * @return builder
         * 
         */
        public Builder queueManagers(List<String> queueManagers) {
            return queueManagers(Output.of(queueManagers));
        }

        /**
         * @param queueManagers Queue manager(s) that belong to the queue sharing group
         * 
         * @return builder
         * 
         */
        public Builder queueManagers(String... queueManagers) {
            return queueManagers(List.of(queueManagers));
        }

        /**
         * @param sharedQueues Shared queue(s) that belong to the queue sharing group
         * 
         * @return builder
         * 
         */
        public Builder sharedQueues(@Nullable Output<List<String>> sharedQueues) {
            $.sharedQueues = sharedQueues;
            return this;
        }

        /**
         * @param sharedQueues Shared queue(s) that belong to the queue sharing group
         * 
         * @return builder
         * 
         */
        public Builder sharedQueues(List<String> sharedQueues) {
            return sharedQueues(Output.of(sharedQueues));
        }

        /**
         * @param sharedQueues Shared queue(s) that belong to the queue sharing group
         * 
         * @return builder
         * 
         */
        public Builder sharedQueues(String... sharedQueues) {
            return sharedQueues(List.of(sharedQueues));
        }

        public QueueSharingGroupsArgs build() {
            return $;
        }
    }

}
