// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.RequestNamingPlaceholdersPlaceholderSourceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RequestNamingPlaceholdersPlaceholderArgs extends com.pulumi.resources.ResourceArgs {

    public static final RequestNamingPlaceholdersPlaceholderArgs Empty = new RequestNamingPlaceholdersPlaceholderArgs();

    @Import(name="aggregation")
    private @Nullable Output<String> aggregation;

    public Optional<Output<String>> aggregation() {
        return Optional.ofNullable(this.aggregation);
    }

    @Import(name="attribute", required=true)
    private Output<String> attribute;

    public Output<String> attribute() {
        return this.attribute;
    }

    @Import(name="delimiterOrRegex")
    private @Nullable Output<String> delimiterOrRegex;

    public Optional<Output<String>> delimiterOrRegex() {
        return Optional.ofNullable(this.delimiterOrRegex);
    }

    @Import(name="endDelimiter")
    private @Nullable Output<String> endDelimiter;

    public Optional<Output<String>> endDelimiter() {
        return Optional.ofNullable(this.endDelimiter);
    }

    @Import(name="kind", required=true)
    private Output<String> kind;

    public Output<String> kind() {
        return this.kind;
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="normalization")
    private @Nullable Output<String> normalization;

    public Optional<Output<String>> normalization() {
        return Optional.ofNullable(this.normalization);
    }

    @Import(name="requestAttribute")
    private @Nullable Output<String> requestAttribute;

    public Optional<Output<String>> requestAttribute() {
        return Optional.ofNullable(this.requestAttribute);
    }

    @Import(name="source")
    private @Nullable Output<RequestNamingPlaceholdersPlaceholderSourceArgs> source;

    public Optional<Output<RequestNamingPlaceholdersPlaceholderSourceArgs>> source() {
        return Optional.ofNullable(this.source);
    }

    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    @Import(name="useFromChildCalls")
    private @Nullable Output<Boolean> useFromChildCalls;

    public Optional<Output<Boolean>> useFromChildCalls() {
        return Optional.ofNullable(this.useFromChildCalls);
    }

    private RequestNamingPlaceholdersPlaceholderArgs() {}

    private RequestNamingPlaceholdersPlaceholderArgs(RequestNamingPlaceholdersPlaceholderArgs $) {
        this.aggregation = $.aggregation;
        this.attribute = $.attribute;
        this.delimiterOrRegex = $.delimiterOrRegex;
        this.endDelimiter = $.endDelimiter;
        this.kind = $.kind;
        this.name = $.name;
        this.normalization = $.normalization;
        this.requestAttribute = $.requestAttribute;
        this.source = $.source;
        this.unknowns = $.unknowns;
        this.useFromChildCalls = $.useFromChildCalls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RequestNamingPlaceholdersPlaceholderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RequestNamingPlaceholdersPlaceholderArgs $;

        public Builder() {
            $ = new RequestNamingPlaceholdersPlaceholderArgs();
        }

        public Builder(RequestNamingPlaceholdersPlaceholderArgs defaults) {
            $ = new RequestNamingPlaceholdersPlaceholderArgs(Objects.requireNonNull(defaults));
        }

        public Builder aggregation(@Nullable Output<String> aggregation) {
            $.aggregation = aggregation;
            return this;
        }

        public Builder aggregation(String aggregation) {
            return aggregation(Output.of(aggregation));
        }

        public Builder attribute(Output<String> attribute) {
            $.attribute = attribute;
            return this;
        }

        public Builder attribute(String attribute) {
            return attribute(Output.of(attribute));
        }

        public Builder delimiterOrRegex(@Nullable Output<String> delimiterOrRegex) {
            $.delimiterOrRegex = delimiterOrRegex;
            return this;
        }

        public Builder delimiterOrRegex(String delimiterOrRegex) {
            return delimiterOrRegex(Output.of(delimiterOrRegex));
        }

        public Builder endDelimiter(@Nullable Output<String> endDelimiter) {
            $.endDelimiter = endDelimiter;
            return this;
        }

        public Builder endDelimiter(String endDelimiter) {
            return endDelimiter(Output.of(endDelimiter));
        }

        public Builder kind(Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder normalization(@Nullable Output<String> normalization) {
            $.normalization = normalization;
            return this;
        }

        public Builder normalization(String normalization) {
            return normalization(Output.of(normalization));
        }

        public Builder requestAttribute(@Nullable Output<String> requestAttribute) {
            $.requestAttribute = requestAttribute;
            return this;
        }

        public Builder requestAttribute(String requestAttribute) {
            return requestAttribute(Output.of(requestAttribute));
        }

        public Builder source(@Nullable Output<RequestNamingPlaceholdersPlaceholderSourceArgs> source) {
            $.source = source;
            return this;
        }

        public Builder source(RequestNamingPlaceholdersPlaceholderSourceArgs source) {
            return source(Output.of(source));
        }

        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public Builder useFromChildCalls(@Nullable Output<Boolean> useFromChildCalls) {
            $.useFromChildCalls = useFromChildCalls;
            return this;
        }

        public Builder useFromChildCalls(Boolean useFromChildCalls) {
            return useFromChildCalls(Output.of(useFromChildCalls));
        }

        public RequestNamingPlaceholdersPlaceholderArgs build() {
            $.attribute = Objects.requireNonNull($.attribute, "expected parameter 'attribute' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
