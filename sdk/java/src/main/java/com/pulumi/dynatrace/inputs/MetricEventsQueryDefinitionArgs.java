// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.MetricEventsQueryDefinitionDimensionFilterArgs;
import com.pulumi.dynatrace.inputs.MetricEventsQueryDefinitionEntityFilterArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricEventsQueryDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricEventsQueryDefinitionArgs Empty = new MetricEventsQueryDefinitionArgs();

    /**
     * The aggregation of the query definition
     * 
     */
    @Import(name="aggregation")
    private @Nullable Output<String> aggregation;

    /**
     * @return The aggregation of the query definition
     * 
     */
    public Optional<Output<String>> aggregation() {
        return Optional.ofNullable(this.aggregation);
    }

    /**
     * The dimension filters of the query definition
     * 
     */
    @Import(name="dimensionFilter")
    private @Nullable Output<MetricEventsQueryDefinitionDimensionFilterArgs> dimensionFilter;

    /**
     * @return The dimension filters of the query definition
     * 
     */
    public Optional<Output<MetricEventsQueryDefinitionDimensionFilterArgs>> dimensionFilter() {
        return Optional.ofNullable(this.dimensionFilter);
    }

    /**
     * Use rule-based filters to define the scope this event monitors.
     * 
     */
    @Import(name="entityFilter")
    private @Nullable Output<MetricEventsQueryDefinitionEntityFilterArgs> entityFilter;

    /**
     * @return Use rule-based filters to define the scope this event monitors.
     * 
     */
    public Optional<Output<MetricEventsQueryDefinitionEntityFilterArgs>> entityFilter() {
        return Optional.ofNullable(this.entityFilter);
    }

    /**
     * The metric key of the query definition
     * 
     */
    @Import(name="metricKey", required=true)
    private Output<String> metricKey;

    /**
     * @return The metric key of the query definition
     * 
     */
    public Output<String> metricKey() {
        return this.metricKey;
    }

    /**
     * To learn more, visit [Metric Selector](https://dt-url.net/metselad)
     * 
     */
    @Import(name="metricSelector")
    private @Nullable Output<String> metricSelector;

    /**
     * @return To learn more, visit [Metric Selector](https://dt-url.net/metselad)
     * 
     */
    public Optional<Output<String>> metricSelector() {
        return Optional.ofNullable(this.metricSelector);
    }

    /**
     * Minute offset of sliding evaluation window for metrics with latency
     * 
     */
    @Import(name="queryOffset")
    private @Nullable Output<Integer> queryOffset;

    /**
     * @return Minute offset of sliding evaluation window for metrics with latency
     * 
     */
    public Optional<Output<Integer>> queryOffset() {
        return Optional.ofNullable(this.queryOffset);
    }

    /**
     * The type of query definition
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of query definition
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private MetricEventsQueryDefinitionArgs() {}

    private MetricEventsQueryDefinitionArgs(MetricEventsQueryDefinitionArgs $) {
        this.aggregation = $.aggregation;
        this.dimensionFilter = $.dimensionFilter;
        this.entityFilter = $.entityFilter;
        this.metricKey = $.metricKey;
        this.metricSelector = $.metricSelector;
        this.queryOffset = $.queryOffset;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricEventsQueryDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricEventsQueryDefinitionArgs $;

        public Builder() {
            $ = new MetricEventsQueryDefinitionArgs();
        }

        public Builder(MetricEventsQueryDefinitionArgs defaults) {
            $ = new MetricEventsQueryDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregation The aggregation of the query definition
         * 
         * @return builder
         * 
         */
        public Builder aggregation(@Nullable Output<String> aggregation) {
            $.aggregation = aggregation;
            return this;
        }

        /**
         * @param aggregation The aggregation of the query definition
         * 
         * @return builder
         * 
         */
        public Builder aggregation(String aggregation) {
            return aggregation(Output.of(aggregation));
        }

        /**
         * @param dimensionFilter The dimension filters of the query definition
         * 
         * @return builder
         * 
         */
        public Builder dimensionFilter(@Nullable Output<MetricEventsQueryDefinitionDimensionFilterArgs> dimensionFilter) {
            $.dimensionFilter = dimensionFilter;
            return this;
        }

        /**
         * @param dimensionFilter The dimension filters of the query definition
         * 
         * @return builder
         * 
         */
        public Builder dimensionFilter(MetricEventsQueryDefinitionDimensionFilterArgs dimensionFilter) {
            return dimensionFilter(Output.of(dimensionFilter));
        }

        /**
         * @param entityFilter Use rule-based filters to define the scope this event monitors.
         * 
         * @return builder
         * 
         */
        public Builder entityFilter(@Nullable Output<MetricEventsQueryDefinitionEntityFilterArgs> entityFilter) {
            $.entityFilter = entityFilter;
            return this;
        }

        /**
         * @param entityFilter Use rule-based filters to define the scope this event monitors.
         * 
         * @return builder
         * 
         */
        public Builder entityFilter(MetricEventsQueryDefinitionEntityFilterArgs entityFilter) {
            return entityFilter(Output.of(entityFilter));
        }

        /**
         * @param metricKey The metric key of the query definition
         * 
         * @return builder
         * 
         */
        public Builder metricKey(Output<String> metricKey) {
            $.metricKey = metricKey;
            return this;
        }

        /**
         * @param metricKey The metric key of the query definition
         * 
         * @return builder
         * 
         */
        public Builder metricKey(String metricKey) {
            return metricKey(Output.of(metricKey));
        }

        /**
         * @param metricSelector To learn more, visit [Metric Selector](https://dt-url.net/metselad)
         * 
         * @return builder
         * 
         */
        public Builder metricSelector(@Nullable Output<String> metricSelector) {
            $.metricSelector = metricSelector;
            return this;
        }

        /**
         * @param metricSelector To learn more, visit [Metric Selector](https://dt-url.net/metselad)
         * 
         * @return builder
         * 
         */
        public Builder metricSelector(String metricSelector) {
            return metricSelector(Output.of(metricSelector));
        }

        /**
         * @param queryOffset Minute offset of sliding evaluation window for metrics with latency
         * 
         * @return builder
         * 
         */
        public Builder queryOffset(@Nullable Output<Integer> queryOffset) {
            $.queryOffset = queryOffset;
            return this;
        }

        /**
         * @param queryOffset Minute offset of sliding evaluation window for metrics with latency
         * 
         * @return builder
         * 
         */
        public Builder queryOffset(Integer queryOffset) {
            return queryOffset(Output.of(queryOffset));
        }

        /**
         * @param type The type of query definition
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of query definition
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public MetricEventsQueryDefinitionArgs build() {
            $.metricKey = Objects.requireNonNull($.metricKey, "expected parameter 'metricKey' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
