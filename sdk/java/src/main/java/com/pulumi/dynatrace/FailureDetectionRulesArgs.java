// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.FailureDetectionRulesConditionsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FailureDetectionRulesArgs extends com.pulumi.resources.ResourceArgs {

    public static final FailureDetectionRulesArgs Empty = new FailureDetectionRulesArgs();

    /**
     * Conditions
     * 
     */
    @Import(name="conditions", required=true)
    private Output<FailureDetectionRulesConditionsArgs> conditions;

    /**
     * @return Conditions
     * 
     */
    public Output<FailureDetectionRulesConditionsArgs> conditions() {
        return this.conditions;
    }

    /**
     * Rule description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Rule description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Rule name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Rule name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Failure detection parameters
     * 
     */
    @Import(name="parameterId", required=true)
    private Output<String> parameterId;

    /**
     * @return Failure detection parameters
     * 
     */
    public Output<String> parameterId() {
        return this.parameterId;
    }

    private FailureDetectionRulesArgs() {}

    private FailureDetectionRulesArgs(FailureDetectionRulesArgs $) {
        this.conditions = $.conditions;
        this.description = $.description;
        this.enabled = $.enabled;
        this.name = $.name;
        this.parameterId = $.parameterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FailureDetectionRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FailureDetectionRulesArgs $;

        public Builder() {
            $ = new FailureDetectionRulesArgs();
        }

        public Builder(FailureDetectionRulesArgs defaults) {
            $ = new FailureDetectionRulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditions Conditions
         * 
         * @return builder
         * 
         */
        public Builder conditions(Output<FailureDetectionRulesConditionsArgs> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions Conditions
         * 
         * @return builder
         * 
         */
        public Builder conditions(FailureDetectionRulesConditionsArgs conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param description Rule description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Rule description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name Rule name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Rule name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parameterId Failure detection parameters
         * 
         * @return builder
         * 
         */
        public Builder parameterId(Output<String> parameterId) {
            $.parameterId = parameterId;
            return this;
        }

        /**
         * @param parameterId Failure detection parameters
         * 
         * @return builder
         * 
         */
        public Builder parameterId(String parameterId) {
            return parameterId(Output.of(parameterId));
        }

        public FailureDetectionRulesArgs build() {
            $.conditions = Objects.requireNonNull($.conditions, "expected parameter 'conditions' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.parameterId = Objects.requireNonNull($.parameterId, "expected parameter 'parameterId' to be non-null");
            return $;
        }
    }

}
