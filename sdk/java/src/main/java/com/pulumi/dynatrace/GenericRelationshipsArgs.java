// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.GenericRelationshipsSourcesArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GenericRelationshipsArgs extends com.pulumi.resources.ResourceArgs {

    public static final GenericRelationshipsArgs Empty = new GenericRelationshipsArgs();

    /**
     * The user or extension that created this relationship.
     * 
     */
    @Import(name="createdBy", required=true)
    private Output<String> createdBy;

    /**
     * @return The user or extension that created this relationship.
     * 
     */
    public Output<String> createdBy() {
        return this.createdBy;
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Specify a role for the source entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the source type is considered for the relationship.
     * 
     */
    @Import(name="fromRole")
    private @Nullable Output<String> fromRole;

    /**
     * @return Specify a role for the source entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the source type is considered for the relationship.
     * 
     */
    public Optional<Output<String>> fromRole() {
        return Optional.ofNullable(this.fromRole);
    }

    /**
     * Define an entity type as the source of the relationship.
     * 
     */
    @Import(name="fromType", required=true)
    private Output<String> fromType;

    /**
     * @return Define an entity type as the source of the relationship.
     * 
     */
    public Output<String> fromType() {
        return this.fromType;
    }

    /**
     * Specify all sources which should be evaluated for this relationship rule. The relationship is only created when any of the filters match.
     * 
     */
    @Import(name="sources", required=true)
    private Output<GenericRelationshipsSourcesArgs> sources;

    /**
     * @return Specify all sources which should be evaluated for this relationship rule. The relationship is only created when any of the filters match.
     * 
     */
    public Output<GenericRelationshipsSourcesArgs> sources() {
        return this.sources;
    }

    /**
     * Specify a role for the destination entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the destination type is considered for the relationship.
     * 
     */
    @Import(name="toRole")
    private @Nullable Output<String> toRole;

    /**
     * @return Specify a role for the destination entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the destination type is considered for the relationship.
     * 
     */
    public Optional<Output<String>> toRole() {
        return Optional.ofNullable(this.toRole);
    }

    /**
     * Define an entity type as the destination of the relationship. You can choose the same type as the source type. In this case you also may assign different roles for source and destination for having directed relationships.
     * 
     */
    @Import(name="toType", required=true)
    private Output<String> toType;

    /**
     * @return Define an entity type as the destination of the relationship. You can choose the same type as the source type. In this case you also may assign different roles for source and destination for having directed relationships.
     * 
     */
    public Output<String> toType() {
        return this.toType;
    }

    /**
     * Possible Values: `CALLS`, `CHILD_OF`, `INSTANCE_OF`, `PART_OF`, `RUNS_ON`, `SAME_AS`
     * 
     */
    @Import(name="typeOfRelation", required=true)
    private Output<String> typeOfRelation;

    /**
     * @return Possible Values: `CALLS`, `CHILD_OF`, `INSTANCE_OF`, `PART_OF`, `RUNS_ON`, `SAME_AS`
     * 
     */
    public Output<String> typeOfRelation() {
        return this.typeOfRelation;
    }

    private GenericRelationshipsArgs() {}

    private GenericRelationshipsArgs(GenericRelationshipsArgs $) {
        this.createdBy = $.createdBy;
        this.enabled = $.enabled;
        this.fromRole = $.fromRole;
        this.fromType = $.fromType;
        this.sources = $.sources;
        this.toRole = $.toRole;
        this.toType = $.toType;
        this.typeOfRelation = $.typeOfRelation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GenericRelationshipsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GenericRelationshipsArgs $;

        public Builder() {
            $ = new GenericRelationshipsArgs();
        }

        public Builder(GenericRelationshipsArgs defaults) {
            $ = new GenericRelationshipsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdBy The user or extension that created this relationship.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The user or extension that created this relationship.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param fromRole Specify a role for the source entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the source type is considered for the relationship.
         * 
         * @return builder
         * 
         */
        public Builder fromRole(@Nullable Output<String> fromRole) {
            $.fromRole = fromRole;
            return this;
        }

        /**
         * @param fromRole Specify a role for the source entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the source type is considered for the relationship.
         * 
         * @return builder
         * 
         */
        public Builder fromRole(String fromRole) {
            return fromRole(Output.of(fromRole));
        }

        /**
         * @param fromType Define an entity type as the source of the relationship.
         * 
         * @return builder
         * 
         */
        public Builder fromType(Output<String> fromType) {
            $.fromType = fromType;
            return this;
        }

        /**
         * @param fromType Define an entity type as the source of the relationship.
         * 
         * @return builder
         * 
         */
        public Builder fromType(String fromType) {
            return fromType(Output.of(fromType));
        }

        /**
         * @param sources Specify all sources which should be evaluated for this relationship rule. The relationship is only created when any of the filters match.
         * 
         * @return builder
         * 
         */
        public Builder sources(Output<GenericRelationshipsSourcesArgs> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources Specify all sources which should be evaluated for this relationship rule. The relationship is only created when any of the filters match.
         * 
         * @return builder
         * 
         */
        public Builder sources(GenericRelationshipsSourcesArgs sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param toRole Specify a role for the destination entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the destination type is considered for the relationship.
         * 
         * @return builder
         * 
         */
        public Builder toRole(@Nullable Output<String> toRole) {
            $.toRole = toRole;
            return this;
        }

        /**
         * @param toRole Specify a role for the destination entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the destination type is considered for the relationship.
         * 
         * @return builder
         * 
         */
        public Builder toRole(String toRole) {
            return toRole(Output.of(toRole));
        }

        /**
         * @param toType Define an entity type as the destination of the relationship. You can choose the same type as the source type. In this case you also may assign different roles for source and destination for having directed relationships.
         * 
         * @return builder
         * 
         */
        public Builder toType(Output<String> toType) {
            $.toType = toType;
            return this;
        }

        /**
         * @param toType Define an entity type as the destination of the relationship. You can choose the same type as the source type. In this case you also may assign different roles for source and destination for having directed relationships.
         * 
         * @return builder
         * 
         */
        public Builder toType(String toType) {
            return toType(Output.of(toType));
        }

        /**
         * @param typeOfRelation Possible Values: `CALLS`, `CHILD_OF`, `INSTANCE_OF`, `PART_OF`, `RUNS_ON`, `SAME_AS`
         * 
         * @return builder
         * 
         */
        public Builder typeOfRelation(Output<String> typeOfRelation) {
            $.typeOfRelation = typeOfRelation;
            return this;
        }

        /**
         * @param typeOfRelation Possible Values: `CALLS`, `CHILD_OF`, `INSTANCE_OF`, `PART_OF`, `RUNS_ON`, `SAME_AS`
         * 
         * @return builder
         * 
         */
        public Builder typeOfRelation(String typeOfRelation) {
            return typeOfRelation(Output.of(typeOfRelation));
        }

        public GenericRelationshipsArgs build() {
            $.createdBy = Objects.requireNonNull($.createdBy, "expected parameter 'createdBy' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.fromType = Objects.requireNonNull($.fromType, "expected parameter 'fromType' to be non-null");
            $.sources = Objects.requireNonNull($.sources, "expected parameter 'sources' to be non-null");
            $.toType = Objects.requireNonNull($.toType, "expected parameter 'toType' to be non-null");
            $.typeOfRelation = Objects.requireNonNull($.typeOfRelation, "expected parameter 'typeOfRelation' to be non-null");
            return $;
        }
    }

}
