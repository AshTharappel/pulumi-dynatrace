// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class ApiDetectionConditionsConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiDetectionConditionsConditionArgs Empty = new ApiDetectionConditionsConditionArgs();

    @Import(name="base", required=true)
    private Output<String> base;

    public Output<String> base() {
        return this.base;
    }

    @Import(name="matcher", required=true)
    private Output<String> matcher;

    public Output<String> matcher() {
        return this.matcher;
    }

    @Import(name="pattern", required=true)
    private Output<String> pattern;

    public Output<String> pattern() {
        return this.pattern;
    }

    private ApiDetectionConditionsConditionArgs() {}

    private ApiDetectionConditionsConditionArgs(ApiDetectionConditionsConditionArgs $) {
        this.base = $.base;
        this.matcher = $.matcher;
        this.pattern = $.pattern;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiDetectionConditionsConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiDetectionConditionsConditionArgs $;

        public Builder() {
            $ = new ApiDetectionConditionsConditionArgs();
        }

        public Builder(ApiDetectionConditionsConditionArgs defaults) {
            $ = new ApiDetectionConditionsConditionArgs(Objects.requireNonNull(defaults));
        }

        public Builder base(Output<String> base) {
            $.base = base;
            return this;
        }

        public Builder base(String base) {
            return base(Output.of(base));
        }

        public Builder matcher(Output<String> matcher) {
            $.matcher = matcher;
            return this;
        }

        public Builder matcher(String matcher) {
            return matcher(Output.of(matcher));
        }

        public Builder pattern(Output<String> pattern) {
            $.pattern = pattern;
            return this;
        }

        public Builder pattern(String pattern) {
            return pattern(Output.of(pattern));
        }

        public ApiDetectionConditionsConditionArgs build() {
            $.base = Objects.requireNonNull($.base, "expected parameter 'base' to be non-null");
            $.matcher = Objects.requireNonNull($.matcher, "expected parameter 'matcher' to be non-null");
            $.pattern = Objects.requireNonNull($.pattern, "expected parameter 'pattern' to be non-null");
            return $;
        }
    }

}
