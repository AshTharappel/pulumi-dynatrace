// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DashboardSharingPermissionsArgs;
import com.pulumi.dynatrace.inputs.DashboardSharingPublicArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardSharingState extends com.pulumi.resources.ResourceArgs {

    public static final DashboardSharingState Empty = new DashboardSharingState();

    /**
     * The Dynatrace entity ID of the dashboard
     * 
     */
    @Import(name="dashboardId")
    private @Nullable Output<String> dashboardId;

    /**
     * @return The Dynatrace entity ID of the dashboard
     * 
     */
    public Optional<Output<String>> dashboardId() {
        return Optional.ofNullable(this.dashboardId);
    }

    /**
     * The dashboard is shared (`true`) or private (`false`)
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return The dashboard is shared (`true`) or private (`false`)
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Access permissions of the dashboard
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<DashboardSharingPermissionsArgs> permissions;

    /**
     * @return Access permissions of the dashboard
     * 
     */
    public Optional<Output<DashboardSharingPermissionsArgs>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * If `true` the dashboard will be marked as preset
     * 
     */
    @Import(name="preset")
    private @Nullable Output<Boolean> preset;

    /**
     * @return If `true` the dashboard will be marked as preset
     * 
     */
    public Optional<Output<Boolean>> preset() {
        return Optional.ofNullable(this.preset);
    }

    /**
     * Configuration of the [anonymous access](https://dt-url.net/ov03sf1) to the dashboard
     * 
     */
    @Import(name="public")
    private @Nullable Output<DashboardSharingPublicArgs> public_;

    /**
     * @return Configuration of the [anonymous access](https://dt-url.net/ov03sf1) to the dashboard
     * 
     */
    public Optional<Output<DashboardSharingPublicArgs>> public_() {
        return Optional.ofNullable(this.public_);
    }

    private DashboardSharingState() {}

    private DashboardSharingState(DashboardSharingState $) {
        this.dashboardId = $.dashboardId;
        this.enabled = $.enabled;
        this.permissions = $.permissions;
        this.preset = $.preset;
        this.public_ = $.public_;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardSharingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardSharingState $;

        public Builder() {
            $ = new DashboardSharingState();
        }

        public Builder(DashboardSharingState defaults) {
            $ = new DashboardSharingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dashboardId The Dynatrace entity ID of the dashboard
         * 
         * @return builder
         * 
         */
        public Builder dashboardId(@Nullable Output<String> dashboardId) {
            $.dashboardId = dashboardId;
            return this;
        }

        /**
         * @param dashboardId The Dynatrace entity ID of the dashboard
         * 
         * @return builder
         * 
         */
        public Builder dashboardId(String dashboardId) {
            return dashboardId(Output.of(dashboardId));
        }

        /**
         * @param enabled The dashboard is shared (`true`) or private (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled The dashboard is shared (`true`) or private (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param permissions Access permissions of the dashboard
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<DashboardSharingPermissionsArgs> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions Access permissions of the dashboard
         * 
         * @return builder
         * 
         */
        public Builder permissions(DashboardSharingPermissionsArgs permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param preset If `true` the dashboard will be marked as preset
         * 
         * @return builder
         * 
         */
        public Builder preset(@Nullable Output<Boolean> preset) {
            $.preset = preset;
            return this;
        }

        /**
         * @param preset If `true` the dashboard will be marked as preset
         * 
         * @return builder
         * 
         */
        public Builder preset(Boolean preset) {
            return preset(Output.of(preset));
        }

        /**
         * @param public_ Configuration of the [anonymous access](https://dt-url.net/ov03sf1) to the dashboard
         * 
         * @return builder
         * 
         */
        public Builder public_(@Nullable Output<DashboardSharingPublicArgs> public_) {
            $.public_ = public_;
            return this;
        }

        /**
         * @param public_ Configuration of the [anonymous access](https://dt-url.net/ov03sf1) to the dashboard
         * 
         * @return builder
         * 
         */
        public Builder public_(DashboardSharingPublicArgs public_) {
            return public_(Output.of(public_));
        }

        public DashboardSharingState build() {
            return $;
        }
    }

}
