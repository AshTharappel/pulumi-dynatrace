// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;


public final class MainframeTransactionMonitoringArgs extends com.pulumi.resources.ResourceArgs {

    public static final MainframeTransactionMonitoringArgs Empty = new MainframeTransactionMonitoringArgs();

    /**
     * If enabled, CICS regions belonging to the same CICSPlex will be grouped into a single process group. If disabled, a process group will be created for each CICS region.
     * 
     */
    @Import(name="groupCicsRegions", required=true)
    private Output<Boolean> groupCicsRegions;

    /**
     * @return If enabled, CICS regions belonging to the same CICSPlex will be grouped into a single process group. If disabled, a process group will be created for each CICS region.
     * 
     */
    public Output<Boolean> groupCicsRegions() {
        return this.groupCicsRegions;
    }

    /**
     * If enabled, IMS regions belonging to the same subsystem will be grouped into a single process group. If disabled, a process group will be created for each IMS region.
     * 
     */
    @Import(name="groupImsRegions", required=true)
    private Output<Boolean> groupImsRegions;

    /**
     * @return If enabled, IMS regions belonging to the same subsystem will be grouped into a single process group. If disabled, a process group will be created for each IMS region.
     * 
     */
    public Output<Boolean> groupImsRegions() {
        return this.groupImsRegions;
    }

    /**
     * If enabled, the CICS Transaction Gateway sensor will trace all EXCI requests including those that are using the TCP/IP or SNA protocol.
     * 
     */
    @Import(name="monitorAllCtgProtocols", required=true)
    private Output<Boolean> monitorAllCtgProtocols;

    /**
     * @return If enabled, the CICS Transaction Gateway sensor will trace all EXCI requests including those that are using the TCP/IP or SNA protocol.
     * 
     */
    public Output<Boolean> monitorAllCtgProtocols() {
        return this.monitorAllCtgProtocols;
    }

    /**
     * Dynatrace automatically traces incoming web requests when they are called by already-monitored services. Enable this setting to monitor all incoming web requests. We recommend enabling it only over a short period of time.
     * 
     */
    @Import(name="monitorAllIncomingWebRequests", required=true)
    private Output<Boolean> monitorAllIncomingWebRequests;

    /**
     * @return Dynatrace automatically traces incoming web requests when they are called by already-monitored services. Enable this setting to monitor all incoming web requests. We recommend enabling it only over a short period of time.
     * 
     */
    public Output<Boolean> monitorAllIncomingWebRequests() {
        return this.monitorAllIncomingWebRequests;
    }

    /**
     * We recommend the default limit of 500 nodes. The value 0 means unlimited number of nodes.
     * 
     */
    @Import(name="nodeLimit", required=true)
    private Output<Integer> nodeLimit;

    /**
     * @return We recommend the default limit of 500 nodes. The value 0 means unlimited number of nodes.
     * 
     */
    public Output<Integer> nodeLimit() {
        return this.nodeLimit;
    }

    /**
     * If enabled, a CICS service will be created for each monitored transaction ID within a process group. If disabled, a CICS service will be created for each monitored CICS region within a process group. We recommend enabling it only when the CICS regions are grouped by their CICSPlex.
     * 
     */
    @Import(name="zosCicsServiceDetectionUsesTransactionId", required=true)
    private Output<Boolean> zosCicsServiceDetectionUsesTransactionId;

    /**
     * @return If enabled, a CICS service will be created for each monitored transaction ID within a process group. If disabled, a CICS service will be created for each monitored CICS region within a process group. We recommend enabling it only when the CICS regions are grouped by their CICSPlex.
     * 
     */
    public Output<Boolean> zosCicsServiceDetectionUsesTransactionId() {
        return this.zosCicsServiceDetectionUsesTransactionId;
    }

    /**
     * If enabled, an IMS service will be created for each monitored transaction ID within a process group. If disabled, an IMS service will be created for each monitored IMS region within a process group. We recommend enabling it only when the IMS regions are grouped by their subsystem.
     * 
     */
    @Import(name="zosImsServiceDetectionUsesTransactionId", required=true)
    private Output<Boolean> zosImsServiceDetectionUsesTransactionId;

    /**
     * @return If enabled, an IMS service will be created for each monitored transaction ID within a process group. If disabled, an IMS service will be created for each monitored IMS region within a process group. We recommend enabling it only when the IMS regions are grouped by their subsystem.
     * 
     */
    public Output<Boolean> zosImsServiceDetectionUsesTransactionId() {
        return this.zosImsServiceDetectionUsesTransactionId;
    }

    private MainframeTransactionMonitoringArgs() {}

    private MainframeTransactionMonitoringArgs(MainframeTransactionMonitoringArgs $) {
        this.groupCicsRegions = $.groupCicsRegions;
        this.groupImsRegions = $.groupImsRegions;
        this.monitorAllCtgProtocols = $.monitorAllCtgProtocols;
        this.monitorAllIncomingWebRequests = $.monitorAllIncomingWebRequests;
        this.nodeLimit = $.nodeLimit;
        this.zosCicsServiceDetectionUsesTransactionId = $.zosCicsServiceDetectionUsesTransactionId;
        this.zosImsServiceDetectionUsesTransactionId = $.zosImsServiceDetectionUsesTransactionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MainframeTransactionMonitoringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MainframeTransactionMonitoringArgs $;

        public Builder() {
            $ = new MainframeTransactionMonitoringArgs();
        }

        public Builder(MainframeTransactionMonitoringArgs defaults) {
            $ = new MainframeTransactionMonitoringArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupCicsRegions If enabled, CICS regions belonging to the same CICSPlex will be grouped into a single process group. If disabled, a process group will be created for each CICS region.
         * 
         * @return builder
         * 
         */
        public Builder groupCicsRegions(Output<Boolean> groupCicsRegions) {
            $.groupCicsRegions = groupCicsRegions;
            return this;
        }

        /**
         * @param groupCicsRegions If enabled, CICS regions belonging to the same CICSPlex will be grouped into a single process group. If disabled, a process group will be created for each CICS region.
         * 
         * @return builder
         * 
         */
        public Builder groupCicsRegions(Boolean groupCicsRegions) {
            return groupCicsRegions(Output.of(groupCicsRegions));
        }

        /**
         * @param groupImsRegions If enabled, IMS regions belonging to the same subsystem will be grouped into a single process group. If disabled, a process group will be created for each IMS region.
         * 
         * @return builder
         * 
         */
        public Builder groupImsRegions(Output<Boolean> groupImsRegions) {
            $.groupImsRegions = groupImsRegions;
            return this;
        }

        /**
         * @param groupImsRegions If enabled, IMS regions belonging to the same subsystem will be grouped into a single process group. If disabled, a process group will be created for each IMS region.
         * 
         * @return builder
         * 
         */
        public Builder groupImsRegions(Boolean groupImsRegions) {
            return groupImsRegions(Output.of(groupImsRegions));
        }

        /**
         * @param monitorAllCtgProtocols If enabled, the CICS Transaction Gateway sensor will trace all EXCI requests including those that are using the TCP/IP or SNA protocol.
         * 
         * @return builder
         * 
         */
        public Builder monitorAllCtgProtocols(Output<Boolean> monitorAllCtgProtocols) {
            $.monitorAllCtgProtocols = monitorAllCtgProtocols;
            return this;
        }

        /**
         * @param monitorAllCtgProtocols If enabled, the CICS Transaction Gateway sensor will trace all EXCI requests including those that are using the TCP/IP or SNA protocol.
         * 
         * @return builder
         * 
         */
        public Builder monitorAllCtgProtocols(Boolean monitorAllCtgProtocols) {
            return monitorAllCtgProtocols(Output.of(monitorAllCtgProtocols));
        }

        /**
         * @param monitorAllIncomingWebRequests Dynatrace automatically traces incoming web requests when they are called by already-monitored services. Enable this setting to monitor all incoming web requests. We recommend enabling it only over a short period of time.
         * 
         * @return builder
         * 
         */
        public Builder monitorAllIncomingWebRequests(Output<Boolean> monitorAllIncomingWebRequests) {
            $.monitorAllIncomingWebRequests = monitorAllIncomingWebRequests;
            return this;
        }

        /**
         * @param monitorAllIncomingWebRequests Dynatrace automatically traces incoming web requests when they are called by already-monitored services. Enable this setting to monitor all incoming web requests. We recommend enabling it only over a short period of time.
         * 
         * @return builder
         * 
         */
        public Builder monitorAllIncomingWebRequests(Boolean monitorAllIncomingWebRequests) {
            return monitorAllIncomingWebRequests(Output.of(monitorAllIncomingWebRequests));
        }

        /**
         * @param nodeLimit We recommend the default limit of 500 nodes. The value 0 means unlimited number of nodes.
         * 
         * @return builder
         * 
         */
        public Builder nodeLimit(Output<Integer> nodeLimit) {
            $.nodeLimit = nodeLimit;
            return this;
        }

        /**
         * @param nodeLimit We recommend the default limit of 500 nodes. The value 0 means unlimited number of nodes.
         * 
         * @return builder
         * 
         */
        public Builder nodeLimit(Integer nodeLimit) {
            return nodeLimit(Output.of(nodeLimit));
        }

        /**
         * @param zosCicsServiceDetectionUsesTransactionId If enabled, a CICS service will be created for each monitored transaction ID within a process group. If disabled, a CICS service will be created for each monitored CICS region within a process group. We recommend enabling it only when the CICS regions are grouped by their CICSPlex.
         * 
         * @return builder
         * 
         */
        public Builder zosCicsServiceDetectionUsesTransactionId(Output<Boolean> zosCicsServiceDetectionUsesTransactionId) {
            $.zosCicsServiceDetectionUsesTransactionId = zosCicsServiceDetectionUsesTransactionId;
            return this;
        }

        /**
         * @param zosCicsServiceDetectionUsesTransactionId If enabled, a CICS service will be created for each monitored transaction ID within a process group. If disabled, a CICS service will be created for each monitored CICS region within a process group. We recommend enabling it only when the CICS regions are grouped by their CICSPlex.
         * 
         * @return builder
         * 
         */
        public Builder zosCicsServiceDetectionUsesTransactionId(Boolean zosCicsServiceDetectionUsesTransactionId) {
            return zosCicsServiceDetectionUsesTransactionId(Output.of(zosCicsServiceDetectionUsesTransactionId));
        }

        /**
         * @param zosImsServiceDetectionUsesTransactionId If enabled, an IMS service will be created for each monitored transaction ID within a process group. If disabled, an IMS service will be created for each monitored IMS region within a process group. We recommend enabling it only when the IMS regions are grouped by their subsystem.
         * 
         * @return builder
         * 
         */
        public Builder zosImsServiceDetectionUsesTransactionId(Output<Boolean> zosImsServiceDetectionUsesTransactionId) {
            $.zosImsServiceDetectionUsesTransactionId = zosImsServiceDetectionUsesTransactionId;
            return this;
        }

        /**
         * @param zosImsServiceDetectionUsesTransactionId If enabled, an IMS service will be created for each monitored transaction ID within a process group. If disabled, an IMS service will be created for each monitored IMS region within a process group. We recommend enabling it only when the IMS regions are grouped by their subsystem.
         * 
         * @return builder
         * 
         */
        public Builder zosImsServiceDetectionUsesTransactionId(Boolean zosImsServiceDetectionUsesTransactionId) {
            return zosImsServiceDetectionUsesTransactionId(Output.of(zosImsServiceDetectionUsesTransactionId));
        }

        public MainframeTransactionMonitoringArgs build() {
            $.groupCicsRegions = Objects.requireNonNull($.groupCicsRegions, "expected parameter 'groupCicsRegions' to be non-null");
            $.groupImsRegions = Objects.requireNonNull($.groupImsRegions, "expected parameter 'groupImsRegions' to be non-null");
            $.monitorAllCtgProtocols = Objects.requireNonNull($.monitorAllCtgProtocols, "expected parameter 'monitorAllCtgProtocols' to be non-null");
            $.monitorAllIncomingWebRequests = Objects.requireNonNull($.monitorAllIncomingWebRequests, "expected parameter 'monitorAllIncomingWebRequests' to be non-null");
            $.nodeLimit = Objects.requireNonNull($.nodeLimit, "expected parameter 'nodeLimit' to be non-null");
            $.zosCicsServiceDetectionUsesTransactionId = Objects.requireNonNull($.zosCicsServiceDetectionUsesTransactionId, "expected parameter 'zosCicsServiceDetectionUsesTransactionId' to be non-null");
            $.zosImsServiceDetectionUsesTransactionId = Objects.requireNonNull($.zosImsServiceDetectionUsesTransactionId, "expected parameter 'zosImsServiceDetectionUsesTransactionId' to be non-null");
            return $;
        }
    }

}
