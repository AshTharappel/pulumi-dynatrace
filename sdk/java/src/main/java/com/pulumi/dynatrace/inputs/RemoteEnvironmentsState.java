// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RemoteEnvironmentsState extends com.pulumi.resources.ResourceArgs {

    public static final RemoteEnvironmentsState Empty = new RemoteEnvironmentsState();

    /**
     * Name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Possible Values: `CLUSTER`, `EXTERNAL`, `INTERNAL`
     * 
     */
    @Import(name="networkScope")
    private @Nullable Output<String> networkScope;

    /**
     * @return Possible Values: `CLUSTER`, `EXTERNAL`, `INTERNAL`
     * 
     */
    public Optional<Output<String>> networkScope() {
        return Optional.ofNullable(this.networkScope);
    }

    /**
     * Provide a valid token created on the remote environment.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return Provide a valid token created on the remote environment.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * Specify the full URI to the remote environment. Your local environment will have to be able to connect this URI on a network level.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return Specify the full URI to the remote environment. Your local environment will have to be able to connect this URI on a network level.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private RemoteEnvironmentsState() {}

    private RemoteEnvironmentsState(RemoteEnvironmentsState $) {
        this.name = $.name;
        this.networkScope = $.networkScope;
        this.token = $.token;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RemoteEnvironmentsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RemoteEnvironmentsState $;

        public Builder() {
            $ = new RemoteEnvironmentsState();
        }

        public Builder(RemoteEnvironmentsState defaults) {
            $ = new RemoteEnvironmentsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkScope Possible Values: `CLUSTER`, `EXTERNAL`, `INTERNAL`
         * 
         * @return builder
         * 
         */
        public Builder networkScope(@Nullable Output<String> networkScope) {
            $.networkScope = networkScope;
            return this;
        }

        /**
         * @param networkScope Possible Values: `CLUSTER`, `EXTERNAL`, `INTERNAL`
         * 
         * @return builder
         * 
         */
        public Builder networkScope(String networkScope) {
            return networkScope(Output.of(networkScope));
        }

        /**
         * @param token Provide a valid token created on the remote environment.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token Provide a valid token created on the remote environment.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param uri Specify the full URI to the remote environment. Your local environment will have to be able to connect this URI on a network level.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri Specify the full URI to the remote environment. Your local environment will have to be able to connect this URI on a network level.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public RemoteEnvironmentsState build() {
            return $;
        }
    }

}
