// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceAnomaliesV2LoadSpikesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceAnomaliesV2LoadSpikesArgs Empty = new ServiceAnomaliesV2LoadSpikesArgs();

    /**
     * Detect service load spikes
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Detect service load spikes
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Threshold
     * 
     */
    @Import(name="loadSpikePercent")
    private @Nullable Output<Double> loadSpikePercent;

    /**
     * @return Threshold
     * 
     */
    public Optional<Output<Double>> loadSpikePercent() {
        return Optional.ofNullable(this.loadSpikePercent);
    }

    /**
     * Time span
     * 
     */
    @Import(name="minutesAbnormalState")
    private @Nullable Output<Integer> minutesAbnormalState;

    /**
     * @return Time span
     * 
     */
    public Optional<Output<Integer>> minutesAbnormalState() {
        return Optional.ofNullable(this.minutesAbnormalState);
    }

    private ServiceAnomaliesV2LoadSpikesArgs() {}

    private ServiceAnomaliesV2LoadSpikesArgs(ServiceAnomaliesV2LoadSpikesArgs $) {
        this.enabled = $.enabled;
        this.loadSpikePercent = $.loadSpikePercent;
        this.minutesAbnormalState = $.minutesAbnormalState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceAnomaliesV2LoadSpikesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceAnomaliesV2LoadSpikesArgs $;

        public Builder() {
            $ = new ServiceAnomaliesV2LoadSpikesArgs();
        }

        public Builder(ServiceAnomaliesV2LoadSpikesArgs defaults) {
            $ = new ServiceAnomaliesV2LoadSpikesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Detect service load spikes
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Detect service load spikes
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param loadSpikePercent Threshold
         * 
         * @return builder
         * 
         */
        public Builder loadSpikePercent(@Nullable Output<Double> loadSpikePercent) {
            $.loadSpikePercent = loadSpikePercent;
            return this;
        }

        /**
         * @param loadSpikePercent Threshold
         * 
         * @return builder
         * 
         */
        public Builder loadSpikePercent(Double loadSpikePercent) {
            return loadSpikePercent(Output.of(loadSpikePercent));
        }

        /**
         * @param minutesAbnormalState Time span
         * 
         * @return builder
         * 
         */
        public Builder minutesAbnormalState(@Nullable Output<Integer> minutesAbnormalState) {
            $.minutesAbnormalState = minutesAbnormalState;
            return this;
        }

        /**
         * @param minutesAbnormalState Time span
         * 
         * @return builder
         * 
         */
        public Builder minutesAbnormalState(Integer minutesAbnormalState) {
            return minutesAbnormalState(Output.of(minutesAbnormalState));
        }

        public ServiceAnomaliesV2LoadSpikesArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
