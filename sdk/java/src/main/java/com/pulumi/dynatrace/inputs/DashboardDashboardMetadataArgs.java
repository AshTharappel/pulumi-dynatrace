// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DashboardDashboardMetadataDynamicFiltersArgs;
import com.pulumi.dynatrace.inputs.DashboardDashboardMetadataFilterArgs;
import com.pulumi.dynatrace.inputs.DashboardDashboardMetadataSharingDetailsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardDashboardMetadataArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardDashboardMetadataArgs Empty = new DashboardDashboardMetadataArgs();

    /**
     * The tile uses consistent colors when rendering its content
     * 
     */
    @Import(name="consistentColors")
    private @Nullable Output<Boolean> consistentColors;

    /**
     * @return The tile uses consistent colors when rendering its content
     * 
     */
    public Optional<Output<Boolean>> consistentColors() {
        return Optional.ofNullable(this.consistentColors);
    }

    /**
     * Dashboard filter configuration of a dashboard
     * 
     */
    @Import(name="dynamicFilters")
    private @Nullable Output<DashboardDashboardMetadataDynamicFiltersArgs> dynamicFilters;

    /**
     * @return Dashboard filter configuration of a dashboard
     * 
     */
    public Optional<Output<DashboardDashboardMetadataDynamicFiltersArgs>> dynamicFilters() {
        return Optional.ofNullable(this.dynamicFilters);
    }

    /**
     * Global filter Settings for the Dashboard
     * 
     */
    @Import(name="filter")
    private @Nullable Output<DashboardDashboardMetadataFilterArgs> filter;

    /**
     * @return Global filter Settings for the Dashboard
     * 
     */
    public Optional<Output<DashboardDashboardMetadataFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * the name of the dashboard
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return the name of the dashboard
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * the owner of the dashboard
     * 
     */
    @Import(name="owner", required=true)
    private Output<String> owner;

    /**
     * @return the owner of the dashboard
     * 
     */
    public Output<String> owner() {
        return this.owner;
    }

    /**
     * the dashboard is a preset (`true`) or not (`false`). Default is `false`.
     * 
     */
    @Import(name="preset")
    private @Nullable Output<Boolean> preset;

    /**
     * @return the dashboard is a preset (`true`) or not (`false`). Default is `false`.
     * 
     */
    public Optional<Output<Boolean>> preset() {
        return Optional.ofNullable(this.preset);
    }

    /**
     * the dashboard is shared (`true`) or private (`false`)
     * 
     * @deprecated
     * Please use the resource `dynatrace_dashboard_sharing` to configure share settings
     * 
     */
    @Deprecated /* Please use the resource `dynatrace_dashboard_sharing` to configure share settings */
    @Import(name="shared")
    private @Nullable Output<Boolean> shared;

    /**
     * @return the dashboard is shared (`true`) or private (`false`)
     * 
     * @deprecated
     * Please use the resource `dynatrace_dashboard_sharing` to configure share settings
     * 
     */
    @Deprecated /* Please use the resource `dynatrace_dashboard_sharing` to configure share settings */
    public Optional<Output<Boolean>> shared() {
        return Optional.ofNullable(this.shared);
    }

    /**
     * represents sharing configuration of a dashboard
     * 
     * @deprecated
     * Please use the resource `dynatrace_dashboard_sharing` to configure share settings
     * 
     */
    @Deprecated /* Please use the resource `dynatrace_dashboard_sharing` to configure share settings */
    @Import(name="sharingDetails")
    private @Nullable Output<DashboardDashboardMetadataSharingDetailsArgs> sharingDetails;

    /**
     * @return represents sharing configuration of a dashboard
     * 
     * @deprecated
     * Please use the resource `dynatrace_dashboard_sharing` to configure share settings
     * 
     */
    @Deprecated /* Please use the resource `dynatrace_dashboard_sharing` to configure share settings */
    public Optional<Output<DashboardDashboardMetadataSharingDetailsArgs>> sharingDetails() {
        return Optional.ofNullable(this.sharingDetails);
    }

    /**
     * a set of tags assigned to the dashboard
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return a set of tags assigned to the dashboard
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * No documentation available
     * 
     */
    @Import(name="tilesNameSize")
    private @Nullable Output<String> tilesNameSize;

    /**
     * @return No documentation available
     * 
     */
    public Optional<Output<String>> tilesNameSize() {
        return Optional.ofNullable(this.tilesNameSize);
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    /**
     * a set of all possible global dashboard filters that can be applied to dashboard
     * 
     */
    @Import(name="validFilterKeys")
    private @Nullable Output<List<String>> validFilterKeys;

    /**
     * @return a set of all possible global dashboard filters that can be applied to dashboard
     * 
     */
    public Optional<Output<List<String>>> validFilterKeys() {
        return Optional.ofNullable(this.validFilterKeys);
    }

    private DashboardDashboardMetadataArgs() {}

    private DashboardDashboardMetadataArgs(DashboardDashboardMetadataArgs $) {
        this.consistentColors = $.consistentColors;
        this.dynamicFilters = $.dynamicFilters;
        this.filter = $.filter;
        this.name = $.name;
        this.owner = $.owner;
        this.preset = $.preset;
        this.shared = $.shared;
        this.sharingDetails = $.sharingDetails;
        this.tags = $.tags;
        this.tilesNameSize = $.tilesNameSize;
        this.unknowns = $.unknowns;
        this.validFilterKeys = $.validFilterKeys;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardDashboardMetadataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardDashboardMetadataArgs $;

        public Builder() {
            $ = new DashboardDashboardMetadataArgs();
        }

        public Builder(DashboardDashboardMetadataArgs defaults) {
            $ = new DashboardDashboardMetadataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param consistentColors The tile uses consistent colors when rendering its content
         * 
         * @return builder
         * 
         */
        public Builder consistentColors(@Nullable Output<Boolean> consistentColors) {
            $.consistentColors = consistentColors;
            return this;
        }

        /**
         * @param consistentColors The tile uses consistent colors when rendering its content
         * 
         * @return builder
         * 
         */
        public Builder consistentColors(Boolean consistentColors) {
            return consistentColors(Output.of(consistentColors));
        }

        /**
         * @param dynamicFilters Dashboard filter configuration of a dashboard
         * 
         * @return builder
         * 
         */
        public Builder dynamicFilters(@Nullable Output<DashboardDashboardMetadataDynamicFiltersArgs> dynamicFilters) {
            $.dynamicFilters = dynamicFilters;
            return this;
        }

        /**
         * @param dynamicFilters Dashboard filter configuration of a dashboard
         * 
         * @return builder
         * 
         */
        public Builder dynamicFilters(DashboardDashboardMetadataDynamicFiltersArgs dynamicFilters) {
            return dynamicFilters(Output.of(dynamicFilters));
        }

        /**
         * @param filter Global filter Settings for the Dashboard
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<DashboardDashboardMetadataFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter Global filter Settings for the Dashboard
         * 
         * @return builder
         * 
         */
        public Builder filter(DashboardDashboardMetadataFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param name the name of the dashboard
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name the name of the dashboard
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param owner the owner of the dashboard
         * 
         * @return builder
         * 
         */
        public Builder owner(Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner the owner of the dashboard
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param preset the dashboard is a preset (`true`) or not (`false`). Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder preset(@Nullable Output<Boolean> preset) {
            $.preset = preset;
            return this;
        }

        /**
         * @param preset the dashboard is a preset (`true`) or not (`false`). Default is `false`.
         * 
         * @return builder
         * 
         */
        public Builder preset(Boolean preset) {
            return preset(Output.of(preset));
        }

        /**
         * @param shared the dashboard is shared (`true`) or private (`false`)
         * 
         * @return builder
         * 
         * @deprecated
         * Please use the resource `dynatrace_dashboard_sharing` to configure share settings
         * 
         */
        @Deprecated /* Please use the resource `dynatrace_dashboard_sharing` to configure share settings */
        public Builder shared(@Nullable Output<Boolean> shared) {
            $.shared = shared;
            return this;
        }

        /**
         * @param shared the dashboard is shared (`true`) or private (`false`)
         * 
         * @return builder
         * 
         * @deprecated
         * Please use the resource `dynatrace_dashboard_sharing` to configure share settings
         * 
         */
        @Deprecated /* Please use the resource `dynatrace_dashboard_sharing` to configure share settings */
        public Builder shared(Boolean shared) {
            return shared(Output.of(shared));
        }

        /**
         * @param sharingDetails represents sharing configuration of a dashboard
         * 
         * @return builder
         * 
         * @deprecated
         * Please use the resource `dynatrace_dashboard_sharing` to configure share settings
         * 
         */
        @Deprecated /* Please use the resource `dynatrace_dashboard_sharing` to configure share settings */
        public Builder sharingDetails(@Nullable Output<DashboardDashboardMetadataSharingDetailsArgs> sharingDetails) {
            $.sharingDetails = sharingDetails;
            return this;
        }

        /**
         * @param sharingDetails represents sharing configuration of a dashboard
         * 
         * @return builder
         * 
         * @deprecated
         * Please use the resource `dynatrace_dashboard_sharing` to configure share settings
         * 
         */
        @Deprecated /* Please use the resource `dynatrace_dashboard_sharing` to configure share settings */
        public Builder sharingDetails(DashboardDashboardMetadataSharingDetailsArgs sharingDetails) {
            return sharingDetails(Output.of(sharingDetails));
        }

        /**
         * @param tags a set of tags assigned to the dashboard
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags a set of tags assigned to the dashboard
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags a set of tags assigned to the dashboard
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tilesNameSize No documentation available
         * 
         * @return builder
         * 
         */
        public Builder tilesNameSize(@Nullable Output<String> tilesNameSize) {
            $.tilesNameSize = tilesNameSize;
            return this;
        }

        /**
         * @param tilesNameSize No documentation available
         * 
         * @return builder
         * 
         */
        public Builder tilesNameSize(String tilesNameSize) {
            return tilesNameSize(Output.of(tilesNameSize));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        /**
         * @param validFilterKeys a set of all possible global dashboard filters that can be applied to dashboard
         * 
         * @return builder
         * 
         */
        public Builder validFilterKeys(@Nullable Output<List<String>> validFilterKeys) {
            $.validFilterKeys = validFilterKeys;
            return this;
        }

        /**
         * @param validFilterKeys a set of all possible global dashboard filters that can be applied to dashboard
         * 
         * @return builder
         * 
         */
        public Builder validFilterKeys(List<String> validFilterKeys) {
            return validFilterKeys(Output.of(validFilterKeys));
        }

        /**
         * @param validFilterKeys a set of all possible global dashboard filters that can be applied to dashboard
         * 
         * @return builder
         * 
         */
        public Builder validFilterKeys(String... validFilterKeys) {
            return validFilterKeys(List.of(validFilterKeys));
        }

        public DashboardDashboardMetadataArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.owner = Objects.requireNonNull($.owner, "expected parameter 'owner' to be non-null");
            return $;
        }
    }

}
