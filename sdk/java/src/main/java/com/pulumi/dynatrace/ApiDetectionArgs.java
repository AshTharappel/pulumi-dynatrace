// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.ApiDetectionConditionsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiDetectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiDetectionArgs Empty = new ApiDetectionArgs();

    /**
     * This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
     * 
     */
    @Import(name="apiColor", required=true)
    private Output<String> apiColor;

    /**
     * @return This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
     * 
     */
    public Output<String> apiColor() {
        return this.apiColor;
    }

    /**
     * API name
     * 
     */
    @Import(name="apiName", required=true)
    private Output<String> apiName;

    /**
     * @return API name
     * 
     */
    public Output<String> apiName() {
        return this.apiName;
    }

    /**
     * List of conditions
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<ApiDetectionConditionsArgs> conditions;

    /**
     * @return List of conditions
     * 
     */
    public Optional<Output<ApiDetectionConditionsArgs>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * Restrict this rule to a specific technology.
     * 
     */
    @Import(name="technology")
    private @Nullable Output<String> technology;

    /**
     * @return Restrict this rule to a specific technology.
     * 
     */
    public Optional<Output<String>> technology() {
        return Optional.ofNullable(this.technology);
    }

    /**
     * This API defines a third party library
     * 
     */
    @Import(name="thirdPartyApi", required=true)
    private Output<Boolean> thirdPartyApi;

    /**
     * @return This API defines a third party library
     * 
     */
    public Output<Boolean> thirdPartyApi() {
        return this.thirdPartyApi;
    }

    private ApiDetectionArgs() {}

    private ApiDetectionArgs(ApiDetectionArgs $) {
        this.apiColor = $.apiColor;
        this.apiName = $.apiName;
        this.conditions = $.conditions;
        this.technology = $.technology;
        this.thirdPartyApi = $.thirdPartyApi;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiDetectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiDetectionArgs $;

        public Builder() {
            $ = new ApiDetectionArgs();
        }

        public Builder(ApiDetectionArgs defaults) {
            $ = new ApiDetectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiColor This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
         * 
         * @return builder
         * 
         */
        public Builder apiColor(Output<String> apiColor) {
            $.apiColor = apiColor;
            return this;
        }

        /**
         * @param apiColor This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
         * 
         * @return builder
         * 
         */
        public Builder apiColor(String apiColor) {
            return apiColor(Output.of(apiColor));
        }

        /**
         * @param apiName API name
         * 
         * @return builder
         * 
         */
        public Builder apiName(Output<String> apiName) {
            $.apiName = apiName;
            return this;
        }

        /**
         * @param apiName API name
         * 
         * @return builder
         * 
         */
        public Builder apiName(String apiName) {
            return apiName(Output.of(apiName));
        }

        /**
         * @param conditions List of conditions
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<ApiDetectionConditionsArgs> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions List of conditions
         * 
         * @return builder
         * 
         */
        public Builder conditions(ApiDetectionConditionsArgs conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param technology Restrict this rule to a specific technology.
         * 
         * @return builder
         * 
         */
        public Builder technology(@Nullable Output<String> technology) {
            $.technology = technology;
            return this;
        }

        /**
         * @param technology Restrict this rule to a specific technology.
         * 
         * @return builder
         * 
         */
        public Builder technology(String technology) {
            return technology(Output.of(technology));
        }

        /**
         * @param thirdPartyApi This API defines a third party library
         * 
         * @return builder
         * 
         */
        public Builder thirdPartyApi(Output<Boolean> thirdPartyApi) {
            $.thirdPartyApi = thirdPartyApi;
            return this;
        }

        /**
         * @param thirdPartyApi This API defines a third party library
         * 
         * @return builder
         * 
         */
        public Builder thirdPartyApi(Boolean thirdPartyApi) {
            return thirdPartyApi(Output.of(thirdPartyApi));
        }

        public ApiDetectionArgs build() {
            $.apiColor = Objects.requireNonNull($.apiColor, "expected parameter 'apiColor' to be non-null");
            $.apiName = Objects.requireNonNull($.apiName, "expected parameter 'apiName' to be non-null");
            $.thirdPartyApi = Objects.requireNonNull($.thirdPartyApi, "expected parameter 'thirdPartyApi' to be non-null");
            return $;
        }
    }

}
