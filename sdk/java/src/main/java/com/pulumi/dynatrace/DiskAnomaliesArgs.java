// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DiskAnomaliesDiskNameArgs;
import com.pulumi.dynatrace.inputs.DiskAnomaliesTagsArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskAnomaliesArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskAnomaliesArgs Empty = new DiskAnomaliesArgs();

    /**
     * Narrows the rule usage down to disks, matching the specified criteria
     * 
     */
    @Import(name="diskName")
    private @Nullable Output<DiskAnomaliesDiskNameArgs> diskName;

    /**
     * @return Narrows the rule usage down to disks, matching the specified criteria
     * 
     */
    public Optional<Output<DiskAnomaliesDiskNameArgs>> diskName() {
        return Optional.ofNullable(this.diskName);
    }

    /**
     * Disk event rule enabled/disabled
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Disk event rule enabled/disabled
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group
     * 
     */
    @Import(name="hostGroupId")
    private @Nullable Output<String> hostGroupId;

    /**
     * @return Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group
     * 
     */
    public Optional<Output<String>> hostGroupId() {
        return Optional.ofNullable(this.hostGroupId);
    }

    /**
     * The metric to monitor. Possible values are: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING` and `WRITE_TIME_EXCEEDING`
     * 
     */
    @Import(name="metric", required=true)
    private Output<String> metric;

    /**
     * @return The metric to monitor. Possible values are: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING` and `WRITE_TIME_EXCEEDING`
     * 
     */
    public Output<String> metric() {
        return this.metric;
    }

    /**
     * The name of the disk event rule
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the disk event rule
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The number of samples to evaluate
     * 
     */
    @Import(name="samples", required=true)
    private Output<Integer> samples;

    /**
     * @return The number of samples to evaluate
     * 
     */
    public Output<Integer> samples() {
        return this.samples;
    }

    /**
     * Narrows the rule usage down to the hosts matching the specified tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<DiskAnomaliesTagsArgs> tags;

    /**
     * @return Narrows the rule usage down to the hosts matching the specified tags
     * 
     */
    public Optional<Output<DiskAnomaliesTagsArgs>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The threshold to trigger disk event.   * A percentage for `LowDiskSpace` or `LowInodes` metrics.   * In milliseconds for `ReadTimeExceeding` or `WriteTimeExceeding` metrics
     * 
     */
    @Import(name="threshold", required=true)
    private Output<Double> threshold;

    /**
     * @return The threshold to trigger disk event.   * A percentage for `LowDiskSpace` or `LowInodes` metrics.   * In milliseconds for `ReadTimeExceeding` or `WriteTimeExceeding` metrics
     * 
     */
    public Output<Double> threshold() {
        return this.threshold;
    }

    /**
     * The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples
     * 
     */
    @Import(name="violatingSamples", required=true)
    private Output<Integer> violatingSamples;

    /**
     * @return The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples
     * 
     */
    public Output<Integer> violatingSamples() {
        return this.violatingSamples;
    }

    private DiskAnomaliesArgs() {}

    private DiskAnomaliesArgs(DiskAnomaliesArgs $) {
        this.diskName = $.diskName;
        this.enabled = $.enabled;
        this.hostGroupId = $.hostGroupId;
        this.metric = $.metric;
        this.name = $.name;
        this.samples = $.samples;
        this.tags = $.tags;
        this.threshold = $.threshold;
        this.violatingSamples = $.violatingSamples;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskAnomaliesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskAnomaliesArgs $;

        public Builder() {
            $ = new DiskAnomaliesArgs();
        }

        public Builder(DiskAnomaliesArgs defaults) {
            $ = new DiskAnomaliesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskName Narrows the rule usage down to disks, matching the specified criteria
         * 
         * @return builder
         * 
         */
        public Builder diskName(@Nullable Output<DiskAnomaliesDiskNameArgs> diskName) {
            $.diskName = diskName;
            return this;
        }

        /**
         * @param diskName Narrows the rule usage down to disks, matching the specified criteria
         * 
         * @return builder
         * 
         */
        public Builder diskName(DiskAnomaliesDiskNameArgs diskName) {
            return diskName(Output.of(diskName));
        }

        /**
         * @param enabled Disk event rule enabled/disabled
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Disk event rule enabled/disabled
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param hostGroupId Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group
         * 
         * @return builder
         * 
         */
        public Builder hostGroupId(@Nullable Output<String> hostGroupId) {
            $.hostGroupId = hostGroupId;
            return this;
        }

        /**
         * @param hostGroupId Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group
         * 
         * @return builder
         * 
         */
        public Builder hostGroupId(String hostGroupId) {
            return hostGroupId(Output.of(hostGroupId));
        }

        /**
         * @param metric The metric to monitor. Possible values are: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING` and `WRITE_TIME_EXCEEDING`
         * 
         * @return builder
         * 
         */
        public Builder metric(Output<String> metric) {
            $.metric = metric;
            return this;
        }

        /**
         * @param metric The metric to monitor. Possible values are: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING` and `WRITE_TIME_EXCEEDING`
         * 
         * @return builder
         * 
         */
        public Builder metric(String metric) {
            return metric(Output.of(metric));
        }

        /**
         * @param name The name of the disk event rule
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the disk event rule
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param samples The number of samples to evaluate
         * 
         * @return builder
         * 
         */
        public Builder samples(Output<Integer> samples) {
            $.samples = samples;
            return this;
        }

        /**
         * @param samples The number of samples to evaluate
         * 
         * @return builder
         * 
         */
        public Builder samples(Integer samples) {
            return samples(Output.of(samples));
        }

        /**
         * @param tags Narrows the rule usage down to the hosts matching the specified tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<DiskAnomaliesTagsArgs> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Narrows the rule usage down to the hosts matching the specified tags
         * 
         * @return builder
         * 
         */
        public Builder tags(DiskAnomaliesTagsArgs tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param threshold The threshold to trigger disk event.   * A percentage for `LowDiskSpace` or `LowInodes` metrics.   * In milliseconds for `ReadTimeExceeding` or `WriteTimeExceeding` metrics
         * 
         * @return builder
         * 
         */
        public Builder threshold(Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold The threshold to trigger disk event.   * A percentage for `LowDiskSpace` or `LowInodes` metrics.   * In milliseconds for `ReadTimeExceeding` or `WriteTimeExceeding` metrics
         * 
         * @return builder
         * 
         */
        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        /**
         * @param violatingSamples The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples
         * 
         * @return builder
         * 
         */
        public Builder violatingSamples(Output<Integer> violatingSamples) {
            $.violatingSamples = violatingSamples;
            return this;
        }

        /**
         * @param violatingSamples The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples
         * 
         * @return builder
         * 
         */
        public Builder violatingSamples(Integer violatingSamples) {
            return violatingSamples(Output.of(violatingSamples));
        }

        public DiskAnomaliesArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.metric = Objects.requireNonNull($.metric, "expected parameter 'metric' to be non-null");
            $.samples = Objects.requireNonNull($.samples, "expected parameter 'samples' to be non-null");
            $.threshold = Objects.requireNonNull($.threshold, "expected parameter 'threshold' to be non-null");
            $.violatingSamples = Objects.requireNonNull($.violatingSamples, "expected parameter 'violatingSamples' to be non-null");
            return $;
        }
    }

}
