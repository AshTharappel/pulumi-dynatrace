// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RequestAttributeDataSourceMethodMethodArgs extends com.pulumi.resources.ResourceArgs {

    public static final RequestAttributeDataSourceMethodMethodArgs Empty = new RequestAttributeDataSourceMethodMethodArgs();

    @Import(name="argumentTypes")
    private @Nullable Output<List<String>> argumentTypes;

    public Optional<Output<List<String>>> argumentTypes() {
        return Optional.ofNullable(this.argumentTypes);
    }

    @Import(name="className")
    private @Nullable Output<String> className;

    public Optional<Output<String>> className() {
        return Optional.ofNullable(this.className);
    }

    @Import(name="fileName")
    private @Nullable Output<String> fileName;

    public Optional<Output<String>> fileName() {
        return Optional.ofNullable(this.fileName);
    }

    @Import(name="fileNameMatcher")
    private @Nullable Output<String> fileNameMatcher;

    public Optional<Output<String>> fileNameMatcher() {
        return Optional.ofNullable(this.fileNameMatcher);
    }

    @Import(name="methodName", required=true)
    private Output<String> methodName;

    public Output<String> methodName() {
        return this.methodName;
    }

    @Import(name="modifiers")
    private @Nullable Output<List<String>> modifiers;

    public Optional<Output<List<String>>> modifiers() {
        return Optional.ofNullable(this.modifiers);
    }

    @Import(name="returnType", required=true)
    private Output<String> returnType;

    public Output<String> returnType() {
        return this.returnType;
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    @Import(name="visibility", required=true)
    private Output<String> visibility;

    public Output<String> visibility() {
        return this.visibility;
    }

    private RequestAttributeDataSourceMethodMethodArgs() {}

    private RequestAttributeDataSourceMethodMethodArgs(RequestAttributeDataSourceMethodMethodArgs $) {
        this.argumentTypes = $.argumentTypes;
        this.className = $.className;
        this.fileName = $.fileName;
        this.fileNameMatcher = $.fileNameMatcher;
        this.methodName = $.methodName;
        this.modifiers = $.modifiers;
        this.returnType = $.returnType;
        this.unknowns = $.unknowns;
        this.visibility = $.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RequestAttributeDataSourceMethodMethodArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RequestAttributeDataSourceMethodMethodArgs $;

        public Builder() {
            $ = new RequestAttributeDataSourceMethodMethodArgs();
        }

        public Builder(RequestAttributeDataSourceMethodMethodArgs defaults) {
            $ = new RequestAttributeDataSourceMethodMethodArgs(Objects.requireNonNull(defaults));
        }

        public Builder argumentTypes(@Nullable Output<List<String>> argumentTypes) {
            $.argumentTypes = argumentTypes;
            return this;
        }

        public Builder argumentTypes(List<String> argumentTypes) {
            return argumentTypes(Output.of(argumentTypes));
        }

        public Builder argumentTypes(String... argumentTypes) {
            return argumentTypes(List.of(argumentTypes));
        }

        public Builder className(@Nullable Output<String> className) {
            $.className = className;
            return this;
        }

        public Builder className(String className) {
            return className(Output.of(className));
        }

        public Builder fileName(@Nullable Output<String> fileName) {
            $.fileName = fileName;
            return this;
        }

        public Builder fileName(String fileName) {
            return fileName(Output.of(fileName));
        }

        public Builder fileNameMatcher(@Nullable Output<String> fileNameMatcher) {
            $.fileNameMatcher = fileNameMatcher;
            return this;
        }

        public Builder fileNameMatcher(String fileNameMatcher) {
            return fileNameMatcher(Output.of(fileNameMatcher));
        }

        public Builder methodName(Output<String> methodName) {
            $.methodName = methodName;
            return this;
        }

        public Builder methodName(String methodName) {
            return methodName(Output.of(methodName));
        }

        public Builder modifiers(@Nullable Output<List<String>> modifiers) {
            $.modifiers = modifiers;
            return this;
        }

        public Builder modifiers(List<String> modifiers) {
            return modifiers(Output.of(modifiers));
        }

        public Builder modifiers(String... modifiers) {
            return modifiers(List.of(modifiers));
        }

        public Builder returnType(Output<String> returnType) {
            $.returnType = returnType;
            return this;
        }

        public Builder returnType(String returnType) {
            return returnType(Output.of(returnType));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public Builder visibility(Output<String> visibility) {
            $.visibility = visibility;
            return this;
        }

        public Builder visibility(String visibility) {
            return visibility(Output.of(visibility));
        }

        public RequestAttributeDataSourceMethodMethodArgs build() {
            $.methodName = Objects.requireNonNull($.methodName, "expected parameter 'methodName' to be non-null");
            $.returnType = Objects.requireNonNull($.returnType, "expected parameter 'returnType' to be non-null");
            $.visibility = Objects.requireNonNull($.visibility, "expected parameter 'visibility' to be non-null");
            return $;
        }
    }

}
