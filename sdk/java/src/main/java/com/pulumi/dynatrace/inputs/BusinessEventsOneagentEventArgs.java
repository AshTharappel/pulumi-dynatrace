// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.BusinessEventsOneagentEventCategoryArgs;
import com.pulumi.dynatrace.inputs.BusinessEventsOneagentEventDataArgs;
import com.pulumi.dynatrace.inputs.BusinessEventsOneagentEventProviderArgs;
import com.pulumi.dynatrace.inputs.BusinessEventsOneagentEventTypeArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BusinessEventsOneagentEventArgs extends com.pulumi.resources.ResourceArgs {

    public static final BusinessEventsOneagentEventArgs Empty = new BusinessEventsOneagentEventArgs();

    /**
     * Event category
     * 
     */
    @Import(name="category", required=true)
    private Output<BusinessEventsOneagentEventCategoryArgs> category;

    /**
     * @return Event category
     * 
     */
    public Output<BusinessEventsOneagentEventCategoryArgs> category() {
        return this.category;
    }

    /**
     * Additional attributes for the business event.
     * 
     */
    @Import(name="data")
    private @Nullable Output<BusinessEventsOneagentEventDataArgs> data;

    /**
     * @return Additional attributes for the business event.
     * 
     */
    public Optional<Output<BusinessEventsOneagentEventDataArgs>> data() {
        return Optional.ofNullable(this.data);
    }

    /**
     * Event provider
     * 
     */
    @Import(name="provider", required=true)
    private Output<BusinessEventsOneagentEventProviderArgs> provider;

    /**
     * @return Event provider
     * 
     */
    public Output<BusinessEventsOneagentEventProviderArgs> provider() {
        return this.provider;
    }

    /**
     * Event type
     * 
     */
    @Import(name="type", required=true)
    private Output<BusinessEventsOneagentEventTypeArgs> type;

    /**
     * @return Event type
     * 
     */
    public Output<BusinessEventsOneagentEventTypeArgs> type() {
        return this.type;
    }

    private BusinessEventsOneagentEventArgs() {}

    private BusinessEventsOneagentEventArgs(BusinessEventsOneagentEventArgs $) {
        this.category = $.category;
        this.data = $.data;
        this.provider = $.provider;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BusinessEventsOneagentEventArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BusinessEventsOneagentEventArgs $;

        public Builder() {
            $ = new BusinessEventsOneagentEventArgs();
        }

        public Builder(BusinessEventsOneagentEventArgs defaults) {
            $ = new BusinessEventsOneagentEventArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param category Event category
         * 
         * @return builder
         * 
         */
        public Builder category(Output<BusinessEventsOneagentEventCategoryArgs> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Event category
         * 
         * @return builder
         * 
         */
        public Builder category(BusinessEventsOneagentEventCategoryArgs category) {
            return category(Output.of(category));
        }

        /**
         * @param data Additional attributes for the business event.
         * 
         * @return builder
         * 
         */
        public Builder data(@Nullable Output<BusinessEventsOneagentEventDataArgs> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data Additional attributes for the business event.
         * 
         * @return builder
         * 
         */
        public Builder data(BusinessEventsOneagentEventDataArgs data) {
            return data(Output.of(data));
        }

        /**
         * @param provider Event provider
         * 
         * @return builder
         * 
         */
        public Builder provider(Output<BusinessEventsOneagentEventProviderArgs> provider) {
            $.provider = provider;
            return this;
        }

        /**
         * @param provider Event provider
         * 
         * @return builder
         * 
         */
        public Builder provider(BusinessEventsOneagentEventProviderArgs provider) {
            return provider(Output.of(provider));
        }

        /**
         * @param type Event type
         * 
         * @return builder
         * 
         */
        public Builder type(Output<BusinessEventsOneagentEventTypeArgs> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Event type
         * 
         * @return builder
         * 
         */
        public Builder type(BusinessEventsOneagentEventTypeArgs type) {
            return type(Output.of(type));
        }

        public BusinessEventsOneagentEventArgs build() {
            $.category = Objects.requireNonNull($.category, "expected parameter 'category' to be non-null");
            $.provider = Objects.requireNonNull($.provider, "expected parameter 'provider' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
