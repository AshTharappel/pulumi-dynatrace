// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserSettingsState extends com.pulumi.resources.ResourceArgs {

    public static final UserSettingsState Empty = new UserSettingsState();

    /**
     * Possible Values: `Auto`, `En`, `Ja`
     * 
     */
    @Import(name="language")
    private @Nullable Output<String> language;

    /**
     * @return Possible Values: `Auto`, `En`, `Ja`
     * 
     */
    public Optional<Output<String>> language() {
        return Optional.ofNullable(this.language);
    }

    /**
     * Region
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The scope of this setting (user, userdefaults)
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The scope of this setting (user, userdefaults)
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Possible Values: `Auto`, `Dark`, `Light`
     * 
     */
    @Import(name="theme")
    private @Nullable Output<String> theme;

    /**
     * @return Possible Values: `Auto`, `Dark`, `Light`
     * 
     */
    public Optional<Output<String>> theme() {
        return Optional.ofNullable(this.theme);
    }

    /**
     * Timezone
     * 
     */
    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    /**
     * @return Timezone
     * 
     */
    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    private UserSettingsState() {}

    private UserSettingsState(UserSettingsState $) {
        this.language = $.language;
        this.region = $.region;
        this.scope = $.scope;
        this.theme = $.theme;
        this.timezone = $.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserSettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserSettingsState $;

        public Builder() {
            $ = new UserSettingsState();
        }

        public Builder(UserSettingsState defaults) {
            $ = new UserSettingsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param language Possible Values: `Auto`, `En`, `Ja`
         * 
         * @return builder
         * 
         */
        public Builder language(@Nullable Output<String> language) {
            $.language = language;
            return this;
        }

        /**
         * @param language Possible Values: `Auto`, `En`, `Ja`
         * 
         * @return builder
         * 
         */
        public Builder language(String language) {
            return language(Output.of(language));
        }

        /**
         * @param region Region
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param scope The scope of this setting (user, userdefaults)
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope of this setting (user, userdefaults)
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param theme Possible Values: `Auto`, `Dark`, `Light`
         * 
         * @return builder
         * 
         */
        public Builder theme(@Nullable Output<String> theme) {
            $.theme = theme;
            return this;
        }

        /**
         * @param theme Possible Values: `Auto`, `Dark`, `Light`
         * 
         * @return builder
         * 
         */
        public Builder theme(String theme) {
            return theme(Output.of(theme));
        }

        /**
         * @param timezone Timezone
         * 
         * @return builder
         * 
         */
        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone Timezone
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        public UserSettingsState build() {
            return $;
        }
    }

}
