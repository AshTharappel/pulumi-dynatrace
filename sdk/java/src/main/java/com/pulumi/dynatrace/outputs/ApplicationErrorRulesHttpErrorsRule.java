// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplicationErrorRulesHttpErrorsRule {
    private @Nullable Boolean capture;
    private @Nullable Boolean considerBlockedRequests;
    private @Nullable Boolean considerForAi;
    private @Nullable Boolean considerUnknownErrorCode;
    private @Nullable String errorCodes;
    private @Nullable String filter;
    private @Nullable Boolean filterByUrl;
    private @Nullable Boolean impactApdex;
    private @Nullable String url;

    private ApplicationErrorRulesHttpErrorsRule() {}
    public Optional<Boolean> capture() {
        return Optional.ofNullable(this.capture);
    }
    public Optional<Boolean> considerBlockedRequests() {
        return Optional.ofNullable(this.considerBlockedRequests);
    }
    public Optional<Boolean> considerForAi() {
        return Optional.ofNullable(this.considerForAi);
    }
    public Optional<Boolean> considerUnknownErrorCode() {
        return Optional.ofNullable(this.considerUnknownErrorCode);
    }
    public Optional<String> errorCodes() {
        return Optional.ofNullable(this.errorCodes);
    }
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }
    public Optional<Boolean> filterByUrl() {
        return Optional.ofNullable(this.filterByUrl);
    }
    public Optional<Boolean> impactApdex() {
        return Optional.ofNullable(this.impactApdex);
    }
    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationErrorRulesHttpErrorsRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean capture;
        private @Nullable Boolean considerBlockedRequests;
        private @Nullable Boolean considerForAi;
        private @Nullable Boolean considerUnknownErrorCode;
        private @Nullable String errorCodes;
        private @Nullable String filter;
        private @Nullable Boolean filterByUrl;
        private @Nullable Boolean impactApdex;
        private @Nullable String url;
        public Builder() {}
        public Builder(ApplicationErrorRulesHttpErrorsRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capture = defaults.capture;
    	      this.considerBlockedRequests = defaults.considerBlockedRequests;
    	      this.considerForAi = defaults.considerForAi;
    	      this.considerUnknownErrorCode = defaults.considerUnknownErrorCode;
    	      this.errorCodes = defaults.errorCodes;
    	      this.filter = defaults.filter;
    	      this.filterByUrl = defaults.filterByUrl;
    	      this.impactApdex = defaults.impactApdex;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder capture(@Nullable Boolean capture) {
            this.capture = capture;
            return this;
        }
        @CustomType.Setter
        public Builder considerBlockedRequests(@Nullable Boolean considerBlockedRequests) {
            this.considerBlockedRequests = considerBlockedRequests;
            return this;
        }
        @CustomType.Setter
        public Builder considerForAi(@Nullable Boolean considerForAi) {
            this.considerForAi = considerForAi;
            return this;
        }
        @CustomType.Setter
        public Builder considerUnknownErrorCode(@Nullable Boolean considerUnknownErrorCode) {
            this.considerUnknownErrorCode = considerUnknownErrorCode;
            return this;
        }
        @CustomType.Setter
        public Builder errorCodes(@Nullable String errorCodes) {
            this.errorCodes = errorCodes;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable String filter) {
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder filterByUrl(@Nullable Boolean filterByUrl) {
            this.filterByUrl = filterByUrl;
            return this;
        }
        @CustomType.Setter
        public Builder impactApdex(@Nullable Boolean impactApdex) {
            this.impactApdex = impactApdex;
            return this;
        }
        @CustomType.Setter
        public Builder url(@Nullable String url) {
            this.url = url;
            return this;
        }
        public ApplicationErrorRulesHttpErrorsRule build() {
            final var o = new ApplicationErrorRulesHttpErrorsRule();
            o.capture = capture;
            o.considerBlockedRequests = considerBlockedRequests;
            o.considerForAi = considerForAi;
            o.considerUnknownErrorCode = considerUnknownErrorCode;
            o.errorCodes = errorCodes;
            o.filter = filter;
            o.filterByUrl = filterByUrl;
            o.impactApdex = impactApdex;
            o.url = url;
            return o;
        }
    }
}
