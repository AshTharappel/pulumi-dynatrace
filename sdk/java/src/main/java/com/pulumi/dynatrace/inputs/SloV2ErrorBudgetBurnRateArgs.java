// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SloV2ErrorBudgetBurnRateArgs extends com.pulumi.resources.ResourceArgs {

    public static final SloV2ErrorBudgetBurnRateArgs Empty = new SloV2ErrorBudgetBurnRateArgs();

    /**
     * Burn rate visualization enabled
     * 
     */
    @Import(name="burnRateVisualizationEnabled", required=true)
    private Output<Boolean> burnRateVisualizationEnabled;

    /**
     * @return Burn rate visualization enabled
     * 
     */
    public Output<Boolean> burnRateVisualizationEnabled() {
        return this.burnRateVisualizationEnabled;
    }

    /**
     * The threshold defines when a burn rate is marked as fast-burning (high-emergency). Burn rates lower than this threshold (and greater than 1) are highlighted as slow-burn (low-emergency).
     * 
     */
    @Import(name="fastBurnThreshold")
    private @Nullable Output<Double> fastBurnThreshold;

    /**
     * @return The threshold defines when a burn rate is marked as fast-burning (high-emergency). Burn rates lower than this threshold (and greater than 1) are highlighted as slow-burn (low-emergency).
     * 
     */
    public Optional<Output<Double>> fastBurnThreshold() {
        return Optional.ofNullable(this.fastBurnThreshold);
    }

    private SloV2ErrorBudgetBurnRateArgs() {}

    private SloV2ErrorBudgetBurnRateArgs(SloV2ErrorBudgetBurnRateArgs $) {
        this.burnRateVisualizationEnabled = $.burnRateVisualizationEnabled;
        this.fastBurnThreshold = $.fastBurnThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SloV2ErrorBudgetBurnRateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SloV2ErrorBudgetBurnRateArgs $;

        public Builder() {
            $ = new SloV2ErrorBudgetBurnRateArgs();
        }

        public Builder(SloV2ErrorBudgetBurnRateArgs defaults) {
            $ = new SloV2ErrorBudgetBurnRateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param burnRateVisualizationEnabled Burn rate visualization enabled
         * 
         * @return builder
         * 
         */
        public Builder burnRateVisualizationEnabled(Output<Boolean> burnRateVisualizationEnabled) {
            $.burnRateVisualizationEnabled = burnRateVisualizationEnabled;
            return this;
        }

        /**
         * @param burnRateVisualizationEnabled Burn rate visualization enabled
         * 
         * @return builder
         * 
         */
        public Builder burnRateVisualizationEnabled(Boolean burnRateVisualizationEnabled) {
            return burnRateVisualizationEnabled(Output.of(burnRateVisualizationEnabled));
        }

        /**
         * @param fastBurnThreshold The threshold defines when a burn rate is marked as fast-burning (high-emergency). Burn rates lower than this threshold (and greater than 1) are highlighted as slow-burn (low-emergency).
         * 
         * @return builder
         * 
         */
        public Builder fastBurnThreshold(@Nullable Output<Double> fastBurnThreshold) {
            $.fastBurnThreshold = fastBurnThreshold;
            return this;
        }

        /**
         * @param fastBurnThreshold The threshold defines when a burn rate is marked as fast-burning (high-emergency). Burn rates lower than this threshold (and greater than 1) are highlighted as slow-burn (low-emergency).
         * 
         * @return builder
         * 
         */
        public Builder fastBurnThreshold(Double fastBurnThreshold) {
            return fastBurnThreshold(Output.of(fastBurnThreshold));
        }

        public SloV2ErrorBudgetBurnRateArgs build() {
            $.burnRateVisualizationEnabled = Objects.requireNonNull($.burnRateVisualizationEnabled, "expected parameter 'burnRateVisualizationEnabled' to be non-null");
            return $;
        }
    }

}
