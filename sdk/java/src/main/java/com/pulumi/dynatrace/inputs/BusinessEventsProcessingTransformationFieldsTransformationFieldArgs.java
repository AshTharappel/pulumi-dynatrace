// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class BusinessEventsProcessingTransformationFieldsTransformationFieldArgs extends com.pulumi.resources.ResourceArgs {

    public static final BusinessEventsProcessingTransformationFieldsTransformationFieldArgs Empty = new BusinessEventsProcessingTransformationFieldsTransformationFieldArgs();

    @Import(name="array", required=true)
    private Output<Boolean> array;

    public Output<Boolean> array() {
        return this.array;
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="optional", required=true)
    private Output<Boolean> optional;

    public Output<Boolean> optional() {
        return this.optional;
    }

    @Import(name="readonly", required=true)
    private Output<Boolean> readonly;

    public Output<Boolean> readonly() {
        return this.readonly;
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private BusinessEventsProcessingTransformationFieldsTransformationFieldArgs() {}

    private BusinessEventsProcessingTransformationFieldsTransformationFieldArgs(BusinessEventsProcessingTransformationFieldsTransformationFieldArgs $) {
        this.array = $.array;
        this.name = $.name;
        this.optional = $.optional;
        this.readonly = $.readonly;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BusinessEventsProcessingTransformationFieldsTransformationFieldArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BusinessEventsProcessingTransformationFieldsTransformationFieldArgs $;

        public Builder() {
            $ = new BusinessEventsProcessingTransformationFieldsTransformationFieldArgs();
        }

        public Builder(BusinessEventsProcessingTransformationFieldsTransformationFieldArgs defaults) {
            $ = new BusinessEventsProcessingTransformationFieldsTransformationFieldArgs(Objects.requireNonNull(defaults));
        }

        public Builder array(Output<Boolean> array) {
            $.array = array;
            return this;
        }

        public Builder array(Boolean array) {
            return array(Output.of(array));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder optional(Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        public Builder readonly(Output<Boolean> readonly) {
            $.readonly = readonly;
            return this;
        }

        public Builder readonly(Boolean readonly) {
            return readonly(Output.of(readonly));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public BusinessEventsProcessingTransformationFieldsTransformationFieldArgs build() {
            $.array = Objects.requireNonNull($.array, "expected parameter 'array' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.optional = Objects.requireNonNull($.optional, "expected parameter 'optional' to be non-null");
            $.readonly = Objects.requireNonNull($.readonly, "expected parameter 'readonly' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
