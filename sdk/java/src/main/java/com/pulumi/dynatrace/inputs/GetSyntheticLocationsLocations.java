// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSyntheticLocationsLocations extends com.pulumi.resources.InvokeArgs {

    public static final GetSyntheticLocationsLocations Empty = new GetSyntheticLocationsLocations();

    /**
     * The cloud provider where the location is hosted.
     * 
     */
    @Import(name="cloudPlatform", required=true)
    private String cloudPlatform;

    /**
     * @return The cloud provider where the location is hosted.
     * 
     */
    public String cloudPlatform() {
        return this.cloudPlatform;
    }

    @Import(name="entityId")
    private @Nullable String entityId;

    public Optional<String> entityId() {
        return Optional.ofNullable(this.entityId);
    }

    @Import(name="ips", required=true)
    private List<String> ips;

    public List<String> ips() {
        return this.ips;
    }

    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="stage", required=true)
    private String stage;

    public String stage() {
        return this.stage;
    }

    @Import(name="status", required=true)
    private String status;

    public String status() {
        return this.status;
    }

    @Import(name="type")
    private @Nullable String type;

    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private GetSyntheticLocationsLocations() {}

    private GetSyntheticLocationsLocations(GetSyntheticLocationsLocations $) {
        this.cloudPlatform = $.cloudPlatform;
        this.entityId = $.entityId;
        this.ips = $.ips;
        this.name = $.name;
        this.stage = $.stage;
        this.status = $.status;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSyntheticLocationsLocations defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSyntheticLocationsLocations $;

        public Builder() {
            $ = new GetSyntheticLocationsLocations();
        }

        public Builder(GetSyntheticLocationsLocations defaults) {
            $ = new GetSyntheticLocationsLocations(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudPlatform The cloud provider where the location is hosted.
         * 
         * @return builder
         * 
         */
        public Builder cloudPlatform(String cloudPlatform) {
            $.cloudPlatform = cloudPlatform;
            return this;
        }

        public Builder entityId(@Nullable String entityId) {
            $.entityId = entityId;
            return this;
        }

        public Builder ips(List<String> ips) {
            $.ips = ips;
            return this;
        }

        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder stage(String stage) {
            $.stage = stage;
            return this;
        }

        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public GetSyntheticLocationsLocations build() {
            $.cloudPlatform = Objects.requireNonNull($.cloudPlatform, "expected parameter 'cloudPlatform' to be non-null");
            $.ips = Objects.requireNonNull($.ips, "expected parameter 'ips' to be non-null");
            $.stage = Objects.requireNonNull($.stage, "expected parameter 'stage' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
