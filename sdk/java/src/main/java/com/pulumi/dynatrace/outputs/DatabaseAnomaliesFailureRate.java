// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dynatrace.outputs.DatabaseAnomaliesFailureRateAuto;
import com.pulumi.dynatrace.outputs.DatabaseAnomaliesFailureRateThresholds;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseAnomaliesFailureRate {
    /**
     * @return Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
     * 
     */
    private @Nullable DatabaseAnomaliesFailureRateAuto auto;
    /**
     * @return Fixed thresholds for failure rate increase detection
     * 
     */
    private @Nullable DatabaseAnomaliesFailureRateThresholds thresholds;

    private DatabaseAnomaliesFailureRate() {}
    /**
     * @return Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
     * 
     */
    public Optional<DatabaseAnomaliesFailureRateAuto> auto() {
        return Optional.ofNullable(this.auto);
    }
    /**
     * @return Fixed thresholds for failure rate increase detection
     * 
     */
    public Optional<DatabaseAnomaliesFailureRateThresholds> thresholds() {
        return Optional.ofNullable(this.thresholds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseAnomaliesFailureRate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable DatabaseAnomaliesFailureRateAuto auto;
        private @Nullable DatabaseAnomaliesFailureRateThresholds thresholds;
        public Builder() {}
        public Builder(DatabaseAnomaliesFailureRate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auto = defaults.auto;
    	      this.thresholds = defaults.thresholds;
        }

        @CustomType.Setter
        public Builder auto(@Nullable DatabaseAnomaliesFailureRateAuto auto) {
            this.auto = auto;
            return this;
        }
        @CustomType.Setter
        public Builder thresholds(@Nullable DatabaseAnomaliesFailureRateThresholds thresholds) {
            this.thresholds = thresholds;
            return this;
        }
        public DatabaseAnomaliesFailureRate build() {
            final var o = new DatabaseAnomaliesFailureRate();
            o.auto = auto;
            o.thresholds = thresholds;
            return o;
        }
    }
}
