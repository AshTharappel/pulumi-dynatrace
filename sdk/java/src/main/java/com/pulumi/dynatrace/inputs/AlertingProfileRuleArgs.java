// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.AlertingProfileRuleTagFilterArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertingProfileRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertingProfileRuleArgs Empty = new AlertingProfileRuleArgs();

    /**
     * Send a notification if a problem remains open longer than *X* minutes
     * 
     */
    @Import(name="delayInMinutes", required=true)
    private Output<Integer> delayInMinutes;

    /**
     * @return Send a notification if a problem remains open longer than *X* minutes
     * 
     */
    public Output<Integer> delayInMinutes() {
        return this.delayInMinutes;
    }

    /**
     * The severity level to trigger the alert. Possible values are `AVAILABILITY`,	`CUSTOM_ALERT`,	`ERROR`,`MONITORING_UNAVAILABLE`,`PERFORMANCE` and `RESOURCE_CONTENTION`.
     * 
     */
    @Import(name="severityLevel", required=true)
    private Output<String> severityLevel;

    /**
     * @return The severity level to trigger the alert. Possible values are `AVAILABILITY`,	`CUSTOM_ALERT`,	`ERROR`,`MONITORING_UNAVAILABLE`,`PERFORMANCE` and `RESOURCE_CONTENTION`.
     * 
     */
    public Output<String> severityLevel() {
        return this.severityLevel;
    }

    /**
     * Configuration of the tag filtering of the alerting profile
     * 
     */
    @Import(name="tagFilters", required=true)
    private Output<List<AlertingProfileRuleTagFilterArgs>> tagFilters;

    /**
     * @return Configuration of the tag filtering of the alerting profile
     * 
     */
    public Output<List<AlertingProfileRuleTagFilterArgs>> tagFilters() {
        return this.tagFilters;
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    private AlertingProfileRuleArgs() {}

    private AlertingProfileRuleArgs(AlertingProfileRuleArgs $) {
        this.delayInMinutes = $.delayInMinutes;
        this.severityLevel = $.severityLevel;
        this.tagFilters = $.tagFilters;
        this.unknowns = $.unknowns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertingProfileRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertingProfileRuleArgs $;

        public Builder() {
            $ = new AlertingProfileRuleArgs();
        }

        public Builder(AlertingProfileRuleArgs defaults) {
            $ = new AlertingProfileRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param delayInMinutes Send a notification if a problem remains open longer than *X* minutes
         * 
         * @return builder
         * 
         */
        public Builder delayInMinutes(Output<Integer> delayInMinutes) {
            $.delayInMinutes = delayInMinutes;
            return this;
        }

        /**
         * @param delayInMinutes Send a notification if a problem remains open longer than *X* minutes
         * 
         * @return builder
         * 
         */
        public Builder delayInMinutes(Integer delayInMinutes) {
            return delayInMinutes(Output.of(delayInMinutes));
        }

        /**
         * @param severityLevel The severity level to trigger the alert. Possible values are `AVAILABILITY`,	`CUSTOM_ALERT`,	`ERROR`,`MONITORING_UNAVAILABLE`,`PERFORMANCE` and `RESOURCE_CONTENTION`.
         * 
         * @return builder
         * 
         */
        public Builder severityLevel(Output<String> severityLevel) {
            $.severityLevel = severityLevel;
            return this;
        }

        /**
         * @param severityLevel The severity level to trigger the alert. Possible values are `AVAILABILITY`,	`CUSTOM_ALERT`,	`ERROR`,`MONITORING_UNAVAILABLE`,`PERFORMANCE` and `RESOURCE_CONTENTION`.
         * 
         * @return builder
         * 
         */
        public Builder severityLevel(String severityLevel) {
            return severityLevel(Output.of(severityLevel));
        }

        /**
         * @param tagFilters Configuration of the tag filtering of the alerting profile
         * 
         * @return builder
         * 
         */
        public Builder tagFilters(Output<List<AlertingProfileRuleTagFilterArgs>> tagFilters) {
            $.tagFilters = tagFilters;
            return this;
        }

        /**
         * @param tagFilters Configuration of the tag filtering of the alerting profile
         * 
         * @return builder
         * 
         */
        public Builder tagFilters(List<AlertingProfileRuleTagFilterArgs> tagFilters) {
            return tagFilters(Output.of(tagFilters));
        }

        /**
         * @param tagFilters Configuration of the tag filtering of the alerting profile
         * 
         * @return builder
         * 
         */
        public Builder tagFilters(AlertingProfileRuleTagFilterArgs... tagFilters) {
            return tagFilters(List.of(tagFilters));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public AlertingProfileRuleArgs build() {
            $.delayInMinutes = Objects.requireNonNull($.delayInMinutes, "expected parameter 'delayInMinutes' to be non-null");
            $.severityLevel = Objects.requireNonNull($.severityLevel, "expected parameter 'severityLevel' to be non-null");
            $.tagFilters = Objects.requireNonNull($.tagFilters, "expected parameter 'tagFilters' to be non-null");
            return $;
        }
    }

}
