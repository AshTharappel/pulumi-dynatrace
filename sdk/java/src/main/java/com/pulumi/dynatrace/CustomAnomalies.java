// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.CustomAnomaliesArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.CustomAnomaliesState;
import com.pulumi.dynatrace.outputs.CustomAnomaliesDimension;
import com.pulumi.dynatrace.outputs.CustomAnomaliesScope;
import com.pulumi.dynatrace.outputs.CustomAnomaliesStrategy;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/customAnomalies:CustomAnomalies")
public class CustomAnomalies extends com.pulumi.resources.CustomResource {
    /**
     * How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
     * 
     */
    @Export(name="aggregationType", type=String.class, parameters={})
    private Output</* @Nullable */ String> aggregationType;

    /**
     * @return How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
     * 
     */
    public Output<Optional<String>> aggregationType() {
        return Codegen.optional(this.aggregationType);
    }
    /**
     * The description of the metric event
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return The description of the metric event
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Defines the dimensions of the metric to alert on. The filters are combined by conjunction
     * 
     */
    @Export(name="dimensions", type=List.class, parameters={CustomAnomaliesDimension.class})
    private Output</* @Nullable */ List<CustomAnomaliesDimension>> dimensions;

    /**
     * @return Defines the dimensions of the metric to alert on. The filters are combined by conjunction
     * 
     */
    public Output<Optional<List<CustomAnomaliesDimension>>> dimensions() {
        return Codegen.optional(this.dimensions);
    }
    /**
     * The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
     * 
     * @deprecated
     * This property is not meant to be configured from the outside. It will get removed completely in future versions
     * 
     */
    @Deprecated /* This property is not meant to be configured from the outside. It will get removed completely in future versions */
    @Export(name="disabledReason", type=String.class, parameters={})
    private Output</* @Nullable */ String> disabledReason;

    /**
     * @return The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
     * 
     */
    public Output<Optional<String>> disabledReason() {
        return Codegen.optional(this.disabledReason);
    }
    /**
     * The metric event is enabled (`true`) or disabled (`false`)
     * 
     */
    @Export(name="enabled", type=Boolean.class, parameters={})
    private Output<Boolean> enabled;

    /**
     * @return The metric event is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * The ID of the metric evaluated by the metric event
     * 
     */
    @Export(name="metricId", type=String.class, parameters={})
    private Output</* @Nullable */ String> metricId;

    /**
     * @return The ID of the metric evaluated by the metric event
     * 
     */
    public Output<Optional<String>> metricId() {
        return Codegen.optional(this.metricId);
    }
    /**
     * The metric selector that should be executed
     * 
     */
    @Export(name="metricSelector", type=String.class, parameters={})
    private Output</* @Nullable */ String> metricSelector;

    /**
     * @return The metric selector that should be executed
     * 
     */
    public Output<Optional<String>> metricSelector() {
        return Codegen.optional(this.metricSelector);
    }
    /**
     * The name of the metric event displayed in the UI
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the metric event displayed in the UI
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Defines which dimension key should be used for the **alertingScope**
     * 
     */
    @Export(name="primaryDimensionKey", type=String.class, parameters={})
    private Output</* @Nullable */ String> primaryDimensionKey;

    /**
     * @return Defines which dimension key should be used for the **alertingScope**
     * 
     */
    public Output<Optional<String>> primaryDimensionKey() {
        return Codegen.optional(this.primaryDimensionKey);
    }
    /**
     * Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
     * 
     */
    @Export(name="scopes", type=List.class, parameters={CustomAnomaliesScope.class})
    private Output</* @Nullable */ List<CustomAnomaliesScope>> scopes;

    /**
     * @return Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
     * 
     */
    public Output<Optional<List<CustomAnomaliesScope>>> scopes() {
        return Codegen.optional(this.scopes);
    }
    /**
     * The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
     * 
     */
    @Export(name="severity", type=String.class, parameters={})
    private Output</* @Nullable */ String> severity;

    /**
     * @return The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
     * 
     */
    public Output<Optional<String>> severity() {
        return Codegen.optional(this.severity);
    }
    /**
     * A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
     * 
     */
    @Export(name="strategy", type=CustomAnomaliesStrategy.class, parameters={})
    private Output<CustomAnomaliesStrategy> strategy;

    /**
     * @return A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
     * 
     */
    public Output<CustomAnomaliesStrategy> strategy() {
        return this.strategy;
    }
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Export(name="unknowns", type=String.class, parameters={})
    private Output</* @Nullable */ String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Output<Optional<String>> unknowns() {
        return Codegen.optional(this.unknowns);
    }
    /**
     * The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
     * 
     * @deprecated
     * This property is not meant to be configured from the outside. It will get removed completely in future versions
     * 
     */
    @Deprecated /* This property is not meant to be configured from the outside. It will get removed completely in future versions */
    @Export(name="warningReason", type=String.class, parameters={})
    private Output</* @Nullable */ String> warningReason;

    /**
     * @return The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
     * 
     */
    public Output<Optional<String>> warningReason() {
        return Codegen.optional(this.warningReason);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CustomAnomalies(String name) {
        this(name, CustomAnomaliesArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CustomAnomalies(String name, CustomAnomaliesArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CustomAnomalies(String name, CustomAnomaliesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/customAnomalies:CustomAnomalies", name, args == null ? CustomAnomaliesArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CustomAnomalies(String name, Output<String> id, @Nullable CustomAnomaliesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/customAnomalies:CustomAnomalies", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CustomAnomalies get(String name, Output<String> id, @Nullable CustomAnomaliesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CustomAnomalies(name, id, state, options);
    }
}
