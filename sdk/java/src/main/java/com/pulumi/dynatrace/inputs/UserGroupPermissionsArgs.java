// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.UserGroupPermissionsGrantArgs;
import java.util.List;
import java.util.Objects;


public final class UserGroupPermissionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserGroupPermissionsArgs Empty = new UserGroupPermissionsArgs();

    /**
     * A permission granted to one or multiple environments
     * 
     */
    @Import(name="grants", required=true)
    private Output<List<UserGroupPermissionsGrantArgs>> grants;

    /**
     * @return A permission granted to one or multiple environments
     * 
     */
    public Output<List<UserGroupPermissionsGrantArgs>> grants() {
        return this.grants;
    }

    private UserGroupPermissionsArgs() {}

    private UserGroupPermissionsArgs(UserGroupPermissionsArgs $) {
        this.grants = $.grants;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserGroupPermissionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserGroupPermissionsArgs $;

        public Builder() {
            $ = new UserGroupPermissionsArgs();
        }

        public Builder(UserGroupPermissionsArgs defaults) {
            $ = new UserGroupPermissionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param grants A permission granted to one or multiple environments
         * 
         * @return builder
         * 
         */
        public Builder grants(Output<List<UserGroupPermissionsGrantArgs>> grants) {
            $.grants = grants;
            return this;
        }

        /**
         * @param grants A permission granted to one or multiple environments
         * 
         * @return builder
         * 
         */
        public Builder grants(List<UserGroupPermissionsGrantArgs> grants) {
            return grants(Output.of(grants));
        }

        /**
         * @param grants A permission granted to one or multiple environments
         * 
         * @return builder
         * 
         */
        public Builder grants(UserGroupPermissionsGrantArgs... grants) {
            return grants(List.of(grants));
        }

        public UserGroupPermissionsArgs build() {
            $.grants = Objects.requireNonNull($.grants, "expected parameter 'grants' to be non-null");
            return $;
        }
    }

}
