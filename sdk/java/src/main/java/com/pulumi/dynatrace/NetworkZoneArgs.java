// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkZoneArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkZoneArgs Empty = new NetworkZoneArgs();

    /**
     * A list of alternative network zones.
     * 
     */
    @Import(name="alternativeZones")
    private @Nullable Output<List<String>> alternativeZones;

    /**
     * @return A list of alternative network zones.
     * 
     */
    public Optional<Output<List<String>>> alternativeZones() {
        return Optional.ofNullable(this.alternativeZones);
    }

    /**
     * A short description of the network zone
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A short description of the network zone
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the network zone, not case sensitive. Dynatrace stores the name in lowercase, allowed characters: alphanumeric, hyphen, underscore, dot
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the network zone, not case sensitive. Dynatrace stores the name in lowercase, allowed characters: alphanumeric, hyphen, underscore, dot
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The number of ActiveGates in the network zone.
     * 
     */
    @Import(name="numOfConfiguredActivegates")
    private @Nullable Output<Integer> numOfConfiguredActivegates;

    /**
     * @return The number of ActiveGates in the network zone.
     * 
     */
    public Optional<Output<Integer>> numOfConfiguredActivegates() {
        return Optional.ofNullable(this.numOfConfiguredActivegates);
    }

    /**
     * The number of OneAgents that are configured to use the network zone as primary.
     * 
     */
    @Import(name="numOfConfiguredOneagents")
    private @Nullable Output<Integer> numOfConfiguredOneagents;

    /**
     * @return The number of OneAgents that are configured to use the network zone as primary.
     * 
     */
    public Optional<Output<Integer>> numOfConfiguredOneagents() {
        return Optional.ofNullable(this.numOfConfiguredOneagents);
    }

    /**
     * The number of OneAgents from other network zones that are using ActiveGates in the network zone.
     * 
     */
    @Import(name="numOfOneagentsFromOtherZones")
    private @Nullable Output<Integer> numOfOneagentsFromOtherZones;

    /**
     * @return The number of OneAgents from other network zones that are using ActiveGates in the network zone.
     * 
     */
    public Optional<Output<Integer>> numOfOneagentsFromOtherZones() {
        return Optional.ofNullable(this.numOfOneagentsFromOtherZones);
    }

    /**
     * The number of OneAgents that are using ActiveGates in the network zone.
     * 
     */
    @Import(name="numOfOneagentsUsing")
    private @Nullable Output<Integer> numOfOneagentsUsing;

    /**
     * @return The number of OneAgents that are using ActiveGates in the network zone.
     * 
     */
    public Optional<Output<Integer>> numOfOneagentsUsing() {
        return Optional.ofNullable(this.numOfOneagentsUsing);
    }

    private NetworkZoneArgs() {}

    private NetworkZoneArgs(NetworkZoneArgs $) {
        this.alternativeZones = $.alternativeZones;
        this.description = $.description;
        this.name = $.name;
        this.numOfConfiguredActivegates = $.numOfConfiguredActivegates;
        this.numOfConfiguredOneagents = $.numOfConfiguredOneagents;
        this.numOfOneagentsFromOtherZones = $.numOfOneagentsFromOtherZones;
        this.numOfOneagentsUsing = $.numOfOneagentsUsing;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkZoneArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkZoneArgs $;

        public Builder() {
            $ = new NetworkZoneArgs();
        }

        public Builder(NetworkZoneArgs defaults) {
            $ = new NetworkZoneArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alternativeZones A list of alternative network zones.
         * 
         * @return builder
         * 
         */
        public Builder alternativeZones(@Nullable Output<List<String>> alternativeZones) {
            $.alternativeZones = alternativeZones;
            return this;
        }

        /**
         * @param alternativeZones A list of alternative network zones.
         * 
         * @return builder
         * 
         */
        public Builder alternativeZones(List<String> alternativeZones) {
            return alternativeZones(Output.of(alternativeZones));
        }

        /**
         * @param alternativeZones A list of alternative network zones.
         * 
         * @return builder
         * 
         */
        public Builder alternativeZones(String... alternativeZones) {
            return alternativeZones(List.of(alternativeZones));
        }

        /**
         * @param description A short description of the network zone
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A short description of the network zone
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the network zone, not case sensitive. Dynatrace stores the name in lowercase, allowed characters: alphanumeric, hyphen, underscore, dot
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the network zone, not case sensitive. Dynatrace stores the name in lowercase, allowed characters: alphanumeric, hyphen, underscore, dot
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param numOfConfiguredActivegates The number of ActiveGates in the network zone.
         * 
         * @return builder
         * 
         */
        public Builder numOfConfiguredActivegates(@Nullable Output<Integer> numOfConfiguredActivegates) {
            $.numOfConfiguredActivegates = numOfConfiguredActivegates;
            return this;
        }

        /**
         * @param numOfConfiguredActivegates The number of ActiveGates in the network zone.
         * 
         * @return builder
         * 
         */
        public Builder numOfConfiguredActivegates(Integer numOfConfiguredActivegates) {
            return numOfConfiguredActivegates(Output.of(numOfConfiguredActivegates));
        }

        /**
         * @param numOfConfiguredOneagents The number of OneAgents that are configured to use the network zone as primary.
         * 
         * @return builder
         * 
         */
        public Builder numOfConfiguredOneagents(@Nullable Output<Integer> numOfConfiguredOneagents) {
            $.numOfConfiguredOneagents = numOfConfiguredOneagents;
            return this;
        }

        /**
         * @param numOfConfiguredOneagents The number of OneAgents that are configured to use the network zone as primary.
         * 
         * @return builder
         * 
         */
        public Builder numOfConfiguredOneagents(Integer numOfConfiguredOneagents) {
            return numOfConfiguredOneagents(Output.of(numOfConfiguredOneagents));
        }

        /**
         * @param numOfOneagentsFromOtherZones The number of OneAgents from other network zones that are using ActiveGates in the network zone.
         * 
         * @return builder
         * 
         */
        public Builder numOfOneagentsFromOtherZones(@Nullable Output<Integer> numOfOneagentsFromOtherZones) {
            $.numOfOneagentsFromOtherZones = numOfOneagentsFromOtherZones;
            return this;
        }

        /**
         * @param numOfOneagentsFromOtherZones The number of OneAgents from other network zones that are using ActiveGates in the network zone.
         * 
         * @return builder
         * 
         */
        public Builder numOfOneagentsFromOtherZones(Integer numOfOneagentsFromOtherZones) {
            return numOfOneagentsFromOtherZones(Output.of(numOfOneagentsFromOtherZones));
        }

        /**
         * @param numOfOneagentsUsing The number of OneAgents that are using ActiveGates in the network zone.
         * 
         * @return builder
         * 
         */
        public Builder numOfOneagentsUsing(@Nullable Output<Integer> numOfOneagentsUsing) {
            $.numOfOneagentsUsing = numOfOneagentsUsing;
            return this;
        }

        /**
         * @param numOfOneagentsUsing The number of OneAgents that are using ActiveGates in the network zone.
         * 
         * @return builder
         * 
         */
        public Builder numOfOneagentsUsing(Integer numOfOneagentsUsing) {
            return numOfOneagentsUsing(Output.of(numOfOneagentsUsing));
        }

        public NetworkZoneArgs build() {
            return $;
        }
    }

}
