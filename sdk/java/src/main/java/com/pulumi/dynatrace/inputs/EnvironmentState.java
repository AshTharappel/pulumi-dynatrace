// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.EnvironmentQuotasArgs;
import com.pulumi.dynatrace.inputs.EnvironmentStorageArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnvironmentState extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentState Empty = new EnvironmentState();

    /**
     * The display name of the environment
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The display name of the environment
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Environment level consumption and quotas information
     * 
     */
    @Import(name="quotas")
    private @Nullable Output<EnvironmentQuotasArgs> quotas;

    /**
     * @return Environment level consumption and quotas information
     * 
     */
    public Optional<Output<EnvironmentQuotasArgs>> quotas() {
        return Optional.ofNullable(this.quotas);
    }

    /**
     * Indicates whether the environment is enabled or disabled. Possible values are `ENABLED` and `DISABLED`. The default value is ENABLED
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Indicates whether the environment is enabled or disabled. Possible values are `ENABLED` and `DISABLED`. The default value is ENABLED
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Environment level storage usage and limit information
     * 
     */
    @Import(name="storage")
    private @Nullable Output<EnvironmentStorageArgs> storage;

    /**
     * @return Environment level storage usage and limit information
     * 
     */
    public Optional<Output<EnvironmentStorageArgs>> storage() {
        return Optional.ofNullable(this.storage);
    }

    /**
     * A set of tags that are assigned to this environment. Every tag can have a maximum length of 100 characters
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A set of tags that are assigned to this environment. Every tag can have a maximum length of 100 characters
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Specifies whether the environment is a trial environment or a non-trial environment. Creating a trial environment is only possible if your license allows that. The default value is false (non-trial)
     * 
     */
    @Import(name="trial")
    private @Nullable Output<Boolean> trial;

    /**
     * @return Specifies whether the environment is a trial environment or a non-trial environment. Creating a trial environment is only possible if your license allows that. The default value is false (non-trial)
     * 
     */
    public Optional<Output<Boolean>> trial() {
        return Optional.ofNullable(this.trial);
    }

    private EnvironmentState() {}

    private EnvironmentState(EnvironmentState $) {
        this.name = $.name;
        this.quotas = $.quotas;
        this.state = $.state;
        this.storage = $.storage;
        this.tags = $.tags;
        this.trial = $.trial;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentState $;

        public Builder() {
            $ = new EnvironmentState();
        }

        public Builder(EnvironmentState defaults) {
            $ = new EnvironmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The display name of the environment
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The display name of the environment
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param quotas Environment level consumption and quotas information
         * 
         * @return builder
         * 
         */
        public Builder quotas(@Nullable Output<EnvironmentQuotasArgs> quotas) {
            $.quotas = quotas;
            return this;
        }

        /**
         * @param quotas Environment level consumption and quotas information
         * 
         * @return builder
         * 
         */
        public Builder quotas(EnvironmentQuotasArgs quotas) {
            return quotas(Output.of(quotas));
        }

        /**
         * @param state Indicates whether the environment is enabled or disabled. Possible values are `ENABLED` and `DISABLED`. The default value is ENABLED
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Indicates whether the environment is enabled or disabled. Possible values are `ENABLED` and `DISABLED`. The default value is ENABLED
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param storage Environment level storage usage and limit information
         * 
         * @return builder
         * 
         */
        public Builder storage(@Nullable Output<EnvironmentStorageArgs> storage) {
            $.storage = storage;
            return this;
        }

        /**
         * @param storage Environment level storage usage and limit information
         * 
         * @return builder
         * 
         */
        public Builder storage(EnvironmentStorageArgs storage) {
            return storage(Output.of(storage));
        }

        /**
         * @param tags A set of tags that are assigned to this environment. Every tag can have a maximum length of 100 characters
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A set of tags that are assigned to this environment. Every tag can have a maximum length of 100 characters
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A set of tags that are assigned to this environment. Every tag can have a maximum length of 100 characters
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param trial Specifies whether the environment is a trial environment or a non-trial environment. Creating a trial environment is only possible if your license allows that. The default value is false (non-trial)
         * 
         * @return builder
         * 
         */
        public Builder trial(@Nullable Output<Boolean> trial) {
            $.trial = trial;
            return this;
        }

        /**
         * @param trial Specifies whether the environment is a trial environment or a non-trial environment. Creating a trial environment is only possible if your license allows that. The default value is false (non-trial)
         * 
         * @return builder
         * 
         */
        public Builder trial(Boolean trial) {
            return trial(Output.of(trial));
        }

        public EnvironmentState build() {
            return $;
        }
    }

}
