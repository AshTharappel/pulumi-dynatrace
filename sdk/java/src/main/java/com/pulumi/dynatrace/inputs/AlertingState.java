// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.AlertingFiltersArgs;
import com.pulumi.dynatrace.inputs.AlertingRulesArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertingState extends com.pulumi.resources.ResourceArgs {

    public static final AlertingState Empty = new AlertingState();

    /**
     * The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
     * 
     */
    @Import(name="filters")
    private @Nullable Output<AlertingFiltersArgs> filters;

    /**
     * @return The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
     * 
     */
    public Optional<Output<AlertingFiltersArgs>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The ID of this setting when referred to by the Config REST API V1
     * 
     */
    @Import(name="legacyId")
    private @Nullable Output<String> legacyId;

    /**
     * @return The ID of this setting when referred to by the Config REST API V1
     * 
     */
    public Optional<Output<String>> legacyId() {
        return Optional.ofNullable(this.legacyId);
    }

    /**
     * The ID of the management zone to which the alerting profile applies
     * 
     */
    @Import(name="managementZone")
    private @Nullable Output<String> managementZone;

    /**
     * @return The ID of the management zone to which the alerting profile applies
     * 
     */
    public Optional<Output<String>> managementZone() {
        return Optional.ofNullable(this.managementZone);
    }

    /**
     * The name of the alerting profile, displayed in the UI
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the alerting profile, displayed in the UI
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
     * 
     */
    @Import(name="rules")
    private @Nullable Output<AlertingRulesArgs> rules;

    /**
     * @return A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
     * 
     */
    public Optional<Output<AlertingRulesArgs>> rules() {
        return Optional.ofNullable(this.rules);
    }

    private AlertingState() {}

    private AlertingState(AlertingState $) {
        this.filters = $.filters;
        this.legacyId = $.legacyId;
        this.managementZone = $.managementZone;
        this.name = $.name;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertingState $;

        public Builder() {
            $ = new AlertingState();
        }

        public Builder(AlertingState defaults) {
            $ = new AlertingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param filters The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<AlertingFiltersArgs> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
         * 
         * @return builder
         * 
         */
        public Builder filters(AlertingFiltersArgs filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param legacyId The ID of this setting when referred to by the Config REST API V1
         * 
         * @return builder
         * 
         */
        public Builder legacyId(@Nullable Output<String> legacyId) {
            $.legacyId = legacyId;
            return this;
        }

        /**
         * @param legacyId The ID of this setting when referred to by the Config REST API V1
         * 
         * @return builder
         * 
         */
        public Builder legacyId(String legacyId) {
            return legacyId(Output.of(legacyId));
        }

        /**
         * @param managementZone The ID of the management zone to which the alerting profile applies
         * 
         * @return builder
         * 
         */
        public Builder managementZone(@Nullable Output<String> managementZone) {
            $.managementZone = managementZone;
            return this;
        }

        /**
         * @param managementZone The ID of the management zone to which the alerting profile applies
         * 
         * @return builder
         * 
         */
        public Builder managementZone(String managementZone) {
            return managementZone(Output.of(managementZone));
        }

        /**
         * @param name The name of the alerting profile, displayed in the UI
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the alerting profile, displayed in the UI
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param rules A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<AlertingRulesArgs> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
         * 
         * @return builder
         * 
         */
        public Builder rules(AlertingRulesArgs rules) {
            return rules(Output.of(rules));
        }

        public AlertingState build() {
            return $;
        }
    }

}
