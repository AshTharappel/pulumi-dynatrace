// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.SloArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.SloState;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/slo:Slo")
public class Slo extends com.pulumi.resources.CustomResource {
    /**
     * The total count metric (the denominator in rate calculation)
     * 
     */
    @Export(name="denominator", type=String.class, parameters={})
    private Output</* @Nullable */ String> denominator;

    /**
     * @return The total count metric (the denominator in rate calculation)
     * 
     */
    public Output<Optional<String>> denominator() {
        return Codegen.optional(this.denominator);
    }
    /**
     * The custom description of the SLO (optional)
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The custom description of the SLO (optional)
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The SLO is enabled (`false`) or disabled (`true`)
     * 
     */
    @Export(name="disabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> disabled;

    /**
     * @return The SLO is enabled (`false`) or disabled (`true`)
     * 
     */
    public Output<Optional<Boolean>> disabled() {
        return Codegen.optional(this.disabled);
    }
    /**
     * The evaluation type of the SLO. Currently only `AGGREGATE` is supported
     * 
     */
    @Export(name="evaluation", type=String.class, parameters={})
    private Output<String> evaluation;

    /**
     * @return The evaluation type of the SLO. Currently only `AGGREGATE` is supported
     * 
     */
    public Output<String> evaluation() {
        return this.evaluation;
    }
    /**
     * The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector)
     * 
     */
    @Export(name="filter", type=String.class, parameters={})
    private Output</* @Nullable */ String> filter;

    /**
     * @return The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector)
     * 
     */
    public Output<Optional<String>> filter() {
        return Codegen.optional(this.filter);
    }
    /**
     * The percentage-based metric expression for the calculation of the SLO
     * 
     */
    @Export(name="metricExpression", type=String.class, parameters={})
    private Output</* @Nullable */ String> metricExpression;

    /**
     * @return The percentage-based metric expression for the calculation of the SLO
     * 
     */
    public Output<Optional<String>> metricExpression() {
        return Codegen.optional(this.metricExpression);
    }
    /**
     * The name of the rule
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the rule
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The metric for the count of successes (the numerator in rate calculation)
     * 
     * @deprecated
     * `numerator` and `denominator` have been replaced by `metric_expression`
     * 
     */
    @Deprecated /* `numerator` and `denominator` have been replaced by `metric_expression` */
    @Export(name="numerator", type=String.class, parameters={})
    private Output</* @Nullable */ String> numerator;

    /**
     * @return The metric for the count of successes (the numerator in rate calculation)
     * 
     */
    public Output<Optional<String>> numerator() {
        return Codegen.optional(this.numerator);
    }
    /**
     * The percentage-based metric for the calculation of the SLO
     * 
     */
    @Export(name="rate", type=String.class, parameters={})
    private Output</* @Nullable */ String> rate;

    /**
     * @return The percentage-based metric for the calculation of the SLO
     * 
     */
    public Output<Optional<String>> rate() {
        return Codegen.optional(this.rate);
    }
    /**
     * The target value of the SLO
     * 
     */
    @Export(name="target", type=Double.class, parameters={})
    private Output<Double> target;

    /**
     * @return The target value of the SLO
     * 
     */
    public Output<Double> target() {
        return this.target;
    }
    /**
     * The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector
     * 
     */
    @Export(name="timeframe", type=String.class, parameters={})
    private Output<String> timeframe;

    /**
     * @return The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector
     * 
     */
    public Output<String> timeframe() {
        return this.timeframe;
    }
    /**
     * The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure
     * 
     */
    @Export(name="warning", type=Double.class, parameters={})
    private Output<Double> warning;

    /**
     * @return The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure
     * 
     */
    public Output<Double> warning() {
        return this.warning;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Slo(String name) {
        this(name, SloArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Slo(String name, SloArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Slo(String name, SloArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/slo:Slo", name, args == null ? SloArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Slo(String name, Output<String> id, @Nullable SloState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/slo:Slo", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Slo get(String name, Output<String> id, @Nullable SloState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Slo(name, id, state, options);
    }
}
