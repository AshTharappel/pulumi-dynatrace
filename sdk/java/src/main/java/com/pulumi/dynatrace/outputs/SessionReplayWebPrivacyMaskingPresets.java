// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dynatrace.outputs.SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRules;
import com.pulumi.dynatrace.outputs.SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRules;
import com.pulumi.dynatrace.outputs.SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRules;
import com.pulumi.dynatrace.outputs.SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRules;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SessionReplayWebPrivacyMaskingPresets {
    /**
     * @return (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     * 
     */
    private @Nullable SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRules playbackMaskingAllowListRules;
    /**
     * @return (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     * 
     */
    private @Nullable SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRules playbackMaskingBlockListRules;
    /**
     * @return (Field has overlap with `dynatrace.ApplicationDataPrivacy`) Possible Values: `MASK_ALL`, `MASK_USER_INPUT`, `ALLOW_LIST`, `BLOCK_LIST`
     * 
     */
    private String playbackMaskingPreset;
    /**
     * @return (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     * 
     */
    private @Nullable SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRules recordingMaskingAllowListRules;
    /**
     * @return (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     * 
     */
    private @Nullable SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRules recordingMaskingBlockListRules;
    /**
     * @return (Field has overlap with `dynatrace.ApplicationDataPrivacy`) Possible Values: `MASK_USER_INPUT`, `ALLOW_LIST`, `BLOCK_LIST`, `MASK_ALL`
     * 
     */
    private String recordingMaskingPreset;

    private SessionReplayWebPrivacyMaskingPresets() {}
    /**
     * @return (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     * 
     */
    public Optional<SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRules> playbackMaskingAllowListRules() {
        return Optional.ofNullable(this.playbackMaskingAllowListRules);
    }
    /**
     * @return (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     * 
     */
    public Optional<SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRules> playbackMaskingBlockListRules() {
        return Optional.ofNullable(this.playbackMaskingBlockListRules);
    }
    /**
     * @return (Field has overlap with `dynatrace.ApplicationDataPrivacy`) Possible Values: `MASK_ALL`, `MASK_USER_INPUT`, `ALLOW_LIST`, `BLOCK_LIST`
     * 
     */
    public String playbackMaskingPreset() {
        return this.playbackMaskingPreset;
    }
    /**
     * @return (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     * 
     */
    public Optional<SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRules> recordingMaskingAllowListRules() {
        return Optional.ofNullable(this.recordingMaskingAllowListRules);
    }
    /**
     * @return (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     * 
     */
    public Optional<SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRules> recordingMaskingBlockListRules() {
        return Optional.ofNullable(this.recordingMaskingBlockListRules);
    }
    /**
     * @return (Field has overlap with `dynatrace.ApplicationDataPrivacy`) Possible Values: `MASK_USER_INPUT`, `ALLOW_LIST`, `BLOCK_LIST`, `MASK_ALL`
     * 
     */
    public String recordingMaskingPreset() {
        return this.recordingMaskingPreset;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SessionReplayWebPrivacyMaskingPresets defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRules playbackMaskingAllowListRules;
        private @Nullable SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRules playbackMaskingBlockListRules;
        private String playbackMaskingPreset;
        private @Nullable SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRules recordingMaskingAllowListRules;
        private @Nullable SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRules recordingMaskingBlockListRules;
        private String recordingMaskingPreset;
        public Builder() {}
        public Builder(SessionReplayWebPrivacyMaskingPresets defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.playbackMaskingAllowListRules = defaults.playbackMaskingAllowListRules;
    	      this.playbackMaskingBlockListRules = defaults.playbackMaskingBlockListRules;
    	      this.playbackMaskingPreset = defaults.playbackMaskingPreset;
    	      this.recordingMaskingAllowListRules = defaults.recordingMaskingAllowListRules;
    	      this.recordingMaskingBlockListRules = defaults.recordingMaskingBlockListRules;
    	      this.recordingMaskingPreset = defaults.recordingMaskingPreset;
        }

        @CustomType.Setter
        public Builder playbackMaskingAllowListRules(@Nullable SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRules playbackMaskingAllowListRules) {
            this.playbackMaskingAllowListRules = playbackMaskingAllowListRules;
            return this;
        }
        @CustomType.Setter
        public Builder playbackMaskingBlockListRules(@Nullable SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRules playbackMaskingBlockListRules) {
            this.playbackMaskingBlockListRules = playbackMaskingBlockListRules;
            return this;
        }
        @CustomType.Setter
        public Builder playbackMaskingPreset(String playbackMaskingPreset) {
            this.playbackMaskingPreset = Objects.requireNonNull(playbackMaskingPreset);
            return this;
        }
        @CustomType.Setter
        public Builder recordingMaskingAllowListRules(@Nullable SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRules recordingMaskingAllowListRules) {
            this.recordingMaskingAllowListRules = recordingMaskingAllowListRules;
            return this;
        }
        @CustomType.Setter
        public Builder recordingMaskingBlockListRules(@Nullable SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRules recordingMaskingBlockListRules) {
            this.recordingMaskingBlockListRules = recordingMaskingBlockListRules;
            return this;
        }
        @CustomType.Setter
        public Builder recordingMaskingPreset(String recordingMaskingPreset) {
            this.recordingMaskingPreset = Objects.requireNonNull(recordingMaskingPreset);
            return this;
        }
        public SessionReplayWebPrivacyMaskingPresets build() {
            final var o = new SessionReplayWebPrivacyMaskingPresets();
            o.playbackMaskingAllowListRules = playbackMaskingAllowListRules;
            o.playbackMaskingBlockListRules = playbackMaskingBlockListRules;
            o.playbackMaskingPreset = playbackMaskingPreset;
            o.recordingMaskingAllowListRules = recordingMaskingAllowListRules;
            o.recordingMaskingBlockListRules = recordingMaskingBlockListRules;
            o.recordingMaskingPreset = recordingMaskingPreset;
            return o;
        }
    }
}
