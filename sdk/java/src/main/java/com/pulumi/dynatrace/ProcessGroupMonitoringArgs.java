// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class ProcessGroupMonitoringArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProcessGroupMonitoringArgs Empty = new ProcessGroupMonitoringArgs();

    /**
     * Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
     * 
     */
    @Import(name="monitoringState", required=true)
    private Output<String> monitoringState;

    /**
     * @return Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
     * 
     */
    public Output<String> monitoringState() {
        return this.monitoringState;
    }

    /**
     * The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
     * 
     */
    @Import(name="processGroupId", required=true)
    private Output<String> processGroupId;

    /**
     * @return The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
     * 
     */
    public Output<String> processGroupId() {
        return this.processGroupId;
    }

    private ProcessGroupMonitoringArgs() {}

    private ProcessGroupMonitoringArgs(ProcessGroupMonitoringArgs $) {
        this.monitoringState = $.monitoringState;
        this.processGroupId = $.processGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProcessGroupMonitoringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProcessGroupMonitoringArgs $;

        public Builder() {
            $ = new ProcessGroupMonitoringArgs();
        }

        public Builder(ProcessGroupMonitoringArgs defaults) {
            $ = new ProcessGroupMonitoringArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param monitoringState Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
         * 
         * @return builder
         * 
         */
        public Builder monitoringState(Output<String> monitoringState) {
            $.monitoringState = monitoringState;
            return this;
        }

        /**
         * @param monitoringState Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
         * 
         * @return builder
         * 
         */
        public Builder monitoringState(String monitoringState) {
            return monitoringState(Output.of(monitoringState));
        }

        /**
         * @param processGroupId The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
         * 
         * @return builder
         * 
         */
        public Builder processGroupId(Output<String> processGroupId) {
            $.processGroupId = processGroupId;
            return this;
        }

        /**
         * @param processGroupId The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
         * 
         * @return builder
         * 
         */
        public Builder processGroupId(String processGroupId) {
            return processGroupId(Output.of(processGroupId));
        }

        public ProcessGroupMonitoringArgs build() {
            $.monitoringState = Objects.requireNonNull($.monitoringState, "expected parameter 'monitoringState' to be non-null");
            $.processGroupId = Objects.requireNonNull($.processGroupId, "expected parameter 'processGroupId' to be non-null");
            return $;
        }
    }

}
