// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HostProcessGroupMonitoringState extends com.pulumi.resources.ResourceArgs {

    public static final HostProcessGroupMonitoringState Empty = new HostProcessGroupMonitoringState();

    /**
     * The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
     * 
     */
    @Import(name="hostId")
    private @Nullable Output<String> hostId;

    /**
     * @return The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
     * 
     */
    public Optional<Output<String>> hostId() {
        return Optional.ofNullable(this.hostId);
    }

    /**
     * Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
     * 
     */
    @Import(name="monitoringState")
    private @Nullable Output<String> monitoringState;

    /**
     * @return Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
     * 
     */
    public Optional<Output<String>> monitoringState() {
        return Optional.ofNullable(this.monitoringState);
    }

    /**
     * Process group
     * 
     */
    @Import(name="processGroup")
    private @Nullable Output<String> processGroup;

    /**
     * @return Process group
     * 
     */
    public Optional<Output<String>> processGroup() {
        return Optional.ofNullable(this.processGroup);
    }

    private HostProcessGroupMonitoringState() {}

    private HostProcessGroupMonitoringState(HostProcessGroupMonitoringState $) {
        this.hostId = $.hostId;
        this.monitoringState = $.monitoringState;
        this.processGroup = $.processGroup;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostProcessGroupMonitoringState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostProcessGroupMonitoringState $;

        public Builder() {
            $ = new HostProcessGroupMonitoringState();
        }

        public Builder(HostProcessGroupMonitoringState defaults) {
            $ = new HostProcessGroupMonitoringState(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostId The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
         * 
         * @return builder
         * 
         */
        public Builder hostId(@Nullable Output<String> hostId) {
            $.hostId = hostId;
            return this;
        }

        /**
         * @param hostId The scope of this settings. If the settings should cover the whole environment, just don&#39;t specify any scope.
         * 
         * @return builder
         * 
         */
        public Builder hostId(String hostId) {
            return hostId(Output.of(hostId));
        }

        /**
         * @param monitoringState Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
         * 
         * @return builder
         * 
         */
        public Builder monitoringState(@Nullable Output<String> monitoringState) {
            $.monitoringState = monitoringState;
            return this;
        }

        /**
         * @param monitoringState Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
         * 
         * @return builder
         * 
         */
        public Builder monitoringState(String monitoringState) {
            return monitoringState(Output.of(monitoringState));
        }

        /**
         * @param processGroup Process group
         * 
         * @return builder
         * 
         */
        public Builder processGroup(@Nullable Output<String> processGroup) {
            $.processGroup = processGroup;
            return this;
        }

        /**
         * @param processGroup Process group
         * 
         * @return builder
         * 
         */
        public Builder processGroup(String processGroup) {
            return processGroup(Output.of(processGroup));
        }

        public HostProcessGroupMonitoringState build() {
            return $;
        }
    }

}
