// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation {
    private @Nullable Boolean includeHexNumbers;
    private @Nullable Integer minDigitCount;
    private @Nullable String prefix;
    private @Nullable String replacementValue;
    private @Nullable Integer segmentCount;
    private @Nullable Integer selectIndex;
    private @Nullable String splitDelimiter;
    private @Nullable String suffix;
    private @Nullable Boolean takeFromEnd;
    private String transformationType;

    private ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation() {}
    public Optional<Boolean> includeHexNumbers() {
        return Optional.ofNullable(this.includeHexNumbers);
    }
    public Optional<Integer> minDigitCount() {
        return Optional.ofNullable(this.minDigitCount);
    }
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    public Optional<String> replacementValue() {
        return Optional.ofNullable(this.replacementValue);
    }
    public Optional<Integer> segmentCount() {
        return Optional.ofNullable(this.segmentCount);
    }
    public Optional<Integer> selectIndex() {
        return Optional.ofNullable(this.selectIndex);
    }
    public Optional<String> splitDelimiter() {
        return Optional.ofNullable(this.splitDelimiter);
    }
    public Optional<String> suffix() {
        return Optional.ofNullable(this.suffix);
    }
    public Optional<Boolean> takeFromEnd() {
        return Optional.ofNullable(this.takeFromEnd);
    }
    public String transformationType() {
        return this.transformationType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean includeHexNumbers;
        private @Nullable Integer minDigitCount;
        private @Nullable String prefix;
        private @Nullable String replacementValue;
        private @Nullable Integer segmentCount;
        private @Nullable Integer selectIndex;
        private @Nullable String splitDelimiter;
        private @Nullable String suffix;
        private @Nullable Boolean takeFromEnd;
        private String transformationType;
        public Builder() {}
        public Builder(ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.includeHexNumbers = defaults.includeHexNumbers;
    	      this.minDigitCount = defaults.minDigitCount;
    	      this.prefix = defaults.prefix;
    	      this.replacementValue = defaults.replacementValue;
    	      this.segmentCount = defaults.segmentCount;
    	      this.selectIndex = defaults.selectIndex;
    	      this.splitDelimiter = defaults.splitDelimiter;
    	      this.suffix = defaults.suffix;
    	      this.takeFromEnd = defaults.takeFromEnd;
    	      this.transformationType = defaults.transformationType;
        }

        @CustomType.Setter
        public Builder includeHexNumbers(@Nullable Boolean includeHexNumbers) {
            this.includeHexNumbers = includeHexNumbers;
            return this;
        }
        @CustomType.Setter
        public Builder minDigitCount(@Nullable Integer minDigitCount) {
            this.minDigitCount = minDigitCount;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder replacementValue(@Nullable String replacementValue) {
            this.replacementValue = replacementValue;
            return this;
        }
        @CustomType.Setter
        public Builder segmentCount(@Nullable Integer segmentCount) {
            this.segmentCount = segmentCount;
            return this;
        }
        @CustomType.Setter
        public Builder selectIndex(@Nullable Integer selectIndex) {
            this.selectIndex = selectIndex;
            return this;
        }
        @CustomType.Setter
        public Builder splitDelimiter(@Nullable String splitDelimiter) {
            this.splitDelimiter = splitDelimiter;
            return this;
        }
        @CustomType.Setter
        public Builder suffix(@Nullable String suffix) {
            this.suffix = suffix;
            return this;
        }
        @CustomType.Setter
        public Builder takeFromEnd(@Nullable Boolean takeFromEnd) {
            this.takeFromEnd = takeFromEnd;
            return this;
        }
        @CustomType.Setter
        public Builder transformationType(String transformationType) {
            this.transformationType = Objects.requireNonNull(transformationType);
            return this;
        }
        public ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation build() {
            final var o = new ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation();
            o.includeHexNumbers = includeHexNumbers;
            o.minDigitCount = minDigitCount;
            o.prefix = prefix;
            o.replacementValue = replacementValue;
            o.segmentCount = segmentCount;
            o.selectIndex = selectIndex;
            o.splitDelimiter = splitDelimiter;
            o.suffix = suffix;
            o.takeFromEnd = takeFromEnd;
            o.transformationType = transformationType;
            return o;
        }
    }
}
