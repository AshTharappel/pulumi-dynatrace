// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dynatrace.outputs.WebApplicationUserActionNamingSettingsCustomActionNamingRules;
import com.pulumi.dynatrace.outputs.WebApplicationUserActionNamingSettingsLoadActionNamingRules;
import com.pulumi.dynatrace.outputs.WebApplicationUserActionNamingSettingsPlaceholders;
import com.pulumi.dynatrace.outputs.WebApplicationUserActionNamingSettingsXhrActionNamingRules;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WebApplicationUserActionNamingSettings {
    /**
     * @return User action naming rules for custom actions
     * 
     */
    private @Nullable WebApplicationUserActionNamingSettingsCustomActionNamingRules customActionNamingRules;
    /**
     * @return Case insensitive naming
     * 
     */
    private @Nullable Boolean ignoreCase;
    /**
     * @return User action naming rules for loading actions
     * 
     */
    private @Nullable WebApplicationUserActionNamingSettingsLoadActionNamingRules loadActionNamingRules;
    /**
     * @return User action placeholders
     * 
     */
    private @Nullable WebApplicationUserActionNamingSettingsPlaceholders placeholders;
    /**
     * @return User action naming rules for custom actions
     * 
     */
    private @Nullable List<String> queryParameterCleanups;
    /**
     * @return Deactivate this setting if different domains should not result in separate user actions
     * 
     */
    private @Nullable Boolean splitUserActionsByDomain;
    /**
     * @return First load action found under an XHR action should be used when true. Else the deepest one under the xhr action is used
     * 
     */
    private @Nullable Boolean useFirstDetectedLoadAction;
    /**
     * @return User action naming rules for XHR actions
     * 
     */
    private @Nullable WebApplicationUserActionNamingSettingsXhrActionNamingRules xhrActionNamingRules;

    private WebApplicationUserActionNamingSettings() {}
    /**
     * @return User action naming rules for custom actions
     * 
     */
    public Optional<WebApplicationUserActionNamingSettingsCustomActionNamingRules> customActionNamingRules() {
        return Optional.ofNullable(this.customActionNamingRules);
    }
    /**
     * @return Case insensitive naming
     * 
     */
    public Optional<Boolean> ignoreCase() {
        return Optional.ofNullable(this.ignoreCase);
    }
    /**
     * @return User action naming rules for loading actions
     * 
     */
    public Optional<WebApplicationUserActionNamingSettingsLoadActionNamingRules> loadActionNamingRules() {
        return Optional.ofNullable(this.loadActionNamingRules);
    }
    /**
     * @return User action placeholders
     * 
     */
    public Optional<WebApplicationUserActionNamingSettingsPlaceholders> placeholders() {
        return Optional.ofNullable(this.placeholders);
    }
    /**
     * @return User action naming rules for custom actions
     * 
     */
    public List<String> queryParameterCleanups() {
        return this.queryParameterCleanups == null ? List.of() : this.queryParameterCleanups;
    }
    /**
     * @return Deactivate this setting if different domains should not result in separate user actions
     * 
     */
    public Optional<Boolean> splitUserActionsByDomain() {
        return Optional.ofNullable(this.splitUserActionsByDomain);
    }
    /**
     * @return First load action found under an XHR action should be used when true. Else the deepest one under the xhr action is used
     * 
     */
    public Optional<Boolean> useFirstDetectedLoadAction() {
        return Optional.ofNullable(this.useFirstDetectedLoadAction);
    }
    /**
     * @return User action naming rules for XHR actions
     * 
     */
    public Optional<WebApplicationUserActionNamingSettingsXhrActionNamingRules> xhrActionNamingRules() {
        return Optional.ofNullable(this.xhrActionNamingRules);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebApplicationUserActionNamingSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable WebApplicationUserActionNamingSettingsCustomActionNamingRules customActionNamingRules;
        private @Nullable Boolean ignoreCase;
        private @Nullable WebApplicationUserActionNamingSettingsLoadActionNamingRules loadActionNamingRules;
        private @Nullable WebApplicationUserActionNamingSettingsPlaceholders placeholders;
        private @Nullable List<String> queryParameterCleanups;
        private @Nullable Boolean splitUserActionsByDomain;
        private @Nullable Boolean useFirstDetectedLoadAction;
        private @Nullable WebApplicationUserActionNamingSettingsXhrActionNamingRules xhrActionNamingRules;
        public Builder() {}
        public Builder(WebApplicationUserActionNamingSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customActionNamingRules = defaults.customActionNamingRules;
    	      this.ignoreCase = defaults.ignoreCase;
    	      this.loadActionNamingRules = defaults.loadActionNamingRules;
    	      this.placeholders = defaults.placeholders;
    	      this.queryParameterCleanups = defaults.queryParameterCleanups;
    	      this.splitUserActionsByDomain = defaults.splitUserActionsByDomain;
    	      this.useFirstDetectedLoadAction = defaults.useFirstDetectedLoadAction;
    	      this.xhrActionNamingRules = defaults.xhrActionNamingRules;
        }

        @CustomType.Setter
        public Builder customActionNamingRules(@Nullable WebApplicationUserActionNamingSettingsCustomActionNamingRules customActionNamingRules) {
            this.customActionNamingRules = customActionNamingRules;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreCase(@Nullable Boolean ignoreCase) {
            this.ignoreCase = ignoreCase;
            return this;
        }
        @CustomType.Setter
        public Builder loadActionNamingRules(@Nullable WebApplicationUserActionNamingSettingsLoadActionNamingRules loadActionNamingRules) {
            this.loadActionNamingRules = loadActionNamingRules;
            return this;
        }
        @CustomType.Setter
        public Builder placeholders(@Nullable WebApplicationUserActionNamingSettingsPlaceholders placeholders) {
            this.placeholders = placeholders;
            return this;
        }
        @CustomType.Setter
        public Builder queryParameterCleanups(@Nullable List<String> queryParameterCleanups) {
            this.queryParameterCleanups = queryParameterCleanups;
            return this;
        }
        public Builder queryParameterCleanups(String... queryParameterCleanups) {
            return queryParameterCleanups(List.of(queryParameterCleanups));
        }
        @CustomType.Setter
        public Builder splitUserActionsByDomain(@Nullable Boolean splitUserActionsByDomain) {
            this.splitUserActionsByDomain = splitUserActionsByDomain;
            return this;
        }
        @CustomType.Setter
        public Builder useFirstDetectedLoadAction(@Nullable Boolean useFirstDetectedLoadAction) {
            this.useFirstDetectedLoadAction = useFirstDetectedLoadAction;
            return this;
        }
        @CustomType.Setter
        public Builder xhrActionNamingRules(@Nullable WebApplicationUserActionNamingSettingsXhrActionNamingRules xhrActionNamingRules) {
            this.xhrActionNamingRules = xhrActionNamingRules;
            return this;
        }
        public WebApplicationUserActionNamingSettings build() {
            final var o = new WebApplicationUserActionNamingSettings();
            o.customActionNamingRules = customActionNamingRules;
            o.ignoreCase = ignoreCase;
            o.loadActionNamingRules = loadActionNamingRules;
            o.placeholders = placeholders;
            o.queryParameterCleanups = queryParameterCleanups;
            o.splitUserActionsByDomain = splitUserActionsByDomain;
            o.useFirstDetectedLoadAction = useFirstDetectedLoadAction;
            o.xhrActionNamingRules = xhrActionNamingRules;
            return o;
        }
    }
}
