// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.QueueManagerAliasQueueArgs;
import com.pulumi.dynatrace.inputs.QueueManagerClusterQueueArgs;
import com.pulumi.dynatrace.inputs.QueueManagerRemoteQueueArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QueueManagerArgs extends com.pulumi.resources.ResourceArgs {

    public static final QueueManagerArgs Empty = new QueueManagerArgs();

    /**
     * The alias queues in the queue manager
     * 
     */
    @Import(name="aliasQueues")
    private @Nullable Output<List<QueueManagerAliasQueueArgs>> aliasQueues;

    /**
     * @return The alias queues in the queue manager
     * 
     */
    public Optional<Output<List<QueueManagerAliasQueueArgs>>> aliasQueues() {
        return Optional.ofNullable(this.aliasQueues);
    }

    /**
     * The alias queues in the queue manager
     * 
     */
    @Import(name="clusterQueues")
    private @Nullable Output<List<QueueManagerClusterQueueArgs>> clusterQueues;

    /**
     * @return The alias queues in the queue manager
     * 
     */
    public Optional<Output<List<QueueManagerClusterQueueArgs>>> clusterQueues() {
        return Optional.ofNullable(this.clusterQueues);
    }

    /**
     * Name of the cluster(s) this queue manager is part of
     * 
     */
    @Import(name="clusters")
    private @Nullable Output<List<String>> clusters;

    /**
     * @return Name of the cluster(s) this queue manager is part of
     * 
     */
    public Optional<Output<List<String>>> clusters() {
        return Optional.ofNullable(this.clusters);
    }

    /**
     * The name of the queue manager
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the queue manager
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The alias queues in the queue manager
     * 
     */
    @Import(name="remoteQueues")
    private @Nullable Output<List<QueueManagerRemoteQueueArgs>> remoteQueues;

    /**
     * @return The alias queues in the queue manager
     * 
     */
    public Optional<Output<List<QueueManagerRemoteQueueArgs>>> remoteQueues() {
        return Optional.ofNullable(this.remoteQueues);
    }

    private QueueManagerArgs() {}

    private QueueManagerArgs(QueueManagerArgs $) {
        this.aliasQueues = $.aliasQueues;
        this.clusterQueues = $.clusterQueues;
        this.clusters = $.clusters;
        this.name = $.name;
        this.remoteQueues = $.remoteQueues;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QueueManagerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QueueManagerArgs $;

        public Builder() {
            $ = new QueueManagerArgs();
        }

        public Builder(QueueManagerArgs defaults) {
            $ = new QueueManagerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aliasQueues The alias queues in the queue manager
         * 
         * @return builder
         * 
         */
        public Builder aliasQueues(@Nullable Output<List<QueueManagerAliasQueueArgs>> aliasQueues) {
            $.aliasQueues = aliasQueues;
            return this;
        }

        /**
         * @param aliasQueues The alias queues in the queue manager
         * 
         * @return builder
         * 
         */
        public Builder aliasQueues(List<QueueManagerAliasQueueArgs> aliasQueues) {
            return aliasQueues(Output.of(aliasQueues));
        }

        /**
         * @param aliasQueues The alias queues in the queue manager
         * 
         * @return builder
         * 
         */
        public Builder aliasQueues(QueueManagerAliasQueueArgs... aliasQueues) {
            return aliasQueues(List.of(aliasQueues));
        }

        /**
         * @param clusterQueues The alias queues in the queue manager
         * 
         * @return builder
         * 
         */
        public Builder clusterQueues(@Nullable Output<List<QueueManagerClusterQueueArgs>> clusterQueues) {
            $.clusterQueues = clusterQueues;
            return this;
        }

        /**
         * @param clusterQueues The alias queues in the queue manager
         * 
         * @return builder
         * 
         */
        public Builder clusterQueues(List<QueueManagerClusterQueueArgs> clusterQueues) {
            return clusterQueues(Output.of(clusterQueues));
        }

        /**
         * @param clusterQueues The alias queues in the queue manager
         * 
         * @return builder
         * 
         */
        public Builder clusterQueues(QueueManagerClusterQueueArgs... clusterQueues) {
            return clusterQueues(List.of(clusterQueues));
        }

        /**
         * @param clusters Name of the cluster(s) this queue manager is part of
         * 
         * @return builder
         * 
         */
        public Builder clusters(@Nullable Output<List<String>> clusters) {
            $.clusters = clusters;
            return this;
        }

        /**
         * @param clusters Name of the cluster(s) this queue manager is part of
         * 
         * @return builder
         * 
         */
        public Builder clusters(List<String> clusters) {
            return clusters(Output.of(clusters));
        }

        /**
         * @param clusters Name of the cluster(s) this queue manager is part of
         * 
         * @return builder
         * 
         */
        public Builder clusters(String... clusters) {
            return clusters(List.of(clusters));
        }

        /**
         * @param name The name of the queue manager
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the queue manager
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param remoteQueues The alias queues in the queue manager
         * 
         * @return builder
         * 
         */
        public Builder remoteQueues(@Nullable Output<List<QueueManagerRemoteQueueArgs>> remoteQueues) {
            $.remoteQueues = remoteQueues;
            return this;
        }

        /**
         * @param remoteQueues The alias queues in the queue manager
         * 
         * @return builder
         * 
         */
        public Builder remoteQueues(List<QueueManagerRemoteQueueArgs> remoteQueues) {
            return remoteQueues(Output.of(remoteQueues));
        }

        /**
         * @param remoteQueues The alias queues in the queue manager
         * 
         * @return builder
         * 
         */
        public Builder remoteQueues(QueueManagerRemoteQueueArgs... remoteQueues) {
            return remoteQueues(List.of(remoteQueues));
        }

        public QueueManagerArgs build() {
            return $;
        }
    }

}
