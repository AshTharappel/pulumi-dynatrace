// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DeclarativeGroupingDetectionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeclarativeGroupingArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeclarativeGroupingArgs Empty = new DeclarativeGroupingArgs();

    /**
     * Enter a descriptive process group display name and a unique identifier that Dynatrace can use to recognize this process
     * group.
     * 
     */
    @Import(name="detection")
    private @Nullable Output<DeclarativeGroupingDetectionArgs> detection;

    /**
     * @return Enter a descriptive process group display name and a unique identifier that Dynatrace can use to recognize this process
     * group.
     * 
     */
    public Optional<Output<DeclarativeGroupingDetectionArgs>> detection() {
        return Optional.ofNullable(this.detection);
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Monitored technology name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Monitored technology name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    private DeclarativeGroupingArgs() {}

    private DeclarativeGroupingArgs(DeclarativeGroupingArgs $) {
        this.detection = $.detection;
        this.enabled = $.enabled;
        this.name = $.name;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeclarativeGroupingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeclarativeGroupingArgs $;

        public Builder() {
            $ = new DeclarativeGroupingArgs();
        }

        public Builder(DeclarativeGroupingArgs defaults) {
            $ = new DeclarativeGroupingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param detection Enter a descriptive process group display name and a unique identifier that Dynatrace can use to recognize this process
         * group.
         * 
         * @return builder
         * 
         */
        public Builder detection(@Nullable Output<DeclarativeGroupingDetectionArgs> detection) {
            $.detection = detection;
            return this;
        }

        /**
         * @param detection Enter a descriptive process group display name and a unique identifier that Dynatrace can use to recognize this process
         * group.
         * 
         * @return builder
         * 
         */
        public Builder detection(DeclarativeGroupingDetectionArgs detection) {
            return detection(Output.of(detection));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name Monitored technology name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Monitored technology name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param scope The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public DeclarativeGroupingArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
