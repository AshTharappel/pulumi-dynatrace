// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.MetricEventsArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.MetricEventsState;
import com.pulumi.dynatrace.outputs.MetricEventsEventTemplate;
import com.pulumi.dynatrace.outputs.MetricEventsModelProperties;
import com.pulumi.dynatrace.outputs.MetricEventsQueryDefinition;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/metricEvents:MetricEvents")
public class MetricEvents extends com.pulumi.resources.CustomResource {
    /**
     * Enabled toggle of metric event entry
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Enabled toggle of metric event entry
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * Controls the preferred entity type used for triggered events.
     * 
     */
    @Export(name="eventEntityDimensionKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> eventEntityDimensionKey;

    /**
     * @return Controls the preferred entity type used for triggered events.
     * 
     */
    public Output<Optional<String>> eventEntityDimensionKey() {
        return Codegen.optional(this.eventEntityDimensionKey);
    }
    /**
     * The event template of the metric event entry
     * 
     */
    @Export(name="eventTemplate", refs={MetricEventsEventTemplate.class}, tree="[0]")
    private Output<MetricEventsEventTemplate> eventTemplate;

    /**
     * @return The event template of the metric event entry
     * 
     */
    public Output<MetricEventsEventTemplate> eventTemplate() {
        return this.eventTemplate;
    }
    /**
     * The legacy id of the metric event entry
     * 
     */
    @Export(name="legacyId", refs={String.class}, tree="[0]")
    private Output<String> legacyId;

    /**
     * @return The legacy id of the metric event entry
     * 
     */
    public Output<String> legacyId() {
        return this.legacyId;
    }
    /**
     * The model properties of the metric event entry
     * 
     */
    @Export(name="modelProperties", refs={MetricEventsModelProperties.class}, tree="[0]")
    private Output<MetricEventsModelProperties> modelProperties;

    /**
     * @return The model properties of the metric event entry
     * 
     */
    public Output<MetricEventsModelProperties> modelProperties() {
        return this.modelProperties;
    }
    /**
     * The query definition of the metric event entry
     * 
     */
    @Export(name="queryDefinition", refs={MetricEventsQueryDefinition.class}, tree="[0]")
    private Output<MetricEventsQueryDefinition> queryDefinition;

    /**
     * @return The query definition of the metric event entry
     * 
     */
    public Output<MetricEventsQueryDefinition> queryDefinition() {
        return this.queryDefinition;
    }
    /**
     * The textual summary of the metric event entry
     * 
     */
    @Export(name="summary", refs={String.class}, tree="[0]")
    private Output<String> summary;

    /**
     * @return The textual summary of the metric event entry
     * 
     */
    public Output<String> summary() {
        return this.summary;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MetricEvents(String name) {
        this(name, MetricEventsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MetricEvents(String name, MetricEventsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MetricEvents(String name, MetricEventsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/metricEvents:MetricEvents", name, args == null ? MetricEventsArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private MetricEvents(String name, Output<String> id, @Nullable MetricEventsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/metricEvents:MetricEvents", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MetricEvents get(String name, Output<String> id, @Nullable MetricEventsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MetricEvents(name, id, state, options);
    }
}
