// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class WebAppEnablementSessionReplay {
    /**
     * @return (Field has overlap with `dynatrace.WebApplication`) [Percentage of user sessions recorded with Session Replay](https://dt-url.net/sr-cost-traffic-control). For example, if you have 50% for RUM and 50% for Session Replay, it results in 25% of sessions recorded with Session Replay.
     * 
     */
    private Integer costAndTrafficControl;
    /**
     * @return (Field has overlap with `dynatrace.WebApplication`) This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    private Boolean enabled;

    private WebAppEnablementSessionReplay() {}
    /**
     * @return (Field has overlap with `dynatrace.WebApplication`) [Percentage of user sessions recorded with Session Replay](https://dt-url.net/sr-cost-traffic-control). For example, if you have 50% for RUM and 50% for Session Replay, it results in 25% of sessions recorded with Session Replay.
     * 
     */
    public Integer costAndTrafficControl() {
        return this.costAndTrafficControl;
    }
    /**
     * @return (Field has overlap with `dynatrace.WebApplication`) This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebAppEnablementSessionReplay defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer costAndTrafficControl;
        private Boolean enabled;
        public Builder() {}
        public Builder(WebAppEnablementSessionReplay defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.costAndTrafficControl = defaults.costAndTrafficControl;
    	      this.enabled = defaults.enabled;
        }

        @CustomType.Setter
        public Builder costAndTrafficControl(Integer costAndTrafficControl) {
            this.costAndTrafficControl = Objects.requireNonNull(costAndTrafficControl);
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public WebAppEnablementSessionReplay build() {
            final var o = new WebAppEnablementSessionReplay();
            o.costAndTrafficControl = costAndTrafficControl;
            o.enabled = enabled;
            return o;
        }
    }
}
