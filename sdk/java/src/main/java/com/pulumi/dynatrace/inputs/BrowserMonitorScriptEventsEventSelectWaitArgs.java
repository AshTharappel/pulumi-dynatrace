// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptEventsEventSelectWaitValidationArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BrowserMonitorScriptEventsEventSelectWaitArgs extends com.pulumi.resources.ResourceArgs {

    public static final BrowserMonitorScriptEventsEventSelectWaitArgs Empty = new BrowserMonitorScriptEventsEventSelectWaitArgs();

    @Import(name="milliseconds")
    private @Nullable Output<Integer> milliseconds;

    public Optional<Output<Integer>> milliseconds() {
        return Optional.ofNullable(this.milliseconds);
    }

    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    @Import(name="validation")
    private @Nullable Output<BrowserMonitorScriptEventsEventSelectWaitValidationArgs> validation;

    public Optional<Output<BrowserMonitorScriptEventsEventSelectWaitValidationArgs>> validation() {
        return Optional.ofNullable(this.validation);
    }

    @Import(name="waitFor", required=true)
    private Output<String> waitFor;

    public Output<String> waitFor() {
        return this.waitFor;
    }

    private BrowserMonitorScriptEventsEventSelectWaitArgs() {}

    private BrowserMonitorScriptEventsEventSelectWaitArgs(BrowserMonitorScriptEventsEventSelectWaitArgs $) {
        this.milliseconds = $.milliseconds;
        this.timeout = $.timeout;
        this.validation = $.validation;
        this.waitFor = $.waitFor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrowserMonitorScriptEventsEventSelectWaitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrowserMonitorScriptEventsEventSelectWaitArgs $;

        public Builder() {
            $ = new BrowserMonitorScriptEventsEventSelectWaitArgs();
        }

        public Builder(BrowserMonitorScriptEventsEventSelectWaitArgs defaults) {
            $ = new BrowserMonitorScriptEventsEventSelectWaitArgs(Objects.requireNonNull(defaults));
        }

        public Builder milliseconds(@Nullable Output<Integer> milliseconds) {
            $.milliseconds = milliseconds;
            return this;
        }

        public Builder milliseconds(Integer milliseconds) {
            return milliseconds(Output.of(milliseconds));
        }

        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public Builder validation(@Nullable Output<BrowserMonitorScriptEventsEventSelectWaitValidationArgs> validation) {
            $.validation = validation;
            return this;
        }

        public Builder validation(BrowserMonitorScriptEventsEventSelectWaitValidationArgs validation) {
            return validation(Output.of(validation));
        }

        public Builder waitFor(Output<String> waitFor) {
            $.waitFor = waitFor;
            return this;
        }

        public Builder waitFor(String waitFor) {
            return waitFor(Output.of(waitFor));
        }

        public BrowserMonitorScriptEventsEventSelectWaitArgs build() {
            $.waitFor = Objects.requireNonNull($.waitFor, "expected parameter 'waitFor' to be non-null");
            return $;
        }
    }

}
