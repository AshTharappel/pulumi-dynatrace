// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.ManagementZoneRuleConditionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagementZoneRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagementZoneRuleArgs Empty = new ManagementZoneRuleArgs();

    @Import(name="conditions")
    private @Nullable Output<List<ManagementZoneRuleConditionArgs>> conditions;

    public Optional<Output<List<ManagementZoneRuleConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="propagationTypes")
    private @Nullable Output<List<String>> propagationTypes;

    public Optional<Output<List<String>>> propagationTypes() {
        return Optional.ofNullable(this.propagationTypes);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    private ManagementZoneRuleArgs() {}

    private ManagementZoneRuleArgs(ManagementZoneRuleArgs $) {
        this.conditions = $.conditions;
        this.enabled = $.enabled;
        this.propagationTypes = $.propagationTypes;
        this.type = $.type;
        this.unknowns = $.unknowns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementZoneRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementZoneRuleArgs $;

        public Builder() {
            $ = new ManagementZoneRuleArgs();
        }

        public Builder(ManagementZoneRuleArgs defaults) {
            $ = new ManagementZoneRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder conditions(@Nullable Output<List<ManagementZoneRuleConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        public Builder conditions(List<ManagementZoneRuleConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        public Builder conditions(ManagementZoneRuleConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder propagationTypes(@Nullable Output<List<String>> propagationTypes) {
            $.propagationTypes = propagationTypes;
            return this;
        }

        public Builder propagationTypes(List<String> propagationTypes) {
            return propagationTypes(Output.of(propagationTypes));
        }

        public Builder propagationTypes(String... propagationTypes) {
            return propagationTypes(List.of(propagationTypes));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public ManagementZoneRuleArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
