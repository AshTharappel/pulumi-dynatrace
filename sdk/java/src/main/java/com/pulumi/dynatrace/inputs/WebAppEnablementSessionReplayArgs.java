// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;


public final class WebAppEnablementSessionReplayArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebAppEnablementSessionReplayArgs Empty = new WebAppEnablementSessionReplayArgs();

    /**
     * (Field has overlap with `dynatrace.WebApplication`) [Percentage of user sessions recorded with Session Replay](https://dt-url.net/sr-cost-traffic-control). For example, if you have 50% for RUM and 50% for Session Replay, it results in 25% of sessions recorded with Session Replay.
     * 
     */
    @Import(name="costAndTrafficControl", required=true)
    private Output<Integer> costAndTrafficControl;

    /**
     * @return (Field has overlap with `dynatrace.WebApplication`) [Percentage of user sessions recorded with Session Replay](https://dt-url.net/sr-cost-traffic-control). For example, if you have 50% for RUM and 50% for Session Replay, it results in 25% of sessions recorded with Session Replay.
     * 
     */
    public Output<Integer> costAndTrafficControl() {
        return this.costAndTrafficControl;
    }

    /**
     * (Field has overlap with `dynatrace.WebApplication`) This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return (Field has overlap with `dynatrace.WebApplication`) This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    private WebAppEnablementSessionReplayArgs() {}

    private WebAppEnablementSessionReplayArgs(WebAppEnablementSessionReplayArgs $) {
        this.costAndTrafficControl = $.costAndTrafficControl;
        this.enabled = $.enabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebAppEnablementSessionReplayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebAppEnablementSessionReplayArgs $;

        public Builder() {
            $ = new WebAppEnablementSessionReplayArgs();
        }

        public Builder(WebAppEnablementSessionReplayArgs defaults) {
            $ = new WebAppEnablementSessionReplayArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param costAndTrafficControl (Field has overlap with `dynatrace.WebApplication`) [Percentage of user sessions recorded with Session Replay](https://dt-url.net/sr-cost-traffic-control). For example, if you have 50% for RUM and 50% for Session Replay, it results in 25% of sessions recorded with Session Replay.
         * 
         * @return builder
         * 
         */
        public Builder costAndTrafficControl(Output<Integer> costAndTrafficControl) {
            $.costAndTrafficControl = costAndTrafficControl;
            return this;
        }

        /**
         * @param costAndTrafficControl (Field has overlap with `dynatrace.WebApplication`) [Percentage of user sessions recorded with Session Replay](https://dt-url.net/sr-cost-traffic-control). For example, if you have 50% for RUM and 50% for Session Replay, it results in 25% of sessions recorded with Session Replay.
         * 
         * @return builder
         * 
         */
        public Builder costAndTrafficControl(Integer costAndTrafficControl) {
            return costAndTrafficControl(Output.of(costAndTrafficControl));
        }

        /**
         * @param enabled (Field has overlap with `dynatrace.WebApplication`) This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled (Field has overlap with `dynatrace.WebApplication`) This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public WebAppEnablementSessionReplayArgs build() {
            $.costAndTrafficControl = Objects.requireNonNull($.costAndTrafficControl, "expected parameter 'costAndTrafficControl' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
