// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DashboardsPresetsDashboardPresetsListArgs;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardsPresetsState extends com.pulumi.resources.ResourceArgs {

    public static final DashboardsPresetsState Empty = new DashboardsPresetsState();

    /**
     * Show selected preset to respective user group only.
     * 
     */
    @Import(name="dashboardPresetsList")
    private @Nullable Output<DashboardsPresetsDashboardPresetsListArgs> dashboardPresetsList;

    /**
     * @return Show selected preset to respective user group only.
     * 
     */
    public Optional<Output<DashboardsPresetsDashboardPresetsListArgs>> dashboardPresetsList() {
        return Optional.ofNullable(this.dashboardPresetsList);
    }

    /**
     * Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
     * 
     */
    @Import(name="enableDashboardPresets")
    private @Nullable Output<Boolean> enableDashboardPresets;

    /**
     * @return Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
     * 
     */
    public Optional<Output<Boolean>> enableDashboardPresets() {
        return Optional.ofNullable(this.enableDashboardPresets);
    }

    private DashboardsPresetsState() {}

    private DashboardsPresetsState(DashboardsPresetsState $) {
        this.dashboardPresetsList = $.dashboardPresetsList;
        this.enableDashboardPresets = $.enableDashboardPresets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardsPresetsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardsPresetsState $;

        public Builder() {
            $ = new DashboardsPresetsState();
        }

        public Builder(DashboardsPresetsState defaults) {
            $ = new DashboardsPresetsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dashboardPresetsList Show selected preset to respective user group only.
         * 
         * @return builder
         * 
         */
        public Builder dashboardPresetsList(@Nullable Output<DashboardsPresetsDashboardPresetsListArgs> dashboardPresetsList) {
            $.dashboardPresetsList = dashboardPresetsList;
            return this;
        }

        /**
         * @param dashboardPresetsList Show selected preset to respective user group only.
         * 
         * @return builder
         * 
         */
        public Builder dashboardPresetsList(DashboardsPresetsDashboardPresetsListArgs dashboardPresetsList) {
            return dashboardPresetsList(Output.of(dashboardPresetsList));
        }

        /**
         * @param enableDashboardPresets Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
         * 
         * @return builder
         * 
         */
        public Builder enableDashboardPresets(@Nullable Output<Boolean> enableDashboardPresets) {
            $.enableDashboardPresets = enableDashboardPresets;
            return this;
        }

        /**
         * @param enableDashboardPresets Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
         * 
         * @return builder
         * 
         */
        public Builder enableDashboardPresets(Boolean enableDashboardPresets) {
            return enableDashboardPresets(Output.of(enableDashboardPresets));
        }

        public DashboardsPresetsState build() {
            return $;
        }
    }

}
