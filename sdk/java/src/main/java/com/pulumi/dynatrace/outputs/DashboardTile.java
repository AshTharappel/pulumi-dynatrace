// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dynatrace.outputs.DashboardTileBounds;
import com.pulumi.dynatrace.outputs.DashboardTileFilter;
import com.pulumi.dynatrace.outputs.DashboardTileFilterConfig;
import com.pulumi.dynatrace.outputs.DashboardTileVisualizationConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardTile {
    /**
     * @return The list of Dynatrace entities, assigned to the tile
     * 
     */
    private @Nullable List<String> assignedEntities;
    /**
     * @return the position and size of a tile
     * 
     */
    private @Nullable DashboardTileBounds bounds;
    private @Nullable Boolean chartVisible;
    /**
     * @return The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`)
     * 
     */
    private @Nullable Boolean configured;
    /**
     * @return The name of the tile, set by user
     * 
     */
    private @Nullable String customName;
    /**
     * @return Include (`false&#39;) or exclude (`true`) maintenance windows from availability calculations
     * 
     */
    private @Nullable Boolean excludeMaintenanceWindows;
    /**
     * @return is filter applied to a tile. It overrides dashboard&#39;s filter
     * 
     */
    private @Nullable DashboardTileFilter filter;
    /**
     * @return the position and size of a tile
     * 
     */
    private @Nullable DashboardTileFilterConfig filterConfig;
    /**
     * @return The limit of the results, if not set will use the default value of the system
     * 
     */
    private @Nullable Integer limit;
    /**
     * @return The markdown-formatted content of the tile
     * 
     */
    private @Nullable String markdown;
    /**
     * @return The metric assigned to the tile
     * 
     */
    private @Nullable String metric;
    /**
     * @return the name of the tile
     * 
     */
    private String name;
    /**
     * @return The size of the tile name. Possible values are `small`, `medium` and `large`.
     * 
     */
    private @Nullable String nameSize;
    /**
     * @return A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
     * 
     */
    private @Nullable String query;
    /**
     * @return the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
     * 
     */
    private String tileType;
    /**
     * @return The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
     * 
     */
    private @Nullable String timeFrameShift;
    /**
     * @return The attribute `type` exists for backwards compatibilty. Usage is discouraged. You should use `visualization` instead.
     * 
     */
    private @Nullable String type;
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    private @Nullable String unknowns;
    /**
     * @return The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
     * 
     */
    private @Nullable String visualization;
    /**
     * @return Configuration of a User session query visualization tile
     * 
     */
    private @Nullable DashboardTileVisualizationConfig visualizationConfig;

    private DashboardTile() {}
    /**
     * @return The list of Dynatrace entities, assigned to the tile
     * 
     */
    public List<String> assignedEntities() {
        return this.assignedEntities == null ? List.of() : this.assignedEntities;
    }
    /**
     * @return the position and size of a tile
     * 
     */
    public Optional<DashboardTileBounds> bounds() {
        return Optional.ofNullable(this.bounds);
    }
    public Optional<Boolean> chartVisible() {
        return Optional.ofNullable(this.chartVisible);
    }
    /**
     * @return The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`)
     * 
     */
    public Optional<Boolean> configured() {
        return Optional.ofNullable(this.configured);
    }
    /**
     * @return The name of the tile, set by user
     * 
     */
    public Optional<String> customName() {
        return Optional.ofNullable(this.customName);
    }
    /**
     * @return Include (`false&#39;) or exclude (`true`) maintenance windows from availability calculations
     * 
     */
    public Optional<Boolean> excludeMaintenanceWindows() {
        return Optional.ofNullable(this.excludeMaintenanceWindows);
    }
    /**
     * @return is filter applied to a tile. It overrides dashboard&#39;s filter
     * 
     */
    public Optional<DashboardTileFilter> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return the position and size of a tile
     * 
     */
    public Optional<DashboardTileFilterConfig> filterConfig() {
        return Optional.ofNullable(this.filterConfig);
    }
    /**
     * @return The limit of the results, if not set will use the default value of the system
     * 
     */
    public Optional<Integer> limit() {
        return Optional.ofNullable(this.limit);
    }
    /**
     * @return The markdown-formatted content of the tile
     * 
     */
    public Optional<String> markdown() {
        return Optional.ofNullable(this.markdown);
    }
    /**
     * @return The metric assigned to the tile
     * 
     */
    public Optional<String> metric() {
        return Optional.ofNullable(this.metric);
    }
    /**
     * @return the name of the tile
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The size of the tile name. Possible values are `small`, `medium` and `large`.
     * 
     */
    public Optional<String> nameSize() {
        return Optional.ofNullable(this.nameSize);
    }
    /**
     * @return A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
     * 
     */
    public Optional<String> query() {
        return Optional.ofNullable(this.query);
    }
    /**
     * @return the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
     * 
     */
    public String tileType() {
        return this.tileType;
    }
    /**
     * @return The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
     * 
     */
    public Optional<String> timeFrameShift() {
        return Optional.ofNullable(this.timeFrameShift);
    }
    /**
     * @return The attribute `type` exists for backwards compatibilty. Usage is discouraged. You should use `visualization` instead.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<String> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }
    /**
     * @return The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
     * 
     */
    public Optional<String> visualization() {
        return Optional.ofNullable(this.visualization);
    }
    /**
     * @return Configuration of a User session query visualization tile
     * 
     */
    public Optional<DashboardTileVisualizationConfig> visualizationConfig() {
        return Optional.ofNullable(this.visualizationConfig);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardTile defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> assignedEntities;
        private @Nullable DashboardTileBounds bounds;
        private @Nullable Boolean chartVisible;
        private @Nullable Boolean configured;
        private @Nullable String customName;
        private @Nullable Boolean excludeMaintenanceWindows;
        private @Nullable DashboardTileFilter filter;
        private @Nullable DashboardTileFilterConfig filterConfig;
        private @Nullable Integer limit;
        private @Nullable String markdown;
        private @Nullable String metric;
        private String name;
        private @Nullable String nameSize;
        private @Nullable String query;
        private String tileType;
        private @Nullable String timeFrameShift;
        private @Nullable String type;
        private @Nullable String unknowns;
        private @Nullable String visualization;
        private @Nullable DashboardTileVisualizationConfig visualizationConfig;
        public Builder() {}
        public Builder(DashboardTile defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignedEntities = defaults.assignedEntities;
    	      this.bounds = defaults.bounds;
    	      this.chartVisible = defaults.chartVisible;
    	      this.configured = defaults.configured;
    	      this.customName = defaults.customName;
    	      this.excludeMaintenanceWindows = defaults.excludeMaintenanceWindows;
    	      this.filter = defaults.filter;
    	      this.filterConfig = defaults.filterConfig;
    	      this.limit = defaults.limit;
    	      this.markdown = defaults.markdown;
    	      this.metric = defaults.metric;
    	      this.name = defaults.name;
    	      this.nameSize = defaults.nameSize;
    	      this.query = defaults.query;
    	      this.tileType = defaults.tileType;
    	      this.timeFrameShift = defaults.timeFrameShift;
    	      this.type = defaults.type;
    	      this.unknowns = defaults.unknowns;
    	      this.visualization = defaults.visualization;
    	      this.visualizationConfig = defaults.visualizationConfig;
        }

        @CustomType.Setter
        public Builder assignedEntities(@Nullable List<String> assignedEntities) {
            this.assignedEntities = assignedEntities;
            return this;
        }
        public Builder assignedEntities(String... assignedEntities) {
            return assignedEntities(List.of(assignedEntities));
        }
        @CustomType.Setter
        public Builder bounds(@Nullable DashboardTileBounds bounds) {
            this.bounds = bounds;
            return this;
        }
        @CustomType.Setter
        public Builder chartVisible(@Nullable Boolean chartVisible) {
            this.chartVisible = chartVisible;
            return this;
        }
        @CustomType.Setter
        public Builder configured(@Nullable Boolean configured) {
            this.configured = configured;
            return this;
        }
        @CustomType.Setter
        public Builder customName(@Nullable String customName) {
            this.customName = customName;
            return this;
        }
        @CustomType.Setter
        public Builder excludeMaintenanceWindows(@Nullable Boolean excludeMaintenanceWindows) {
            this.excludeMaintenanceWindows = excludeMaintenanceWindows;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable DashboardTileFilter filter) {
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder filterConfig(@Nullable DashboardTileFilterConfig filterConfig) {
            this.filterConfig = filterConfig;
            return this;
        }
        @CustomType.Setter
        public Builder limit(@Nullable Integer limit) {
            this.limit = limit;
            return this;
        }
        @CustomType.Setter
        public Builder markdown(@Nullable String markdown) {
            this.markdown = markdown;
            return this;
        }
        @CustomType.Setter
        public Builder metric(@Nullable String metric) {
            this.metric = metric;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nameSize(@Nullable String nameSize) {
            this.nameSize = nameSize;
            return this;
        }
        @CustomType.Setter
        public Builder query(@Nullable String query) {
            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder tileType(String tileType) {
            this.tileType = Objects.requireNonNull(tileType);
            return this;
        }
        @CustomType.Setter
        public Builder timeFrameShift(@Nullable String timeFrameShift) {
            this.timeFrameShift = timeFrameShift;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder unknowns(@Nullable String unknowns) {
            this.unknowns = unknowns;
            return this;
        }
        @CustomType.Setter
        public Builder visualization(@Nullable String visualization) {
            this.visualization = visualization;
            return this;
        }
        @CustomType.Setter
        public Builder visualizationConfig(@Nullable DashboardTileVisualizationConfig visualizationConfig) {
            this.visualizationConfig = visualizationConfig;
            return this;
        }
        public DashboardTile build() {
            final var o = new DashboardTile();
            o.assignedEntities = assignedEntities;
            o.bounds = bounds;
            o.chartVisible = chartVisible;
            o.configured = configured;
            o.customName = customName;
            o.excludeMaintenanceWindows = excludeMaintenanceWindows;
            o.filter = filter;
            o.filterConfig = filterConfig;
            o.limit = limit;
            o.markdown = markdown;
            o.metric = metric;
            o.name = name;
            o.nameSize = nameSize;
            o.query = query;
            o.tileType = tileType;
            o.timeFrameShift = timeFrameShift;
            o.type = type;
            o.unknowns = unknowns;
            o.visualization = visualization;
            o.visualizationConfig = visualizationConfig;
            return o;
        }
    }
}
