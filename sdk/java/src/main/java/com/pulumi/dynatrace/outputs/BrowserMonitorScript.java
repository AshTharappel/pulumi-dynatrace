// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dynatrace.outputs.BrowserMonitorScriptConfiguration;
import com.pulumi.dynatrace.outputs.BrowserMonitorScriptEvents;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BrowserMonitorScript {
    /**
     * @return The setup of the monitor
     * 
     */
    private @Nullable BrowserMonitorScriptConfiguration configuration;
    /**
     * @return Steps of the clickpath—the first step must always be of the `navigate` type
     * 
     */
    private @Nullable BrowserMonitorScriptEvents events;
    /**
     * @return The type of monitor. Possible values are `clickpath` for clickpath monitors and `availability` for single-URL browser monitors. These monitors are only allowed to have one event of the `navigate` type
     * 
     */
    private String type;

    private BrowserMonitorScript() {}
    /**
     * @return The setup of the monitor
     * 
     */
    public Optional<BrowserMonitorScriptConfiguration> configuration() {
        return Optional.ofNullable(this.configuration);
    }
    /**
     * @return Steps of the clickpath—the first step must always be of the `navigate` type
     * 
     */
    public Optional<BrowserMonitorScriptEvents> events() {
        return Optional.ofNullable(this.events);
    }
    /**
     * @return The type of monitor. Possible values are `clickpath` for clickpath monitors and `availability` for single-URL browser monitors. These monitors are only allowed to have one event of the `navigate` type
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BrowserMonitorScript defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable BrowserMonitorScriptConfiguration configuration;
        private @Nullable BrowserMonitorScriptEvents events;
        private String type;
        public Builder() {}
        public Builder(BrowserMonitorScript defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configuration = defaults.configuration;
    	      this.events = defaults.events;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder configuration(@Nullable BrowserMonitorScriptConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        @CustomType.Setter
        public Builder events(@Nullable BrowserMonitorScriptEvents events) {
            this.events = events;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public BrowserMonitorScript build() {
            final var o = new BrowserMonitorScript();
            o.configuration = configuration;
            o.events = events;
            o.type = type;
            return o;
        }
    }
}
