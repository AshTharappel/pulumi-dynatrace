// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IamUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final IamUserArgs Empty = new IamUserArgs();

    @Import(name="email", required=true)
    private Output<String> email;

    public Output<String> email() {
        return this.email;
    }

    @Import(name="groups")
    private @Nullable Output<List<String>> groups;

    public Optional<Output<List<String>>> groups() {
        return Optional.ofNullable(this.groups);
    }

    private IamUserArgs() {}

    private IamUserArgs(IamUserArgs $) {
        this.email = $.email;
        this.groups = $.groups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IamUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IamUserArgs $;

        public Builder() {
            $ = new IamUserArgs();
        }

        public Builder(IamUserArgs defaults) {
            $ = new IamUserArgs(Objects.requireNonNull(defaults));
        }

        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        public Builder email(String email) {
            return email(Output.of(email));
        }

        public Builder groups(@Nullable Output<List<String>> groups) {
            $.groups = groups;
            return this;
        }

        public Builder groups(List<String> groups) {
            return groups(Output.of(groups));
        }

        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }

        public IamUserArgs build() {
            $.email = Objects.requireNonNull($.email, "expected parameter 'email' to be non-null");
            return $;
        }
    }

}
