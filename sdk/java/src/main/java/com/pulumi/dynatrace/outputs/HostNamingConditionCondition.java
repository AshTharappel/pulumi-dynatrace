// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionApplicationType;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionApplicationTypeComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionAzureComputeMode;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionAzureComputeModeComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionAzureSkuComparision;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionAzureSkus;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionBaseComparisonBasic;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionBaseConditionKey;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionBitness;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionBitnessComparision;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionCloudType;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionCloudTypeComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionCustomApplicationType;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionCustomApplicationTypeComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionCustomHostMetadata;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionCustomHostMetadataConditionKey;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionCustomProcessMetadata;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionCustomProcessMetadataConditionKey;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionDatabaseTopology;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionDatabaseTopologyComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionDcrumDecoder;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionDcrumDecoderComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionEntity;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionEntityIdComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionHostTech;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionHypervisor;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionHypervisorTypeComparision;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionIndexedName;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionIndexedNameComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionIndexedString;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionIndexedStringComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionIndexedTag;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionIndexedTagComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionInteger;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionIntegerComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionIpaddress;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionIpaddressComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionKey;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionMobilePlatform;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionMobilePlatformComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionOsArch;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionOsType;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionOsarchitectureComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionOstypeComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionPaasType;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionPaasTypeComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionProcessMetadata;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionProcessMetadataConditionKey;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionServiceTopology;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionServiceTopologyComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionServiceType;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionServiceTypeComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionSimpleHostTechComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionSimpleTechComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionString;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionStringComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionStringConditionKey;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionStringKey;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionSyntheticEngine;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionSyntheticEngineTypeComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionTag;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionTagComparison;
import com.pulumi.dynatrace.outputs.HostNamingConditionConditionTech;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HostNamingConditionCondition {
    /**
     * @deprecated
     * You should use &#39;application_type&#39; instead of &#39;application_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionApplicationTypeComparison> applicationTypeComparisons;
    private @Nullable List<HostNamingConditionConditionApplicationType> applicationTypes;
    private @Nullable List<HostNamingConditionConditionAzureComputeModeComparison> azureComputeModeComparisons;
    /**
     * @deprecated
     * You should use &#39;azure_compute_mode&#39; instead of &#39;azure_compute_mode_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionAzureComputeMode> azureComputeModes;
    /**
     * @deprecated
     * You should use &#39;azure_sku&#39; instead of &#39;azure_sku_comparision&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionAzureSkuComparision> azureSkuComparisions;
    private @Nullable List<HostNamingConditionConditionAzureSkus> azureSkus;
    /**
     * @deprecated
     * You should use &#39;comparison&#39; instead of &#39;base_comparison_basic&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionBaseComparisonBasic> baseComparisonBasics;
    /**
     * @deprecated
     * &#39;base_condition_key&#39; is deprecated. You should use &#39;key&#39;
     * 
     */
    @Deprecated /* 'base_condition_key' is deprecated. You should use 'key' */
    private @Nullable List<HostNamingConditionConditionBaseConditionKey> baseConditionKeys;
    /**
     * @deprecated
     * You should use &#39;bitness&#39; instead of &#39;bitness_comparision&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionBitnessComparision> bitnessComparisions;
    private @Nullable List<HostNamingConditionConditionBitness> bitnesses;
    /**
     * @deprecated
     * You should use &#39;cloud_type&#39; instead of &#39;cloud_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionCloudTypeComparison> cloudTypeComparisons;
    private @Nullable List<HostNamingConditionConditionCloudType> cloudTypes;
    private @Nullable List<HostNamingConditionConditionComparison> comparisons;
    /**
     * @deprecated
     * You should use &#39;custom_application_type&#39; instead of &#39;custom_application_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionCustomApplicationTypeComparison> customApplicationTypeComparisons;
    private @Nullable List<HostNamingConditionConditionCustomApplicationType> customApplicationTypes;
    /**
     * @deprecated
     * &#39;custom_host_metadata_condition_key&#39; is deprecated. You should use &#39;custom_host_metadata&#39;
     * 
     */
    @Deprecated /* 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata' */
    private @Nullable List<HostNamingConditionConditionCustomHostMetadataConditionKey> customHostMetadataConditionKeys;
    private @Nullable List<HostNamingConditionConditionCustomHostMetadata> customHostMetadatas;
    /**
     * @deprecated
     * &#39;custom_process_metadata_condition_key&#39; is deprecated. You should use &#39;custom_process_metadata&#39;
     * 
     */
    @Deprecated /* 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata' */
    private @Nullable List<HostNamingConditionConditionCustomProcessMetadataConditionKey> customProcessMetadataConditionKeys;
    private @Nullable List<HostNamingConditionConditionCustomProcessMetadata> customProcessMetadatas;
    private @Nullable List<HostNamingConditionConditionDatabaseTopology> databaseTopologies;
    /**
     * @deprecated
     * You should use &#39;database_topology&#39; instead of &#39;database_topology_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionDatabaseTopologyComparison> databaseTopologyComparisons;
    /**
     * @deprecated
     * You should use &#39;dcrum_decoder&#39; instead of &#39;dcrum_decoder_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionDcrumDecoderComparison> dcrumDecoderComparisons;
    private @Nullable List<HostNamingConditionConditionDcrumDecoder> dcrumDecoders;
    private @Nullable List<HostNamingConditionConditionEntity> entities;
    /**
     * @deprecated
     * You should use &#39;entity&#39; instead of &#39;entity_id_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionEntityIdComparison> entityIdComparisons;
    private @Nullable List<HostNamingConditionConditionHostTech> hostTeches;
    /**
     * @deprecated
     * `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     * 
     */
    @Deprecated /* `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead */
    private @Nullable List<HostNamingConditionConditionHypervisorTypeComparision> hypervisorTypeComparisions;
    private @Nullable List<HostNamingConditionConditionHypervisor> hypervisors;
    /**
     * @deprecated
     * You should use &#39;indexed_name&#39; instead of &#39;indexed_name_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionIndexedNameComparison> indexedNameComparisons;
    private @Nullable List<HostNamingConditionConditionIndexedName> indexedNames;
    /**
     * @deprecated
     * You should use &#39;indexed_string&#39; instead of &#39;indexed_string_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionIndexedStringComparison> indexedStringComparisons;
    private @Nullable List<HostNamingConditionConditionIndexedString> indexedStrings;
    /**
     * @deprecated
     * You should use &#39;indexed_tag&#39; instead of &#39;indexed_tag_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionIndexedTagComparison> indexedTagComparisons;
    private @Nullable List<HostNamingConditionConditionIndexedTag> indexedTags;
    /**
     * @deprecated
     * You should use &#39;integer&#39; instead of &#39;integer_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionIntegerComparison> integerComparisons;
    private @Nullable List<HostNamingConditionConditionInteger> integers;
    /**
     * @deprecated
     * You should use &#39;ipaddress&#39; instead of &#39;ipaddress_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionIpaddressComparison> ipaddressComparisons;
    private @Nullable List<HostNamingConditionConditionIpaddress> ipaddresses;
    private @Nullable List<HostNamingConditionConditionKey> keys;
    /**
     * @deprecated
     * You should use &#39;mobile_platform&#39; instead of &#39;mobile_platform_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionMobilePlatformComparison> mobilePlatformComparisons;
    private @Nullable List<HostNamingConditionConditionMobilePlatform> mobilePlatforms;
    private @Nullable List<HostNamingConditionConditionOsArch> osArches;
    private @Nullable List<HostNamingConditionConditionOsType> osTypes;
    /**
     * @deprecated
     * You should use &#39;os_arch&#39; instead of &#39;osarchitecture_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionOsarchitectureComparison> osarchitectureComparisons;
    /**
     * @deprecated
     * You should use &#39;os_type&#39; instead of &#39;ostype_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionOstypeComparison> ostypeComparisons;
    /**
     * @deprecated
     * You should use &#39;paas_type&#39; instead of &#39;paas_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionPaasTypeComparison> paasTypeComparisons;
    private @Nullable List<HostNamingConditionConditionPaasType> paasTypes;
    /**
     * @deprecated
     * &#39;process_metadata_condition_key&#39; is deprecated. You should use &#39;process_metadata&#39;
     * 
     */
    @Deprecated /* 'process_metadata_condition_key' is deprecated. You should use 'process_metadata' */
    private @Nullable List<HostNamingConditionConditionProcessMetadataConditionKey> processMetadataConditionKeys;
    private @Nullable List<HostNamingConditionConditionProcessMetadata> processMetadatas;
    private @Nullable List<HostNamingConditionConditionServiceTopology> serviceTopologies;
    /**
     * @deprecated
     * You should use &#39;service_topology&#39; instead of &#39;service_topology_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionServiceTopologyComparison> serviceTopologyComparisons;
    /**
     * @deprecated
     * You should use &#39;service_type&#39; instead of &#39;service_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionServiceTypeComparison> serviceTypeComparisons;
    private @Nullable List<HostNamingConditionConditionServiceType> serviceTypes;
    /**
     * @deprecated
     * You should use &#39;host_tech&#39; instead of &#39;simple_host_tech_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionSimpleHostTechComparison> simpleHostTechComparisons;
    /**
     * @deprecated
     * You should use &#39;tech&#39; instead of &#39;simple_tech_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionSimpleTechComparison> simpleTechComparisons;
    /**
     * @deprecated
     * You should use &#39;string&#39; instead of &#39;string_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionStringComparison> stringComparisons;
    /**
     * @deprecated
     * &#39;string_condition_key&#39; is deprecated. You should use &#39;string_key&#39;
     * 
     */
    @Deprecated /* 'string_condition_key' is deprecated. You should use 'string_key' */
    private @Nullable List<HostNamingConditionConditionStringConditionKey> stringConditionKeys;
    private @Nullable List<HostNamingConditionConditionStringKey> stringKeys;
    private @Nullable List<HostNamingConditionConditionString> strings;
    /**
     * @deprecated
     * You should use &#39;synthetic_engine&#39; instead of &#39;synthetic_engine_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionSyntheticEngineTypeComparison> syntheticEngineTypeComparisons;
    private @Nullable List<HostNamingConditionConditionSyntheticEngine> syntheticEngines;
    /**
     * @deprecated
     * You should use &#39;tag&#39; instead of &#39;tag_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility. */
    private @Nullable List<HostNamingConditionConditionTagComparison> tagComparisons;
    private @Nullable List<HostNamingConditionConditionTag> tags;
    private @Nullable List<HostNamingConditionConditionTech> teches;
    private @Nullable String unknowns;

    private HostNamingConditionCondition() {}
    /**
     * @deprecated
     * You should use &#39;application_type&#39; instead of &#39;application_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionApplicationTypeComparison> applicationTypeComparisons() {
        return this.applicationTypeComparisons == null ? List.of() : this.applicationTypeComparisons;
    }
    public List<HostNamingConditionConditionApplicationType> applicationTypes() {
        return this.applicationTypes == null ? List.of() : this.applicationTypes;
    }
    public List<HostNamingConditionConditionAzureComputeModeComparison> azureComputeModeComparisons() {
        return this.azureComputeModeComparisons == null ? List.of() : this.azureComputeModeComparisons;
    }
    /**
     * @deprecated
     * You should use &#39;azure_compute_mode&#39; instead of &#39;azure_compute_mode_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionAzureComputeMode> azureComputeModes() {
        return this.azureComputeModes == null ? List.of() : this.azureComputeModes;
    }
    /**
     * @deprecated
     * You should use &#39;azure_sku&#39; instead of &#39;azure_sku_comparision&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionAzureSkuComparision> azureSkuComparisions() {
        return this.azureSkuComparisions == null ? List.of() : this.azureSkuComparisions;
    }
    public List<HostNamingConditionConditionAzureSkus> azureSkus() {
        return this.azureSkus == null ? List.of() : this.azureSkus;
    }
    /**
     * @deprecated
     * You should use &#39;comparison&#39; instead of &#39;base_comparison_basic&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionBaseComparisonBasic> baseComparisonBasics() {
        return this.baseComparisonBasics == null ? List.of() : this.baseComparisonBasics;
    }
    /**
     * @deprecated
     * &#39;base_condition_key&#39; is deprecated. You should use &#39;key&#39;
     * 
     */
    @Deprecated /* 'base_condition_key' is deprecated. You should use 'key' */
    public List<HostNamingConditionConditionBaseConditionKey> baseConditionKeys() {
        return this.baseConditionKeys == null ? List.of() : this.baseConditionKeys;
    }
    /**
     * @deprecated
     * You should use &#39;bitness&#39; instead of &#39;bitness_comparision&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionBitnessComparision> bitnessComparisions() {
        return this.bitnessComparisions == null ? List.of() : this.bitnessComparisions;
    }
    public List<HostNamingConditionConditionBitness> bitnesses() {
        return this.bitnesses == null ? List.of() : this.bitnesses;
    }
    /**
     * @deprecated
     * You should use &#39;cloud_type&#39; instead of &#39;cloud_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionCloudTypeComparison> cloudTypeComparisons() {
        return this.cloudTypeComparisons == null ? List.of() : this.cloudTypeComparisons;
    }
    public List<HostNamingConditionConditionCloudType> cloudTypes() {
        return this.cloudTypes == null ? List.of() : this.cloudTypes;
    }
    public List<HostNamingConditionConditionComparison> comparisons() {
        return this.comparisons == null ? List.of() : this.comparisons;
    }
    /**
     * @deprecated
     * You should use &#39;custom_application_type&#39; instead of &#39;custom_application_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionCustomApplicationTypeComparison> customApplicationTypeComparisons() {
        return this.customApplicationTypeComparisons == null ? List.of() : this.customApplicationTypeComparisons;
    }
    public List<HostNamingConditionConditionCustomApplicationType> customApplicationTypes() {
        return this.customApplicationTypes == null ? List.of() : this.customApplicationTypes;
    }
    /**
     * @deprecated
     * &#39;custom_host_metadata_condition_key&#39; is deprecated. You should use &#39;custom_host_metadata&#39;
     * 
     */
    @Deprecated /* 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata' */
    public List<HostNamingConditionConditionCustomHostMetadataConditionKey> customHostMetadataConditionKeys() {
        return this.customHostMetadataConditionKeys == null ? List.of() : this.customHostMetadataConditionKeys;
    }
    public List<HostNamingConditionConditionCustomHostMetadata> customHostMetadatas() {
        return this.customHostMetadatas == null ? List.of() : this.customHostMetadatas;
    }
    /**
     * @deprecated
     * &#39;custom_process_metadata_condition_key&#39; is deprecated. You should use &#39;custom_process_metadata&#39;
     * 
     */
    @Deprecated /* 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata' */
    public List<HostNamingConditionConditionCustomProcessMetadataConditionKey> customProcessMetadataConditionKeys() {
        return this.customProcessMetadataConditionKeys == null ? List.of() : this.customProcessMetadataConditionKeys;
    }
    public List<HostNamingConditionConditionCustomProcessMetadata> customProcessMetadatas() {
        return this.customProcessMetadatas == null ? List.of() : this.customProcessMetadatas;
    }
    public List<HostNamingConditionConditionDatabaseTopology> databaseTopologies() {
        return this.databaseTopologies == null ? List.of() : this.databaseTopologies;
    }
    /**
     * @deprecated
     * You should use &#39;database_topology&#39; instead of &#39;database_topology_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionDatabaseTopologyComparison> databaseTopologyComparisons() {
        return this.databaseTopologyComparisons == null ? List.of() : this.databaseTopologyComparisons;
    }
    /**
     * @deprecated
     * You should use &#39;dcrum_decoder&#39; instead of &#39;dcrum_decoder_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionDcrumDecoderComparison> dcrumDecoderComparisons() {
        return this.dcrumDecoderComparisons == null ? List.of() : this.dcrumDecoderComparisons;
    }
    public List<HostNamingConditionConditionDcrumDecoder> dcrumDecoders() {
        return this.dcrumDecoders == null ? List.of() : this.dcrumDecoders;
    }
    public List<HostNamingConditionConditionEntity> entities() {
        return this.entities == null ? List.of() : this.entities;
    }
    /**
     * @deprecated
     * You should use &#39;entity&#39; instead of &#39;entity_id_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionEntityIdComparison> entityIdComparisons() {
        return this.entityIdComparisons == null ? List.of() : this.entityIdComparisons;
    }
    public List<HostNamingConditionConditionHostTech> hostTeches() {
        return this.hostTeches == null ? List.of() : this.hostTeches;
    }
    /**
     * @deprecated
     * `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     * 
     */
    @Deprecated /* `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead */
    public List<HostNamingConditionConditionHypervisorTypeComparision> hypervisorTypeComparisions() {
        return this.hypervisorTypeComparisions == null ? List.of() : this.hypervisorTypeComparisions;
    }
    public List<HostNamingConditionConditionHypervisor> hypervisors() {
        return this.hypervisors == null ? List.of() : this.hypervisors;
    }
    /**
     * @deprecated
     * You should use &#39;indexed_name&#39; instead of &#39;indexed_name_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionIndexedNameComparison> indexedNameComparisons() {
        return this.indexedNameComparisons == null ? List.of() : this.indexedNameComparisons;
    }
    public List<HostNamingConditionConditionIndexedName> indexedNames() {
        return this.indexedNames == null ? List.of() : this.indexedNames;
    }
    /**
     * @deprecated
     * You should use &#39;indexed_string&#39; instead of &#39;indexed_string_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionIndexedStringComparison> indexedStringComparisons() {
        return this.indexedStringComparisons == null ? List.of() : this.indexedStringComparisons;
    }
    public List<HostNamingConditionConditionIndexedString> indexedStrings() {
        return this.indexedStrings == null ? List.of() : this.indexedStrings;
    }
    /**
     * @deprecated
     * You should use &#39;indexed_tag&#39; instead of &#39;indexed_tag_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionIndexedTagComparison> indexedTagComparisons() {
        return this.indexedTagComparisons == null ? List.of() : this.indexedTagComparisons;
    }
    public List<HostNamingConditionConditionIndexedTag> indexedTags() {
        return this.indexedTags == null ? List.of() : this.indexedTags;
    }
    /**
     * @deprecated
     * You should use &#39;integer&#39; instead of &#39;integer_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionIntegerComparison> integerComparisons() {
        return this.integerComparisons == null ? List.of() : this.integerComparisons;
    }
    public List<HostNamingConditionConditionInteger> integers() {
        return this.integers == null ? List.of() : this.integers;
    }
    /**
     * @deprecated
     * You should use &#39;ipaddress&#39; instead of &#39;ipaddress_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionIpaddressComparison> ipaddressComparisons() {
        return this.ipaddressComparisons == null ? List.of() : this.ipaddressComparisons;
    }
    public List<HostNamingConditionConditionIpaddress> ipaddresses() {
        return this.ipaddresses == null ? List.of() : this.ipaddresses;
    }
    public List<HostNamingConditionConditionKey> keys() {
        return this.keys == null ? List.of() : this.keys;
    }
    /**
     * @deprecated
     * You should use &#39;mobile_platform&#39; instead of &#39;mobile_platform_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionMobilePlatformComparison> mobilePlatformComparisons() {
        return this.mobilePlatformComparisons == null ? List.of() : this.mobilePlatformComparisons;
    }
    public List<HostNamingConditionConditionMobilePlatform> mobilePlatforms() {
        return this.mobilePlatforms == null ? List.of() : this.mobilePlatforms;
    }
    public List<HostNamingConditionConditionOsArch> osArches() {
        return this.osArches == null ? List.of() : this.osArches;
    }
    public List<HostNamingConditionConditionOsType> osTypes() {
        return this.osTypes == null ? List.of() : this.osTypes;
    }
    /**
     * @deprecated
     * You should use &#39;os_arch&#39; instead of &#39;osarchitecture_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionOsarchitectureComparison> osarchitectureComparisons() {
        return this.osarchitectureComparisons == null ? List.of() : this.osarchitectureComparisons;
    }
    /**
     * @deprecated
     * You should use &#39;os_type&#39; instead of &#39;ostype_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionOstypeComparison> ostypeComparisons() {
        return this.ostypeComparisons == null ? List.of() : this.ostypeComparisons;
    }
    /**
     * @deprecated
     * You should use &#39;paas_type&#39; instead of &#39;paas_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionPaasTypeComparison> paasTypeComparisons() {
        return this.paasTypeComparisons == null ? List.of() : this.paasTypeComparisons;
    }
    public List<HostNamingConditionConditionPaasType> paasTypes() {
        return this.paasTypes == null ? List.of() : this.paasTypes;
    }
    /**
     * @deprecated
     * &#39;process_metadata_condition_key&#39; is deprecated. You should use &#39;process_metadata&#39;
     * 
     */
    @Deprecated /* 'process_metadata_condition_key' is deprecated. You should use 'process_metadata' */
    public List<HostNamingConditionConditionProcessMetadataConditionKey> processMetadataConditionKeys() {
        return this.processMetadataConditionKeys == null ? List.of() : this.processMetadataConditionKeys;
    }
    public List<HostNamingConditionConditionProcessMetadata> processMetadatas() {
        return this.processMetadatas == null ? List.of() : this.processMetadatas;
    }
    public List<HostNamingConditionConditionServiceTopology> serviceTopologies() {
        return this.serviceTopologies == null ? List.of() : this.serviceTopologies;
    }
    /**
     * @deprecated
     * You should use &#39;service_topology&#39; instead of &#39;service_topology_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionServiceTopologyComparison> serviceTopologyComparisons() {
        return this.serviceTopologyComparisons == null ? List.of() : this.serviceTopologyComparisons;
    }
    /**
     * @deprecated
     * You should use &#39;service_type&#39; instead of &#39;service_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionServiceTypeComparison> serviceTypeComparisons() {
        return this.serviceTypeComparisons == null ? List.of() : this.serviceTypeComparisons;
    }
    public List<HostNamingConditionConditionServiceType> serviceTypes() {
        return this.serviceTypes == null ? List.of() : this.serviceTypes;
    }
    /**
     * @deprecated
     * You should use &#39;host_tech&#39; instead of &#39;simple_host_tech_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionSimpleHostTechComparison> simpleHostTechComparisons() {
        return this.simpleHostTechComparisons == null ? List.of() : this.simpleHostTechComparisons;
    }
    /**
     * @deprecated
     * You should use &#39;tech&#39; instead of &#39;simple_tech_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionSimpleTechComparison> simpleTechComparisons() {
        return this.simpleTechComparisons == null ? List.of() : this.simpleTechComparisons;
    }
    /**
     * @deprecated
     * You should use &#39;string&#39; instead of &#39;string_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionStringComparison> stringComparisons() {
        return this.stringComparisons == null ? List.of() : this.stringComparisons;
    }
    /**
     * @deprecated
     * &#39;string_condition_key&#39; is deprecated. You should use &#39;string_key&#39;
     * 
     */
    @Deprecated /* 'string_condition_key' is deprecated. You should use 'string_key' */
    public List<HostNamingConditionConditionStringConditionKey> stringConditionKeys() {
        return this.stringConditionKeys == null ? List.of() : this.stringConditionKeys;
    }
    public List<HostNamingConditionConditionStringKey> stringKeys() {
        return this.stringKeys == null ? List.of() : this.stringKeys;
    }
    public List<HostNamingConditionConditionString> strings() {
        return this.strings == null ? List.of() : this.strings;
    }
    /**
     * @deprecated
     * You should use &#39;synthetic_engine&#39; instead of &#39;synthetic_engine_type_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionSyntheticEngineTypeComparison> syntheticEngineTypeComparisons() {
        return this.syntheticEngineTypeComparisons == null ? List.of() : this.syntheticEngineTypeComparisons;
    }
    public List<HostNamingConditionConditionSyntheticEngine> syntheticEngines() {
        return this.syntheticEngines == null ? List.of() : this.syntheticEngines;
    }
    /**
     * @deprecated
     * You should use &#39;tag&#39; instead of &#39;tag_comparison&#39;. This attribute still exists for backwards compatibility.
     * 
     */
    @Deprecated /* You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility. */
    public List<HostNamingConditionConditionTagComparison> tagComparisons() {
        return this.tagComparisons == null ? List.of() : this.tagComparisons;
    }
    public List<HostNamingConditionConditionTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    public List<HostNamingConditionConditionTech> teches() {
        return this.teches == null ? List.of() : this.teches;
    }
    public Optional<String> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HostNamingConditionCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<HostNamingConditionConditionApplicationTypeComparison> applicationTypeComparisons;
        private @Nullable List<HostNamingConditionConditionApplicationType> applicationTypes;
        private @Nullable List<HostNamingConditionConditionAzureComputeModeComparison> azureComputeModeComparisons;
        private @Nullable List<HostNamingConditionConditionAzureComputeMode> azureComputeModes;
        private @Nullable List<HostNamingConditionConditionAzureSkuComparision> azureSkuComparisions;
        private @Nullable List<HostNamingConditionConditionAzureSkus> azureSkus;
        private @Nullable List<HostNamingConditionConditionBaseComparisonBasic> baseComparisonBasics;
        private @Nullable List<HostNamingConditionConditionBaseConditionKey> baseConditionKeys;
        private @Nullable List<HostNamingConditionConditionBitnessComparision> bitnessComparisions;
        private @Nullable List<HostNamingConditionConditionBitness> bitnesses;
        private @Nullable List<HostNamingConditionConditionCloudTypeComparison> cloudTypeComparisons;
        private @Nullable List<HostNamingConditionConditionCloudType> cloudTypes;
        private @Nullable List<HostNamingConditionConditionComparison> comparisons;
        private @Nullable List<HostNamingConditionConditionCustomApplicationTypeComparison> customApplicationTypeComparisons;
        private @Nullable List<HostNamingConditionConditionCustomApplicationType> customApplicationTypes;
        private @Nullable List<HostNamingConditionConditionCustomHostMetadataConditionKey> customHostMetadataConditionKeys;
        private @Nullable List<HostNamingConditionConditionCustomHostMetadata> customHostMetadatas;
        private @Nullable List<HostNamingConditionConditionCustomProcessMetadataConditionKey> customProcessMetadataConditionKeys;
        private @Nullable List<HostNamingConditionConditionCustomProcessMetadata> customProcessMetadatas;
        private @Nullable List<HostNamingConditionConditionDatabaseTopology> databaseTopologies;
        private @Nullable List<HostNamingConditionConditionDatabaseTopologyComparison> databaseTopologyComparisons;
        private @Nullable List<HostNamingConditionConditionDcrumDecoderComparison> dcrumDecoderComparisons;
        private @Nullable List<HostNamingConditionConditionDcrumDecoder> dcrumDecoders;
        private @Nullable List<HostNamingConditionConditionEntity> entities;
        private @Nullable List<HostNamingConditionConditionEntityIdComparison> entityIdComparisons;
        private @Nullable List<HostNamingConditionConditionHostTech> hostTeches;
        private @Nullable List<HostNamingConditionConditionHypervisorTypeComparision> hypervisorTypeComparisions;
        private @Nullable List<HostNamingConditionConditionHypervisor> hypervisors;
        private @Nullable List<HostNamingConditionConditionIndexedNameComparison> indexedNameComparisons;
        private @Nullable List<HostNamingConditionConditionIndexedName> indexedNames;
        private @Nullable List<HostNamingConditionConditionIndexedStringComparison> indexedStringComparisons;
        private @Nullable List<HostNamingConditionConditionIndexedString> indexedStrings;
        private @Nullable List<HostNamingConditionConditionIndexedTagComparison> indexedTagComparisons;
        private @Nullable List<HostNamingConditionConditionIndexedTag> indexedTags;
        private @Nullable List<HostNamingConditionConditionIntegerComparison> integerComparisons;
        private @Nullable List<HostNamingConditionConditionInteger> integers;
        private @Nullable List<HostNamingConditionConditionIpaddressComparison> ipaddressComparisons;
        private @Nullable List<HostNamingConditionConditionIpaddress> ipaddresses;
        private @Nullable List<HostNamingConditionConditionKey> keys;
        private @Nullable List<HostNamingConditionConditionMobilePlatformComparison> mobilePlatformComparisons;
        private @Nullable List<HostNamingConditionConditionMobilePlatform> mobilePlatforms;
        private @Nullable List<HostNamingConditionConditionOsArch> osArches;
        private @Nullable List<HostNamingConditionConditionOsType> osTypes;
        private @Nullable List<HostNamingConditionConditionOsarchitectureComparison> osarchitectureComparisons;
        private @Nullable List<HostNamingConditionConditionOstypeComparison> ostypeComparisons;
        private @Nullable List<HostNamingConditionConditionPaasTypeComparison> paasTypeComparisons;
        private @Nullable List<HostNamingConditionConditionPaasType> paasTypes;
        private @Nullable List<HostNamingConditionConditionProcessMetadataConditionKey> processMetadataConditionKeys;
        private @Nullable List<HostNamingConditionConditionProcessMetadata> processMetadatas;
        private @Nullable List<HostNamingConditionConditionServiceTopology> serviceTopologies;
        private @Nullable List<HostNamingConditionConditionServiceTopologyComparison> serviceTopologyComparisons;
        private @Nullable List<HostNamingConditionConditionServiceTypeComparison> serviceTypeComparisons;
        private @Nullable List<HostNamingConditionConditionServiceType> serviceTypes;
        private @Nullable List<HostNamingConditionConditionSimpleHostTechComparison> simpleHostTechComparisons;
        private @Nullable List<HostNamingConditionConditionSimpleTechComparison> simpleTechComparisons;
        private @Nullable List<HostNamingConditionConditionStringComparison> stringComparisons;
        private @Nullable List<HostNamingConditionConditionStringConditionKey> stringConditionKeys;
        private @Nullable List<HostNamingConditionConditionStringKey> stringKeys;
        private @Nullable List<HostNamingConditionConditionString> strings;
        private @Nullable List<HostNamingConditionConditionSyntheticEngineTypeComparison> syntheticEngineTypeComparisons;
        private @Nullable List<HostNamingConditionConditionSyntheticEngine> syntheticEngines;
        private @Nullable List<HostNamingConditionConditionTagComparison> tagComparisons;
        private @Nullable List<HostNamingConditionConditionTag> tags;
        private @Nullable List<HostNamingConditionConditionTech> teches;
        private @Nullable String unknowns;
        public Builder() {}
        public Builder(HostNamingConditionCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationTypeComparisons = defaults.applicationTypeComparisons;
    	      this.applicationTypes = defaults.applicationTypes;
    	      this.azureComputeModeComparisons = defaults.azureComputeModeComparisons;
    	      this.azureComputeModes = defaults.azureComputeModes;
    	      this.azureSkuComparisions = defaults.azureSkuComparisions;
    	      this.azureSkus = defaults.azureSkus;
    	      this.baseComparisonBasics = defaults.baseComparisonBasics;
    	      this.baseConditionKeys = defaults.baseConditionKeys;
    	      this.bitnessComparisions = defaults.bitnessComparisions;
    	      this.bitnesses = defaults.bitnesses;
    	      this.cloudTypeComparisons = defaults.cloudTypeComparisons;
    	      this.cloudTypes = defaults.cloudTypes;
    	      this.comparisons = defaults.comparisons;
    	      this.customApplicationTypeComparisons = defaults.customApplicationTypeComparisons;
    	      this.customApplicationTypes = defaults.customApplicationTypes;
    	      this.customHostMetadataConditionKeys = defaults.customHostMetadataConditionKeys;
    	      this.customHostMetadatas = defaults.customHostMetadatas;
    	      this.customProcessMetadataConditionKeys = defaults.customProcessMetadataConditionKeys;
    	      this.customProcessMetadatas = defaults.customProcessMetadatas;
    	      this.databaseTopologies = defaults.databaseTopologies;
    	      this.databaseTopologyComparisons = defaults.databaseTopologyComparisons;
    	      this.dcrumDecoderComparisons = defaults.dcrumDecoderComparisons;
    	      this.dcrumDecoders = defaults.dcrumDecoders;
    	      this.entities = defaults.entities;
    	      this.entityIdComparisons = defaults.entityIdComparisons;
    	      this.hostTeches = defaults.hostTeches;
    	      this.hypervisorTypeComparisions = defaults.hypervisorTypeComparisions;
    	      this.hypervisors = defaults.hypervisors;
    	      this.indexedNameComparisons = defaults.indexedNameComparisons;
    	      this.indexedNames = defaults.indexedNames;
    	      this.indexedStringComparisons = defaults.indexedStringComparisons;
    	      this.indexedStrings = defaults.indexedStrings;
    	      this.indexedTagComparisons = defaults.indexedTagComparisons;
    	      this.indexedTags = defaults.indexedTags;
    	      this.integerComparisons = defaults.integerComparisons;
    	      this.integers = defaults.integers;
    	      this.ipaddressComparisons = defaults.ipaddressComparisons;
    	      this.ipaddresses = defaults.ipaddresses;
    	      this.keys = defaults.keys;
    	      this.mobilePlatformComparisons = defaults.mobilePlatformComparisons;
    	      this.mobilePlatforms = defaults.mobilePlatforms;
    	      this.osArches = defaults.osArches;
    	      this.osTypes = defaults.osTypes;
    	      this.osarchitectureComparisons = defaults.osarchitectureComparisons;
    	      this.ostypeComparisons = defaults.ostypeComparisons;
    	      this.paasTypeComparisons = defaults.paasTypeComparisons;
    	      this.paasTypes = defaults.paasTypes;
    	      this.processMetadataConditionKeys = defaults.processMetadataConditionKeys;
    	      this.processMetadatas = defaults.processMetadatas;
    	      this.serviceTopologies = defaults.serviceTopologies;
    	      this.serviceTopologyComparisons = defaults.serviceTopologyComparisons;
    	      this.serviceTypeComparisons = defaults.serviceTypeComparisons;
    	      this.serviceTypes = defaults.serviceTypes;
    	      this.simpleHostTechComparisons = defaults.simpleHostTechComparisons;
    	      this.simpleTechComparisons = defaults.simpleTechComparisons;
    	      this.stringComparisons = defaults.stringComparisons;
    	      this.stringConditionKeys = defaults.stringConditionKeys;
    	      this.stringKeys = defaults.stringKeys;
    	      this.strings = defaults.strings;
    	      this.syntheticEngineTypeComparisons = defaults.syntheticEngineTypeComparisons;
    	      this.syntheticEngines = defaults.syntheticEngines;
    	      this.tagComparisons = defaults.tagComparisons;
    	      this.tags = defaults.tags;
    	      this.teches = defaults.teches;
    	      this.unknowns = defaults.unknowns;
        }

        @CustomType.Setter
        public Builder applicationTypeComparisons(@Nullable List<HostNamingConditionConditionApplicationTypeComparison> applicationTypeComparisons) {
            this.applicationTypeComparisons = applicationTypeComparisons;
            return this;
        }
        public Builder applicationTypeComparisons(HostNamingConditionConditionApplicationTypeComparison... applicationTypeComparisons) {
            return applicationTypeComparisons(List.of(applicationTypeComparisons));
        }
        @CustomType.Setter
        public Builder applicationTypes(@Nullable List<HostNamingConditionConditionApplicationType> applicationTypes) {
            this.applicationTypes = applicationTypes;
            return this;
        }
        public Builder applicationTypes(HostNamingConditionConditionApplicationType... applicationTypes) {
            return applicationTypes(List.of(applicationTypes));
        }
        @CustomType.Setter
        public Builder azureComputeModeComparisons(@Nullable List<HostNamingConditionConditionAzureComputeModeComparison> azureComputeModeComparisons) {
            this.azureComputeModeComparisons = azureComputeModeComparisons;
            return this;
        }
        public Builder azureComputeModeComparisons(HostNamingConditionConditionAzureComputeModeComparison... azureComputeModeComparisons) {
            return azureComputeModeComparisons(List.of(azureComputeModeComparisons));
        }
        @CustomType.Setter
        public Builder azureComputeModes(@Nullable List<HostNamingConditionConditionAzureComputeMode> azureComputeModes) {
            this.azureComputeModes = azureComputeModes;
            return this;
        }
        public Builder azureComputeModes(HostNamingConditionConditionAzureComputeMode... azureComputeModes) {
            return azureComputeModes(List.of(azureComputeModes));
        }
        @CustomType.Setter
        public Builder azureSkuComparisions(@Nullable List<HostNamingConditionConditionAzureSkuComparision> azureSkuComparisions) {
            this.azureSkuComparisions = azureSkuComparisions;
            return this;
        }
        public Builder azureSkuComparisions(HostNamingConditionConditionAzureSkuComparision... azureSkuComparisions) {
            return azureSkuComparisions(List.of(azureSkuComparisions));
        }
        @CustomType.Setter
        public Builder azureSkus(@Nullable List<HostNamingConditionConditionAzureSkus> azureSkus) {
            this.azureSkus = azureSkus;
            return this;
        }
        public Builder azureSkus(HostNamingConditionConditionAzureSkus... azureSkus) {
            return azureSkus(List.of(azureSkus));
        }
        @CustomType.Setter
        public Builder baseComparisonBasics(@Nullable List<HostNamingConditionConditionBaseComparisonBasic> baseComparisonBasics) {
            this.baseComparisonBasics = baseComparisonBasics;
            return this;
        }
        public Builder baseComparisonBasics(HostNamingConditionConditionBaseComparisonBasic... baseComparisonBasics) {
            return baseComparisonBasics(List.of(baseComparisonBasics));
        }
        @CustomType.Setter
        public Builder baseConditionKeys(@Nullable List<HostNamingConditionConditionBaseConditionKey> baseConditionKeys) {
            this.baseConditionKeys = baseConditionKeys;
            return this;
        }
        public Builder baseConditionKeys(HostNamingConditionConditionBaseConditionKey... baseConditionKeys) {
            return baseConditionKeys(List.of(baseConditionKeys));
        }
        @CustomType.Setter
        public Builder bitnessComparisions(@Nullable List<HostNamingConditionConditionBitnessComparision> bitnessComparisions) {
            this.bitnessComparisions = bitnessComparisions;
            return this;
        }
        public Builder bitnessComparisions(HostNamingConditionConditionBitnessComparision... bitnessComparisions) {
            return bitnessComparisions(List.of(bitnessComparisions));
        }
        @CustomType.Setter
        public Builder bitnesses(@Nullable List<HostNamingConditionConditionBitness> bitnesses) {
            this.bitnesses = bitnesses;
            return this;
        }
        public Builder bitnesses(HostNamingConditionConditionBitness... bitnesses) {
            return bitnesses(List.of(bitnesses));
        }
        @CustomType.Setter
        public Builder cloudTypeComparisons(@Nullable List<HostNamingConditionConditionCloudTypeComparison> cloudTypeComparisons) {
            this.cloudTypeComparisons = cloudTypeComparisons;
            return this;
        }
        public Builder cloudTypeComparisons(HostNamingConditionConditionCloudTypeComparison... cloudTypeComparisons) {
            return cloudTypeComparisons(List.of(cloudTypeComparisons));
        }
        @CustomType.Setter
        public Builder cloudTypes(@Nullable List<HostNamingConditionConditionCloudType> cloudTypes) {
            this.cloudTypes = cloudTypes;
            return this;
        }
        public Builder cloudTypes(HostNamingConditionConditionCloudType... cloudTypes) {
            return cloudTypes(List.of(cloudTypes));
        }
        @CustomType.Setter
        public Builder comparisons(@Nullable List<HostNamingConditionConditionComparison> comparisons) {
            this.comparisons = comparisons;
            return this;
        }
        public Builder comparisons(HostNamingConditionConditionComparison... comparisons) {
            return comparisons(List.of(comparisons));
        }
        @CustomType.Setter
        public Builder customApplicationTypeComparisons(@Nullable List<HostNamingConditionConditionCustomApplicationTypeComparison> customApplicationTypeComparisons) {
            this.customApplicationTypeComparisons = customApplicationTypeComparisons;
            return this;
        }
        public Builder customApplicationTypeComparisons(HostNamingConditionConditionCustomApplicationTypeComparison... customApplicationTypeComparisons) {
            return customApplicationTypeComparisons(List.of(customApplicationTypeComparisons));
        }
        @CustomType.Setter
        public Builder customApplicationTypes(@Nullable List<HostNamingConditionConditionCustomApplicationType> customApplicationTypes) {
            this.customApplicationTypes = customApplicationTypes;
            return this;
        }
        public Builder customApplicationTypes(HostNamingConditionConditionCustomApplicationType... customApplicationTypes) {
            return customApplicationTypes(List.of(customApplicationTypes));
        }
        @CustomType.Setter
        public Builder customHostMetadataConditionKeys(@Nullable List<HostNamingConditionConditionCustomHostMetadataConditionKey> customHostMetadataConditionKeys) {
            this.customHostMetadataConditionKeys = customHostMetadataConditionKeys;
            return this;
        }
        public Builder customHostMetadataConditionKeys(HostNamingConditionConditionCustomHostMetadataConditionKey... customHostMetadataConditionKeys) {
            return customHostMetadataConditionKeys(List.of(customHostMetadataConditionKeys));
        }
        @CustomType.Setter
        public Builder customHostMetadatas(@Nullable List<HostNamingConditionConditionCustomHostMetadata> customHostMetadatas) {
            this.customHostMetadatas = customHostMetadatas;
            return this;
        }
        public Builder customHostMetadatas(HostNamingConditionConditionCustomHostMetadata... customHostMetadatas) {
            return customHostMetadatas(List.of(customHostMetadatas));
        }
        @CustomType.Setter
        public Builder customProcessMetadataConditionKeys(@Nullable List<HostNamingConditionConditionCustomProcessMetadataConditionKey> customProcessMetadataConditionKeys) {
            this.customProcessMetadataConditionKeys = customProcessMetadataConditionKeys;
            return this;
        }
        public Builder customProcessMetadataConditionKeys(HostNamingConditionConditionCustomProcessMetadataConditionKey... customProcessMetadataConditionKeys) {
            return customProcessMetadataConditionKeys(List.of(customProcessMetadataConditionKeys));
        }
        @CustomType.Setter
        public Builder customProcessMetadatas(@Nullable List<HostNamingConditionConditionCustomProcessMetadata> customProcessMetadatas) {
            this.customProcessMetadatas = customProcessMetadatas;
            return this;
        }
        public Builder customProcessMetadatas(HostNamingConditionConditionCustomProcessMetadata... customProcessMetadatas) {
            return customProcessMetadatas(List.of(customProcessMetadatas));
        }
        @CustomType.Setter
        public Builder databaseTopologies(@Nullable List<HostNamingConditionConditionDatabaseTopology> databaseTopologies) {
            this.databaseTopologies = databaseTopologies;
            return this;
        }
        public Builder databaseTopologies(HostNamingConditionConditionDatabaseTopology... databaseTopologies) {
            return databaseTopologies(List.of(databaseTopologies));
        }
        @CustomType.Setter
        public Builder databaseTopologyComparisons(@Nullable List<HostNamingConditionConditionDatabaseTopologyComparison> databaseTopologyComparisons) {
            this.databaseTopologyComparisons = databaseTopologyComparisons;
            return this;
        }
        public Builder databaseTopologyComparisons(HostNamingConditionConditionDatabaseTopologyComparison... databaseTopologyComparisons) {
            return databaseTopologyComparisons(List.of(databaseTopologyComparisons));
        }
        @CustomType.Setter
        public Builder dcrumDecoderComparisons(@Nullable List<HostNamingConditionConditionDcrumDecoderComparison> dcrumDecoderComparisons) {
            this.dcrumDecoderComparisons = dcrumDecoderComparisons;
            return this;
        }
        public Builder dcrumDecoderComparisons(HostNamingConditionConditionDcrumDecoderComparison... dcrumDecoderComparisons) {
            return dcrumDecoderComparisons(List.of(dcrumDecoderComparisons));
        }
        @CustomType.Setter
        public Builder dcrumDecoders(@Nullable List<HostNamingConditionConditionDcrumDecoder> dcrumDecoders) {
            this.dcrumDecoders = dcrumDecoders;
            return this;
        }
        public Builder dcrumDecoders(HostNamingConditionConditionDcrumDecoder... dcrumDecoders) {
            return dcrumDecoders(List.of(dcrumDecoders));
        }
        @CustomType.Setter
        public Builder entities(@Nullable List<HostNamingConditionConditionEntity> entities) {
            this.entities = entities;
            return this;
        }
        public Builder entities(HostNamingConditionConditionEntity... entities) {
            return entities(List.of(entities));
        }
        @CustomType.Setter
        public Builder entityIdComparisons(@Nullable List<HostNamingConditionConditionEntityIdComparison> entityIdComparisons) {
            this.entityIdComparisons = entityIdComparisons;
            return this;
        }
        public Builder entityIdComparisons(HostNamingConditionConditionEntityIdComparison... entityIdComparisons) {
            return entityIdComparisons(List.of(entityIdComparisons));
        }
        @CustomType.Setter
        public Builder hostTeches(@Nullable List<HostNamingConditionConditionHostTech> hostTeches) {
            this.hostTeches = hostTeches;
            return this;
        }
        public Builder hostTeches(HostNamingConditionConditionHostTech... hostTeches) {
            return hostTeches(List.of(hostTeches));
        }
        @CustomType.Setter
        public Builder hypervisorTypeComparisions(@Nullable List<HostNamingConditionConditionHypervisorTypeComparision> hypervisorTypeComparisions) {
            this.hypervisorTypeComparisions = hypervisorTypeComparisions;
            return this;
        }
        public Builder hypervisorTypeComparisions(HostNamingConditionConditionHypervisorTypeComparision... hypervisorTypeComparisions) {
            return hypervisorTypeComparisions(List.of(hypervisorTypeComparisions));
        }
        @CustomType.Setter
        public Builder hypervisors(@Nullable List<HostNamingConditionConditionHypervisor> hypervisors) {
            this.hypervisors = hypervisors;
            return this;
        }
        public Builder hypervisors(HostNamingConditionConditionHypervisor... hypervisors) {
            return hypervisors(List.of(hypervisors));
        }
        @CustomType.Setter
        public Builder indexedNameComparisons(@Nullable List<HostNamingConditionConditionIndexedNameComparison> indexedNameComparisons) {
            this.indexedNameComparisons = indexedNameComparisons;
            return this;
        }
        public Builder indexedNameComparisons(HostNamingConditionConditionIndexedNameComparison... indexedNameComparisons) {
            return indexedNameComparisons(List.of(indexedNameComparisons));
        }
        @CustomType.Setter
        public Builder indexedNames(@Nullable List<HostNamingConditionConditionIndexedName> indexedNames) {
            this.indexedNames = indexedNames;
            return this;
        }
        public Builder indexedNames(HostNamingConditionConditionIndexedName... indexedNames) {
            return indexedNames(List.of(indexedNames));
        }
        @CustomType.Setter
        public Builder indexedStringComparisons(@Nullable List<HostNamingConditionConditionIndexedStringComparison> indexedStringComparisons) {
            this.indexedStringComparisons = indexedStringComparisons;
            return this;
        }
        public Builder indexedStringComparisons(HostNamingConditionConditionIndexedStringComparison... indexedStringComparisons) {
            return indexedStringComparisons(List.of(indexedStringComparisons));
        }
        @CustomType.Setter
        public Builder indexedStrings(@Nullable List<HostNamingConditionConditionIndexedString> indexedStrings) {
            this.indexedStrings = indexedStrings;
            return this;
        }
        public Builder indexedStrings(HostNamingConditionConditionIndexedString... indexedStrings) {
            return indexedStrings(List.of(indexedStrings));
        }
        @CustomType.Setter
        public Builder indexedTagComparisons(@Nullable List<HostNamingConditionConditionIndexedTagComparison> indexedTagComparisons) {
            this.indexedTagComparisons = indexedTagComparisons;
            return this;
        }
        public Builder indexedTagComparisons(HostNamingConditionConditionIndexedTagComparison... indexedTagComparisons) {
            return indexedTagComparisons(List.of(indexedTagComparisons));
        }
        @CustomType.Setter
        public Builder indexedTags(@Nullable List<HostNamingConditionConditionIndexedTag> indexedTags) {
            this.indexedTags = indexedTags;
            return this;
        }
        public Builder indexedTags(HostNamingConditionConditionIndexedTag... indexedTags) {
            return indexedTags(List.of(indexedTags));
        }
        @CustomType.Setter
        public Builder integerComparisons(@Nullable List<HostNamingConditionConditionIntegerComparison> integerComparisons) {
            this.integerComparisons = integerComparisons;
            return this;
        }
        public Builder integerComparisons(HostNamingConditionConditionIntegerComparison... integerComparisons) {
            return integerComparisons(List.of(integerComparisons));
        }
        @CustomType.Setter
        public Builder integers(@Nullable List<HostNamingConditionConditionInteger> integers) {
            this.integers = integers;
            return this;
        }
        public Builder integers(HostNamingConditionConditionInteger... integers) {
            return integers(List.of(integers));
        }
        @CustomType.Setter
        public Builder ipaddressComparisons(@Nullable List<HostNamingConditionConditionIpaddressComparison> ipaddressComparisons) {
            this.ipaddressComparisons = ipaddressComparisons;
            return this;
        }
        public Builder ipaddressComparisons(HostNamingConditionConditionIpaddressComparison... ipaddressComparisons) {
            return ipaddressComparisons(List.of(ipaddressComparisons));
        }
        @CustomType.Setter
        public Builder ipaddresses(@Nullable List<HostNamingConditionConditionIpaddress> ipaddresses) {
            this.ipaddresses = ipaddresses;
            return this;
        }
        public Builder ipaddresses(HostNamingConditionConditionIpaddress... ipaddresses) {
            return ipaddresses(List.of(ipaddresses));
        }
        @CustomType.Setter
        public Builder keys(@Nullable List<HostNamingConditionConditionKey> keys) {
            this.keys = keys;
            return this;
        }
        public Builder keys(HostNamingConditionConditionKey... keys) {
            return keys(List.of(keys));
        }
        @CustomType.Setter
        public Builder mobilePlatformComparisons(@Nullable List<HostNamingConditionConditionMobilePlatformComparison> mobilePlatformComparisons) {
            this.mobilePlatformComparisons = mobilePlatformComparisons;
            return this;
        }
        public Builder mobilePlatformComparisons(HostNamingConditionConditionMobilePlatformComparison... mobilePlatformComparisons) {
            return mobilePlatformComparisons(List.of(mobilePlatformComparisons));
        }
        @CustomType.Setter
        public Builder mobilePlatforms(@Nullable List<HostNamingConditionConditionMobilePlatform> mobilePlatforms) {
            this.mobilePlatforms = mobilePlatforms;
            return this;
        }
        public Builder mobilePlatforms(HostNamingConditionConditionMobilePlatform... mobilePlatforms) {
            return mobilePlatforms(List.of(mobilePlatforms));
        }
        @CustomType.Setter
        public Builder osArches(@Nullable List<HostNamingConditionConditionOsArch> osArches) {
            this.osArches = osArches;
            return this;
        }
        public Builder osArches(HostNamingConditionConditionOsArch... osArches) {
            return osArches(List.of(osArches));
        }
        @CustomType.Setter
        public Builder osTypes(@Nullable List<HostNamingConditionConditionOsType> osTypes) {
            this.osTypes = osTypes;
            return this;
        }
        public Builder osTypes(HostNamingConditionConditionOsType... osTypes) {
            return osTypes(List.of(osTypes));
        }
        @CustomType.Setter
        public Builder osarchitectureComparisons(@Nullable List<HostNamingConditionConditionOsarchitectureComparison> osarchitectureComparisons) {
            this.osarchitectureComparisons = osarchitectureComparisons;
            return this;
        }
        public Builder osarchitectureComparisons(HostNamingConditionConditionOsarchitectureComparison... osarchitectureComparisons) {
            return osarchitectureComparisons(List.of(osarchitectureComparisons));
        }
        @CustomType.Setter
        public Builder ostypeComparisons(@Nullable List<HostNamingConditionConditionOstypeComparison> ostypeComparisons) {
            this.ostypeComparisons = ostypeComparisons;
            return this;
        }
        public Builder ostypeComparisons(HostNamingConditionConditionOstypeComparison... ostypeComparisons) {
            return ostypeComparisons(List.of(ostypeComparisons));
        }
        @CustomType.Setter
        public Builder paasTypeComparisons(@Nullable List<HostNamingConditionConditionPaasTypeComparison> paasTypeComparisons) {
            this.paasTypeComparisons = paasTypeComparisons;
            return this;
        }
        public Builder paasTypeComparisons(HostNamingConditionConditionPaasTypeComparison... paasTypeComparisons) {
            return paasTypeComparisons(List.of(paasTypeComparisons));
        }
        @CustomType.Setter
        public Builder paasTypes(@Nullable List<HostNamingConditionConditionPaasType> paasTypes) {
            this.paasTypes = paasTypes;
            return this;
        }
        public Builder paasTypes(HostNamingConditionConditionPaasType... paasTypes) {
            return paasTypes(List.of(paasTypes));
        }
        @CustomType.Setter
        public Builder processMetadataConditionKeys(@Nullable List<HostNamingConditionConditionProcessMetadataConditionKey> processMetadataConditionKeys) {
            this.processMetadataConditionKeys = processMetadataConditionKeys;
            return this;
        }
        public Builder processMetadataConditionKeys(HostNamingConditionConditionProcessMetadataConditionKey... processMetadataConditionKeys) {
            return processMetadataConditionKeys(List.of(processMetadataConditionKeys));
        }
        @CustomType.Setter
        public Builder processMetadatas(@Nullable List<HostNamingConditionConditionProcessMetadata> processMetadatas) {
            this.processMetadatas = processMetadatas;
            return this;
        }
        public Builder processMetadatas(HostNamingConditionConditionProcessMetadata... processMetadatas) {
            return processMetadatas(List.of(processMetadatas));
        }
        @CustomType.Setter
        public Builder serviceTopologies(@Nullable List<HostNamingConditionConditionServiceTopology> serviceTopologies) {
            this.serviceTopologies = serviceTopologies;
            return this;
        }
        public Builder serviceTopologies(HostNamingConditionConditionServiceTopology... serviceTopologies) {
            return serviceTopologies(List.of(serviceTopologies));
        }
        @CustomType.Setter
        public Builder serviceTopologyComparisons(@Nullable List<HostNamingConditionConditionServiceTopologyComparison> serviceTopologyComparisons) {
            this.serviceTopologyComparisons = serviceTopologyComparisons;
            return this;
        }
        public Builder serviceTopologyComparisons(HostNamingConditionConditionServiceTopologyComparison... serviceTopologyComparisons) {
            return serviceTopologyComparisons(List.of(serviceTopologyComparisons));
        }
        @CustomType.Setter
        public Builder serviceTypeComparisons(@Nullable List<HostNamingConditionConditionServiceTypeComparison> serviceTypeComparisons) {
            this.serviceTypeComparisons = serviceTypeComparisons;
            return this;
        }
        public Builder serviceTypeComparisons(HostNamingConditionConditionServiceTypeComparison... serviceTypeComparisons) {
            return serviceTypeComparisons(List.of(serviceTypeComparisons));
        }
        @CustomType.Setter
        public Builder serviceTypes(@Nullable List<HostNamingConditionConditionServiceType> serviceTypes) {
            this.serviceTypes = serviceTypes;
            return this;
        }
        public Builder serviceTypes(HostNamingConditionConditionServiceType... serviceTypes) {
            return serviceTypes(List.of(serviceTypes));
        }
        @CustomType.Setter
        public Builder simpleHostTechComparisons(@Nullable List<HostNamingConditionConditionSimpleHostTechComparison> simpleHostTechComparisons) {
            this.simpleHostTechComparisons = simpleHostTechComparisons;
            return this;
        }
        public Builder simpleHostTechComparisons(HostNamingConditionConditionSimpleHostTechComparison... simpleHostTechComparisons) {
            return simpleHostTechComparisons(List.of(simpleHostTechComparisons));
        }
        @CustomType.Setter
        public Builder simpleTechComparisons(@Nullable List<HostNamingConditionConditionSimpleTechComparison> simpleTechComparisons) {
            this.simpleTechComparisons = simpleTechComparisons;
            return this;
        }
        public Builder simpleTechComparisons(HostNamingConditionConditionSimpleTechComparison... simpleTechComparisons) {
            return simpleTechComparisons(List.of(simpleTechComparisons));
        }
        @CustomType.Setter
        public Builder stringComparisons(@Nullable List<HostNamingConditionConditionStringComparison> stringComparisons) {
            this.stringComparisons = stringComparisons;
            return this;
        }
        public Builder stringComparisons(HostNamingConditionConditionStringComparison... stringComparisons) {
            return stringComparisons(List.of(stringComparisons));
        }
        @CustomType.Setter
        public Builder stringConditionKeys(@Nullable List<HostNamingConditionConditionStringConditionKey> stringConditionKeys) {
            this.stringConditionKeys = stringConditionKeys;
            return this;
        }
        public Builder stringConditionKeys(HostNamingConditionConditionStringConditionKey... stringConditionKeys) {
            return stringConditionKeys(List.of(stringConditionKeys));
        }
        @CustomType.Setter
        public Builder stringKeys(@Nullable List<HostNamingConditionConditionStringKey> stringKeys) {
            this.stringKeys = stringKeys;
            return this;
        }
        public Builder stringKeys(HostNamingConditionConditionStringKey... stringKeys) {
            return stringKeys(List.of(stringKeys));
        }
        @CustomType.Setter
        public Builder strings(@Nullable List<HostNamingConditionConditionString> strings) {
            this.strings = strings;
            return this;
        }
        public Builder strings(HostNamingConditionConditionString... strings) {
            return strings(List.of(strings));
        }
        @CustomType.Setter
        public Builder syntheticEngineTypeComparisons(@Nullable List<HostNamingConditionConditionSyntheticEngineTypeComparison> syntheticEngineTypeComparisons) {
            this.syntheticEngineTypeComparisons = syntheticEngineTypeComparisons;
            return this;
        }
        public Builder syntheticEngineTypeComparisons(HostNamingConditionConditionSyntheticEngineTypeComparison... syntheticEngineTypeComparisons) {
            return syntheticEngineTypeComparisons(List.of(syntheticEngineTypeComparisons));
        }
        @CustomType.Setter
        public Builder syntheticEngines(@Nullable List<HostNamingConditionConditionSyntheticEngine> syntheticEngines) {
            this.syntheticEngines = syntheticEngines;
            return this;
        }
        public Builder syntheticEngines(HostNamingConditionConditionSyntheticEngine... syntheticEngines) {
            return syntheticEngines(List.of(syntheticEngines));
        }
        @CustomType.Setter
        public Builder tagComparisons(@Nullable List<HostNamingConditionConditionTagComparison> tagComparisons) {
            this.tagComparisons = tagComparisons;
            return this;
        }
        public Builder tagComparisons(HostNamingConditionConditionTagComparison... tagComparisons) {
            return tagComparisons(List.of(tagComparisons));
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<HostNamingConditionConditionTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(HostNamingConditionConditionTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder teches(@Nullable List<HostNamingConditionConditionTech> teches) {
            this.teches = teches;
            return this;
        }
        public Builder teches(HostNamingConditionConditionTech... teches) {
            return teches(List.of(teches));
        }
        @CustomType.Setter
        public Builder unknowns(@Nullable String unknowns) {
            this.unknowns = unknowns;
            return this;
        }
        public HostNamingConditionCondition build() {
            final var o = new HostNamingConditionCondition();
            o.applicationTypeComparisons = applicationTypeComparisons;
            o.applicationTypes = applicationTypes;
            o.azureComputeModeComparisons = azureComputeModeComparisons;
            o.azureComputeModes = azureComputeModes;
            o.azureSkuComparisions = azureSkuComparisions;
            o.azureSkus = azureSkus;
            o.baseComparisonBasics = baseComparisonBasics;
            o.baseConditionKeys = baseConditionKeys;
            o.bitnessComparisions = bitnessComparisions;
            o.bitnesses = bitnesses;
            o.cloudTypeComparisons = cloudTypeComparisons;
            o.cloudTypes = cloudTypes;
            o.comparisons = comparisons;
            o.customApplicationTypeComparisons = customApplicationTypeComparisons;
            o.customApplicationTypes = customApplicationTypes;
            o.customHostMetadataConditionKeys = customHostMetadataConditionKeys;
            o.customHostMetadatas = customHostMetadatas;
            o.customProcessMetadataConditionKeys = customProcessMetadataConditionKeys;
            o.customProcessMetadatas = customProcessMetadatas;
            o.databaseTopologies = databaseTopologies;
            o.databaseTopologyComparisons = databaseTopologyComparisons;
            o.dcrumDecoderComparisons = dcrumDecoderComparisons;
            o.dcrumDecoders = dcrumDecoders;
            o.entities = entities;
            o.entityIdComparisons = entityIdComparisons;
            o.hostTeches = hostTeches;
            o.hypervisorTypeComparisions = hypervisorTypeComparisions;
            o.hypervisors = hypervisors;
            o.indexedNameComparisons = indexedNameComparisons;
            o.indexedNames = indexedNames;
            o.indexedStringComparisons = indexedStringComparisons;
            o.indexedStrings = indexedStrings;
            o.indexedTagComparisons = indexedTagComparisons;
            o.indexedTags = indexedTags;
            o.integerComparisons = integerComparisons;
            o.integers = integers;
            o.ipaddressComparisons = ipaddressComparisons;
            o.ipaddresses = ipaddresses;
            o.keys = keys;
            o.mobilePlatformComparisons = mobilePlatformComparisons;
            o.mobilePlatforms = mobilePlatforms;
            o.osArches = osArches;
            o.osTypes = osTypes;
            o.osarchitectureComparisons = osarchitectureComparisons;
            o.ostypeComparisons = ostypeComparisons;
            o.paasTypeComparisons = paasTypeComparisons;
            o.paasTypes = paasTypes;
            o.processMetadataConditionKeys = processMetadataConditionKeys;
            o.processMetadatas = processMetadatas;
            o.serviceTopologies = serviceTopologies;
            o.serviceTopologyComparisons = serviceTopologyComparisons;
            o.serviceTypeComparisons = serviceTypeComparisons;
            o.serviceTypes = serviceTypes;
            o.simpleHostTechComparisons = simpleHostTechComparisons;
            o.simpleTechComparisons = simpleTechComparisons;
            o.stringComparisons = stringComparisons;
            o.stringConditionKeys = stringConditionKeys;
            o.stringKeys = stringKeys;
            o.strings = strings;
            o.syntheticEngineTypeComparisons = syntheticEngineTypeComparisons;
            o.syntheticEngines = syntheticEngines;
            o.tagComparisons = tagComparisons;
            o.tags = tags;
            o.teches = teches;
            o.unknowns = unknowns;
            return o;
        }
    }
}
