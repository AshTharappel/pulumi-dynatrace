// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MobileAppAnomaliesUnexpectedHighLoadArgs extends com.pulumi.resources.ResourceArgs {

    public static final MobileAppAnomaliesUnexpectedHighLoadArgs Empty = new MobileAppAnomaliesUnexpectedHighLoadArgs();

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic spikes within your application.
     * 
     */
    @Import(name="thresholdPercentage")
    private @Nullable Output<Double> thresholdPercentage;

    /**
     * @return Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic spikes within your application.
     * 
     */
    public Optional<Output<Double>> thresholdPercentage() {
        return Optional.ofNullable(this.thresholdPercentage);
    }

    private MobileAppAnomaliesUnexpectedHighLoadArgs() {}

    private MobileAppAnomaliesUnexpectedHighLoadArgs(MobileAppAnomaliesUnexpectedHighLoadArgs $) {
        this.enabled = $.enabled;
        this.thresholdPercentage = $.thresholdPercentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MobileAppAnomaliesUnexpectedHighLoadArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MobileAppAnomaliesUnexpectedHighLoadArgs $;

        public Builder() {
            $ = new MobileAppAnomaliesUnexpectedHighLoadArgs();
        }

        public Builder(MobileAppAnomaliesUnexpectedHighLoadArgs defaults) {
            $ = new MobileAppAnomaliesUnexpectedHighLoadArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param thresholdPercentage Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic spikes within your application.
         * 
         * @return builder
         * 
         */
        public Builder thresholdPercentage(@Nullable Output<Double> thresholdPercentage) {
            $.thresholdPercentage = thresholdPercentage;
            return this;
        }

        /**
         * @param thresholdPercentage Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic spikes within your application.
         * 
         * @return builder
         * 
         */
        public Builder thresholdPercentage(Double thresholdPercentage) {
            return thresholdPercentage(Output.of(thresholdPercentage));
        }

        public MobileAppAnomaliesUnexpectedHighLoadArgs build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
