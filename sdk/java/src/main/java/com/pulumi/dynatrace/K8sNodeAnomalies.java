// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.K8sNodeAnomaliesArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.K8sNodeAnomaliesState;
import com.pulumi.dynatrace.outputs.K8sNodeAnomaliesCpuRequestsSaturation;
import com.pulumi.dynatrace.outputs.K8sNodeAnomaliesMemoryRequestsSaturation;
import com.pulumi.dynatrace.outputs.K8sNodeAnomaliesNodeProblematicCondition;
import com.pulumi.dynatrace.outputs.K8sNodeAnomaliesPodsSaturation;
import com.pulumi.dynatrace.outputs.K8sNodeAnomaliesReadinessIssues;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/k8sNodeAnomalies:K8sNodeAnomalies")
public class K8sNodeAnomalies extends com.pulumi.resources.CustomResource {
    /**
     * no documentation available
     * 
     */
    @Export(name="cpuRequestsSaturation", refs={K8sNodeAnomaliesCpuRequestsSaturation.class}, tree="[0]")
    private Output<K8sNodeAnomaliesCpuRequestsSaturation> cpuRequestsSaturation;

    /**
     * @return no documentation available
     * 
     */
    public Output<K8sNodeAnomaliesCpuRequestsSaturation> cpuRequestsSaturation() {
        return this.cpuRequestsSaturation;
    }
    /**
     * no documentation available
     * 
     */
    @Export(name="memoryRequestsSaturation", refs={K8sNodeAnomaliesMemoryRequestsSaturation.class}, tree="[0]")
    private Output<K8sNodeAnomaliesMemoryRequestsSaturation> memoryRequestsSaturation;

    /**
     * @return no documentation available
     * 
     */
    public Output<K8sNodeAnomaliesMemoryRequestsSaturation> memoryRequestsSaturation() {
        return this.memoryRequestsSaturation;
    }
    /**
     * no documentation available
     * 
     */
    @Export(name="nodeProblematicCondition", refs={K8sNodeAnomaliesNodeProblematicCondition.class}, tree="[0]")
    private Output<K8sNodeAnomaliesNodeProblematicCondition> nodeProblematicCondition;

    /**
     * @return no documentation available
     * 
     */
    public Output<K8sNodeAnomaliesNodeProblematicCondition> nodeProblematicCondition() {
        return this.nodeProblematicCondition;
    }
    /**
     * no documentation available
     * 
     */
    @Export(name="podsSaturation", refs={K8sNodeAnomaliesPodsSaturation.class}, tree="[0]")
    private Output<K8sNodeAnomaliesPodsSaturation> podsSaturation;

    /**
     * @return no documentation available
     * 
     */
    public Output<K8sNodeAnomaliesPodsSaturation> podsSaturation() {
        return this.podsSaturation;
    }
    /**
     * Alerts if node has not been available for a given amount of time
     * 
     */
    @Export(name="readinessIssues", refs={K8sNodeAnomaliesReadinessIssues.class}, tree="[0]")
    private Output<K8sNodeAnomaliesReadinessIssues> readinessIssues;

    /**
     * @return Alerts if node has not been available for a given amount of time
     * 
     */
    public Output<K8sNodeAnomaliesReadinessIssues> readinessIssues() {
        return this.readinessIssues;
    }
    /**
     * The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
     * 
     */
    @Export(name="scope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scope;

    /**
     * @return The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
     * 
     */
    public Output<Optional<String>> scope() {
        return Codegen.optional(this.scope);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public K8sNodeAnomalies(String name) {
        this(name, K8sNodeAnomaliesArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public K8sNodeAnomalies(String name, K8sNodeAnomaliesArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public K8sNodeAnomalies(String name, K8sNodeAnomaliesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/k8sNodeAnomalies:K8sNodeAnomalies", name, args == null ? K8sNodeAnomaliesArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private K8sNodeAnomalies(String name, Output<String> id, @Nullable K8sNodeAnomaliesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/k8sNodeAnomalies:K8sNodeAnomalies", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static K8sNodeAnomalies get(String name, Output<String> id, @Nullable K8sNodeAnomaliesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new K8sNodeAnomalies(name, id, state, options);
    }
}
