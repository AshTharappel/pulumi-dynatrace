// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HttpMonitorOutageArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpMonitorOutageArgs Empty = new HttpMonitorOutageArgs();

    /**
     * (Field has overlap with `dynatrace.HttpMonitor`) Alert if all locations are unable to access my web application
     * 
     */
    @Import(name="globalConsecutiveOutageCountThreshold")
    private @Nullable Output<Integer> globalConsecutiveOutageCountThreshold;

    /**
     * @return (Field has overlap with `dynatrace.HttpMonitor`) Alert if all locations are unable to access my web application
     * 
     */
    public Optional<Output<Integer>> globalConsecutiveOutageCountThreshold() {
        return Optional.ofNullable(this.globalConsecutiveOutageCountThreshold);
    }

    /**
     * (Field has overlap with `dynatrace.HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
     * 
     */
    @Import(name="globalOutages", required=true)
    private Output<Boolean> globalOutages;

    /**
     * @return (Field has overlap with `dynatrace.HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
     * 
     */
    public Output<Boolean> globalOutages() {
        return this.globalOutages;
    }

    /**
     * (Field has overlap with `dynatrace.HttpMonitor`) are unable to access my web application
     * 
     */
    @Import(name="localConsecutiveOutageCountThreshold")
    private @Nullable Output<Integer> localConsecutiveOutageCountThreshold;

    /**
     * @return (Field has overlap with `dynatrace.HttpMonitor`) are unable to access my web application
     * 
     */
    public Optional<Output<Integer>> localConsecutiveOutageCountThreshold() {
        return Optional.ofNullable(this.localConsecutiveOutageCountThreshold);
    }

    /**
     * (Field has overlap with `dynatrace.HttpMonitor`) Alert if at least
     * 
     */
    @Import(name="localLocationOutageCountThreshold")
    private @Nullable Output<Integer> localLocationOutageCountThreshold;

    /**
     * @return (Field has overlap with `dynatrace.HttpMonitor`) Alert if at least
     * 
     */
    public Optional<Output<Integer>> localLocationOutageCountThreshold() {
        return Optional.ofNullable(this.localLocationOutageCountThreshold);
    }

    /**
     * (Field has overlap with `dynatrace.HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
     * 
     */
    @Import(name="localOutages", required=true)
    private Output<Boolean> localOutages;

    /**
     * @return (Field has overlap with `dynatrace.HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
     * 
     */
    public Output<Boolean> localOutages() {
        return this.localOutages;
    }

    /**
     * The scope of this setting (HTTP_CHECK). Omit this property if you want to cover the whole environment.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The scope of this setting (HTTP_CHECK). Omit this property if you want to cover the whole environment.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    private HttpMonitorOutageArgs() {}

    private HttpMonitorOutageArgs(HttpMonitorOutageArgs $) {
        this.globalConsecutiveOutageCountThreshold = $.globalConsecutiveOutageCountThreshold;
        this.globalOutages = $.globalOutages;
        this.localConsecutiveOutageCountThreshold = $.localConsecutiveOutageCountThreshold;
        this.localLocationOutageCountThreshold = $.localLocationOutageCountThreshold;
        this.localOutages = $.localOutages;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpMonitorOutageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpMonitorOutageArgs $;

        public Builder() {
            $ = new HttpMonitorOutageArgs();
        }

        public Builder(HttpMonitorOutageArgs defaults) {
            $ = new HttpMonitorOutageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param globalConsecutiveOutageCountThreshold (Field has overlap with `dynatrace.HttpMonitor`) Alert if all locations are unable to access my web application
         * 
         * @return builder
         * 
         */
        public Builder globalConsecutiveOutageCountThreshold(@Nullable Output<Integer> globalConsecutiveOutageCountThreshold) {
            $.globalConsecutiveOutageCountThreshold = globalConsecutiveOutageCountThreshold;
            return this;
        }

        /**
         * @param globalConsecutiveOutageCountThreshold (Field has overlap with `dynatrace.HttpMonitor`) Alert if all locations are unable to access my web application
         * 
         * @return builder
         * 
         */
        public Builder globalConsecutiveOutageCountThreshold(Integer globalConsecutiveOutageCountThreshold) {
            return globalConsecutiveOutageCountThreshold(Output.of(globalConsecutiveOutageCountThreshold));
        }

        /**
         * @param globalOutages (Field has overlap with `dynatrace.HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
         * 
         * @return builder
         * 
         */
        public Builder globalOutages(Output<Boolean> globalOutages) {
            $.globalOutages = globalOutages;
            return this;
        }

        /**
         * @param globalOutages (Field has overlap with `dynatrace.HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
         * 
         * @return builder
         * 
         */
        public Builder globalOutages(Boolean globalOutages) {
            return globalOutages(Output.of(globalOutages));
        }

        /**
         * @param localConsecutiveOutageCountThreshold (Field has overlap with `dynatrace.HttpMonitor`) are unable to access my web application
         * 
         * @return builder
         * 
         */
        public Builder localConsecutiveOutageCountThreshold(@Nullable Output<Integer> localConsecutiveOutageCountThreshold) {
            $.localConsecutiveOutageCountThreshold = localConsecutiveOutageCountThreshold;
            return this;
        }

        /**
         * @param localConsecutiveOutageCountThreshold (Field has overlap with `dynatrace.HttpMonitor`) are unable to access my web application
         * 
         * @return builder
         * 
         */
        public Builder localConsecutiveOutageCountThreshold(Integer localConsecutiveOutageCountThreshold) {
            return localConsecutiveOutageCountThreshold(Output.of(localConsecutiveOutageCountThreshold));
        }

        /**
         * @param localLocationOutageCountThreshold (Field has overlap with `dynatrace.HttpMonitor`) Alert if at least
         * 
         * @return builder
         * 
         */
        public Builder localLocationOutageCountThreshold(@Nullable Output<Integer> localLocationOutageCountThreshold) {
            $.localLocationOutageCountThreshold = localLocationOutageCountThreshold;
            return this;
        }

        /**
         * @param localLocationOutageCountThreshold (Field has overlap with `dynatrace.HttpMonitor`) Alert if at least
         * 
         * @return builder
         * 
         */
        public Builder localLocationOutageCountThreshold(Integer localLocationOutageCountThreshold) {
            return localLocationOutageCountThreshold(Output.of(localLocationOutageCountThreshold));
        }

        /**
         * @param localOutages (Field has overlap with `dynatrace.HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
         * 
         * @return builder
         * 
         */
        public Builder localOutages(Output<Boolean> localOutages) {
            $.localOutages = localOutages;
            return this;
        }

        /**
         * @param localOutages (Field has overlap with `dynatrace.HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
         * 
         * @return builder
         * 
         */
        public Builder localOutages(Boolean localOutages) {
            return localOutages(Output.of(localOutages));
        }

        /**
         * @param scope The scope of this setting (HTTP_CHECK). Omit this property if you want to cover the whole environment.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope of this setting (HTTP_CHECK). Omit this property if you want to cover the whole environment.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public HttpMonitorOutageArgs build() {
            $.globalOutages = Objects.requireNonNull($.globalOutages, "expected parameter 'globalOutages' to be non-null");
            $.localOutages = Objects.requireNonNull($.localOutages, "expected parameter 'localOutages' to be non-null");
            return $;
        }
    }

}
