// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.AutotagEntitySelectorBasedRuleArgs;
import com.pulumi.dynatrace.inputs.AutotagRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AutotagState extends com.pulumi.resources.ResourceArgs {

    public static final AutotagState Empty = new AutotagState();

    /**
     * The description of the auto-tag.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the auto-tag.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
     * 
     */
    @Import(name="entitySelectorBasedRules")
    private @Nullable Output<List<AutotagEntitySelectorBasedRuleArgs>> entitySelectorBasedRules;

    /**
     * @return A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
     * 
     */
    public Optional<Output<List<AutotagEntitySelectorBasedRuleArgs>>> entitySelectorBasedRules() {
        return Optional.ofNullable(this.entitySelectorBasedRules);
    }

    /**
     * The name of the auto-tag, which is applied to entities. Additionally you can specify a **valueFormat** in the tag rule.
     * In that case the tag is used in the `name:valueFormat` format. For example you can extend the `Infrastructure` tag to
     * `Infrastructure:Windows` and `Infrastructure:Linux`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the auto-tag, which is applied to entities. Additionally you can specify a **valueFormat** in the tag rule.
     * In that case the tag is used in the `name:valueFormat` format. For example you can extend the `Infrastructure` tag to
     * `Infrastructure:Windows` and `Infrastructure:Linux`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of rules for management zone usage. Each rule is evaluated independently of all other rules
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<AutotagRuleArgs>> rules;

    /**
     * @return A list of rules for management zone usage. Each rule is evaluated independently of all other rules
     * 
     */
    public Optional<Output<List<AutotagRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    private AutotagState() {}

    private AutotagState(AutotagState $) {
        this.description = $.description;
        this.entitySelectorBasedRules = $.entitySelectorBasedRules;
        this.name = $.name;
        this.rules = $.rules;
        this.unknowns = $.unknowns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutotagState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutotagState $;

        public Builder() {
            $ = new AutotagState();
        }

        public Builder(AutotagState defaults) {
            $ = new AutotagState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the auto-tag.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the auto-tag.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param entitySelectorBasedRules A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
         * 
         * @return builder
         * 
         */
        public Builder entitySelectorBasedRules(@Nullable Output<List<AutotagEntitySelectorBasedRuleArgs>> entitySelectorBasedRules) {
            $.entitySelectorBasedRules = entitySelectorBasedRules;
            return this;
        }

        /**
         * @param entitySelectorBasedRules A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
         * 
         * @return builder
         * 
         */
        public Builder entitySelectorBasedRules(List<AutotagEntitySelectorBasedRuleArgs> entitySelectorBasedRules) {
            return entitySelectorBasedRules(Output.of(entitySelectorBasedRules));
        }

        /**
         * @param entitySelectorBasedRules A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
         * 
         * @return builder
         * 
         */
        public Builder entitySelectorBasedRules(AutotagEntitySelectorBasedRuleArgs... entitySelectorBasedRules) {
            return entitySelectorBasedRules(List.of(entitySelectorBasedRules));
        }

        /**
         * @param name The name of the auto-tag, which is applied to entities. Additionally you can specify a **valueFormat** in the tag rule.
         * In that case the tag is used in the `name:valueFormat` format. For example you can extend the `Infrastructure` tag to
         * `Infrastructure:Windows` and `Infrastructure:Linux`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the auto-tag, which is applied to entities. Additionally you can specify a **valueFormat** in the tag rule.
         * In that case the tag is used in the `name:valueFormat` format. For example you can extend the `Infrastructure` tag to
         * `Infrastructure:Windows` and `Infrastructure:Linux`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param rules A list of rules for management zone usage. Each rule is evaluated independently of all other rules
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<AutotagRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules A list of rules for management zone usage. Each rule is evaluated independently of all other rules
         * 
         * @return builder
         * 
         */
        public Builder rules(List<AutotagRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules A list of rules for management zone usage. Each rule is evaluated independently of all other rules
         * 
         * @return builder
         * 
         */
        public Builder rules(AutotagRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public AutotagState build() {
            return $;
        }
    }

}
