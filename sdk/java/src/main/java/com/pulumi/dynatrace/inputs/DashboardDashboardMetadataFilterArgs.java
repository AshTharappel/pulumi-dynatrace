// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DashboardDashboardMetadataFilterManagementZoneArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardDashboardMetadataFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardDashboardMetadataFilterArgs Empty = new DashboardDashboardMetadataFilterArgs();

    @Import(name="managementZones")
    private @Nullable Output<List<DashboardDashboardMetadataFilterManagementZoneArgs>> managementZones;

    public Optional<Output<List<DashboardDashboardMetadataFilterManagementZoneArgs>>> managementZones() {
        return Optional.ofNullable(this.managementZones);
    }

    @Import(name="timeframe")
    private @Nullable Output<String> timeframe;

    public Optional<Output<String>> timeframe() {
        return Optional.ofNullable(this.timeframe);
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    private DashboardDashboardMetadataFilterArgs() {}

    private DashboardDashboardMetadataFilterArgs(DashboardDashboardMetadataFilterArgs $) {
        this.managementZones = $.managementZones;
        this.timeframe = $.timeframe;
        this.unknowns = $.unknowns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardDashboardMetadataFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardDashboardMetadataFilterArgs $;

        public Builder() {
            $ = new DashboardDashboardMetadataFilterArgs();
        }

        public Builder(DashboardDashboardMetadataFilterArgs defaults) {
            $ = new DashboardDashboardMetadataFilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder managementZones(@Nullable Output<List<DashboardDashboardMetadataFilterManagementZoneArgs>> managementZones) {
            $.managementZones = managementZones;
            return this;
        }

        public Builder managementZones(List<DashboardDashboardMetadataFilterManagementZoneArgs> managementZones) {
            return managementZones(Output.of(managementZones));
        }

        public Builder managementZones(DashboardDashboardMetadataFilterManagementZoneArgs... managementZones) {
            return managementZones(List.of(managementZones));
        }

        public Builder timeframe(@Nullable Output<String> timeframe) {
            $.timeframe = timeframe;
            return this;
        }

        public Builder timeframe(String timeframe) {
            return timeframe(Output.of(timeframe));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public DashboardDashboardMetadataFilterArgs build() {
            return $;
        }
    }

}
