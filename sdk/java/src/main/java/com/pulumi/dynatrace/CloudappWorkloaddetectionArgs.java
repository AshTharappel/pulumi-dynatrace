// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.CloudappWorkloaddetectionCloudFoundryArgs;
import com.pulumi.dynatrace.inputs.CloudappWorkloaddetectionDockerArgs;
import com.pulumi.dynatrace.inputs.CloudappWorkloaddetectionKubernetesArgs;
import java.util.Objects;


public final class CloudappWorkloaddetectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudappWorkloaddetectionArgs Empty = new CloudappWorkloaddetectionArgs();

    /**
     * Enable this setting to get * Processes of Cloud Foundry application instances merged into process groups by Cloud
     * Foundry application. * Container resource metrics (Container group instance entities) and [related
     * screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
     * 
     */
    @Import(name="cloudFoundry", required=true)
    private Output<CloudappWorkloaddetectionCloudFoundryArgs> cloudFoundry;

    /**
     * @return Enable this setting to get * Processes of Cloud Foundry application instances merged into process groups by Cloud
     * Foundry application. * Container resource metrics (Container group instance entities) and [related
     * screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
     * 
     */
    public Output<CloudappWorkloaddetectionCloudFoundryArgs> cloudFoundry() {
        return this.cloudFoundry;
    }

    /**
     * Enable this setting for plain Docker environments to get * Container resource metrics (Container group instance
     * entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
     * 
     */
    @Import(name="docker", required=true)
    private Output<CloudappWorkloaddetectionDockerArgs> docker;

    /**
     * @return Enable this setting for plain Docker environments to get * Container resource metrics (Container group instance
     * entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
     * 
     */
    public Output<CloudappWorkloaddetectionDockerArgs> docker() {
        return this.docker;
    }

    /**
     * Enable this setting to get * Insights into your Kubernetes namespaces, workloads and pods (cloud application namespace,
     * cloud application and cloud application instance and entities). * Container resource metrics (container group instance
     * entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Similar workloads
     * merged into process groups based on defined rules (see below). * Version detection for services that run in Kubernetes
     * workloads.
     * 
     */
    @Import(name="kubernetes", required=true)
    private Output<CloudappWorkloaddetectionKubernetesArgs> kubernetes;

    /**
     * @return Enable this setting to get * Insights into your Kubernetes namespaces, workloads and pods (cloud application namespace,
     * cloud application and cloud application instance and entities). * Container resource metrics (container group instance
     * entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Similar workloads
     * merged into process groups based on defined rules (see below). * Version detection for services that run in Kubernetes
     * workloads.
     * 
     */
    public Output<CloudappWorkloaddetectionKubernetesArgs> kubernetes() {
        return this.kubernetes;
    }

    private CloudappWorkloaddetectionArgs() {}

    private CloudappWorkloaddetectionArgs(CloudappWorkloaddetectionArgs $) {
        this.cloudFoundry = $.cloudFoundry;
        this.docker = $.docker;
        this.kubernetes = $.kubernetes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudappWorkloaddetectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudappWorkloaddetectionArgs $;

        public Builder() {
            $ = new CloudappWorkloaddetectionArgs();
        }

        public Builder(CloudappWorkloaddetectionArgs defaults) {
            $ = new CloudappWorkloaddetectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudFoundry Enable this setting to get * Processes of Cloud Foundry application instances merged into process groups by Cloud
         * Foundry application. * Container resource metrics (Container group instance entities) and [related
         * screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
         * 
         * @return builder
         * 
         */
        public Builder cloudFoundry(Output<CloudappWorkloaddetectionCloudFoundryArgs> cloudFoundry) {
            $.cloudFoundry = cloudFoundry;
            return this;
        }

        /**
         * @param cloudFoundry Enable this setting to get * Processes of Cloud Foundry application instances merged into process groups by Cloud
         * Foundry application. * Container resource metrics (Container group instance entities) and [related
         * screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
         * 
         * @return builder
         * 
         */
        public Builder cloudFoundry(CloudappWorkloaddetectionCloudFoundryArgs cloudFoundry) {
            return cloudFoundry(Output.of(cloudFoundry));
        }

        /**
         * @param docker Enable this setting for plain Docker environments to get * Container resource metrics (Container group instance
         * entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
         * 
         * @return builder
         * 
         */
        public Builder docker(Output<CloudappWorkloaddetectionDockerArgs> docker) {
            $.docker = docker;
            return this;
        }

        /**
         * @param docker Enable this setting for plain Docker environments to get * Container resource metrics (Container group instance
         * entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
         * 
         * @return builder
         * 
         */
        public Builder docker(CloudappWorkloaddetectionDockerArgs docker) {
            return docker(Output.of(docker));
        }

        /**
         * @param kubernetes Enable this setting to get * Insights into your Kubernetes namespaces, workloads and pods (cloud application namespace,
         * cloud application and cloud application instance and entities). * Container resource metrics (container group instance
         * entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Similar workloads
         * merged into process groups based on defined rules (see below). * Version detection for services that run in Kubernetes
         * workloads.
         * 
         * @return builder
         * 
         */
        public Builder kubernetes(Output<CloudappWorkloaddetectionKubernetesArgs> kubernetes) {
            $.kubernetes = kubernetes;
            return this;
        }

        /**
         * @param kubernetes Enable this setting to get * Insights into your Kubernetes namespaces, workloads and pods (cloud application namespace,
         * cloud application and cloud application instance and entities). * Container resource metrics (container group instance
         * entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Similar workloads
         * merged into process groups based on defined rules (see below). * Version detection for services that run in Kubernetes
         * workloads.
         * 
         * @return builder
         * 
         */
        public Builder kubernetes(CloudappWorkloaddetectionKubernetesArgs kubernetes) {
            return kubernetes(Output.of(kubernetes));
        }

        public CloudappWorkloaddetectionArgs build() {
            $.cloudFoundry = Objects.requireNonNull($.cloudFoundry, "expected parameter 'cloudFoundry' to be non-null");
            $.docker = Objects.requireNonNull($.docker, "expected parameter 'docker' to be non-null");
            $.kubernetes = Objects.requireNonNull($.kubernetes, "expected parameter 'kubernetes' to be non-null");
            return $;
        }
    }

}
