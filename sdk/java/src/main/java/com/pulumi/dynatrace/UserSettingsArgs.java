// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class UserSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserSettingsArgs Empty = new UserSettingsArgs();

    /**
     * Possible Values: `Auto`, `En`, `Ja`
     * 
     */
    @Import(name="language", required=true)
    private Output<String> language;

    /**
     * @return Possible Values: `Auto`, `En`, `Ja`
     * 
     */
    public Output<String> language() {
        return this.language;
    }

    /**
     * Region
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return Region
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * The scope of this setting (user, userdefaults)
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return The scope of this setting (user, userdefaults)
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    /**
     * Possible Values: `Auto`, `Dark`, `Light`
     * 
     */
    @Import(name="theme", required=true)
    private Output<String> theme;

    /**
     * @return Possible Values: `Auto`, `Dark`, `Light`
     * 
     */
    public Output<String> theme() {
        return this.theme;
    }

    /**
     * Timezone
     * 
     */
    @Import(name="timezone", required=true)
    private Output<String> timezone;

    /**
     * @return Timezone
     * 
     */
    public Output<String> timezone() {
        return this.timezone;
    }

    private UserSettingsArgs() {}

    private UserSettingsArgs(UserSettingsArgs $) {
        this.language = $.language;
        this.region = $.region;
        this.scope = $.scope;
        this.theme = $.theme;
        this.timezone = $.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserSettingsArgs $;

        public Builder() {
            $ = new UserSettingsArgs();
        }

        public Builder(UserSettingsArgs defaults) {
            $ = new UserSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param language Possible Values: `Auto`, `En`, `Ja`
         * 
         * @return builder
         * 
         */
        public Builder language(Output<String> language) {
            $.language = language;
            return this;
        }

        /**
         * @param language Possible Values: `Auto`, `En`, `Ja`
         * 
         * @return builder
         * 
         */
        public Builder language(String language) {
            return language(Output.of(language));
        }

        /**
         * @param region Region
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param scope The scope of this setting (user, userdefaults)
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope of this setting (user, userdefaults)
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param theme Possible Values: `Auto`, `Dark`, `Light`
         * 
         * @return builder
         * 
         */
        public Builder theme(Output<String> theme) {
            $.theme = theme;
            return this;
        }

        /**
         * @param theme Possible Values: `Auto`, `Dark`, `Light`
         * 
         * @return builder
         * 
         */
        public Builder theme(String theme) {
            return theme(Output.of(theme));
        }

        /**
         * @param timezone Timezone
         * 
         * @return builder
         * 
         */
        public Builder timezone(Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone Timezone
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        public UserSettingsArgs build() {
            $.language = Objects.requireNonNull($.language, "expected parameter 'language' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            $.theme = Objects.requireNonNull($.theme, "expected parameter 'theme' to be non-null");
            $.timezone = Objects.requireNonNull($.timezone, "expected parameter 'timezone' to be non-null");
            return $;
        }
    }

}
