// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlersArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlersArgs Empty = new WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlersArgs();

    @Import(name="blur")
    private @Nullable Output<Boolean> blur;

    public Optional<Output<Boolean>> blur() {
        return Optional.ofNullable(this.blur);
    }

    @Import(name="change")
    private @Nullable Output<Boolean> change;

    public Optional<Output<Boolean>> change() {
        return Optional.ofNullable(this.change);
    }

    @Import(name="click")
    private @Nullable Output<Boolean> click;

    public Optional<Output<Boolean>> click() {
        return Optional.ofNullable(this.click);
    }

    @Import(name="maxDomNodes", required=true)
    private Output<Integer> maxDomNodes;

    public Output<Integer> maxDomNodes() {
        return this.maxDomNodes;
    }

    @Import(name="mouseup")
    private @Nullable Output<Boolean> mouseup;

    public Optional<Output<Boolean>> mouseup() {
        return Optional.ofNullable(this.mouseup);
    }

    @Import(name="toStringMethod")
    private @Nullable Output<Boolean> toStringMethod;

    public Optional<Output<Boolean>> toStringMethod() {
        return Optional.ofNullable(this.toStringMethod);
    }

    @Import(name="useMouseUpEventForClicks")
    private @Nullable Output<Boolean> useMouseUpEventForClicks;

    public Optional<Output<Boolean>> useMouseUpEventForClicks() {
        return Optional.ofNullable(this.useMouseUpEventForClicks);
    }

    private WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlersArgs() {}

    private WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlersArgs(WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlersArgs $) {
        this.blur = $.blur;
        this.change = $.change;
        this.click = $.click;
        this.maxDomNodes = $.maxDomNodes;
        this.mouseup = $.mouseup;
        this.toStringMethod = $.toStringMethod;
        this.useMouseUpEventForClicks = $.useMouseUpEventForClicks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlersArgs $;

        public Builder() {
            $ = new WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlersArgs();
        }

        public Builder(WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlersArgs defaults) {
            $ = new WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlersArgs(Objects.requireNonNull(defaults));
        }

        public Builder blur(@Nullable Output<Boolean> blur) {
            $.blur = blur;
            return this;
        }

        public Builder blur(Boolean blur) {
            return blur(Output.of(blur));
        }

        public Builder change(@Nullable Output<Boolean> change) {
            $.change = change;
            return this;
        }

        public Builder change(Boolean change) {
            return change(Output.of(change));
        }

        public Builder click(@Nullable Output<Boolean> click) {
            $.click = click;
            return this;
        }

        public Builder click(Boolean click) {
            return click(Output.of(click));
        }

        public Builder maxDomNodes(Output<Integer> maxDomNodes) {
            $.maxDomNodes = maxDomNodes;
            return this;
        }

        public Builder maxDomNodes(Integer maxDomNodes) {
            return maxDomNodes(Output.of(maxDomNodes));
        }

        public Builder mouseup(@Nullable Output<Boolean> mouseup) {
            $.mouseup = mouseup;
            return this;
        }

        public Builder mouseup(Boolean mouseup) {
            return mouseup(Output.of(mouseup));
        }

        public Builder toStringMethod(@Nullable Output<Boolean> toStringMethod) {
            $.toStringMethod = toStringMethod;
            return this;
        }

        public Builder toStringMethod(Boolean toStringMethod) {
            return toStringMethod(Output.of(toStringMethod));
        }

        public Builder useMouseUpEventForClicks(@Nullable Output<Boolean> useMouseUpEventForClicks) {
            $.useMouseUpEventForClicks = useMouseUpEventForClicks;
            return this;
        }

        public Builder useMouseUpEventForClicks(Boolean useMouseUpEventForClicks) {
            return useMouseUpEventForClicks(Output.of(useMouseUpEventForClicks));
        }

        public WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlersArgs build() {
            $.maxDomNodes = Objects.requireNonNull($.maxDomNodes, "expected parameter 'maxDomNodes' to be non-null");
            return $;
        }
    }

}
