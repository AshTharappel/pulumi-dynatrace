// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DeclarativeGroupingDetectionProcessDefinitionRulesArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeclarativeGroupingDetectionProcessDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeclarativeGroupingDetectionProcessDefinitionArgs Empty = new DeclarativeGroupingDetectionProcessDefinitionArgs();

    @Import(name="id", required=true)
    private Output<String> id;

    public Output<String> id() {
        return this.id;
    }

    @Import(name="processGroupName", required=true)
    private Output<String> processGroupName;

    public Output<String> processGroupName() {
        return this.processGroupName;
    }

    @Import(name="report", required=true)
    private Output<String> report;

    public Output<String> report() {
        return this.report;
    }

    @Import(name="rules")
    private @Nullable Output<DeclarativeGroupingDetectionProcessDefinitionRulesArgs> rules;

    public Optional<Output<DeclarativeGroupingDetectionProcessDefinitionRulesArgs>> rules() {
        return Optional.ofNullable(this.rules);
    }

    private DeclarativeGroupingDetectionProcessDefinitionArgs() {}

    private DeclarativeGroupingDetectionProcessDefinitionArgs(DeclarativeGroupingDetectionProcessDefinitionArgs $) {
        this.id = $.id;
        this.processGroupName = $.processGroupName;
        this.report = $.report;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeclarativeGroupingDetectionProcessDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeclarativeGroupingDetectionProcessDefinitionArgs $;

        public Builder() {
            $ = new DeclarativeGroupingDetectionProcessDefinitionArgs();
        }

        public Builder(DeclarativeGroupingDetectionProcessDefinitionArgs defaults) {
            $ = new DeclarativeGroupingDetectionProcessDefinitionArgs(Objects.requireNonNull(defaults));
        }

        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder processGroupName(Output<String> processGroupName) {
            $.processGroupName = processGroupName;
            return this;
        }

        public Builder processGroupName(String processGroupName) {
            return processGroupName(Output.of(processGroupName));
        }

        public Builder report(Output<String> report) {
            $.report = report;
            return this;
        }

        public Builder report(String report) {
            return report(Output.of(report));
        }

        public Builder rules(@Nullable Output<DeclarativeGroupingDetectionProcessDefinitionRulesArgs> rules) {
            $.rules = rules;
            return this;
        }

        public Builder rules(DeclarativeGroupingDetectionProcessDefinitionRulesArgs rules) {
            return rules(Output.of(rules));
        }

        public DeclarativeGroupingDetectionProcessDefinitionArgs build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.processGroupName = Objects.requireNonNull($.processGroupName, "expected parameter 'processGroupName' to be non-null");
            $.report = Objects.requireNonNull($.report, "expected parameter 'report' to be non-null");
            return $;
        }
    }

}
