// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticLocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticLocationArgs Empty = new SyntheticLocationArgs();

    /**
     * Auto upgrade of Chromium is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="autoUpdateChromium")
    private @Nullable Output<Boolean> autoUpdateChromium;

    /**
     * @return Auto upgrade of Chromium is enabled (`true`) or disabled (`false`)
     * 
     */
    public Optional<Output<Boolean>> autoUpdateChromium() {
        return Optional.ofNullable(this.autoUpdateChromium);
    }

    /**
     * The alerting of location outage is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="availabilityLocationOutage")
    private @Nullable Output<Boolean> availabilityLocationOutage;

    /**
     * @return The alerting of location outage is enabled (`true`) or disabled (`false`)
     * 
     */
    public Optional<Output<Boolean>> availabilityLocationOutage() {
        return Optional.ofNullable(this.availabilityLocationOutage);
    }

    /**
     * The alerting of node outage is enabled (`true`) or disabled (`false`).
     * 
     */
    @Import(name="availabilityNodeOutage")
    private @Nullable Output<Boolean> availabilityNodeOutage;

    /**
     * @return The alerting of node outage is enabled (`true`) or disabled (`false`).
     * 
     */
    public Optional<Output<Boolean>> availabilityNodeOutage() {
        return Optional.ofNullable(this.availabilityNodeOutage);
    }

    /**
     * The notifications of location and node outage is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="availabilityNotificationsEnabled")
    private @Nullable Output<Boolean> availabilityNotificationsEnabled;

    /**
     * @return The notifications of location and node outage is enabled (`true`) or disabled (`false`)
     * 
     */
    public Optional<Output<Boolean>> availabilityNotificationsEnabled() {
        return Optional.ofNullable(this.availabilityNotificationsEnabled);
    }

    /**
     * The city of the location
     * 
     */
    @Import(name="city")
    private @Nullable Output<String> city;

    /**
     * @return The city of the location
     * 
     */
    public Optional<Output<String>> city() {
        return Optional.ofNullable(this.city);
    }

    /**
     * The country code of the location. Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for
     * example, `AT` for Austria or `PL` for Poland)
     * 
     */
    @Import(name="countryCode")
    private @Nullable Output<String> countryCode;

    /**
     * @return The country code of the location. Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for
     * example, `AT` for Austria or `PL` for Poland)
     * 
     */
    public Optional<Output<String>> countryCode() {
        return Optional.ofNullable(this.countryCode);
    }

    /**
     * The deployment type of the location: * `STANDARD`: The location is deployed on Windows or Linux. * `KUBERNETES`: The
     * location is deployed on Kubernetes
     * 
     */
    @Import(name="deploymentType")
    private @Nullable Output<String> deploymentType;

    /**
     * @return The deployment type of the location: * `STANDARD`: The location is deployed on Windows or Linux. * `KUBERNETES`: The
     * location is deployed on Kubernetes
     * 
     */
    public Optional<Output<String>> deploymentType() {
        return Optional.ofNullable(this.deploymentType);
    }

    /**
     * The latitude of the location in `DDD.dddd` format
     * 
     */
    @Import(name="latitude", required=true)
    private Output<Double> latitude;

    /**
     * @return The latitude of the location in `DDD.dddd` format
     * 
     */
    public Output<Double> latitude() {
        return this.latitude;
    }

    /**
     * Alert if the location or node outage lasts longer than *X* minutes. Only applicable when
     * **availability_location_outage** or **availability_node_outage** is set to `true`
     * 
     */
    @Import(name="locationNodeOutageDelayInMinutes")
    private @Nullable Output<Integer> locationNodeOutageDelayInMinutes;

    /**
     * @return Alert if the location or node outage lasts longer than *X* minutes. Only applicable when
     * **availability_location_outage** or **availability_node_outage** is set to `true`
     * 
     */
    public Optional<Output<Integer>> locationNodeOutageDelayInMinutes() {
        return Optional.ofNullable(this.locationNodeOutageDelayInMinutes);
    }

    /**
     * The longitude of the location in `DDD.dddd` format
     * 
     */
    @Import(name="longitude", required=true)
    private Output<Double> longitude;

    /**
     * @return The longitude of the location in `DDD.dddd` format
     * 
     */
    public Output<Double> longitude() {
        return this.longitude;
    }

    /**
     * The name of the location
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the location
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of synthetic nodes belonging to the location. You can retrieve the list of available nodes with the [GET all
     * nodes](https://dt-url.net/miy3rpl) call
     * 
     */
    @Import(name="nodes")
    private @Nullable Output<List<String>> nodes;

    /**
     * @return A list of synthetic nodes belonging to the location. You can retrieve the list of available nodes with the [GET all
     * nodes](https://dt-url.net/miy3rpl) call
     * 
     */
    public Optional<Output<List<String>>> nodes() {
        return Optional.ofNullable(this.nodes);
    }

    /**
     * The region code of the location. For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca)
     * use ISO 3166-2 state codes (without `US-` or `CA-` prefix), for example, `VA` for Virginia or `OR` for Oregon. For the
     * rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes)
     * 
     */
    @Import(name="regionCode")
    private @Nullable Output<String> regionCode;

    /**
     * @return The region code of the location. For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca)
     * use ISO 3166-2 state codes (without `US-` or `CA-` prefix), for example, `VA` for Virginia or `OR` for Oregon. For the
     * rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes)
     * 
     */
    public Optional<Output<String>> regionCode() {
        return Optional.ofNullable(this.regionCode);
    }

    private SyntheticLocationArgs() {}

    private SyntheticLocationArgs(SyntheticLocationArgs $) {
        this.autoUpdateChromium = $.autoUpdateChromium;
        this.availabilityLocationOutage = $.availabilityLocationOutage;
        this.availabilityNodeOutage = $.availabilityNodeOutage;
        this.availabilityNotificationsEnabled = $.availabilityNotificationsEnabled;
        this.city = $.city;
        this.countryCode = $.countryCode;
        this.deploymentType = $.deploymentType;
        this.latitude = $.latitude;
        this.locationNodeOutageDelayInMinutes = $.locationNodeOutageDelayInMinutes;
        this.longitude = $.longitude;
        this.name = $.name;
        this.nodes = $.nodes;
        this.regionCode = $.regionCode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticLocationArgs $;

        public Builder() {
            $ = new SyntheticLocationArgs();
        }

        public Builder(SyntheticLocationArgs defaults) {
            $ = new SyntheticLocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoUpdateChromium Auto upgrade of Chromium is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder autoUpdateChromium(@Nullable Output<Boolean> autoUpdateChromium) {
            $.autoUpdateChromium = autoUpdateChromium;
            return this;
        }

        /**
         * @param autoUpdateChromium Auto upgrade of Chromium is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder autoUpdateChromium(Boolean autoUpdateChromium) {
            return autoUpdateChromium(Output.of(autoUpdateChromium));
        }

        /**
         * @param availabilityLocationOutage The alerting of location outage is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder availabilityLocationOutage(@Nullable Output<Boolean> availabilityLocationOutage) {
            $.availabilityLocationOutage = availabilityLocationOutage;
            return this;
        }

        /**
         * @param availabilityLocationOutage The alerting of location outage is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder availabilityLocationOutage(Boolean availabilityLocationOutage) {
            return availabilityLocationOutage(Output.of(availabilityLocationOutage));
        }

        /**
         * @param availabilityNodeOutage The alerting of node outage is enabled (`true`) or disabled (`false`).
         * 
         * @return builder
         * 
         */
        public Builder availabilityNodeOutage(@Nullable Output<Boolean> availabilityNodeOutage) {
            $.availabilityNodeOutage = availabilityNodeOutage;
            return this;
        }

        /**
         * @param availabilityNodeOutage The alerting of node outage is enabled (`true`) or disabled (`false`).
         * 
         * @return builder
         * 
         */
        public Builder availabilityNodeOutage(Boolean availabilityNodeOutage) {
            return availabilityNodeOutage(Output.of(availabilityNodeOutage));
        }

        /**
         * @param availabilityNotificationsEnabled The notifications of location and node outage is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder availabilityNotificationsEnabled(@Nullable Output<Boolean> availabilityNotificationsEnabled) {
            $.availabilityNotificationsEnabled = availabilityNotificationsEnabled;
            return this;
        }

        /**
         * @param availabilityNotificationsEnabled The notifications of location and node outage is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder availabilityNotificationsEnabled(Boolean availabilityNotificationsEnabled) {
            return availabilityNotificationsEnabled(Output.of(availabilityNotificationsEnabled));
        }

        /**
         * @param city The city of the location
         * 
         * @return builder
         * 
         */
        public Builder city(@Nullable Output<String> city) {
            $.city = city;
            return this;
        }

        /**
         * @param city The city of the location
         * 
         * @return builder
         * 
         */
        public Builder city(String city) {
            return city(Output.of(city));
        }

        /**
         * @param countryCode The country code of the location. Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for
         * example, `AT` for Austria or `PL` for Poland)
         * 
         * @return builder
         * 
         */
        public Builder countryCode(@Nullable Output<String> countryCode) {
            $.countryCode = countryCode;
            return this;
        }

        /**
         * @param countryCode The country code of the location. Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for
         * example, `AT` for Austria or `PL` for Poland)
         * 
         * @return builder
         * 
         */
        public Builder countryCode(String countryCode) {
            return countryCode(Output.of(countryCode));
        }

        /**
         * @param deploymentType The deployment type of the location: * `STANDARD`: The location is deployed on Windows or Linux. * `KUBERNETES`: The
         * location is deployed on Kubernetes
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(@Nullable Output<String> deploymentType) {
            $.deploymentType = deploymentType;
            return this;
        }

        /**
         * @param deploymentType The deployment type of the location: * `STANDARD`: The location is deployed on Windows or Linux. * `KUBERNETES`: The
         * location is deployed on Kubernetes
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(String deploymentType) {
            return deploymentType(Output.of(deploymentType));
        }

        /**
         * @param latitude The latitude of the location in `DDD.dddd` format
         * 
         * @return builder
         * 
         */
        public Builder latitude(Output<Double> latitude) {
            $.latitude = latitude;
            return this;
        }

        /**
         * @param latitude The latitude of the location in `DDD.dddd` format
         * 
         * @return builder
         * 
         */
        public Builder latitude(Double latitude) {
            return latitude(Output.of(latitude));
        }

        /**
         * @param locationNodeOutageDelayInMinutes Alert if the location or node outage lasts longer than *X* minutes. Only applicable when
         * **availability_location_outage** or **availability_node_outage** is set to `true`
         * 
         * @return builder
         * 
         */
        public Builder locationNodeOutageDelayInMinutes(@Nullable Output<Integer> locationNodeOutageDelayInMinutes) {
            $.locationNodeOutageDelayInMinutes = locationNodeOutageDelayInMinutes;
            return this;
        }

        /**
         * @param locationNodeOutageDelayInMinutes Alert if the location or node outage lasts longer than *X* minutes. Only applicable when
         * **availability_location_outage** or **availability_node_outage** is set to `true`
         * 
         * @return builder
         * 
         */
        public Builder locationNodeOutageDelayInMinutes(Integer locationNodeOutageDelayInMinutes) {
            return locationNodeOutageDelayInMinutes(Output.of(locationNodeOutageDelayInMinutes));
        }

        /**
         * @param longitude The longitude of the location in `DDD.dddd` format
         * 
         * @return builder
         * 
         */
        public Builder longitude(Output<Double> longitude) {
            $.longitude = longitude;
            return this;
        }

        /**
         * @param longitude The longitude of the location in `DDD.dddd` format
         * 
         * @return builder
         * 
         */
        public Builder longitude(Double longitude) {
            return longitude(Output.of(longitude));
        }

        /**
         * @param name The name of the location
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the location
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodes A list of synthetic nodes belonging to the location. You can retrieve the list of available nodes with the [GET all
         * nodes](https://dt-url.net/miy3rpl) call
         * 
         * @return builder
         * 
         */
        public Builder nodes(@Nullable Output<List<String>> nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param nodes A list of synthetic nodes belonging to the location. You can retrieve the list of available nodes with the [GET all
         * nodes](https://dt-url.net/miy3rpl) call
         * 
         * @return builder
         * 
         */
        public Builder nodes(List<String> nodes) {
            return nodes(Output.of(nodes));
        }

        /**
         * @param nodes A list of synthetic nodes belonging to the location. You can retrieve the list of available nodes with the [GET all
         * nodes](https://dt-url.net/miy3rpl) call
         * 
         * @return builder
         * 
         */
        public Builder nodes(String... nodes) {
            return nodes(List.of(nodes));
        }

        /**
         * @param regionCode The region code of the location. For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca)
         * use ISO 3166-2 state codes (without `US-` or `CA-` prefix), for example, `VA` for Virginia or `OR` for Oregon. For the
         * rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes)
         * 
         * @return builder
         * 
         */
        public Builder regionCode(@Nullable Output<String> regionCode) {
            $.regionCode = regionCode;
            return this;
        }

        /**
         * @param regionCode The region code of the location. For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca)
         * use ISO 3166-2 state codes (without `US-` or `CA-` prefix), for example, `VA` for Virginia or `OR` for Oregon. For the
         * rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes)
         * 
         * @return builder
         * 
         */
        public Builder regionCode(String regionCode) {
            return regionCode(Output.of(regionCode));
        }

        public SyntheticLocationArgs build() {
            $.latitude = Objects.requireNonNull($.latitude, "expected parameter 'latitude' to be non-null");
            $.longitude = Objects.requireNonNull($.longitude, "expected parameter 'longitude' to be non-null");
            return $;
        }
    }

}
