// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationAnsibleTowerArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationAnsibleTowerArgs Empty = new NotificationAnsibleTowerArgs();

    /**
     * Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     * 
     */
    @Import(name="acceptAnyCertificate", required=true)
    private Output<Boolean> acceptAnyCertificate;

    /**
     * @return Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     * 
     */
    public Output<Boolean> acceptAnyCertificate() {
        return this.acceptAnyCertificate;
    }

    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="active", required=true)
    private Output<Boolean> active;

    /**
     * @return The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> active() {
        return this.active;
    }

    /**
     * The ID of the associated alerting profile
     * 
     */
    @Import(name="alertingProfile", required=true)
    private Output<String> alertingProfile;

    /**
     * @return The ID of the associated alerting profile
     * 
     */
    public Output<String> alertingProfile() {
        return this.alertingProfile;
    }

    /**
     * The custom message of the notification.   This message will be displayed in the extra variables **Message** field of your job template.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     * 
     */
    @Import(name="customMessage", required=true)
    private Output<String> customMessage;

    /**
     * @return The custom message of the notification.   This message will be displayed in the extra variables **Message** field of your job template.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     * 
     */
    public Output<String> customMessage() {
        return this.customMessage;
    }

    /**
     * The ID of the target Ansible Tower job template
     * 
     */
    @Import(name="jobTemplateId", required=true)
    private Output<Integer> jobTemplateId;

    /**
     * @return The ID of the target Ansible Tower job template
     * 
     */
    public Output<Integer> jobTemplateId() {
        return this.jobTemplateId;
    }

    /**
     * The URL of the target Ansible Tower job template
     * 
     */
    @Import(name="jobTemplateUrl", required=true)
    private Output<String> jobTemplateUrl;

    /**
     * @return The URL of the target Ansible Tower job template
     * 
     */
    public Output<String> jobTemplateUrl() {
        return this.jobTemplateUrl;
    }

    /**
     * The name of the notification configuration
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the notification configuration
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The password for the Ansible Tower account
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password for the Ansible Tower account
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    /**
     * The username of the Ansible Tower account
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The username of the Ansible Tower account
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private NotificationAnsibleTowerArgs() {}

    private NotificationAnsibleTowerArgs(NotificationAnsibleTowerArgs $) {
        this.acceptAnyCertificate = $.acceptAnyCertificate;
        this.active = $.active;
        this.alertingProfile = $.alertingProfile;
        this.customMessage = $.customMessage;
        this.jobTemplateId = $.jobTemplateId;
        this.jobTemplateUrl = $.jobTemplateUrl;
        this.name = $.name;
        this.password = $.password;
        this.unknowns = $.unknowns;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationAnsibleTowerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationAnsibleTowerArgs $;

        public Builder() {
            $ = new NotificationAnsibleTowerArgs();
        }

        public Builder(NotificationAnsibleTowerArgs defaults) {
            $ = new NotificationAnsibleTowerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceptAnyCertificate Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
         * 
         * @return builder
         * 
         */
        public Builder acceptAnyCertificate(Output<Boolean> acceptAnyCertificate) {
            $.acceptAnyCertificate = acceptAnyCertificate;
            return this;
        }

        /**
         * @param acceptAnyCertificate Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
         * 
         * @return builder
         * 
         */
        public Builder acceptAnyCertificate(Boolean acceptAnyCertificate) {
            return acceptAnyCertificate(Output.of(acceptAnyCertificate));
        }

        /**
         * @param active The configuration is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder active(Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active The configuration is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param alertingProfile The ID of the associated alerting profile
         * 
         * @return builder
         * 
         */
        public Builder alertingProfile(Output<String> alertingProfile) {
            $.alertingProfile = alertingProfile;
            return this;
        }

        /**
         * @param alertingProfile The ID of the associated alerting profile
         * 
         * @return builder
         * 
         */
        public Builder alertingProfile(String alertingProfile) {
            return alertingProfile(Output.of(alertingProfile));
        }

        /**
         * @param customMessage The custom message of the notification.   This message will be displayed in the extra variables **Message** field of your job template.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
         * 
         * @return builder
         * 
         */
        public Builder customMessage(Output<String> customMessage) {
            $.customMessage = customMessage;
            return this;
        }

        /**
         * @param customMessage The custom message of the notification.   This message will be displayed in the extra variables **Message** field of your job template.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
         * 
         * @return builder
         * 
         */
        public Builder customMessage(String customMessage) {
            return customMessage(Output.of(customMessage));
        }

        /**
         * @param jobTemplateId The ID of the target Ansible Tower job template
         * 
         * @return builder
         * 
         */
        public Builder jobTemplateId(Output<Integer> jobTemplateId) {
            $.jobTemplateId = jobTemplateId;
            return this;
        }

        /**
         * @param jobTemplateId The ID of the target Ansible Tower job template
         * 
         * @return builder
         * 
         */
        public Builder jobTemplateId(Integer jobTemplateId) {
            return jobTemplateId(Output.of(jobTemplateId));
        }

        /**
         * @param jobTemplateUrl The URL of the target Ansible Tower job template
         * 
         * @return builder
         * 
         */
        public Builder jobTemplateUrl(Output<String> jobTemplateUrl) {
            $.jobTemplateUrl = jobTemplateUrl;
            return this;
        }

        /**
         * @param jobTemplateUrl The URL of the target Ansible Tower job template
         * 
         * @return builder
         * 
         */
        public Builder jobTemplateUrl(String jobTemplateUrl) {
            return jobTemplateUrl(Output.of(jobTemplateUrl));
        }

        /**
         * @param name The name of the notification configuration
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the notification configuration
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password The password for the Ansible Tower account
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password for the Ansible Tower account
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        /**
         * @param username The username of the Ansible Tower account
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username of the Ansible Tower account
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public NotificationAnsibleTowerArgs build() {
            $.acceptAnyCertificate = Objects.requireNonNull($.acceptAnyCertificate, "expected parameter 'acceptAnyCertificate' to be non-null");
            $.active = Objects.requireNonNull($.active, "expected parameter 'active' to be non-null");
            $.alertingProfile = Objects.requireNonNull($.alertingProfile, "expected parameter 'alertingProfile' to be non-null");
            $.customMessage = Objects.requireNonNull($.customMessage, "expected parameter 'customMessage' to be non-null");
            $.jobTemplateId = Objects.requireNonNull($.jobTemplateId, "expected parameter 'jobTemplateId' to be non-null");
            $.jobTemplateUrl = Objects.requireNonNull($.jobTemplateUrl, "expected parameter 'jobTemplateUrl' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
