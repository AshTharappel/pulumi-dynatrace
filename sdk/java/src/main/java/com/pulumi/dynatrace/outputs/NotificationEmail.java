// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NotificationEmail {
    /**
     * @return The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    private Boolean active;
    /**
     * @return The ID of the associated alerting profile
     * 
     */
    private String alertingProfile;
    /**
     * @return The list of the email BCC-recipients
     * 
     */
    private @Nullable List<String> bccReceivers;
    /**
     * @return The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     * 
     */
    private String body;
    /**
     * @return The list of the email CC-recipients
     * 
     */
    private @Nullable List<String> ccReceivers;
    /**
     * @return The name of the notification configuration
     * 
     */
    private String name;
    /**
     * @return The list of the email recipients
     * 
     */
    private @Nullable List<String> receivers;
    /**
     * @return The subject of the email notifications
     * 
     */
    private String subject;
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    private @Nullable String unknowns;

    private NotificationEmail() {}
    /**
     * @return The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    public Boolean active() {
        return this.active;
    }
    /**
     * @return The ID of the associated alerting profile
     * 
     */
    public String alertingProfile() {
        return this.alertingProfile;
    }
    /**
     * @return The list of the email BCC-recipients
     * 
     */
    public List<String> bccReceivers() {
        return this.bccReceivers == null ? List.of() : this.bccReceivers;
    }
    /**
     * @return The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     * 
     */
    public String body() {
        return this.body;
    }
    /**
     * @return The list of the email CC-recipients
     * 
     */
    public List<String> ccReceivers() {
        return this.ccReceivers == null ? List.of() : this.ccReceivers;
    }
    /**
     * @return The name of the notification configuration
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The list of the email recipients
     * 
     */
    public List<String> receivers() {
        return this.receivers == null ? List.of() : this.receivers;
    }
    /**
     * @return The subject of the email notifications
     * 
     */
    public String subject() {
        return this.subject;
    }
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<String> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotificationEmail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean active;
        private String alertingProfile;
        private @Nullable List<String> bccReceivers;
        private String body;
        private @Nullable List<String> ccReceivers;
        private String name;
        private @Nullable List<String> receivers;
        private String subject;
        private @Nullable String unknowns;
        public Builder() {}
        public Builder(NotificationEmail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.alertingProfile = defaults.alertingProfile;
    	      this.bccReceivers = defaults.bccReceivers;
    	      this.body = defaults.body;
    	      this.ccReceivers = defaults.ccReceivers;
    	      this.name = defaults.name;
    	      this.receivers = defaults.receivers;
    	      this.subject = defaults.subject;
    	      this.unknowns = defaults.unknowns;
        }

        @CustomType.Setter
        public Builder active(Boolean active) {
            this.active = Objects.requireNonNull(active);
            return this;
        }
        @CustomType.Setter
        public Builder alertingProfile(String alertingProfile) {
            this.alertingProfile = Objects.requireNonNull(alertingProfile);
            return this;
        }
        @CustomType.Setter
        public Builder bccReceivers(@Nullable List<String> bccReceivers) {
            this.bccReceivers = bccReceivers;
            return this;
        }
        public Builder bccReceivers(String... bccReceivers) {
            return bccReceivers(List.of(bccReceivers));
        }
        @CustomType.Setter
        public Builder body(String body) {
            this.body = Objects.requireNonNull(body);
            return this;
        }
        @CustomType.Setter
        public Builder ccReceivers(@Nullable List<String> ccReceivers) {
            this.ccReceivers = ccReceivers;
            return this;
        }
        public Builder ccReceivers(String... ccReceivers) {
            return ccReceivers(List.of(ccReceivers));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder receivers(@Nullable List<String> receivers) {
            this.receivers = receivers;
            return this;
        }
        public Builder receivers(String... receivers) {
            return receivers(List.of(receivers));
        }
        @CustomType.Setter
        public Builder subject(String subject) {
            this.subject = Objects.requireNonNull(subject);
            return this;
        }
        @CustomType.Setter
        public Builder unknowns(@Nullable String unknowns) {
            this.unknowns = unknowns;
            return this;
        }
        public NotificationEmail build() {
            final var o = new NotificationEmail();
            o.active = active;
            o.alertingProfile = alertingProfile;
            o.bccReceivers = bccReceivers;
            o.body = body;
            o.ccReceivers = ccReceivers;
            o.name = name;
            o.receivers = receivers;
            o.subject = subject;
            o.unknowns = unknowns;
            return o;
        }
    }
}
