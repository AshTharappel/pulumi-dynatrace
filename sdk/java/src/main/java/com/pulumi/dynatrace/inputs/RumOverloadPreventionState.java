// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RumOverloadPreventionState extends com.pulumi.resources.ResourceArgs {

    public static final RumOverloadPreventionState Empty = new RumOverloadPreventionState();

    /**
     * Once this limit is reached, Dynatrace [throttles the number of captured user sessions](https://dt-url.net/fm3v0p7g).
     * 
     */
    @Import(name="overloadPreventionLimit")
    private @Nullable Output<Integer> overloadPreventionLimit;

    /**
     * @return Once this limit is reached, Dynatrace [throttles the number of captured user sessions](https://dt-url.net/fm3v0p7g).
     * 
     */
    public Optional<Output<Integer>> overloadPreventionLimit() {
        return Optional.ofNullable(this.overloadPreventionLimit);
    }

    private RumOverloadPreventionState() {}

    private RumOverloadPreventionState(RumOverloadPreventionState $) {
        this.overloadPreventionLimit = $.overloadPreventionLimit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RumOverloadPreventionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RumOverloadPreventionState $;

        public Builder() {
            $ = new RumOverloadPreventionState();
        }

        public Builder(RumOverloadPreventionState defaults) {
            $ = new RumOverloadPreventionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param overloadPreventionLimit Once this limit is reached, Dynatrace [throttles the number of captured user sessions](https://dt-url.net/fm3v0p7g).
         * 
         * @return builder
         * 
         */
        public Builder overloadPreventionLimit(@Nullable Output<Integer> overloadPreventionLimit) {
            $.overloadPreventionLimit = overloadPreventionLimit;
            return this;
        }

        /**
         * @param overloadPreventionLimit Once this limit is reached, Dynatrace [throttles the number of captured user sessions](https://dt-url.net/fm3v0p7g).
         * 
         * @return builder
         * 
         */
        public Builder overloadPreventionLimit(Integer overloadPreventionLimit) {
            return overloadPreventionLimit(Output.of(overloadPreventionLimit));
        }

        public RumOverloadPreventionState build() {
            return $;
        }
    }

}
