// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogSensitiveDataMaskingMaskingArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogSensitiveDataMaskingMaskingArgs Empty = new LogSensitiveDataMaskingMaskingArgs();

    /**
     * Maximum one capture group is allowed. If none was given, the whole expression will be treated as a capture group.
     * 
     */
    @Import(name="expression", required=true)
    private Output<String> expression;

    /**
     * @return Maximum one capture group is allowed. If none was given, the whole expression will be treated as a capture group.
     * 
     */
    public Output<String> expression() {
        return this.expression;
    }

    /**
     * The string to replace the masked expression with. Irrelevant if `type` is `SHA1`.
     * 
     */
    @Import(name="replacement")
    private @Nullable Output<String> replacement;

    /**
     * @return The string to replace the masked expression with. Irrelevant if `type` is `SHA1`.
     * 
     */
    public Optional<Output<String>> replacement() {
        return Optional.ofNullable(this.replacement);
    }

    /**
     * Possible Values: `SHA1`, `STRING`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Possible Values: `SHA1`, `STRING`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private LogSensitiveDataMaskingMaskingArgs() {}

    private LogSensitiveDataMaskingMaskingArgs(LogSensitiveDataMaskingMaskingArgs $) {
        this.expression = $.expression;
        this.replacement = $.replacement;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogSensitiveDataMaskingMaskingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogSensitiveDataMaskingMaskingArgs $;

        public Builder() {
            $ = new LogSensitiveDataMaskingMaskingArgs();
        }

        public Builder(LogSensitiveDataMaskingMaskingArgs defaults) {
            $ = new LogSensitiveDataMaskingMaskingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expression Maximum one capture group is allowed. If none was given, the whole expression will be treated as a capture group.
         * 
         * @return builder
         * 
         */
        public Builder expression(Output<String> expression) {
            $.expression = expression;
            return this;
        }

        /**
         * @param expression Maximum one capture group is allowed. If none was given, the whole expression will be treated as a capture group.
         * 
         * @return builder
         * 
         */
        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        /**
         * @param replacement The string to replace the masked expression with. Irrelevant if `type` is `SHA1`.
         * 
         * @return builder
         * 
         */
        public Builder replacement(@Nullable Output<String> replacement) {
            $.replacement = replacement;
            return this;
        }

        /**
         * @param replacement The string to replace the masked expression with. Irrelevant if `type` is `SHA1`.
         * 
         * @return builder
         * 
         */
        public Builder replacement(String replacement) {
            return replacement(Output.of(replacement));
        }

        /**
         * @param type Possible Values: `SHA1`, `STRING`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Possible Values: `SHA1`, `STRING`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public LogSensitiveDataMaskingMaskingArgs build() {
            $.expression = Objects.requireNonNull($.expression, "expected parameter 'expression' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
