// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.RequestNamingConditionsConditionComparisonArgs;
import java.lang.String;
import java.util.Objects;


public final class RequestNamingConditionsConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final RequestNamingConditionsConditionArgs Empty = new RequestNamingConditionsConditionArgs();

    @Import(name="attribute", required=true)
    private Output<String> attribute;

    public Output<String> attribute() {
        return this.attribute;
    }

    @Import(name="comparison", required=true)
    private Output<RequestNamingConditionsConditionComparisonArgs> comparison;

    public Output<RequestNamingConditionsConditionComparisonArgs> comparison() {
        return this.comparison;
    }

    private RequestNamingConditionsConditionArgs() {}

    private RequestNamingConditionsConditionArgs(RequestNamingConditionsConditionArgs $) {
        this.attribute = $.attribute;
        this.comparison = $.comparison;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RequestNamingConditionsConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RequestNamingConditionsConditionArgs $;

        public Builder() {
            $ = new RequestNamingConditionsConditionArgs();
        }

        public Builder(RequestNamingConditionsConditionArgs defaults) {
            $ = new RequestNamingConditionsConditionArgs(Objects.requireNonNull(defaults));
        }

        public Builder attribute(Output<String> attribute) {
            $.attribute = attribute;
            return this;
        }

        public Builder attribute(String attribute) {
            return attribute(Output.of(attribute));
        }

        public Builder comparison(Output<RequestNamingConditionsConditionComparisonArgs> comparison) {
            $.comparison = comparison;
            return this;
        }

        public Builder comparison(RequestNamingConditionsConditionComparisonArgs comparison) {
            return comparison(Output.of(comparison));
        }

        public RequestNamingConditionsConditionArgs build() {
            $.attribute = Objects.requireNonNull($.attribute, "expected parameter 'attribute' to be non-null");
            $.comparison = Objects.requireNonNull($.comparison, "expected parameter 'comparison' to be non-null");
            return $;
        }
    }

}
