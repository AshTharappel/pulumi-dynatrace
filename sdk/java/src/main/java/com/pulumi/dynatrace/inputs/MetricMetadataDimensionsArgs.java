// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.MetricMetadataDimensionsDimensionArgs;
import java.util.List;
import java.util.Objects;


public final class MetricMetadataDimensionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricMetadataDimensionsArgs Empty = new MetricMetadataDimensionsArgs();

    @Import(name="dimensions", required=true)
    private Output<List<MetricMetadataDimensionsDimensionArgs>> dimensions;

    public Output<List<MetricMetadataDimensionsDimensionArgs>> dimensions() {
        return this.dimensions;
    }

    private MetricMetadataDimensionsArgs() {}

    private MetricMetadataDimensionsArgs(MetricMetadataDimensionsArgs $) {
        this.dimensions = $.dimensions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricMetadataDimensionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricMetadataDimensionsArgs $;

        public Builder() {
            $ = new MetricMetadataDimensionsArgs();
        }

        public Builder(MetricMetadataDimensionsArgs defaults) {
            $ = new MetricMetadataDimensionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder dimensions(Output<List<MetricMetadataDimensionsDimensionArgs>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        public Builder dimensions(List<MetricMetadataDimensionsDimensionArgs> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        public Builder dimensions(MetricMetadataDimensionsDimensionArgs... dimensions) {
            return dimensions(List.of(dimensions));
        }

        public MetricMetadataDimensionsArgs build() {
            $.dimensions = Objects.requireNonNull($.dimensions, "expected parameter 'dimensions' to be non-null");
            return $;
        }
    }

}
