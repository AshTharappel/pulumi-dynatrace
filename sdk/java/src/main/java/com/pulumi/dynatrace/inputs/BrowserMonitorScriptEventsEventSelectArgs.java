// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptEventsEventSelectSelectionsArgs;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptEventsEventSelectTargetArgs;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptEventsEventSelectValidateArgs;
import com.pulumi.dynatrace.inputs.BrowserMonitorScriptEventsEventSelectWaitArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BrowserMonitorScriptEventsEventSelectArgs extends com.pulumi.resources.ResourceArgs {

    public static final BrowserMonitorScriptEventsEventSelectArgs Empty = new BrowserMonitorScriptEventsEventSelectArgs();

    @Import(name="selections", required=true)
    private Output<BrowserMonitorScriptEventsEventSelectSelectionsArgs> selections;

    public Output<BrowserMonitorScriptEventsEventSelectSelectionsArgs> selections() {
        return this.selections;
    }

    @Import(name="target")
    private @Nullable Output<BrowserMonitorScriptEventsEventSelectTargetArgs> target;

    public Optional<Output<BrowserMonitorScriptEventsEventSelectTargetArgs>> target() {
        return Optional.ofNullable(this.target);
    }

    @Import(name="validate")
    private @Nullable Output<BrowserMonitorScriptEventsEventSelectValidateArgs> validate;

    public Optional<Output<BrowserMonitorScriptEventsEventSelectValidateArgs>> validate() {
        return Optional.ofNullable(this.validate);
    }

    @Import(name="wait")
    private @Nullable Output<BrowserMonitorScriptEventsEventSelectWaitArgs> wait;

    public Optional<Output<BrowserMonitorScriptEventsEventSelectWaitArgs>> wait_() {
        return Optional.ofNullable(this.wait);
    }

    private BrowserMonitorScriptEventsEventSelectArgs() {}

    private BrowserMonitorScriptEventsEventSelectArgs(BrowserMonitorScriptEventsEventSelectArgs $) {
        this.selections = $.selections;
        this.target = $.target;
        this.validate = $.validate;
        this.wait = $.wait;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrowserMonitorScriptEventsEventSelectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrowserMonitorScriptEventsEventSelectArgs $;

        public Builder() {
            $ = new BrowserMonitorScriptEventsEventSelectArgs();
        }

        public Builder(BrowserMonitorScriptEventsEventSelectArgs defaults) {
            $ = new BrowserMonitorScriptEventsEventSelectArgs(Objects.requireNonNull(defaults));
        }

        public Builder selections(Output<BrowserMonitorScriptEventsEventSelectSelectionsArgs> selections) {
            $.selections = selections;
            return this;
        }

        public Builder selections(BrowserMonitorScriptEventsEventSelectSelectionsArgs selections) {
            return selections(Output.of(selections));
        }

        public Builder target(@Nullable Output<BrowserMonitorScriptEventsEventSelectTargetArgs> target) {
            $.target = target;
            return this;
        }

        public Builder target(BrowserMonitorScriptEventsEventSelectTargetArgs target) {
            return target(Output.of(target));
        }

        public Builder validate(@Nullable Output<BrowserMonitorScriptEventsEventSelectValidateArgs> validate) {
            $.validate = validate;
            return this;
        }

        public Builder validate(BrowserMonitorScriptEventsEventSelectValidateArgs validate) {
            return validate(Output.of(validate));
        }

        public Builder wait_(@Nullable Output<BrowserMonitorScriptEventsEventSelectWaitArgs> wait) {
            $.wait = wait;
            return this;
        }

        public Builder wait_(BrowserMonitorScriptEventsEventSelectWaitArgs wait) {
            return wait_(Output.of(wait));
        }

        public BrowserMonitorScriptEventsEventSelectArgs build() {
            $.selections = Objects.requireNonNull($.selections, "expected parameter 'selections' to be non-null");
            return $;
        }
    }

}
