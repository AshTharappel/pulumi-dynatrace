// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserSessionMetricsValueArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserSessionMetricsValueArgs Empty = new UserSessionMetricsValueArgs();

    /**
     * Field name
     * 
     */
    @Import(name="fieldName")
    private @Nullable Output<String> fieldName;

    /**
     * @return Field name
     * 
     */
    public Optional<Output<String>> fieldName() {
        return Optional.ofNullable(this.fieldName);
    }

    /**
     * Possible Values: `COUNTER`, `FIELD`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Possible Values: `COUNTER`, `FIELD`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private UserSessionMetricsValueArgs() {}

    private UserSessionMetricsValueArgs(UserSessionMetricsValueArgs $) {
        this.fieldName = $.fieldName;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserSessionMetricsValueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserSessionMetricsValueArgs $;

        public Builder() {
            $ = new UserSessionMetricsValueArgs();
        }

        public Builder(UserSessionMetricsValueArgs defaults) {
            $ = new UserSessionMetricsValueArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fieldName Field name
         * 
         * @return builder
         * 
         */
        public Builder fieldName(@Nullable Output<String> fieldName) {
            $.fieldName = fieldName;
            return this;
        }

        /**
         * @param fieldName Field name
         * 
         * @return builder
         * 
         */
        public Builder fieldName(String fieldName) {
            return fieldName(Output.of(fieldName));
        }

        /**
         * @param type Possible Values: `COUNTER`, `FIELD`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Possible Values: `COUNTER`, `FIELD`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public UserSessionMetricsValueArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
