// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.UserSessionMetricsFiltersArgs;
import com.pulumi.dynatrace.inputs.UserSessionMetricsValueArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserSessionMetricsState extends com.pulumi.resources.ResourceArgs {

    public static final UserSessionMetricsState Empty = new UserSessionMetricsState();

    /**
     * Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data point that is of interest to your business. Dimensions are parameters like &#34;browserFamily&#34;, &#34;userType&#34;, &#34;country&#34;. For example, using &#34;userType&#34; as a dimension allows you to split chart data based on user types.
     * 
     */
    @Import(name="dimensions")
    private @Nullable Output<List<String>> dimensions;

    /**
     * @return Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data point that is of interest to your business. Dimensions are parameters like &#34;browserFamily&#34;, &#34;userType&#34;, &#34;country&#34;. For example, using &#34;userType&#34; as a dimension allows you to split chart data based on user types.
     * 
     */
    public Optional<Output<List<String>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Defines the filters for the user session. Filters apply at the moment of extracting the data and only sessions that satisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters in the metric data explorer. For example, using &#34;userType equals REAL_USER&#34; will give you only data from real users, while forcing the synthetic sessions to be ignored.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<UserSessionMetricsFiltersArgs> filters;

    /**
     * @return Defines the filters for the user session. Filters apply at the moment of extracting the data and only sessions that satisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters in the metric data explorer. For example, using &#34;userType equals REAL_USER&#34; will give you only data from real users, while forcing the synthetic sessions to be ignored.
     * 
     */
    public Optional<Output<UserSessionMetricsFiltersArgs>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Metric key
     * 
     */
    @Import(name="metricKey")
    private @Nullable Output<String> metricKey;

    /**
     * @return Metric key
     * 
     */
    public Optional<Output<String>> metricKey() {
        return Optional.ofNullable(this.metricKey);
    }

    /**
     * Defines the type of value to be extracted from the user session. When using **User session counter**, the number of user sessions is counted (similar to count(*) when using USQL). When using **User session field value**, the value of a user session field is extracted.
     * 
     */
    @Import(name="value")
    private @Nullable Output<UserSessionMetricsValueArgs> value;

    /**
     * @return Defines the type of value to be extracted from the user session. When using **User session counter**, the number of user sessions is counted (similar to count(*) when using USQL). When using **User session field value**, the value of a user session field is extracted.
     * 
     */
    public Optional<Output<UserSessionMetricsValueArgs>> value() {
        return Optional.ofNullable(this.value);
    }

    private UserSessionMetricsState() {}

    private UserSessionMetricsState(UserSessionMetricsState $) {
        this.dimensions = $.dimensions;
        this.enabled = $.enabled;
        this.filters = $.filters;
        this.metricKey = $.metricKey;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserSessionMetricsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserSessionMetricsState $;

        public Builder() {
            $ = new UserSessionMetricsState();
        }

        public Builder(UserSessionMetricsState defaults) {
            $ = new UserSessionMetricsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dimensions Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data point that is of interest to your business. Dimensions are parameters like &#34;browserFamily&#34;, &#34;userType&#34;, &#34;country&#34;. For example, using &#34;userType&#34; as a dimension allows you to split chart data based on user types.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(@Nullable Output<List<String>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        /**
         * @param dimensions Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data point that is of interest to your business. Dimensions are parameters like &#34;browserFamily&#34;, &#34;userType&#34;, &#34;country&#34;. For example, using &#34;userType&#34; as a dimension allows you to split chart data based on user types.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(List<String> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        /**
         * @param dimensions Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data point that is of interest to your business. Dimensions are parameters like &#34;browserFamily&#34;, &#34;userType&#34;, &#34;country&#34;. For example, using &#34;userType&#34; as a dimension allows you to split chart data based on user types.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(String... dimensions) {
            return dimensions(List.of(dimensions));
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled This setting is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param filters Defines the filters for the user session. Filters apply at the moment of extracting the data and only sessions that satisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters in the metric data explorer. For example, using &#34;userType equals REAL_USER&#34; will give you only data from real users, while forcing the synthetic sessions to be ignored.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<UserSessionMetricsFiltersArgs> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Defines the filters for the user session. Filters apply at the moment of extracting the data and only sessions that satisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters in the metric data explorer. For example, using &#34;userType equals REAL_USER&#34; will give you only data from real users, while forcing the synthetic sessions to be ignored.
         * 
         * @return builder
         * 
         */
        public Builder filters(UserSessionMetricsFiltersArgs filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param metricKey Metric key
         * 
         * @return builder
         * 
         */
        public Builder metricKey(@Nullable Output<String> metricKey) {
            $.metricKey = metricKey;
            return this;
        }

        /**
         * @param metricKey Metric key
         * 
         * @return builder
         * 
         */
        public Builder metricKey(String metricKey) {
            return metricKey(Output.of(metricKey));
        }

        /**
         * @param value Defines the type of value to be extracted from the user session. When using **User session counter**, the number of user sessions is counted (similar to count(*) when using USQL). When using **User session field value**, the value of a user session field is extracted.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<UserSessionMetricsValueArgs> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Defines the type of value to be extracted from the user session. When using **User session counter**, the number of user sessions is counted (similar to count(*) when using USQL). When using **User session field value**, the value of a user session field is extracted.
         * 
         * @return builder
         * 
         */
        public Builder value(UserSessionMetricsValueArgs value) {
            return value(Output.of(value));
        }

        public UserSessionMetricsState build() {
            return $;
        }
    }

}
