// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.dynatrace.OsServicesArgs;
import com.pulumi.dynatrace.Utilities;
import com.pulumi.dynatrace.inputs.OsServicesState;
import com.pulumi.dynatrace.outputs.OsServicesDetectionConditionsLinux;
import com.pulumi.dynatrace.outputs.OsServicesDetectionConditionsWindows;
import com.pulumi.dynatrace.outputs.OsServicesMetadata;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="dynatrace:index/osServices:OsServices")
public class OsServices extends com.pulumi.resources.CustomResource {
    /**
     * The number of **10-second measurement cycles** before alerting is triggered
     * 
     */
    @Export(name="alertActivationDuration", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> alertActivationDuration;

    /**
     * @return The number of **10-second measurement cycles** before alerting is triggered
     * 
     */
    public Output<Optional<Integer>> alertActivationDuration() {
        return Codegen.optional(this.alertActivationDuration);
    }
    /**
     * Toggle the switch in order to enable or disable alerting for this policy
     * 
     */
    @Export(name="alerting", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> alerting;

    /**
     * @return Toggle the switch in order to enable or disable alerting for this policy
     * 
     */
    public Output<Boolean> alerting() {
        return this.alerting;
    }
    /**
     * Detection rules
     * 
     */
    @Export(name="detectionConditionsLinux", refs={OsServicesDetectionConditionsLinux.class}, tree="[0]")
    private Output</* @Nullable */ OsServicesDetectionConditionsLinux> detectionConditionsLinux;

    /**
     * @return Detection rules
     * 
     */
    public Output<Optional<OsServicesDetectionConditionsLinux>> detectionConditionsLinux() {
        return Codegen.optional(this.detectionConditionsLinux);
    }
    /**
     * Detection rules
     * 
     */
    @Export(name="detectionConditionsWindows", refs={OsServicesDetectionConditionsWindows.class}, tree="[0]")
    private Output</* @Nullable */ OsServicesDetectionConditionsWindows> detectionConditionsWindows;

    /**
     * @return Detection rules
     * 
     */
    public Output<Optional<OsServicesDetectionConditionsWindows>> detectionConditionsWindows() {
        return Codegen.optional(this.detectionConditionsWindows);
    }
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return This setting is enabled (`true`) or disabled (`false`)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * Set of additional key-value properties to be attached to the triggered event.
     * 
     */
    @Export(name="metadata", refs={OsServicesMetadata.class}, tree="[0]")
    private Output</* @Nullable */ OsServicesMetadata> metadata;

    /**
     * @return Set of additional key-value properties to be attached to the triggered event.
     * 
     */
    public Output<Optional<OsServicesMetadata>> metadata() {
        return Codegen.optional(this.metadata);
    }
    /**
     * Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics consume custom metrics (DDUs). Refer to [documentation](https://dt-url.net/vl03xzk) for DDU consumption examples. Each monitored service consumes one custom metric.
     * 
     */
    @Export(name="monitoring", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> monitoring;

    /**
     * @return Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics consume custom metrics (DDUs). Refer to [documentation](https://dt-url.net/vl03xzk) for DDU consumption examples. Each monitored service consumes one custom metric.
     * 
     */
    public Output<Boolean> monitoring() {
        return this.monitoring;
    }
    /**
     * Rule name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Rule name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this feature
     * 
     */
    @Export(name="notInstalledAlerting", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> notInstalledAlerting;

    /**
     * @return By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this feature
     * 
     */
    public Output<Optional<Boolean>> notInstalledAlerting() {
        return Codegen.optional(this.notInstalledAlerting);
    }
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     * 
     */
    @Export(name="scope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scope;

    /**
     * @return The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     * 
     */
    public Output<Optional<String>> scope() {
        return Codegen.optional(this.scope);
    }
    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
     * 
     */
    @Export(name="statusConditionLinux", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> statusConditionLinux;

    /**
     * @return This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
     * 
     */
    public Output<Optional<String>> statusConditionLinux() {
        return Codegen.optional(this.statusConditionLinux);
    }
    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk). - `$eq(paused)`
     * – Matches services that are in paused state. Available logic operations: - `$not($eq(paused))` – Matches services
     * that are in state different from paused. - `$or($eq(paused),$eq(running))` – Matches services that are either in
     * paused or running state. Use one of the following values as a parameter for this condition: - `running` - `stopped` -
     * `start_pending` - `stop_pending` - `continue_pending` - `pause_pending` - `paused`
     * 
     */
    @Export(name="statusConditionWindows", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> statusConditionWindows;

    /**
     * @return This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk). - `$eq(paused)`
     * – Matches services that are in paused state. Available logic operations: - `$not($eq(paused))` – Matches services
     * that are in state different from paused. - `$or($eq(paused),$eq(running))` – Matches services that are either in
     * paused or running state. Use one of the following values as a parameter for this condition: - `running` - `stopped` -
     * `start_pending` - `stop_pending` - `continue_pending` - `pause_pending` - `paused`
     * 
     */
    public Output<Optional<String>> statusConditionWindows() {
        return Codegen.optional(this.statusConditionWindows);
    }
    /**
     * Possible Values: `LINUX`, `WINDOWS`
     * 
     */
    @Export(name="system", refs={String.class}, tree="[0]")
    private Output<String> system;

    /**
     * @return Possible Values: `LINUX`, `WINDOWS`
     * 
     */
    public Output<String> system() {
        return this.system;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public OsServices(String name) {
        this(name, OsServicesArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public OsServices(String name, OsServicesArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public OsServices(String name, OsServicesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/osServices:OsServices", name, args == null ? OsServicesArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private OsServices(String name, Output<String> id, @Nullable OsServicesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("dynatrace:index/osServices:OsServices", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static OsServices get(String name, Output<String> id, @Nullable OsServicesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new OsServices(name, id, state, options);
    }
}
