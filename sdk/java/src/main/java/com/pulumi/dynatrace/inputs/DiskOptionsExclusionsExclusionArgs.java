// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskOptionsExclusionsExclusionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskOptionsExclusionsExclusionArgs Empty = new DiskOptionsExclusionsExclusionArgs();

    @Import(name="filesystem")
    private @Nullable Output<String> filesystem;

    public Optional<Output<String>> filesystem() {
        return Optional.ofNullable(this.filesystem);
    }

    @Import(name="mountpoint")
    private @Nullable Output<String> mountpoint;

    public Optional<Output<String>> mountpoint() {
        return Optional.ofNullable(this.mountpoint);
    }

    @Import(name="os", required=true)
    private Output<String> os;

    public Output<String> os() {
        return this.os;
    }

    private DiskOptionsExclusionsExclusionArgs() {}

    private DiskOptionsExclusionsExclusionArgs(DiskOptionsExclusionsExclusionArgs $) {
        this.filesystem = $.filesystem;
        this.mountpoint = $.mountpoint;
        this.os = $.os;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskOptionsExclusionsExclusionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskOptionsExclusionsExclusionArgs $;

        public Builder() {
            $ = new DiskOptionsExclusionsExclusionArgs();
        }

        public Builder(DiskOptionsExclusionsExclusionArgs defaults) {
            $ = new DiskOptionsExclusionsExclusionArgs(Objects.requireNonNull(defaults));
        }

        public Builder filesystem(@Nullable Output<String> filesystem) {
            $.filesystem = filesystem;
            return this;
        }

        public Builder filesystem(String filesystem) {
            return filesystem(Output.of(filesystem));
        }

        public Builder mountpoint(@Nullable Output<String> mountpoint) {
            $.mountpoint = mountpoint;
            return this;
        }

        public Builder mountpoint(String mountpoint) {
            return mountpoint(Output.of(mountpoint));
        }

        public Builder os(Output<String> os) {
            $.os = os;
            return this;
        }

        public Builder os(String os) {
            return os(Output.of(os));
        }

        public DiskOptionsExclusionsExclusionArgs build() {
            $.os = Objects.requireNonNull($.os, "expected parameter 'os' to be non-null");
            return $;
        }
    }

}
