// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.dynatrace.outputs.MaintenanceWindowScheduleRecurrence;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MaintenanceWindowSchedule {
    /**
     * @return The end date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
     * 
     */
    private String end;
    /**
     * @return The recurrence of the maintenance window
     * 
     */
    private @Nullable MaintenanceWindowScheduleRecurrence recurrence;
    /**
     * @return The type of the schedule recurrence. Possible values are `DAILY`, `MONTHLY`, `ONCE` and `WEEKLY`
     * 
     */
    private String recurrenceType;
    /**
     * @return The start date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
     * 
     */
    private String start;
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    private @Nullable String unknowns;
    /**
     * @return The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
     * 
     */
    private String zoneId;

    private MaintenanceWindowSchedule() {}
    /**
     * @return The end date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
     * 
     */
    public String end() {
        return this.end;
    }
    /**
     * @return The recurrence of the maintenance window
     * 
     */
    public Optional<MaintenanceWindowScheduleRecurrence> recurrence() {
        return Optional.ofNullable(this.recurrence);
    }
    /**
     * @return The type of the schedule recurrence. Possible values are `DAILY`, `MONTHLY`, `ONCE` and `WEEKLY`
     * 
     */
    public String recurrenceType() {
        return this.recurrenceType;
    }
    /**
     * @return The start date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
     * 
     */
    public String start() {
        return this.start;
    }
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<String> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }
    /**
     * @return The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MaintenanceWindowSchedule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String end;
        private @Nullable MaintenanceWindowScheduleRecurrence recurrence;
        private String recurrenceType;
        private String start;
        private @Nullable String unknowns;
        private String zoneId;
        public Builder() {}
        public Builder(MaintenanceWindowSchedule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.end = defaults.end;
    	      this.recurrence = defaults.recurrence;
    	      this.recurrenceType = defaults.recurrenceType;
    	      this.start = defaults.start;
    	      this.unknowns = defaults.unknowns;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder end(String end) {
            this.end = Objects.requireNonNull(end);
            return this;
        }
        @CustomType.Setter
        public Builder recurrence(@Nullable MaintenanceWindowScheduleRecurrence recurrence) {
            this.recurrence = recurrence;
            return this;
        }
        @CustomType.Setter
        public Builder recurrenceType(String recurrenceType) {
            this.recurrenceType = Objects.requireNonNull(recurrenceType);
            return this;
        }
        @CustomType.Setter
        public Builder start(String start) {
            this.start = Objects.requireNonNull(start);
            return this;
        }
        @CustomType.Setter
        public Builder unknowns(@Nullable String unknowns) {
            this.unknowns = unknowns;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            this.zoneId = Objects.requireNonNull(zoneId);
            return this;
        }
        public MaintenanceWindowSchedule build() {
            final var o = new MaintenanceWindowSchedule();
            o.end = end;
            o.recurrence = recurrence;
            o.recurrenceType = recurrenceType;
            o.start = start;
            o.unknowns = unknowns;
            o.zoneId = zoneId;
            return o;
        }
    }
}
