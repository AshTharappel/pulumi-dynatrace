// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class MetricQueryArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricQueryArgs Empty = new MetricQueryArgs();

    /**
     * The scope of this setting (metric)
     * 
     */
    @Import(name="metricId", required=true)
    private Output<String> metricId;

    /**
     * @return The scope of this setting (metric)
     * 
     */
    public Output<String> metricId() {
        return this.metricId;
    }

    /**
     * Query
     * 
     */
    @Import(name="metricSelector", required=true)
    private Output<String> metricSelector;

    /**
     * @return Query
     * 
     */
    public Output<String> metricSelector() {
        return this.metricSelector;
    }

    private MetricQueryArgs() {}

    private MetricQueryArgs(MetricQueryArgs $) {
        this.metricId = $.metricId;
        this.metricSelector = $.metricSelector;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricQueryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricQueryArgs $;

        public Builder() {
            $ = new MetricQueryArgs();
        }

        public Builder(MetricQueryArgs defaults) {
            $ = new MetricQueryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param metricId The scope of this setting (metric)
         * 
         * @return builder
         * 
         */
        public Builder metricId(Output<String> metricId) {
            $.metricId = metricId;
            return this;
        }

        /**
         * @param metricId The scope of this setting (metric)
         * 
         * @return builder
         * 
         */
        public Builder metricId(String metricId) {
            return metricId(Output.of(metricId));
        }

        /**
         * @param metricSelector Query
         * 
         * @return builder
         * 
         */
        public Builder metricSelector(Output<String> metricSelector) {
            $.metricSelector = metricSelector;
            return this;
        }

        /**
         * @param metricSelector Query
         * 
         * @return builder
         * 
         */
        public Builder metricSelector(String metricSelector) {
            return metricSelector(Output.of(metricSelector));
        }

        public MetricQueryArgs build() {
            $.metricId = Objects.requireNonNull($.metricId, "expected parameter 'metricId' to be non-null");
            $.metricSelector = Objects.requireNonNull($.metricSelector, "expected parameter 'metricSelector' to be non-null");
            return $;
        }
    }

}
