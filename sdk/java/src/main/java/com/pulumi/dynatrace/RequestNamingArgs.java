// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.RequestNamingConditionsArgs;
import com.pulumi.dynatrace.inputs.RequestNamingPlaceholdersArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RequestNamingArgs extends com.pulumi.resources.ResourceArgs {

    public static final RequestNamingArgs Empty = new RequestNamingArgs();

    /**
     * The set of conditions for the request naming rule usage. You can specify several conditions. The request has to match
     * **all** the specified conditions for the rule to trigger
     * 
     */
    @Import(name="conditions", required=true)
    private Output<RequestNamingConditionsArgs> conditions;

    /**
     * @return The set of conditions for the request naming rule usage. You can specify several conditions. The request has to match
     * **all** the specified conditions for the rule to trigger
     * 
     */
    public Output<RequestNamingConditionsArgs> conditions() {
        return this.conditions;
    }

    /**
     * The rule is enabled (`true`) or disabled (`false`)
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return The rule is enabled (`true`) or disabled (`false`)
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Specifies the management zones for which this rule should be applied
     * 
     */
    @Import(name="managementZones")
    private @Nullable Output<List<String>> managementZones;

    /**
     * @return Specifies the management zones for which this rule should be applied
     * 
     */
    public Optional<Output<List<String>>> managementZones() {
        return Optional.ofNullable(this.managementZones);
    }

    /**
     * The name to be assigned to matching requests
     * 
     */
    @Import(name="namingPattern", required=true)
    private Output<String> namingPattern;

    /**
     * @return The name to be assigned to matching requests
     * 
     */
    public Output<String> namingPattern() {
        return this.namingPattern;
    }

    /**
     * The list of custom placeholders to be used in the naming pattern. It enables you to extract a request attribute value or
     * other request attribute and use it in the request naming pattern.
     * 
     */
    @Import(name="placeholders")
    private @Nullable Output<RequestNamingPlaceholdersArgs> placeholders;

    /**
     * @return The list of custom placeholders to be used in the naming pattern. It enables you to extract a request attribute value or
     * other request attribute and use it in the request naming pattern.
     * 
     */
    public Optional<Output<RequestNamingPlaceholdersArgs>> placeholders() {
        return Optional.ofNullable(this.placeholders);
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    private RequestNamingArgs() {}

    private RequestNamingArgs(RequestNamingArgs $) {
        this.conditions = $.conditions;
        this.enabled = $.enabled;
        this.managementZones = $.managementZones;
        this.namingPattern = $.namingPattern;
        this.placeholders = $.placeholders;
        this.unknowns = $.unknowns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RequestNamingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RequestNamingArgs $;

        public Builder() {
            $ = new RequestNamingArgs();
        }

        public Builder(RequestNamingArgs defaults) {
            $ = new RequestNamingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditions The set of conditions for the request naming rule usage. You can specify several conditions. The request has to match
         * **all** the specified conditions for the rule to trigger
         * 
         * @return builder
         * 
         */
        public Builder conditions(Output<RequestNamingConditionsArgs> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions The set of conditions for the request naming rule usage. You can specify several conditions. The request has to match
         * **all** the specified conditions for the rule to trigger
         * 
         * @return builder
         * 
         */
        public Builder conditions(RequestNamingConditionsArgs conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param enabled The rule is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled The rule is enabled (`true`) or disabled (`false`)
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param managementZones Specifies the management zones for which this rule should be applied
         * 
         * @return builder
         * 
         */
        public Builder managementZones(@Nullable Output<List<String>> managementZones) {
            $.managementZones = managementZones;
            return this;
        }

        /**
         * @param managementZones Specifies the management zones for which this rule should be applied
         * 
         * @return builder
         * 
         */
        public Builder managementZones(List<String> managementZones) {
            return managementZones(Output.of(managementZones));
        }

        /**
         * @param managementZones Specifies the management zones for which this rule should be applied
         * 
         * @return builder
         * 
         */
        public Builder managementZones(String... managementZones) {
            return managementZones(List.of(managementZones));
        }

        /**
         * @param namingPattern The name to be assigned to matching requests
         * 
         * @return builder
         * 
         */
        public Builder namingPattern(Output<String> namingPattern) {
            $.namingPattern = namingPattern;
            return this;
        }

        /**
         * @param namingPattern The name to be assigned to matching requests
         * 
         * @return builder
         * 
         */
        public Builder namingPattern(String namingPattern) {
            return namingPattern(Output.of(namingPattern));
        }

        /**
         * @param placeholders The list of custom placeholders to be used in the naming pattern. It enables you to extract a request attribute value or
         * other request attribute and use it in the request naming pattern.
         * 
         * @return builder
         * 
         */
        public Builder placeholders(@Nullable Output<RequestNamingPlaceholdersArgs> placeholders) {
            $.placeholders = placeholders;
            return this;
        }

        /**
         * @param placeholders The list of custom placeholders to be used in the naming pattern. It enables you to extract a request attribute value or
         * other request attribute and use it in the request naming pattern.
         * 
         * @return builder
         * 
         */
        public Builder placeholders(RequestNamingPlaceholdersArgs placeholders) {
            return placeholders(Output.of(placeholders));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public RequestNamingArgs build() {
            $.conditions = Objects.requireNonNull($.conditions, "expected parameter 'conditions' to be non-null");
            $.namingPattern = Objects.requireNonNull($.namingPattern, "expected parameter 'namingPattern' to be non-null");
            return $;
        }
    }

}
