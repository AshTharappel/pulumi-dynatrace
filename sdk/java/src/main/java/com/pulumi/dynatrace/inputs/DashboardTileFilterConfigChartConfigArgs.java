// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DashboardTileFilterConfigChartConfigResultMetadataArgs;
import com.pulumi.dynatrace.inputs.DashboardTileFilterConfigChartConfigSeriesArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardTileFilterConfigChartConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardTileFilterConfigChartConfigArgs Empty = new DashboardTileFilterConfigChartConfigArgs();

    @Import(name="axisLimits")
    private @Nullable Output<Map<String,Double>> axisLimits;

    public Optional<Output<Map<String,Double>>> axisLimits() {
        return Optional.ofNullable(this.axisLimits);
    }

    @Import(name="leftAxisCustomUnit")
    private @Nullable Output<String> leftAxisCustomUnit;

    public Optional<Output<String>> leftAxisCustomUnit() {
        return Optional.ofNullable(this.leftAxisCustomUnit);
    }

    @Import(name="legend")
    private @Nullable Output<Boolean> legend;

    public Optional<Output<Boolean>> legend() {
        return Optional.ofNullable(this.legend);
    }

    @Import(name="resultMetadatas")
    private @Nullable Output<List<DashboardTileFilterConfigChartConfigResultMetadataArgs>> resultMetadatas;

    public Optional<Output<List<DashboardTileFilterConfigChartConfigResultMetadataArgs>>> resultMetadatas() {
        return Optional.ofNullable(this.resultMetadatas);
    }

    @Import(name="rightAxisCustomUnit")
    private @Nullable Output<String> rightAxisCustomUnit;

    public Optional<Output<String>> rightAxisCustomUnit() {
        return Optional.ofNullable(this.rightAxisCustomUnit);
    }

    @Import(name="series")
    private @Nullable Output<List<DashboardTileFilterConfigChartConfigSeriesArgs>> series;

    public Optional<Output<List<DashboardTileFilterConfigChartConfigSeriesArgs>>> series() {
        return Optional.ofNullable(this.series);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    private DashboardTileFilterConfigChartConfigArgs() {}

    private DashboardTileFilterConfigChartConfigArgs(DashboardTileFilterConfigChartConfigArgs $) {
        this.axisLimits = $.axisLimits;
        this.leftAxisCustomUnit = $.leftAxisCustomUnit;
        this.legend = $.legend;
        this.resultMetadatas = $.resultMetadatas;
        this.rightAxisCustomUnit = $.rightAxisCustomUnit;
        this.series = $.series;
        this.type = $.type;
        this.unknowns = $.unknowns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardTileFilterConfigChartConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardTileFilterConfigChartConfigArgs $;

        public Builder() {
            $ = new DashboardTileFilterConfigChartConfigArgs();
        }

        public Builder(DashboardTileFilterConfigChartConfigArgs defaults) {
            $ = new DashboardTileFilterConfigChartConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder axisLimits(@Nullable Output<Map<String,Double>> axisLimits) {
            $.axisLimits = axisLimits;
            return this;
        }

        public Builder axisLimits(Map<String,Double> axisLimits) {
            return axisLimits(Output.of(axisLimits));
        }

        public Builder leftAxisCustomUnit(@Nullable Output<String> leftAxisCustomUnit) {
            $.leftAxisCustomUnit = leftAxisCustomUnit;
            return this;
        }

        public Builder leftAxisCustomUnit(String leftAxisCustomUnit) {
            return leftAxisCustomUnit(Output.of(leftAxisCustomUnit));
        }

        public Builder legend(@Nullable Output<Boolean> legend) {
            $.legend = legend;
            return this;
        }

        public Builder legend(Boolean legend) {
            return legend(Output.of(legend));
        }

        public Builder resultMetadatas(@Nullable Output<List<DashboardTileFilterConfigChartConfigResultMetadataArgs>> resultMetadatas) {
            $.resultMetadatas = resultMetadatas;
            return this;
        }

        public Builder resultMetadatas(List<DashboardTileFilterConfigChartConfigResultMetadataArgs> resultMetadatas) {
            return resultMetadatas(Output.of(resultMetadatas));
        }

        public Builder resultMetadatas(DashboardTileFilterConfigChartConfigResultMetadataArgs... resultMetadatas) {
            return resultMetadatas(List.of(resultMetadatas));
        }

        public Builder rightAxisCustomUnit(@Nullable Output<String> rightAxisCustomUnit) {
            $.rightAxisCustomUnit = rightAxisCustomUnit;
            return this;
        }

        public Builder rightAxisCustomUnit(String rightAxisCustomUnit) {
            return rightAxisCustomUnit(Output.of(rightAxisCustomUnit));
        }

        public Builder series(@Nullable Output<List<DashboardTileFilterConfigChartConfigSeriesArgs>> series) {
            $.series = series;
            return this;
        }

        public Builder series(List<DashboardTileFilterConfigChartConfigSeriesArgs> series) {
            return series(Output.of(series));
        }

        public Builder series(DashboardTileFilterConfigChartConfigSeriesArgs... series) {
            return series(List.of(series));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public DashboardTileFilterConfigChartConfigArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
