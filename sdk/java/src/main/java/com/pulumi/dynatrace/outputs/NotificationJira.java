// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NotificationJira {
    /**
     * @return The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    private Boolean active;
    /**
     * @return The ID of the associated alerting profile
     * 
     */
    private String alertingProfile;
    /**
     * @return The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
     * 
     */
    private String description;
    /**
     * @return The type of the Jira issue to be created by this notification
     * 
     */
    private String issueType;
    /**
     * @return The name of the notification configuration
     * 
     */
    private String name;
    /**
     * @return The password for the Jira profile
     * 
     */
    private @Nullable String password;
    /**
     * @return The project key of the Jira issue to be created by this notification
     * 
     */
    private String projectKey;
    /**
     * @return The summary of the Jira issue to be created by this notification.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     * 
     */
    private String summary;
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    private @Nullable String unknowns;
    /**
     * @return The URL of the Jira API endpoint
     * 
     */
    private String url;
    /**
     * @return The username of the Jira profile
     * 
     */
    private String username;

    private NotificationJira() {}
    /**
     * @return The configuration is enabled (`true`) or disabled (`false`)
     * 
     */
    public Boolean active() {
        return this.active;
    }
    /**
     * @return The ID of the associated alerting profile
     * 
     */
    public String alertingProfile() {
        return this.alertingProfile;
    }
    /**
     * @return The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The type of the Jira issue to be created by this notification
     * 
     */
    public String issueType() {
        return this.issueType;
    }
    /**
     * @return The name of the notification configuration
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The password for the Jira profile
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return The project key of the Jira issue to be created by this notification
     * 
     */
    public String projectKey() {
        return this.projectKey;
    }
    /**
     * @return The summary of the Jira issue to be created by this notification.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     * 
     */
    public String summary() {
        return this.summary;
    }
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<String> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }
    /**
     * @return The URL of the Jira API endpoint
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return The username of the Jira profile
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotificationJira defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean active;
        private String alertingProfile;
        private String description;
        private String issueType;
        private String name;
        private @Nullable String password;
        private String projectKey;
        private String summary;
        private @Nullable String unknowns;
        private String url;
        private String username;
        public Builder() {}
        public Builder(NotificationJira defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.alertingProfile = defaults.alertingProfile;
    	      this.description = defaults.description;
    	      this.issueType = defaults.issueType;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
    	      this.projectKey = defaults.projectKey;
    	      this.summary = defaults.summary;
    	      this.unknowns = defaults.unknowns;
    	      this.url = defaults.url;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder active(Boolean active) {
            this.active = Objects.requireNonNull(active);
            return this;
        }
        @CustomType.Setter
        public Builder alertingProfile(String alertingProfile) {
            this.alertingProfile = Objects.requireNonNull(alertingProfile);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder issueType(String issueType) {
            this.issueType = Objects.requireNonNull(issueType);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder projectKey(String projectKey) {
            this.projectKey = Objects.requireNonNull(projectKey);
            return this;
        }
        @CustomType.Setter
        public Builder summary(String summary) {
            this.summary = Objects.requireNonNull(summary);
            return this;
        }
        @CustomType.Setter
        public Builder unknowns(@Nullable String unknowns) {
            this.unknowns = unknowns;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public NotificationJira build() {
            final var o = new NotificationJira();
            o.active = active;
            o.alertingProfile = alertingProfile;
            o.description = description;
            o.issueType = issueType;
            o.name = name;
            o.password = password;
            o.projectKey = projectKey;
            o.summary = summary;
            o.unknowns = unknowns;
            o.url = url;
            o.username = username;
            return o;
        }
    }
}
