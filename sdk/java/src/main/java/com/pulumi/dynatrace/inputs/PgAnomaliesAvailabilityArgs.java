// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PgAnomaliesAvailabilityArgs extends com.pulumi.resources.ResourceArgs {

    public static final PgAnomaliesAvailabilityArgs Empty = new PgAnomaliesAvailabilityArgs();

    /**
     * How to monitor the availability of the process group:  * `PROCESS_IMPACT`: Alert if any process of the group becomes unavailable.  * `MINIMUM_THRESHOLD`: Alert if the number of active processes in the group falls below the specified threshold.  * `OFF`: Availability monitoring is disabled.
     * 
     */
    @Import(name="method", required=true)
    private Output<String> method;

    /**
     * @return How to monitor the availability of the process group:  * `PROCESS_IMPACT`: Alert if any process of the group becomes unavailable.  * `MINIMUM_THRESHOLD`: Alert if the number of active processes in the group falls below the specified threshold.  * `OFF`: Availability monitoring is disabled.
     * 
     */
    public Output<String> method() {
        return this.method;
    }

    /**
     * Alert if the number of active processes in the group is lower than this value.
     * 
     */
    @Import(name="minimumThreshold")
    private @Nullable Output<Integer> minimumThreshold;

    /**
     * @return Alert if the number of active processes in the group is lower than this value.
     * 
     */
    public Optional<Output<Integer>> minimumThreshold() {
        return Optional.ofNullable(this.minimumThreshold);
    }

    private PgAnomaliesAvailabilityArgs() {}

    private PgAnomaliesAvailabilityArgs(PgAnomaliesAvailabilityArgs $) {
        this.method = $.method;
        this.minimumThreshold = $.minimumThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PgAnomaliesAvailabilityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PgAnomaliesAvailabilityArgs $;

        public Builder() {
            $ = new PgAnomaliesAvailabilityArgs();
        }

        public Builder(PgAnomaliesAvailabilityArgs defaults) {
            $ = new PgAnomaliesAvailabilityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param method How to monitor the availability of the process group:  * `PROCESS_IMPACT`: Alert if any process of the group becomes unavailable.  * `MINIMUM_THRESHOLD`: Alert if the number of active processes in the group falls below the specified threshold.  * `OFF`: Availability monitoring is disabled.
         * 
         * @return builder
         * 
         */
        public Builder method(Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method How to monitor the availability of the process group:  * `PROCESS_IMPACT`: Alert if any process of the group becomes unavailable.  * `MINIMUM_THRESHOLD`: Alert if the number of active processes in the group falls below the specified threshold.  * `OFF`: Availability monitoring is disabled.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param minimumThreshold Alert if the number of active processes in the group is lower than this value.
         * 
         * @return builder
         * 
         */
        public Builder minimumThreshold(@Nullable Output<Integer> minimumThreshold) {
            $.minimumThreshold = minimumThreshold;
            return this;
        }

        /**
         * @param minimumThreshold Alert if the number of active processes in the group is lower than this value.
         * 
         * @return builder
         * 
         */
        public Builder minimumThreshold(Integer minimumThreshold) {
            return minimumThreshold(Output.of(minimumThreshold));
        }

        public PgAnomaliesAvailabilityArgs build() {
            $.method = Objects.requireNonNull($.method, "expected parameter 'method' to be non-null");
            return $;
        }
    }

}
