// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.LogCustomSourceContextContextArgs;
import java.util.List;
import java.util.Objects;


public final class LogCustomSourceContextArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogCustomSourceContextArgs Empty = new LogCustomSourceContextArgs();

    /**
     * Define Custom Log Source only within context if provided
     * 
     */
    @Import(name="contexts", required=true)
    private Output<List<LogCustomSourceContextContextArgs>> contexts;

    /**
     * @return Define Custom Log Source only within context if provided
     * 
     */
    public Output<List<LogCustomSourceContextContextArgs>> contexts() {
        return this.contexts;
    }

    private LogCustomSourceContextArgs() {}

    private LogCustomSourceContextArgs(LogCustomSourceContextArgs $) {
        this.contexts = $.contexts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogCustomSourceContextArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogCustomSourceContextArgs $;

        public Builder() {
            $ = new LogCustomSourceContextArgs();
        }

        public Builder(LogCustomSourceContextArgs defaults) {
            $ = new LogCustomSourceContextArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contexts Define Custom Log Source only within context if provided
         * 
         * @return builder
         * 
         */
        public Builder contexts(Output<List<LogCustomSourceContextContextArgs>> contexts) {
            $.contexts = contexts;
            return this;
        }

        /**
         * @param contexts Define Custom Log Source only within context if provided
         * 
         * @return builder
         * 
         */
        public Builder contexts(List<LogCustomSourceContextContextArgs> contexts) {
            return contexts(Output.of(contexts));
        }

        /**
         * @param contexts Define Custom Log Source only within context if provided
         * 
         * @return builder
         * 
         */
        public Builder contexts(LogCustomSourceContextContextArgs... contexts) {
            return contexts(List.of(contexts));
        }

        public LogCustomSourceContextArgs build() {
            $.contexts = Objects.requireNonNull($.contexts, "expected parameter 'contexts' to be non-null");
            return $;
        }
    }

}
