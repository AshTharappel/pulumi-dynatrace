// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.QueueManagerRemoteQueueRemoteQueueArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QueueManagerRemoteQueueArgs extends com.pulumi.resources.ResourceArgs {

    public static final QueueManagerRemoteQueueArgs Empty = new QueueManagerRemoteQueueArgs();

    /**
     * Remote queue definitions for queue manager
     * 
     */
    @Import(name="remoteQueues")
    private @Nullable Output<List<QueueManagerRemoteQueueRemoteQueueArgs>> remoteQueues;

    /**
     * @return Remote queue definitions for queue manager
     * 
     */
    public Optional<Output<List<QueueManagerRemoteQueueRemoteQueueArgs>>> remoteQueues() {
        return Optional.ofNullable(this.remoteQueues);
    }

    private QueueManagerRemoteQueueArgs() {}

    private QueueManagerRemoteQueueArgs(QueueManagerRemoteQueueArgs $) {
        this.remoteQueues = $.remoteQueues;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QueueManagerRemoteQueueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QueueManagerRemoteQueueArgs $;

        public Builder() {
            $ = new QueueManagerRemoteQueueArgs();
        }

        public Builder(QueueManagerRemoteQueueArgs defaults) {
            $ = new QueueManagerRemoteQueueArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param remoteQueues Remote queue definitions for queue manager
         * 
         * @return builder
         * 
         */
        public Builder remoteQueues(@Nullable Output<List<QueueManagerRemoteQueueRemoteQueueArgs>> remoteQueues) {
            $.remoteQueues = remoteQueues;
            return this;
        }

        /**
         * @param remoteQueues Remote queue definitions for queue manager
         * 
         * @return builder
         * 
         */
        public Builder remoteQueues(List<QueueManagerRemoteQueueRemoteQueueArgs> remoteQueues) {
            return remoteQueues(Output.of(remoteQueues));
        }

        /**
         * @param remoteQueues Remote queue definitions for queue manager
         * 
         * @return builder
         * 
         */
        public Builder remoteQueues(QueueManagerRemoteQueueRemoteQueueArgs... remoteQueues) {
            return remoteQueues(List.of(remoteQueues));
        }

        public QueueManagerRemoteQueueArgs build() {
            return $;
        }
    }

}
