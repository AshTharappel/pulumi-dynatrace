// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RequestAttributeDataSourceMethodMethod {
    private @Nullable List<String> argumentTypes;
    private @Nullable String className;
    private @Nullable String fileName;
    private @Nullable String fileNameMatcher;
    private String methodName;
    private @Nullable List<String> modifiers;
    private String returnType;
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    private @Nullable String unknowns;
    private String visibility;

    private RequestAttributeDataSourceMethodMethod() {}
    public List<String> argumentTypes() {
        return this.argumentTypes == null ? List.of() : this.argumentTypes;
    }
    public Optional<String> className() {
        return Optional.ofNullable(this.className);
    }
    public Optional<String> fileName() {
        return Optional.ofNullable(this.fileName);
    }
    public Optional<String> fileNameMatcher() {
        return Optional.ofNullable(this.fileNameMatcher);
    }
    public String methodName() {
        return this.methodName;
    }
    public List<String> modifiers() {
        return this.modifiers == null ? List.of() : this.modifiers;
    }
    public String returnType() {
        return this.returnType;
    }
    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<String> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }
    public String visibility() {
        return this.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RequestAttributeDataSourceMethodMethod defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> argumentTypes;
        private @Nullable String className;
        private @Nullable String fileName;
        private @Nullable String fileNameMatcher;
        private String methodName;
        private @Nullable List<String> modifiers;
        private String returnType;
        private @Nullable String unknowns;
        private String visibility;
        public Builder() {}
        public Builder(RequestAttributeDataSourceMethodMethod defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.argumentTypes = defaults.argumentTypes;
    	      this.className = defaults.className;
    	      this.fileName = defaults.fileName;
    	      this.fileNameMatcher = defaults.fileNameMatcher;
    	      this.methodName = defaults.methodName;
    	      this.modifiers = defaults.modifiers;
    	      this.returnType = defaults.returnType;
    	      this.unknowns = defaults.unknowns;
    	      this.visibility = defaults.visibility;
        }

        @CustomType.Setter
        public Builder argumentTypes(@Nullable List<String> argumentTypes) {
            this.argumentTypes = argumentTypes;
            return this;
        }
        public Builder argumentTypes(String... argumentTypes) {
            return argumentTypes(List.of(argumentTypes));
        }
        @CustomType.Setter
        public Builder className(@Nullable String className) {
            this.className = className;
            return this;
        }
        @CustomType.Setter
        public Builder fileName(@Nullable String fileName) {
            this.fileName = fileName;
            return this;
        }
        @CustomType.Setter
        public Builder fileNameMatcher(@Nullable String fileNameMatcher) {
            this.fileNameMatcher = fileNameMatcher;
            return this;
        }
        @CustomType.Setter
        public Builder methodName(String methodName) {
            this.methodName = Objects.requireNonNull(methodName);
            return this;
        }
        @CustomType.Setter
        public Builder modifiers(@Nullable List<String> modifiers) {
            this.modifiers = modifiers;
            return this;
        }
        public Builder modifiers(String... modifiers) {
            return modifiers(List.of(modifiers));
        }
        @CustomType.Setter
        public Builder returnType(String returnType) {
            this.returnType = Objects.requireNonNull(returnType);
            return this;
        }
        @CustomType.Setter
        public Builder unknowns(@Nullable String unknowns) {
            this.unknowns = unknowns;
            return this;
        }
        @CustomType.Setter
        public Builder visibility(String visibility) {
            this.visibility = Objects.requireNonNull(visibility);
            return this;
        }
        public RequestAttributeDataSourceMethodMethod build() {
            final var o = new RequestAttributeDataSourceMethodMethod();
            o.argumentTypes = argumentTypes;
            o.className = className;
            o.fileName = fileName;
            o.fileNameMatcher = fileNameMatcher;
            o.methodName = methodName;
            o.modifiers = modifiers;
            o.returnType = returnType;
            o.unknowns = unknowns;
            o.visibility = visibility;
            return o;
        }
    }
}
