// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dynatrace.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dynatrace.inputs.DashboardTileFilterConfigChartConfigArgs;
import com.pulumi.dynatrace.inputs.DashboardTileFilterConfigFiltersArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardTileFilterConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardTileFilterConfigArgs Empty = new DashboardTileFilterConfigArgs();

    @Import(name="chartConfig")
    private @Nullable Output<DashboardTileFilterConfigChartConfigArgs> chartConfig;

    public Optional<Output<DashboardTileFilterConfigChartConfigArgs>> chartConfig() {
        return Optional.ofNullable(this.chartConfig);
    }

    @Import(name="customName", required=true)
    private Output<String> customName;

    public Output<String> customName() {
        return this.customName;
    }

    @Import(name="defaultName", required=true)
    private Output<String> defaultName;

    public Output<String> defaultName() {
        return this.defaultName;
    }

    @Import(name="filters")
    private @Nullable Output<DashboardTileFilterConfigFiltersArgs> filters;

    public Optional<Output<DashboardTileFilterConfigFiltersArgs>> filters() {
        return Optional.ofNullable(this.filters);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    @Import(name="unknowns")
    private @Nullable Output<String> unknowns;

    /**
     * @return allows for configuring properties that are not explicitly supported by the current version of this provider
     * 
     */
    public Optional<Output<String>> unknowns() {
        return Optional.ofNullable(this.unknowns);
    }

    private DashboardTileFilterConfigArgs() {}

    private DashboardTileFilterConfigArgs(DashboardTileFilterConfigArgs $) {
        this.chartConfig = $.chartConfig;
        this.customName = $.customName;
        this.defaultName = $.defaultName;
        this.filters = $.filters;
        this.type = $.type;
        this.unknowns = $.unknowns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardTileFilterConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardTileFilterConfigArgs $;

        public Builder() {
            $ = new DashboardTileFilterConfigArgs();
        }

        public Builder(DashboardTileFilterConfigArgs defaults) {
            $ = new DashboardTileFilterConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder chartConfig(@Nullable Output<DashboardTileFilterConfigChartConfigArgs> chartConfig) {
            $.chartConfig = chartConfig;
            return this;
        }

        public Builder chartConfig(DashboardTileFilterConfigChartConfigArgs chartConfig) {
            return chartConfig(Output.of(chartConfig));
        }

        public Builder customName(Output<String> customName) {
            $.customName = customName;
            return this;
        }

        public Builder customName(String customName) {
            return customName(Output.of(customName));
        }

        public Builder defaultName(Output<String> defaultName) {
            $.defaultName = defaultName;
            return this;
        }

        public Builder defaultName(String defaultName) {
            return defaultName(Output.of(defaultName));
        }

        public Builder filters(@Nullable Output<DashboardTileFilterConfigFiltersArgs> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(DashboardTileFilterConfigFiltersArgs filters) {
            return filters(Output.of(filters));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(@Nullable Output<String> unknowns) {
            $.unknowns = unknowns;
            return this;
        }

        /**
         * @param unknowns allows for configuring properties that are not explicitly supported by the current version of this provider
         * 
         * @return builder
         * 
         */
        public Builder unknowns(String unknowns) {
            return unknowns(Output.of(unknowns));
        }

        public DashboardTileFilterConfigArgs build() {
            $.customName = Objects.requireNonNull($.customName, "expected parameter 'customName' to be non-null");
            $.defaultName = Objects.requireNonNull($.defaultName, "expected parameter 'defaultName' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
