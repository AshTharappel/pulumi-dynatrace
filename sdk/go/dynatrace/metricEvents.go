// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MetricEvents struct {
	pulumi.CustomResourceState

	// Enabled toggle of metric event entry
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Controls the preferred entity type used for triggered events.
	EventEntityDimensionKey pulumi.StringPtrOutput `pulumi:"eventEntityDimensionKey"`
	// The event template of the metric event entry
	EventTemplate MetricEventsEventTemplateOutput `pulumi:"eventTemplate"`
	// The legacy id of the metric event entry
	LegacyId pulumi.StringOutput `pulumi:"legacyId"`
	// The model properties of the metric event entry
	ModelProperties MetricEventsModelPropertiesOutput `pulumi:"modelProperties"`
	// The query definition of the metric event entry
	QueryDefinition MetricEventsQueryDefinitionOutput `pulumi:"queryDefinition"`
	// The textual summary of the metric event entry
	Summary pulumi.StringOutput `pulumi:"summary"`
}

// NewMetricEvents registers a new resource with the given unique name, arguments, and options.
func NewMetricEvents(ctx *pulumi.Context,
	name string, args *MetricEventsArgs, opts ...pulumi.ResourceOption) (*MetricEvents, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventTemplate == nil {
		return nil, errors.New("invalid value for required argument 'EventTemplate'")
	}
	if args.ModelProperties == nil {
		return nil, errors.New("invalid value for required argument 'ModelProperties'")
	}
	if args.QueryDefinition == nil {
		return nil, errors.New("invalid value for required argument 'QueryDefinition'")
	}
	if args.Summary == nil {
		return nil, errors.New("invalid value for required argument 'Summary'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MetricEvents
	err := ctx.RegisterResource("dynatrace:index/metricEvents:MetricEvents", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricEvents gets an existing MetricEvents resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricEvents(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricEventsState, opts ...pulumi.ResourceOption) (*MetricEvents, error) {
	var resource MetricEvents
	err := ctx.ReadResource("dynatrace:index/metricEvents:MetricEvents", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricEvents resources.
type metricEventsState struct {
	// Enabled toggle of metric event entry
	Enabled *bool `pulumi:"enabled"`
	// Controls the preferred entity type used for triggered events.
	EventEntityDimensionKey *string `pulumi:"eventEntityDimensionKey"`
	// The event template of the metric event entry
	EventTemplate *MetricEventsEventTemplate `pulumi:"eventTemplate"`
	// The legacy id of the metric event entry
	LegacyId *string `pulumi:"legacyId"`
	// The model properties of the metric event entry
	ModelProperties *MetricEventsModelProperties `pulumi:"modelProperties"`
	// The query definition of the metric event entry
	QueryDefinition *MetricEventsQueryDefinition `pulumi:"queryDefinition"`
	// The textual summary of the metric event entry
	Summary *string `pulumi:"summary"`
}

type MetricEventsState struct {
	// Enabled toggle of metric event entry
	Enabled pulumi.BoolPtrInput
	// Controls the preferred entity type used for triggered events.
	EventEntityDimensionKey pulumi.StringPtrInput
	// The event template of the metric event entry
	EventTemplate MetricEventsEventTemplatePtrInput
	// The legacy id of the metric event entry
	LegacyId pulumi.StringPtrInput
	// The model properties of the metric event entry
	ModelProperties MetricEventsModelPropertiesPtrInput
	// The query definition of the metric event entry
	QueryDefinition MetricEventsQueryDefinitionPtrInput
	// The textual summary of the metric event entry
	Summary pulumi.StringPtrInput
}

func (MetricEventsState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricEventsState)(nil)).Elem()
}

type metricEventsArgs struct {
	// Enabled toggle of metric event entry
	Enabled *bool `pulumi:"enabled"`
	// Controls the preferred entity type used for triggered events.
	EventEntityDimensionKey *string `pulumi:"eventEntityDimensionKey"`
	// The event template of the metric event entry
	EventTemplate MetricEventsEventTemplate `pulumi:"eventTemplate"`
	// The legacy id of the metric event entry
	LegacyId *string `pulumi:"legacyId"`
	// The model properties of the metric event entry
	ModelProperties MetricEventsModelProperties `pulumi:"modelProperties"`
	// The query definition of the metric event entry
	QueryDefinition MetricEventsQueryDefinition `pulumi:"queryDefinition"`
	// The textual summary of the metric event entry
	Summary string `pulumi:"summary"`
}

// The set of arguments for constructing a MetricEvents resource.
type MetricEventsArgs struct {
	// Enabled toggle of metric event entry
	Enabled pulumi.BoolPtrInput
	// Controls the preferred entity type used for triggered events.
	EventEntityDimensionKey pulumi.StringPtrInput
	// The event template of the metric event entry
	EventTemplate MetricEventsEventTemplateInput
	// The legacy id of the metric event entry
	LegacyId pulumi.StringPtrInput
	// The model properties of the metric event entry
	ModelProperties MetricEventsModelPropertiesInput
	// The query definition of the metric event entry
	QueryDefinition MetricEventsQueryDefinitionInput
	// The textual summary of the metric event entry
	Summary pulumi.StringInput
}

func (MetricEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricEventsArgs)(nil)).Elem()
}

type MetricEventsInput interface {
	pulumi.Input

	ToMetricEventsOutput() MetricEventsOutput
	ToMetricEventsOutputWithContext(ctx context.Context) MetricEventsOutput
}

func (*MetricEvents) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricEvents)(nil)).Elem()
}

func (i *MetricEvents) ToMetricEventsOutput() MetricEventsOutput {
	return i.ToMetricEventsOutputWithContext(context.Background())
}

func (i *MetricEvents) ToMetricEventsOutputWithContext(ctx context.Context) MetricEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricEventsOutput)
}

// MetricEventsArrayInput is an input type that accepts MetricEventsArray and MetricEventsArrayOutput values.
// You can construct a concrete instance of `MetricEventsArrayInput` via:
//
//	MetricEventsArray{ MetricEventsArgs{...} }
type MetricEventsArrayInput interface {
	pulumi.Input

	ToMetricEventsArrayOutput() MetricEventsArrayOutput
	ToMetricEventsArrayOutputWithContext(context.Context) MetricEventsArrayOutput
}

type MetricEventsArray []MetricEventsInput

func (MetricEventsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricEvents)(nil)).Elem()
}

func (i MetricEventsArray) ToMetricEventsArrayOutput() MetricEventsArrayOutput {
	return i.ToMetricEventsArrayOutputWithContext(context.Background())
}

func (i MetricEventsArray) ToMetricEventsArrayOutputWithContext(ctx context.Context) MetricEventsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricEventsArrayOutput)
}

// MetricEventsMapInput is an input type that accepts MetricEventsMap and MetricEventsMapOutput values.
// You can construct a concrete instance of `MetricEventsMapInput` via:
//
//	MetricEventsMap{ "key": MetricEventsArgs{...} }
type MetricEventsMapInput interface {
	pulumi.Input

	ToMetricEventsMapOutput() MetricEventsMapOutput
	ToMetricEventsMapOutputWithContext(context.Context) MetricEventsMapOutput
}

type MetricEventsMap map[string]MetricEventsInput

func (MetricEventsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricEvents)(nil)).Elem()
}

func (i MetricEventsMap) ToMetricEventsMapOutput() MetricEventsMapOutput {
	return i.ToMetricEventsMapOutputWithContext(context.Background())
}

func (i MetricEventsMap) ToMetricEventsMapOutputWithContext(ctx context.Context) MetricEventsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricEventsMapOutput)
}

type MetricEventsOutput struct{ *pulumi.OutputState }

func (MetricEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricEvents)(nil)).Elem()
}

func (o MetricEventsOutput) ToMetricEventsOutput() MetricEventsOutput {
	return o
}

func (o MetricEventsOutput) ToMetricEventsOutputWithContext(ctx context.Context) MetricEventsOutput {
	return o
}

// Enabled toggle of metric event entry
func (o MetricEventsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetricEvents) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Controls the preferred entity type used for triggered events.
func (o MetricEventsOutput) EventEntityDimensionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricEvents) pulumi.StringPtrOutput { return v.EventEntityDimensionKey }).(pulumi.StringPtrOutput)
}

// The event template of the metric event entry
func (o MetricEventsOutput) EventTemplate() MetricEventsEventTemplateOutput {
	return o.ApplyT(func(v *MetricEvents) MetricEventsEventTemplateOutput { return v.EventTemplate }).(MetricEventsEventTemplateOutput)
}

// The legacy id of the metric event entry
func (o MetricEventsOutput) LegacyId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricEvents) pulumi.StringOutput { return v.LegacyId }).(pulumi.StringOutput)
}

// The model properties of the metric event entry
func (o MetricEventsOutput) ModelProperties() MetricEventsModelPropertiesOutput {
	return o.ApplyT(func(v *MetricEvents) MetricEventsModelPropertiesOutput { return v.ModelProperties }).(MetricEventsModelPropertiesOutput)
}

// The query definition of the metric event entry
func (o MetricEventsOutput) QueryDefinition() MetricEventsQueryDefinitionOutput {
	return o.ApplyT(func(v *MetricEvents) MetricEventsQueryDefinitionOutput { return v.QueryDefinition }).(MetricEventsQueryDefinitionOutput)
}

// The textual summary of the metric event entry
func (o MetricEventsOutput) Summary() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricEvents) pulumi.StringOutput { return v.Summary }).(pulumi.StringOutput)
}

type MetricEventsArrayOutput struct{ *pulumi.OutputState }

func (MetricEventsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricEvents)(nil)).Elem()
}

func (o MetricEventsArrayOutput) ToMetricEventsArrayOutput() MetricEventsArrayOutput {
	return o
}

func (o MetricEventsArrayOutput) ToMetricEventsArrayOutputWithContext(ctx context.Context) MetricEventsArrayOutput {
	return o
}

func (o MetricEventsArrayOutput) Index(i pulumi.IntInput) MetricEventsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetricEvents {
		return vs[0].([]*MetricEvents)[vs[1].(int)]
	}).(MetricEventsOutput)
}

type MetricEventsMapOutput struct{ *pulumi.OutputState }

func (MetricEventsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricEvents)(nil)).Elem()
}

func (o MetricEventsMapOutput) ToMetricEventsMapOutput() MetricEventsMapOutput {
	return o
}

func (o MetricEventsMapOutput) ToMetricEventsMapOutputWithContext(ctx context.Context) MetricEventsMapOutput {
	return o
}

func (o MetricEventsMapOutput) MapIndex(k pulumi.StringInput) MetricEventsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetricEvents {
		return vs[0].(map[string]*MetricEvents)[vs[1].(string)]
	}).(MetricEventsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricEventsInput)(nil)).Elem(), &MetricEvents{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricEventsArrayInput)(nil)).Elem(), MetricEventsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricEventsMapInput)(nil)).Elem(), MetricEventsMap{})
	pulumi.RegisterOutputType(MetricEventsOutput{})
	pulumi.RegisterOutputType(MetricEventsArrayOutput{})
	pulumi.RegisterOutputType(MetricEventsMapOutput{})
}
