// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `Slo` data source allows the SLO ID to be retrieved by its name.
//
// - `name` (String) - The name of the SLO
//
// If multiple services match the given criteria, the first result will be retrieved.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := dynatrace.LookupSlo(ctx, &dynatrace.LookupSloArgs{
//				Name: "Terraform",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupSlo(ctx *pulumi.Context, args *LookupSloArgs, opts ...pulumi.InvokeOption) (*LookupSloResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupSloResult
	err := ctx.Invoke("dynatrace:index/getSlo:getSlo", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSlo.
type LookupSloArgs struct {
	Name string `pulumi:"name"`
}

// A collection of values returned by getSlo.
type LookupSloResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

func LookupSloOutput(ctx *pulumi.Context, args LookupSloOutputArgs, opts ...pulumi.InvokeOption) LookupSloResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSloResult, error) {
			args := v.(LookupSloArgs)
			r, err := LookupSlo(ctx, &args, opts...)
			var s LookupSloResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSloResultOutput)
}

// A collection of arguments for invoking getSlo.
type LookupSloOutputArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupSloOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSloArgs)(nil)).Elem()
}

// A collection of values returned by getSlo.
type LookupSloResultOutput struct{ *pulumi.OutputState }

func (LookupSloResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSloResult)(nil)).Elem()
}

func (o LookupSloResultOutput) ToLookupSloResultOutput() LookupSloResultOutput {
	return o
}

func (o LookupSloResultOutput) ToLookupSloResultOutputWithContext(ctx context.Context) LookupSloResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSloResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSloResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSloResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSloResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSloResultOutput{})
}
