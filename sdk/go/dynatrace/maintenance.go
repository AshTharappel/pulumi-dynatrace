// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Maintenance struct {
	pulumi.CustomResourceState

	// The maintenance window is enabled or disabled
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The filters of the maintenance window
	Filters MaintenanceFilterArrayOutput `pulumi:"filters"`
	// The general properties of the maintenance window
	GeneralProperties MaintenanceGeneralPropertiesOutput `pulumi:"generalProperties"`
	// The schedule of the maintenance window
	Schedule MaintenanceScheduleOutput `pulumi:"schedule"`
}

// NewMaintenance registers a new resource with the given unique name, arguments, and options.
func NewMaintenance(ctx *pulumi.Context,
	name string, args *MaintenanceArgs, opts ...pulumi.ResourceOption) (*Maintenance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GeneralProperties == nil {
		return nil, errors.New("invalid value for required argument 'GeneralProperties'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Maintenance
	err := ctx.RegisterResource("dynatrace:index/maintenance:Maintenance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaintenance gets an existing Maintenance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaintenance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MaintenanceState, opts ...pulumi.ResourceOption) (*Maintenance, error) {
	var resource Maintenance
	err := ctx.ReadResource("dynatrace:index/maintenance:Maintenance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Maintenance resources.
type maintenanceState struct {
	// The maintenance window is enabled or disabled
	Enabled *bool `pulumi:"enabled"`
	// The filters of the maintenance window
	Filters []MaintenanceFilter `pulumi:"filters"`
	// The general properties of the maintenance window
	GeneralProperties *MaintenanceGeneralProperties `pulumi:"generalProperties"`
	// The schedule of the maintenance window
	Schedule *MaintenanceSchedule `pulumi:"schedule"`
}

type MaintenanceState struct {
	// The maintenance window is enabled or disabled
	Enabled pulumi.BoolPtrInput
	// The filters of the maintenance window
	Filters MaintenanceFilterArrayInput
	// The general properties of the maintenance window
	GeneralProperties MaintenanceGeneralPropertiesPtrInput
	// The schedule of the maintenance window
	Schedule MaintenanceSchedulePtrInput
}

func (MaintenanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceState)(nil)).Elem()
}

type maintenanceArgs struct {
	// The maintenance window is enabled or disabled
	Enabled *bool `pulumi:"enabled"`
	// The filters of the maintenance window
	Filters []MaintenanceFilter `pulumi:"filters"`
	// The general properties of the maintenance window
	GeneralProperties MaintenanceGeneralProperties `pulumi:"generalProperties"`
	// The schedule of the maintenance window
	Schedule MaintenanceSchedule `pulumi:"schedule"`
}

// The set of arguments for constructing a Maintenance resource.
type MaintenanceArgs struct {
	// The maintenance window is enabled or disabled
	Enabled pulumi.BoolPtrInput
	// The filters of the maintenance window
	Filters MaintenanceFilterArrayInput
	// The general properties of the maintenance window
	GeneralProperties MaintenanceGeneralPropertiesInput
	// The schedule of the maintenance window
	Schedule MaintenanceScheduleInput
}

func (MaintenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceArgs)(nil)).Elem()
}

type MaintenanceInput interface {
	pulumi.Input

	ToMaintenanceOutput() MaintenanceOutput
	ToMaintenanceOutputWithContext(ctx context.Context) MaintenanceOutput
}

func (*Maintenance) ElementType() reflect.Type {
	return reflect.TypeOf((**Maintenance)(nil)).Elem()
}

func (i *Maintenance) ToMaintenanceOutput() MaintenanceOutput {
	return i.ToMaintenanceOutputWithContext(context.Background())
}

func (i *Maintenance) ToMaintenanceOutputWithContext(ctx context.Context) MaintenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceOutput)
}

// MaintenanceArrayInput is an input type that accepts MaintenanceArray and MaintenanceArrayOutput values.
// You can construct a concrete instance of `MaintenanceArrayInput` via:
//
//	MaintenanceArray{ MaintenanceArgs{...} }
type MaintenanceArrayInput interface {
	pulumi.Input

	ToMaintenanceArrayOutput() MaintenanceArrayOutput
	ToMaintenanceArrayOutputWithContext(context.Context) MaintenanceArrayOutput
}

type MaintenanceArray []MaintenanceInput

func (MaintenanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Maintenance)(nil)).Elem()
}

func (i MaintenanceArray) ToMaintenanceArrayOutput() MaintenanceArrayOutput {
	return i.ToMaintenanceArrayOutputWithContext(context.Background())
}

func (i MaintenanceArray) ToMaintenanceArrayOutputWithContext(ctx context.Context) MaintenanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceArrayOutput)
}

// MaintenanceMapInput is an input type that accepts MaintenanceMap and MaintenanceMapOutput values.
// You can construct a concrete instance of `MaintenanceMapInput` via:
//
//	MaintenanceMap{ "key": MaintenanceArgs{...} }
type MaintenanceMapInput interface {
	pulumi.Input

	ToMaintenanceMapOutput() MaintenanceMapOutput
	ToMaintenanceMapOutputWithContext(context.Context) MaintenanceMapOutput
}

type MaintenanceMap map[string]MaintenanceInput

func (MaintenanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Maintenance)(nil)).Elem()
}

func (i MaintenanceMap) ToMaintenanceMapOutput() MaintenanceMapOutput {
	return i.ToMaintenanceMapOutputWithContext(context.Background())
}

func (i MaintenanceMap) ToMaintenanceMapOutputWithContext(ctx context.Context) MaintenanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceMapOutput)
}

type MaintenanceOutput struct{ *pulumi.OutputState }

func (MaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Maintenance)(nil)).Elem()
}

func (o MaintenanceOutput) ToMaintenanceOutput() MaintenanceOutput {
	return o
}

func (o MaintenanceOutput) ToMaintenanceOutputWithContext(ctx context.Context) MaintenanceOutput {
	return o
}

// The maintenance window is enabled or disabled
func (o MaintenanceOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Maintenance) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The filters of the maintenance window
func (o MaintenanceOutput) Filters() MaintenanceFilterArrayOutput {
	return o.ApplyT(func(v *Maintenance) MaintenanceFilterArrayOutput { return v.Filters }).(MaintenanceFilterArrayOutput)
}

// The general properties of the maintenance window
func (o MaintenanceOutput) GeneralProperties() MaintenanceGeneralPropertiesOutput {
	return o.ApplyT(func(v *Maintenance) MaintenanceGeneralPropertiesOutput { return v.GeneralProperties }).(MaintenanceGeneralPropertiesOutput)
}

// The schedule of the maintenance window
func (o MaintenanceOutput) Schedule() MaintenanceScheduleOutput {
	return o.ApplyT(func(v *Maintenance) MaintenanceScheduleOutput { return v.Schedule }).(MaintenanceScheduleOutput)
}

type MaintenanceArrayOutput struct{ *pulumi.OutputState }

func (MaintenanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Maintenance)(nil)).Elem()
}

func (o MaintenanceArrayOutput) ToMaintenanceArrayOutput() MaintenanceArrayOutput {
	return o
}

func (o MaintenanceArrayOutput) ToMaintenanceArrayOutputWithContext(ctx context.Context) MaintenanceArrayOutput {
	return o
}

func (o MaintenanceArrayOutput) Index(i pulumi.IntInput) MaintenanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Maintenance {
		return vs[0].([]*Maintenance)[vs[1].(int)]
	}).(MaintenanceOutput)
}

type MaintenanceMapOutput struct{ *pulumi.OutputState }

func (MaintenanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Maintenance)(nil)).Elem()
}

func (o MaintenanceMapOutput) ToMaintenanceMapOutput() MaintenanceMapOutput {
	return o
}

func (o MaintenanceMapOutput) ToMaintenanceMapOutputWithContext(ctx context.Context) MaintenanceMapOutput {
	return o
}

func (o MaintenanceMapOutput) MapIndex(k pulumi.StringInput) MaintenanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Maintenance {
		return vs[0].(map[string]*Maintenance)[vs[1].(string)]
	}).(MaintenanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceInput)(nil)).Elem(), &Maintenance{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceArrayInput)(nil)).Elem(), MaintenanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceMapInput)(nil)).Elem(), MaintenanceMap{})
	pulumi.RegisterOutputType(MaintenanceOutput{})
	pulumi.RegisterOutputType(MaintenanceArrayOutput{})
	pulumi.RegisterOutputType(MaintenanceMapOutput{})
}
