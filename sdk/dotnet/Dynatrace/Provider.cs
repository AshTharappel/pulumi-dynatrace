// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Dynatrace
{
    /// <summary>
    /// The provider type for the dynatrace package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [DynatraceResourceType("pulumi:providers:dynatrace")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        [Output("dtApiToken")]
        public Output<string?> DtApiToken { get; private set; } = null!;

        [Output("dtClusterApiToken")]
        public Output<string?> DtClusterApiToken { get; private set; } = null!;

        [Output("dtClusterUrl")]
        public Output<string?> DtClusterUrl { get; private set; } = null!;

        [Output("dtEnvUrl")]
        public Output<string?> DtEnvUrl { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("dynatrace", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
                AdditionalSecretOutputs =
                {
                    "dtApiToken",
                    "dtClusterApiToken",
                    "dtClusterUrl",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        [Input("dtApiToken")]
        private Input<string>? _dtApiToken;
        public Input<string>? DtApiToken
        {
            get => _dtApiToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _dtApiToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("dtClusterApiToken")]
        private Input<string>? _dtClusterApiToken;
        public Input<string>? DtClusterApiToken
        {
            get => _dtClusterApiToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _dtClusterApiToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("dtClusterUrl")]
        private Input<string>? _dtClusterUrl;
        public Input<string>? DtClusterUrl
        {
            get => _dtClusterUrl;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _dtClusterUrl = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("dtEnvUrl")]
        public Input<string>? DtEnvUrl { get; set; }

        public ProviderArgs()
        {
            DtApiToken = Utilities.GetEnv("DYNATRACE_API_TOKEN", "DT_API_TOKEN");
            DtClusterApiToken = Utilities.GetEnv("DYNATRACE_CLUSTER_API_TOKEN", "DT_CLUSTER_API_TOKEN");
            DtClusterUrl = Utilities.GetEnv("DYNATRACE_CLUSTER_URL", "DT_CLUSTER_URL");
            DtEnvUrl = Utilities.GetEnv("DYNATRACE_ENV_URL", "DT_ENV_URL");
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }
}
