// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Dynatrace
{
    public static class GetEntities
    {
        /// <summary>
        /// The entities data source allows all entities to be retrieved by its type.
        /// 
        /// - `type` (String) Type of the entity, e.g. SERVICE. All available entity types can be retrieved with [/api/v2/entityTypes](https://www.dynatrace.com/support/help/dynatrace-api/environment-api/entity-v2/get-all-entity-types).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Dynatrace.GetEntities.Invoke(new()
        ///     {
        ///         Type = "SERVICE",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["serviceList"] = test.Apply(getEntitiesResult =&gt; getEntitiesResult.Entities),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetEntitiesResult> InvokeAsync(GetEntitiesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEntitiesResult>("dynatrace:index/getEntities:getEntities", args ?? new GetEntitiesArgs(), options.WithDefaults());

        /// <summary>
        /// The entities data source allows all entities to be retrieved by its type.
        /// 
        /// - `type` (String) Type of the entity, e.g. SERVICE. All available entity types can be retrieved with [/api/v2/entityTypes](https://www.dynatrace.com/support/help/dynatrace-api/environment-api/entity-v2/get-all-entity-types).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Dynatrace.GetEntities.Invoke(new()
        ///     {
        ///         Type = "SERVICE",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["serviceList"] = test.Apply(getEntitiesResult =&gt; getEntitiesResult.Entities),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetEntitiesResult> Invoke(GetEntitiesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEntitiesResult>("dynatrace:index/getEntities:getEntities", args ?? new GetEntitiesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEntitiesArgs : global::Pulumi.InvokeArgs
    {
        [Input("entities")]
        public Inputs.GetEntitiesEntitiesArgs? Entities { get; set; }

        [Input("type", required: true)]
        public string Type { get; set; } = null!;

        public GetEntitiesArgs()
        {
        }
        public static new GetEntitiesArgs Empty => new GetEntitiesArgs();
    }

    public sealed class GetEntitiesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("entities")]
        public Input<Inputs.GetEntitiesEntitiesInputArgs>? Entities { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public GetEntitiesInvokeArgs()
        {
        }
        public static new GetEntitiesInvokeArgs Empty => new GetEntitiesInvokeArgs();
    }


    [OutputType]
    public sealed class GetEntitiesResult
    {
        public readonly Outputs.GetEntitiesEntitiesResult Entities;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Type;

        [OutputConstructor]
        private GetEntitiesResult(
            Outputs.GetEntitiesEntitiesResult entities,

            string id,

            string type)
        {
            Entities = entities;
            Id = id;
            Type = type;
        }
    }
}
