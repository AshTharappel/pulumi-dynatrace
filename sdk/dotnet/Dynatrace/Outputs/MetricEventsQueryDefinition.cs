// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.PulumiPackage.Dynatrace.Outputs
{

    [OutputType]
    public sealed class MetricEventsQueryDefinition
    {
        /// <summary>
        /// The aggregation of the query definition
        /// </summary>
        public readonly string? Aggregation;
        /// <summary>
        /// The dimension filters of the query definition
        /// </summary>
        public readonly Outputs.MetricEventsQueryDefinitionDimensionFilter? DimensionFilter;
        /// <summary>
        /// Use rule-based filters to define the scope this event monitors.
        /// </summary>
        public readonly Outputs.MetricEventsQueryDefinitionEntityFilter? EntityFilter;
        /// <summary>
        /// The metric key of the query definition
        /// </summary>
        public readonly string MetricKey;
        /// <summary>
        /// To learn more, visit [Metric Selector](https://dt-url.net/metselad)
        /// </summary>
        public readonly string? MetricSelector;
        /// <summary>
        /// Minute offset of sliding evaluation window for metrics with latency
        /// </summary>
        public readonly int? QueryOffset;
        /// <summary>
        /// The type of query definition
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private MetricEventsQueryDefinition(
            string? aggregation,

            Outputs.MetricEventsQueryDefinitionDimensionFilter? dimensionFilter,

            Outputs.MetricEventsQueryDefinitionEntityFilter? entityFilter,

            string metricKey,

            string? metricSelector,

            int? queryOffset,

            string type)
        {
            Aggregation = aggregation;
            DimensionFilter = dimensionFilter;
            EntityFilter = entityFilter;
            MetricKey = metricKey;
            MetricSelector = metricSelector;
            QueryOffset = queryOffset;
            Type = type;
        }
    }
}
