// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.PulumiPackage.Dynatrace
{
    public static class GetDocuments
    {
        /// <summary>
        /// - `type` (String) The type of documents to query for. Leave empty if you want to query for all kinds of documents.
        /// 
        /// ## Prerequisites
        /// 
        /// Using this resource requires an OAuth client to be configured within your account settings.
        /// The scopes of the OAuth Client need to contain the permission to read documents (`document:documents:read`).
        /// 
        /// Finally the provider configuration requires the credentials for that OAuth Client.
        /// The configuration section of your provider needs to look like this.
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// &gt; In order to handle credentials in a secure manner we recommend to use the environment variables `DYNATRACE_AUTOMATION_CLIENT_ID` and `DYNATRACE_AUTOMATION_CLIENT_SECRET` as an alternative.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all_dashboard_and_notebooks = Dynatrace.GetDocuments.Invoke();
        /// 
        ///     var all_dashboards = Dynatrace.GetDocuments.Invoke(new()
        ///     {
        ///         Type = "dashboard",
        ///     });
        /// 
        ///     var all_notebooks = Dynatrace.GetDocuments.Invoke(new()
        ///     {
        ///         Type = "notebook",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDocumentsResult> InvokeAsync(GetDocumentsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDocumentsResult>("dynatrace:index/getDocuments:getDocuments", args ?? new GetDocumentsArgs(), options.WithDefaults());

        /// <summary>
        /// - `type` (String) The type of documents to query for. Leave empty if you want to query for all kinds of documents.
        /// 
        /// ## Prerequisites
        /// 
        /// Using this resource requires an OAuth client to be configured within your account settings.
        /// The scopes of the OAuth Client need to contain the permission to read documents (`document:documents:read`).
        /// 
        /// Finally the provider configuration requires the credentials for that OAuth Client.
        /// The configuration section of your provider needs to look like this.
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// &gt; In order to handle credentials in a secure manner we recommend to use the environment variables `DYNATRACE_AUTOMATION_CLIENT_ID` and `DYNATRACE_AUTOMATION_CLIENT_SECRET` as an alternative.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all_dashboard_and_notebooks = Dynatrace.GetDocuments.Invoke();
        /// 
        ///     var all_dashboards = Dynatrace.GetDocuments.Invoke(new()
        ///     {
        ///         Type = "dashboard",
        ///     });
        /// 
        ///     var all_notebooks = Dynatrace.GetDocuments.Invoke(new()
        ///     {
        ///         Type = "notebook",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDocumentsResult> Invoke(GetDocumentsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDocumentsResult>("dynatrace:index/getDocuments:getDocuments", args ?? new GetDocumentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDocumentsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of documents to query for. Leave empty if you want to query for all kinds of documents. Possible values are `dashboard` or `notebook`
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetDocumentsArgs()
        {
        }
        public static new GetDocumentsArgs Empty => new GetDocumentsArgs();
    }

    public sealed class GetDocumentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of documents to query for. Leave empty if you want to query for all kinds of documents. Possible values are `dashboard` or `notebook`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetDocumentsInvokeArgs()
        {
        }
        public static new GetDocumentsInvokeArgs Empty => new GetDocumentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDocumentsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The type of documents to query for. Leave empty if you want to query for all kinds of documents. Possible values are `dashboard` or `notebook`
        /// </summary>
        public readonly string? Type;
        public readonly ImmutableArray<Outputs.GetDocumentsValueResult> Values;

        [OutputConstructor]
        private GetDocumentsResult(
            string id,

            string? type,

            ImmutableArray<Outputs.GetDocumentsValueResult> values)
        {
            Id = id;
            Type = type;
            Values = values;
        }
    }
}
